
/Users/erik/Documents/GitHub/ledger_white-paper/ledger_example/target/6.2.1/boron/ledger_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a97c  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000be99c  000be99c  0000e99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .note.gnu.build-id 00000024  000be9a4  000be9a4  0000e9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000001e4  2003e450  000be9c8  0001e450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001c8  2003e634  2003e634  0003e634  2**2
                  ALLOC
  7 .backup       00000804  2003f400  000bebac  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_product 00000006  000bf3b0  000bf3b0  0002f3b0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .module_info_suffix 00000024  000bf3b6  000bf3b6  0002f3b6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .module_info_crc 00000004  000bf3da  000bf3da  0002f3da  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_info   0026f06b  00000000  00000000  0002f3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00018554  00000000  00000000  0029e449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000a7bbd  00000000  00000000  002b699d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004290  00000000  00000000  0035e55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00019b98  00000000  00000000  003627ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d5ba  00000000  00000000  0037c382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00060807  00000000  00000000  003b993c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00215ea6  00000000  00000000  0041a143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000ce5c  00000000  00000000  0062ffec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2iz>:
   b48cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d215      	bcs.n	b4902 <__aeabi_d2iz+0x36>
   b48d6:	d511      	bpl.n	b48fc <__aeabi_d2iz+0x30>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d912      	bls.n	b4908 <__aeabi_d2iz+0x3c>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b48f2:	fa23 f002 	lsr.w	r0, r3, r2
   b48f6:	bf18      	it	ne
   b48f8:	4240      	negne	r0, r0
   b48fa:	4770      	bx	lr
   b48fc:	f04f 0000 	mov.w	r0, #0
   b4900:	4770      	bx	lr
   b4902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4906:	d105      	bne.n	b4914 <__aeabi_d2iz+0x48>
   b4908:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b490c:	bf08      	it	eq
   b490e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b4912:	4770      	bx	lr
   b4914:	f04f 0000 	mov.w	r0, #0
   b4918:	4770      	bx	lr
   b491a:	bf00      	nop

000b491c <__aeabi_d2uiz>:
   b491c:	004a      	lsls	r2, r1, #1
   b491e:	d211      	bcs.n	b4944 <__aeabi_d2uiz+0x28>
   b4920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4924:	d211      	bcs.n	b494a <__aeabi_d2uiz+0x2e>
   b4926:	d50d      	bpl.n	b4944 <__aeabi_d2uiz+0x28>
   b4928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b492c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b4930:	d40e      	bmi.n	b4950 <__aeabi_d2uiz+0x34>
   b4932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b493a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b493e:	fa23 f002 	lsr.w	r0, r3, r2
   b4942:	4770      	bx	lr
   b4944:	f04f 0000 	mov.w	r0, #0
   b4948:	4770      	bx	lr
   b494a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b494e:	d102      	bne.n	b4956 <__aeabi_d2uiz+0x3a>
   b4950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4954:	4770      	bx	lr
   b4956:	f04f 0000 	mov.w	r0, #0
   b495a:	4770      	bx	lr

000b495c <__aeabi_d2f>:
   b495c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4964:	bf24      	itt	cs
   b4966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b496a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b496e:	d90d      	bls.n	b498c <__aeabi_d2f+0x30>
   b4970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b497c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4984:	bf08      	it	eq
   b4986:	f020 0001 	biceq.w	r0, r0, #1
   b498a:	4770      	bx	lr
   b498c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4990:	d121      	bne.n	b49d6 <__aeabi_d2f+0x7a>
   b4992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4996:	bfbc      	itt	lt
   b4998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b499c:	4770      	bxlt	lr
   b499e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49a6:	f1c2 0218 	rsb	r2, r2, #24
   b49aa:	f1c2 0c20 	rsb	ip, r2, #32
   b49ae:	fa10 f30c 	lsls.w	r3, r0, ip
   b49b2:	fa20 f002 	lsr.w	r0, r0, r2
   b49b6:	bf18      	it	ne
   b49b8:	f040 0001 	orrne.w	r0, r0, #1
   b49bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49c4:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49c8:	ea40 000c 	orr.w	r0, r0, ip
   b49cc:	fa23 f302 	lsr.w	r3, r3, r2
   b49d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b49d4:	e7cc      	b.n	b4970 <__aeabi_d2f+0x14>
   b49d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b49da:	d107      	bne.n	b49ec <__aeabi_d2f+0x90>
   b49dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49e0:	bf1e      	ittt	ne
   b49e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49ea:	4770      	bxne	lr
   b49ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49f8:	4770      	bx	lr
   b49fa:	bf00      	nop

000b49fc <__aeabi_uldivmod>:
   b49fc:	b953      	cbnz	r3, b4a14 <__aeabi_uldivmod+0x18>
   b49fe:	b94a      	cbnz	r2, b4a14 <__aeabi_uldivmod+0x18>
   b4a00:	2900      	cmp	r1, #0
   b4a02:	bf08      	it	eq
   b4a04:	2800      	cmpeq	r0, #0
   b4a06:	bf1c      	itt	ne
   b4a08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b4a0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4a10:	f000 b992 	b.w	b4d38 <__aeabi_idiv0>
   b4a14:	f1ad 0c08 	sub.w	ip, sp, #8
   b4a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b4a1c:	f000 f824 	bl	b4a68 <__udivmoddi4>
   b4a20:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4a28:	b004      	add	sp, #16
   b4a2a:	4770      	bx	lr

000b4a2c <__aeabi_d2ulz>:
   b4a2c:	b5d0      	push	{r4, r6, r7, lr}
   b4a2e:	4b0c      	ldr	r3, [pc, #48]	; (b4a60 <__aeabi_d2ulz+0x34>)
   b4a30:	2200      	movs	r2, #0
   b4a32:	4606      	mov	r6, r0
   b4a34:	460f      	mov	r7, r1
   b4a36:	f7ff fcaf 	bl	b4398 <__aeabi_dmul>
   b4a3a:	f7ff ff6f 	bl	b491c <__aeabi_d2uiz>
   b4a3e:	4604      	mov	r4, r0
   b4a40:	f7ff fc30 	bl	b42a4 <__aeabi_ui2d>
   b4a44:	4b07      	ldr	r3, [pc, #28]	; (b4a64 <__aeabi_d2ulz+0x38>)
   b4a46:	2200      	movs	r2, #0
   b4a48:	f7ff fca6 	bl	b4398 <__aeabi_dmul>
   b4a4c:	4602      	mov	r2, r0
   b4a4e:	460b      	mov	r3, r1
   b4a50:	4630      	mov	r0, r6
   b4a52:	4639      	mov	r1, r7
   b4a54:	f7ff fae8 	bl	b4028 <__aeabi_dsub>
   b4a58:	f7ff ff60 	bl	b491c <__aeabi_d2uiz>
   b4a5c:	4621      	mov	r1, r4
   b4a5e:	bdd0      	pop	{r4, r6, r7, pc}
   b4a60:	3df00000 	.word	0x3df00000
   b4a64:	41f00000 	.word	0x41f00000

000b4a68 <__udivmoddi4>:
   b4a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4a6c:	9d08      	ldr	r5, [sp, #32]
   b4a6e:	4604      	mov	r4, r0
   b4a70:	468e      	mov	lr, r1
   b4a72:	2b00      	cmp	r3, #0
   b4a74:	d14d      	bne.n	b4b12 <__udivmoddi4+0xaa>
   b4a76:	428a      	cmp	r2, r1
   b4a78:	4694      	mov	ip, r2
   b4a7a:	d969      	bls.n	b4b50 <__udivmoddi4+0xe8>
   b4a7c:	fab2 f282 	clz	r2, r2
   b4a80:	b152      	cbz	r2, b4a98 <__udivmoddi4+0x30>
   b4a82:	fa01 f302 	lsl.w	r3, r1, r2
   b4a86:	f1c2 0120 	rsb	r1, r2, #32
   b4a8a:	fa20 f101 	lsr.w	r1, r0, r1
   b4a8e:	fa0c fc02 	lsl.w	ip, ip, r2
   b4a92:	ea41 0e03 	orr.w	lr, r1, r3
   b4a96:	4094      	lsls	r4, r2
   b4a98:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b4a9c:	0c21      	lsrs	r1, r4, #16
   b4a9e:	fbbe f6f8 	udiv	r6, lr, r8
   b4aa2:	fa1f f78c 	uxth.w	r7, ip
   b4aa6:	fb08 e316 	mls	r3, r8, r6, lr
   b4aaa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b4aae:	fb06 f107 	mul.w	r1, r6, r7
   b4ab2:	4299      	cmp	r1, r3
   b4ab4:	d90a      	bls.n	b4acc <__udivmoddi4+0x64>
   b4ab6:	eb1c 0303 	adds.w	r3, ip, r3
   b4aba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b4abe:	f080 811f 	bcs.w	b4d00 <__udivmoddi4+0x298>
   b4ac2:	4299      	cmp	r1, r3
   b4ac4:	f240 811c 	bls.w	b4d00 <__udivmoddi4+0x298>
   b4ac8:	3e02      	subs	r6, #2
   b4aca:	4463      	add	r3, ip
   b4acc:	1a5b      	subs	r3, r3, r1
   b4ace:	b2a4      	uxth	r4, r4
   b4ad0:	fbb3 f0f8 	udiv	r0, r3, r8
   b4ad4:	fb08 3310 	mls	r3, r8, r0, r3
   b4ad8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b4adc:	fb00 f707 	mul.w	r7, r0, r7
   b4ae0:	42a7      	cmp	r7, r4
   b4ae2:	d90a      	bls.n	b4afa <__udivmoddi4+0x92>
   b4ae4:	eb1c 0404 	adds.w	r4, ip, r4
   b4ae8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b4aec:	f080 810a 	bcs.w	b4d04 <__udivmoddi4+0x29c>
   b4af0:	42a7      	cmp	r7, r4
   b4af2:	f240 8107 	bls.w	b4d04 <__udivmoddi4+0x29c>
   b4af6:	4464      	add	r4, ip
   b4af8:	3802      	subs	r0, #2
   b4afa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b4afe:	1be4      	subs	r4, r4, r7
   b4b00:	2600      	movs	r6, #0
   b4b02:	b11d      	cbz	r5, b4b0c <__udivmoddi4+0xa4>
   b4b04:	40d4      	lsrs	r4, r2
   b4b06:	2300      	movs	r3, #0
   b4b08:	e9c5 4300 	strd	r4, r3, [r5]
   b4b0c:	4631      	mov	r1, r6
   b4b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4b12:	428b      	cmp	r3, r1
   b4b14:	d909      	bls.n	b4b2a <__udivmoddi4+0xc2>
   b4b16:	2d00      	cmp	r5, #0
   b4b18:	f000 80ef 	beq.w	b4cfa <__udivmoddi4+0x292>
   b4b1c:	2600      	movs	r6, #0
   b4b1e:	e9c5 0100 	strd	r0, r1, [r5]
   b4b22:	4630      	mov	r0, r6
   b4b24:	4631      	mov	r1, r6
   b4b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4b2a:	fab3 f683 	clz	r6, r3
   b4b2e:	2e00      	cmp	r6, #0
   b4b30:	d14a      	bne.n	b4bc8 <__udivmoddi4+0x160>
   b4b32:	428b      	cmp	r3, r1
   b4b34:	d302      	bcc.n	b4b3c <__udivmoddi4+0xd4>
   b4b36:	4282      	cmp	r2, r0
   b4b38:	f200 80f9 	bhi.w	b4d2e <__udivmoddi4+0x2c6>
   b4b3c:	1a84      	subs	r4, r0, r2
   b4b3e:	eb61 0303 	sbc.w	r3, r1, r3
   b4b42:	2001      	movs	r0, #1
   b4b44:	469e      	mov	lr, r3
   b4b46:	2d00      	cmp	r5, #0
   b4b48:	d0e0      	beq.n	b4b0c <__udivmoddi4+0xa4>
   b4b4a:	e9c5 4e00 	strd	r4, lr, [r5]
   b4b4e:	e7dd      	b.n	b4b0c <__udivmoddi4+0xa4>
   b4b50:	b902      	cbnz	r2, b4b54 <__udivmoddi4+0xec>
   b4b52:	deff      	udf	#255	; 0xff
   b4b54:	fab2 f282 	clz	r2, r2
   b4b58:	2a00      	cmp	r2, #0
   b4b5a:	f040 8092 	bne.w	b4c82 <__udivmoddi4+0x21a>
   b4b5e:	eba1 010c 	sub.w	r1, r1, ip
   b4b62:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4b66:	fa1f fe8c 	uxth.w	lr, ip
   b4b6a:	2601      	movs	r6, #1
   b4b6c:	0c20      	lsrs	r0, r4, #16
   b4b6e:	fbb1 f3f7 	udiv	r3, r1, r7
   b4b72:	fb07 1113 	mls	r1, r7, r3, r1
   b4b76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4b7a:	fb0e f003 	mul.w	r0, lr, r3
   b4b7e:	4288      	cmp	r0, r1
   b4b80:	d908      	bls.n	b4b94 <__udivmoddi4+0x12c>
   b4b82:	eb1c 0101 	adds.w	r1, ip, r1
   b4b86:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b4b8a:	d202      	bcs.n	b4b92 <__udivmoddi4+0x12a>
   b4b8c:	4288      	cmp	r0, r1
   b4b8e:	f200 80cb 	bhi.w	b4d28 <__udivmoddi4+0x2c0>
   b4b92:	4643      	mov	r3, r8
   b4b94:	1a09      	subs	r1, r1, r0
   b4b96:	b2a4      	uxth	r4, r4
   b4b98:	fbb1 f0f7 	udiv	r0, r1, r7
   b4b9c:	fb07 1110 	mls	r1, r7, r0, r1
   b4ba0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b4ba4:	fb0e fe00 	mul.w	lr, lr, r0
   b4ba8:	45a6      	cmp	lr, r4
   b4baa:	d908      	bls.n	b4bbe <__udivmoddi4+0x156>
   b4bac:	eb1c 0404 	adds.w	r4, ip, r4
   b4bb0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b4bb4:	d202      	bcs.n	b4bbc <__udivmoddi4+0x154>
   b4bb6:	45a6      	cmp	lr, r4
   b4bb8:	f200 80bb 	bhi.w	b4d32 <__udivmoddi4+0x2ca>
   b4bbc:	4608      	mov	r0, r1
   b4bbe:	eba4 040e 	sub.w	r4, r4, lr
   b4bc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b4bc6:	e79c      	b.n	b4b02 <__udivmoddi4+0x9a>
   b4bc8:	f1c6 0720 	rsb	r7, r6, #32
   b4bcc:	40b3      	lsls	r3, r6
   b4bce:	fa22 fc07 	lsr.w	ip, r2, r7
   b4bd2:	ea4c 0c03 	orr.w	ip, ip, r3
   b4bd6:	fa20 f407 	lsr.w	r4, r0, r7
   b4bda:	fa01 f306 	lsl.w	r3, r1, r6
   b4bde:	431c      	orrs	r4, r3
   b4be0:	40f9      	lsrs	r1, r7
   b4be2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b4be6:	fa00 f306 	lsl.w	r3, r0, r6
   b4bea:	fbb1 f8f9 	udiv	r8, r1, r9
   b4bee:	0c20      	lsrs	r0, r4, #16
   b4bf0:	fa1f fe8c 	uxth.w	lr, ip
   b4bf4:	fb09 1118 	mls	r1, r9, r8, r1
   b4bf8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4bfc:	fb08 f00e 	mul.w	r0, r8, lr
   b4c00:	4288      	cmp	r0, r1
   b4c02:	fa02 f206 	lsl.w	r2, r2, r6
   b4c06:	d90b      	bls.n	b4c20 <__udivmoddi4+0x1b8>
   b4c08:	eb1c 0101 	adds.w	r1, ip, r1
   b4c0c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b4c10:	f080 8088 	bcs.w	b4d24 <__udivmoddi4+0x2bc>
   b4c14:	4288      	cmp	r0, r1
   b4c16:	f240 8085 	bls.w	b4d24 <__udivmoddi4+0x2bc>
   b4c1a:	f1a8 0802 	sub.w	r8, r8, #2
   b4c1e:	4461      	add	r1, ip
   b4c20:	1a09      	subs	r1, r1, r0
   b4c22:	b2a4      	uxth	r4, r4
   b4c24:	fbb1 f0f9 	udiv	r0, r1, r9
   b4c28:	fb09 1110 	mls	r1, r9, r0, r1
   b4c2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b4c30:	fb00 fe0e 	mul.w	lr, r0, lr
   b4c34:	458e      	cmp	lr, r1
   b4c36:	d908      	bls.n	b4c4a <__udivmoddi4+0x1e2>
   b4c38:	eb1c 0101 	adds.w	r1, ip, r1
   b4c3c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b4c40:	d26c      	bcs.n	b4d1c <__udivmoddi4+0x2b4>
   b4c42:	458e      	cmp	lr, r1
   b4c44:	d96a      	bls.n	b4d1c <__udivmoddi4+0x2b4>
   b4c46:	3802      	subs	r0, #2
   b4c48:	4461      	add	r1, ip
   b4c4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b4c4e:	fba0 9402 	umull	r9, r4, r0, r2
   b4c52:	eba1 010e 	sub.w	r1, r1, lr
   b4c56:	42a1      	cmp	r1, r4
   b4c58:	46c8      	mov	r8, r9
   b4c5a:	46a6      	mov	lr, r4
   b4c5c:	d356      	bcc.n	b4d0c <__udivmoddi4+0x2a4>
   b4c5e:	d053      	beq.n	b4d08 <__udivmoddi4+0x2a0>
   b4c60:	b15d      	cbz	r5, b4c7a <__udivmoddi4+0x212>
   b4c62:	ebb3 0208 	subs.w	r2, r3, r8
   b4c66:	eb61 010e 	sbc.w	r1, r1, lr
   b4c6a:	fa01 f707 	lsl.w	r7, r1, r7
   b4c6e:	fa22 f306 	lsr.w	r3, r2, r6
   b4c72:	40f1      	lsrs	r1, r6
   b4c74:	431f      	orrs	r7, r3
   b4c76:	e9c5 7100 	strd	r7, r1, [r5]
   b4c7a:	2600      	movs	r6, #0
   b4c7c:	4631      	mov	r1, r6
   b4c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4c82:	f1c2 0320 	rsb	r3, r2, #32
   b4c86:	40d8      	lsrs	r0, r3
   b4c88:	fa0c fc02 	lsl.w	ip, ip, r2
   b4c8c:	fa21 f303 	lsr.w	r3, r1, r3
   b4c90:	4091      	lsls	r1, r2
   b4c92:	4301      	orrs	r1, r0
   b4c94:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4c98:	fa1f fe8c 	uxth.w	lr, ip
   b4c9c:	fbb3 f0f7 	udiv	r0, r3, r7
   b4ca0:	fb07 3610 	mls	r6, r7, r0, r3
   b4ca4:	0c0b      	lsrs	r3, r1, #16
   b4ca6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4caa:	fb00 f60e 	mul.w	r6, r0, lr
   b4cae:	429e      	cmp	r6, r3
   b4cb0:	fa04 f402 	lsl.w	r4, r4, r2
   b4cb4:	d908      	bls.n	b4cc8 <__udivmoddi4+0x260>
   b4cb6:	eb1c 0303 	adds.w	r3, ip, r3
   b4cba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b4cbe:	d22f      	bcs.n	b4d20 <__udivmoddi4+0x2b8>
   b4cc0:	429e      	cmp	r6, r3
   b4cc2:	d92d      	bls.n	b4d20 <__udivmoddi4+0x2b8>
   b4cc4:	3802      	subs	r0, #2
   b4cc6:	4463      	add	r3, ip
   b4cc8:	1b9b      	subs	r3, r3, r6
   b4cca:	b289      	uxth	r1, r1
   b4ccc:	fbb3 f6f7 	udiv	r6, r3, r7
   b4cd0:	fb07 3316 	mls	r3, r7, r6, r3
   b4cd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b4cd8:	fb06 f30e 	mul.w	r3, r6, lr
   b4cdc:	428b      	cmp	r3, r1
   b4cde:	d908      	bls.n	b4cf2 <__udivmoddi4+0x28a>
   b4ce0:	eb1c 0101 	adds.w	r1, ip, r1
   b4ce4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b4ce8:	d216      	bcs.n	b4d18 <__udivmoddi4+0x2b0>
   b4cea:	428b      	cmp	r3, r1
   b4cec:	d914      	bls.n	b4d18 <__udivmoddi4+0x2b0>
   b4cee:	3e02      	subs	r6, #2
   b4cf0:	4461      	add	r1, ip
   b4cf2:	1ac9      	subs	r1, r1, r3
   b4cf4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b4cf8:	e738      	b.n	b4b6c <__udivmoddi4+0x104>
   b4cfa:	462e      	mov	r6, r5
   b4cfc:	4628      	mov	r0, r5
   b4cfe:	e705      	b.n	b4b0c <__udivmoddi4+0xa4>
   b4d00:	4606      	mov	r6, r0
   b4d02:	e6e3      	b.n	b4acc <__udivmoddi4+0x64>
   b4d04:	4618      	mov	r0, r3
   b4d06:	e6f8      	b.n	b4afa <__udivmoddi4+0x92>
   b4d08:	454b      	cmp	r3, r9
   b4d0a:	d2a9      	bcs.n	b4c60 <__udivmoddi4+0x1f8>
   b4d0c:	ebb9 0802 	subs.w	r8, r9, r2
   b4d10:	eb64 0e0c 	sbc.w	lr, r4, ip
   b4d14:	3801      	subs	r0, #1
   b4d16:	e7a3      	b.n	b4c60 <__udivmoddi4+0x1f8>
   b4d18:	4646      	mov	r6, r8
   b4d1a:	e7ea      	b.n	b4cf2 <__udivmoddi4+0x28a>
   b4d1c:	4620      	mov	r0, r4
   b4d1e:	e794      	b.n	b4c4a <__udivmoddi4+0x1e2>
   b4d20:	4640      	mov	r0, r8
   b4d22:	e7d1      	b.n	b4cc8 <__udivmoddi4+0x260>
   b4d24:	46d0      	mov	r8, sl
   b4d26:	e77b      	b.n	b4c20 <__udivmoddi4+0x1b8>
   b4d28:	3b02      	subs	r3, #2
   b4d2a:	4461      	add	r1, ip
   b4d2c:	e732      	b.n	b4b94 <__udivmoddi4+0x12c>
   b4d2e:	4630      	mov	r0, r6
   b4d30:	e709      	b.n	b4b46 <__udivmoddi4+0xde>
   b4d32:	4464      	add	r4, ip
   b4d34:	3802      	subs	r0, #2
   b4d36:	e742      	b.n	b4bbe <__udivmoddi4+0x156>

000b4d38 <__aeabi_idiv0>:
   b4d38:	4770      	bx	lr
   b4d3a:	bf00      	nop

000b4d3c <strcmp>:
   b4d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4d40:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4d44:	2a01      	cmp	r2, #1
   b4d46:	bf28      	it	cs
   b4d48:	429a      	cmpcs	r2, r3
   b4d4a:	d0f7      	beq.n	b4d3c <strcmp>
   b4d4c:	1ad0      	subs	r0, r2, r3
   b4d4e:	4770      	bx	lr

000b4d50 <strlen>:
   b4d50:	4603      	mov	r3, r0
   b4d52:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4d56:	2a00      	cmp	r2, #0
   b4d58:	d1fb      	bne.n	b4d52 <strlen+0x2>
   b4d5a:	1a18      	subs	r0, r3, r0
   b4d5c:	3801      	subs	r0, #1
   b4d5e:	4770      	bx	lr

000b4d60 <__aeabi_d2lz>:
   b4d60:	b538      	push	{r3, r4, r5, lr}
   b4d62:	2200      	movs	r2, #0
   b4d64:	2300      	movs	r3, #0
   b4d66:	4604      	mov	r4, r0
   b4d68:	460d      	mov	r5, r1
   b4d6a:	f7ff fd87 	bl	b487c <__aeabi_dcmplt>
   b4d6e:	b928      	cbnz	r0, b4d7c <__aeabi_d2lz+0x1c>
   b4d70:	4620      	mov	r0, r4
   b4d72:	4629      	mov	r1, r5
   b4d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4d78:	f7ff be58 	b.w	b4a2c <__aeabi_d2ulz>
   b4d7c:	4620      	mov	r0, r4
   b4d7e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4d82:	f7ff fe53 	bl	b4a2c <__aeabi_d2ulz>
   b4d86:	4240      	negs	r0, r0
   b4d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4d8c:	bd38      	pop	{r3, r4, r5, pc}
   b4d8e:	bf00      	nop

000b4d90 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4d90:	4809      	ldr	r0, [pc, #36]	; (b4db8 <module_user_pre_init+0x28>)
   b4d92:	490a      	ldr	r1, [pc, #40]	; (b4dbc <module_user_pre_init+0x2c>)
   b4d94:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4d96:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4d98:	d005      	beq.n	b4da6 <module_user_pre_init+0x16>
   b4d9a:	4a09      	ldr	r2, [pc, #36]	; (b4dc0 <module_user_pre_init+0x30>)
   b4d9c:	4282      	cmp	r2, r0
   b4d9e:	d002      	beq.n	b4da6 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4da0:	1a12      	subs	r2, r2, r0
   b4da2:	f006 feb1 	bl	bbb08 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4da6:	4807      	ldr	r0, [pc, #28]	; (b4dc4 <module_user_pre_init+0x34>)
   b4da8:	4a07      	ldr	r2, [pc, #28]	; (b4dc8 <module_user_pre_init+0x38>)
   b4daa:	2100      	movs	r1, #0
   b4dac:	1a12      	subs	r2, r2, r0
   b4dae:	f006 fed3 	bl	bbb58 <memset>
    return &link_global_data_start;
}
   b4db2:	4801      	ldr	r0, [pc, #4]	; (b4db8 <module_user_pre_init+0x28>)
   b4db4:	bd08      	pop	{r3, pc}
   b4db6:	bf00      	nop
   b4db8:	2003e450 	.word	0x2003e450
   b4dbc:	000be9c8 	.word	0x000be9c8
   b4dc0:	2003e634 	.word	0x2003e634
   b4dc4:	2003e634 	.word	0x2003e634
   b4dc8:	2003e7fc 	.word	0x2003e7fc

000b4dcc <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4dcc:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4dce:	4e07      	ldr	r6, [pc, #28]	; (b4dec <module_user_init+0x20>)
   b4dd0:	4c07      	ldr	r4, [pc, #28]	; (b4df0 <module_user_init+0x24>)
    module_user_init_hook();
   b4dd2:	f006 fd17 	bl	bb804 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4dd6:	1ba4      	subs	r4, r4, r6
   b4dd8:	08a4      	lsrs	r4, r4, #2
   b4dda:	2500      	movs	r5, #0
   b4ddc:	42ac      	cmp	r4, r5
   b4dde:	d100      	bne.n	b4de2 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4de0:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4de2:	f856 3b04 	ldr.w	r3, [r6], #4
   b4de6:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4de8:	3501      	adds	r5, #1
   b4dea:	e7f7      	b.n	b4ddc <module_user_init+0x10>
   b4dec:	000be96c 	.word	0x000be96c
   b4df0:	000be99c 	.word	0x000be99c

000b4df4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4df4:	f000 b84a 	b.w	b4e8c <setup>

000b4df8 <module_user_loop>:
}

void module_user_loop() {
   b4df8:	b508      	push	{r3, lr}
    loop();
   b4dfa:	f000 f88b 	bl	b4f14 <loop>
    _post_loop();
}
   b4dfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4e02:	f006 bcb7 	b.w	bb774 <_post_loop>

000b4e06 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4e06:	f002 bcab 	b.w	b7760 <malloc>

000b4e0a <_Znaj>:
   b4e0a:	f002 bca9 	b.w	b7760 <malloc>

000b4e0e <_ZdaPv>:
   b4e0e:	f002 bcaf 	b.w	b7770 <free>

000b4e12 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4e12:	f002 bcad 	b.w	b7770 <free>
	...

000b4e18 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4e18:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4e1a:	4a03      	ldr	r2, [pc, #12]	; (b4e28 <__cxa_pure_virtual+0x10>)
   b4e1c:	4903      	ldr	r1, [pc, #12]	; (b4e2c <__cxa_pure_virtual+0x14>)
   b4e1e:	200c      	movs	r0, #12
   b4e20:	f002 fb36 	bl	b7490 <panic_>
  while (1);
   b4e24:	e7fe      	b.n	b4e24 <__cxa_pure_virtual+0xc>
   b4e26:	bf00      	nop
   b4e28:	000b7311 	.word	0x000b7311
   b4e2c:	000bdba8 	.word	0x000bdba8

000b4e30 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4e30:	7800      	ldrb	r0, [r0, #0]
   b4e32:	fab0 f080 	clz	r0, r0
   b4e36:	0940      	lsrs	r0, r0, #5
   b4e38:	4770      	bx	lr

000b4e3a <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4e3a:	2301      	movs	r3, #1
   b4e3c:	7003      	strb	r3, [r0, #0]
   b4e3e:	4770      	bx	lr

000b4e40 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b4e40:	4770      	bx	lr
	...

000b4e44 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4e44:	4b0a      	ldr	r3, [pc, #40]	; (b4e70 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4e46:	b510      	push	{r4, lr}
   b4e48:	4604      	mov	r4, r0
   b4e4a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4e4c:	f003 fea8 	bl	b8ba0 <_ZN5spark10LogManager8instanceEv>
   b4e50:	4621      	mov	r1, r4
   b4e52:	f004 f8f2 	bl	b903a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4e56:	f005 f81b 	bl	b9e90 <_Z16_fetch_usbserialv>
   b4e5a:	f005 f80b 	bl	b9e74 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4e5e:	4620      	mov	r0, r4
   b4e60:	4b04      	ldr	r3, [pc, #16]	; (b4e74 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4e62:	f840 3b04 	str.w	r3, [r0], #4
   b4e66:	f003 ff71 	bl	b8d4c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4e6a:	4620      	mov	r0, r4
   b4e6c:	bd10      	pop	{r4, pc}
   b4e6e:	bf00      	nop
   b4e70:	000bdbfc 	.word	0x000bdbfc
   b4e74:	000bdbe4 	.word	0x000bdbe4

000b4e78 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4e78:	b510      	push	{r4, lr}
   b4e7a:	4604      	mov	r4, r0
    }
   b4e7c:	f7ff ffe2 	bl	b4e44 <_ZN5spark16SerialLogHandlerD1Ev>
   b4e80:	4620      	mov	r0, r4
   b4e82:	2124      	movs	r1, #36	; 0x24
   b4e84:	f7ff ffc5 	bl	b4e12 <_ZdlPvj>
   b4e88:	4620      	mov	r0, r4
   b4e8a:	bd10      	pop	{r4, pc}

000b4e8c <setup>:

// Used for retaining the last log
retained uint8_t retainedLogs[2048];

// setup() runs once, when the device is first turned on
void setup() {
   b4e8c:	b538      	push	{r3, r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4e8e:	2000      	movs	r0, #0
   b4e90:	f002 fa4e 	bl	b7330 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4e94:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4e98:	4604      	mov	r4, r0
   b4e9a:	2000      	movs	r0, #0
   b4e9c:	f002 fa48 	bl	b7330 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4ea0:	1b00      	subs	r0, r0, r4
   b4ea2:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4ea6:	42a8      	cmp	r0, r5
   b4ea8:	f171 0300 	sbcs.w	r3, r1, #0
   b4eac:	d207      	bcs.n	b4ebe <setup+0x32>
  // Put initialization like pinMode and begin functions here
  
  waitFor(Serial.isConnected, 10000);   //waits for serial port for specified time, handy for seeing early log messages
   b4eae:	f004 ffef 	bl	b9e90 <_Z16_fetch_usbserialv>
   b4eb2:	f004 ffe2 	bl	b9e7a <_ZN9USBSerial11isConnectedEv>
   b4eb6:	b910      	cbnz	r0, b4ebe <setup+0x32>
            spark_process();
   b4eb8:	f002 fb62 	bl	b7580 <spark_process>
        while (_while() && !_condition()) {
   b4ebc:	e7ed      	b.n	b4e9a <setup+0xe>
   b4ebe:	f004 ffe7 	bl	b9e90 <_Z16_fetch_usbserialv>
   b4ec2:	f004 ffda 	bl	b9e7a <_ZN9USBSerial11isConnectedEv>

    // This sets up remote configuration
    DeviceConfigLedger::instance()
   b4ec6:	f000 fed9 	bl	b5c7c <_ZN18DeviceConfigLedger8instanceEv>
     * Making this call sets the name and also enables it. 
     * 
     * Must be called before setup().
     */
    DeviceConfigLedger &withConfigDefaultLedgerName(const char *configDefaultLedgerName) {
        this->configDefaultLedgerName = configDefaultLedgerName;
   b4eca:	490f      	ldr	r1, [pc, #60]	; (b4f08 <setup+0x7c>)
   b4ecc:	4604      	mov	r4, r0
   b4ece:	3050      	adds	r0, #80	; 0x50
   b4ed0:	f004 fe66 	bl	b9ba0 <_ZN6StringaSEPKc>
        this->configDefaultLedgerEnabled = true;
   b4ed4:	2301      	movs	r3, #1
   b4ed6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
        .withConfigDefaultLedgerName("device-config")
        .setup();
   b4eda:	4620      	mov	r0, r4
   b4edc:	f001 fa98 	bl	b6410 <_ZN18DeviceConfigLedger5setupEv>
   
   //configureLogHandler();
    

    // This sets up the device information in ledger
    DeviceInfoLedger::instance()
   b4ee0:	f000 fb96 	bl	b5610 <_ZN16DeviceInfoLedger8instanceEv>
     * Default is "device-info". 
     * 
     * Must be called before setup().
     */
    DeviceInfoLedger &withInfoLedgerName(const char *infoLedgerName) {
        this->infoLedgerName = infoLedgerName;
   b4ee4:	4909      	ldr	r1, [pc, #36]	; (b4f0c <setup+0x80>)
   b4ee6:	4604      	mov	r4, r0
   b4ee8:	3004      	adds	r0, #4
   b4eea:	f004 fe59 	bl	b9ba0 <_ZN6StringaSEPKc>
     * buffer as large as is reasonable for your application.
     * 
     * Must be called before setup().
     */
    DeviceInfoLedger &withRetainedBuffer(uint8_t *retainedBuffer, size_t retainedBufferSize) {
        this->retainedBuffer = retainedBuffer;
   b4eee:	4b08      	ldr	r3, [pc, #32]	; (b4f10 <setup+0x84>)
   b4ef0:	6163      	str	r3, [r4, #20]
        this->retainedBufferSize = retainedBufferSize;
   b4ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   b4ef6:	61a3      	str	r3, [r4, #24]
        .withInfoLedgerName("device-logging")
        .withRetainedBuffer(retainedLogs, sizeof(retainedLogs))
        .setup(); 
   b4ef8:	4620      	mov	r0, r4
   b4efa:	f002 f8b5 	bl	b7068 <_ZN16DeviceInfoLedger5setupEv>
   //DeviceInfoLedger::instance().updateConfig();
    //DeviceInfoLedger::instance().configureLogHandler();

    //DeviceInfoLedger::instance().updateConfig();

}
   b4efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4f02:	f002 bb45 	b.w	b7590 <spark_cloud_flag_connect>
   b4f06:	bf00      	nop
   b4f08:	000bdbbd 	.word	0x000bdbbd
   b4f0c:	000bdbcb 	.word	0x000bdbcb
   b4f10:	2003f400 	.word	0x2003f400

000b4f14 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b4f14:	b508      	push	{r3, lr}
  // delay( 10 * 1000 ); // milliseconds and blocking - see docs for more info!

  //DeviceConfigLedger::instance().updateConfig();

  // This captures the various messages and sets the values in retainedLogs
  DeviceInfoLedger::instance().loop();
   b4f16:	f000 fb7b 	bl	b5610 <_ZN16DeviceInfoLedger8instanceEv>
   b4f1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DeviceInfoLedger::instance().loop();
   b4f1e:	f002 b97d 	b.w	b721c <_ZN16DeviceInfoLedger4loopEv>

000b4f22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4f22:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4f24:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4f28:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4f2a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4f2c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4f30:	42ae      	cmp	r6, r5
   b4f32:	d004      	beq.n	b4f3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4f34:	4628      	mov	r0, r5
   b4f36:	f004 fd7d 	bl	b9a34 <_ZN6StringD1Ev>
   b4f3a:	3514      	adds	r5, #20
   b4f3c:	e7f8      	b.n	b4f30 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4f3e:	6820      	ldr	r0, [r4, #0]
   b4f40:	f002 fc16 	bl	b7770 <free>
    AllocatorT::free(data_);
}
   b4f44:	4620      	mov	r0, r4
   b4f46:	bd70      	pop	{r4, r5, r6, pc}

000b4f48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4f48:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f4c:	4604      	mov	r4, r0
   b4f4e:	460d      	mov	r5, r1
   b4f50:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4f52:	d916      	bls.n	b4f82 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4f54:	4290      	cmp	r0, r2
   b4f56:	d215      	bcs.n	b4f84 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4f58:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4f5c:	1a75      	subs	r5, r6, r1
   b4f5e:	f1a1 0714 	sub.w	r7, r1, #20
   b4f62:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4f64:	42b7      	cmp	r7, r6
   b4f66:	d01c      	beq.n	b4fa2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4f68:	b12c      	cbz	r4, b4f76 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4f6a:	4631      	mov	r1, r6
   b4f6c:	4620      	mov	r0, r4
   b4f6e:	f004 fdea 	bl	b9b46 <_ZN6StringC1EOS_>
   b4f72:	7c33      	ldrb	r3, [r6, #16]
   b4f74:	7423      	strb	r3, [r4, #16]
   b4f76:	4630      	mov	r0, r6
   b4f78:	f004 fd5c 	bl	b9a34 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4f7c:	3e14      	subs	r6, #20
   b4f7e:	3c14      	subs	r4, #20
   b4f80:	e7f0      	b.n	b4f64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4f82:	d00e      	beq.n	b4fa2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4f84:	42b5      	cmp	r5, r6
   b4f86:	d00c      	beq.n	b4fa2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4f88:	b12c      	cbz	r4, b4f96 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4f8a:	4629      	mov	r1, r5
   b4f8c:	4620      	mov	r0, r4
   b4f8e:	f004 fdda 	bl	b9b46 <_ZN6StringC1EOS_>
   b4f92:	7c2b      	ldrb	r3, [r5, #16]
   b4f94:	7423      	strb	r3, [r4, #16]
   b4f96:	4628      	mov	r0, r5
   b4f98:	f004 fd4c 	bl	b9a34 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4f9c:	3514      	adds	r5, #20
   b4f9e:	3414      	adds	r4, #20
   b4fa0:	e7f0      	b.n	b4f84 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4fa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4fa8:	2300      	movs	r3, #0
   b4faa:	e9c0 3300 	strd	r3, r3, [r0]
   b4fae:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4fb0:	684f      	ldr	r7, [r1, #4]
   b4fb2:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4fb4:	4604      	mov	r4, r0
   b4fb6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4fb8:	dd23      	ble.n	b5002 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4fba:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4fbe:	fb08 f007 	mul.w	r0, r8, r7
   b4fc2:	f002 fbcd 	bl	b7760 <malloc>
            if (!d) {
   b4fc6:	4605      	mov	r5, r0
   b4fc8:	b1d8      	cbz	r0, b5002 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4fca:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4fce:	fb08 1202 	mla	r2, r8, r2, r1
   b4fd2:	f7ff ffb9 	bl	b4f48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4fd6:	6820      	ldr	r0, [r4, #0]
   b4fd8:	f002 fbca 	bl	b7770 <free>
        data_ = d;
   b4fdc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4fde:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4fe0:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4fe4:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4fe8:	45b8      	cmp	r8, r7
   b4fea:	d008      	beq.n	b4ffe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4fec:	4639      	mov	r1, r7
   b4fee:	4628      	mov	r0, r5
   b4ff0:	f004 fdc3 	bl	b9b7a <_ZN6StringC1ERKS_>
   b4ff4:	7c3b      	ldrb	r3, [r7, #16]
   b4ff6:	742b      	strb	r3, [r5, #16]
   b4ff8:	3714      	adds	r7, #20
   b4ffa:	3514      	adds	r5, #20
   b4ffc:	e7f4      	b.n	b4fe8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4ffe:	6873      	ldr	r3, [r6, #4]
   b5000:	6063      	str	r3, [r4, #4]
}
   b5002:	4620      	mov	r0, r4
   b5004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5008 <_GLOBAL__sub_I_SystemMode>:
   b5008:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   b500a:	4b2b      	ldr	r3, [pc, #172]	; (b50b8 <_GLOBAL__sub_I_SystemMode+0xb0>)
    SleepResult() {}
   b500c:	4a2b      	ldr	r2, [pc, #172]	; (b50bc <_GLOBAL__sub_I_SystemMode+0xb4>)
   b500e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5010:	2400      	movs	r4, #0
   b5012:	b08c      	sub	sp, #48	; 0x30
   b5014:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b5018:	2002      	movs	r0, #2
   b501a:	f002 fa73 	bl	b7504 <set_system_mode>
SYSTEM_THREAD(ENABLED);   //not required for OS >=6.2.x
   b501e:	4621      	mov	r1, r4
   b5020:	2001      	movs	r0, #1
   b5022:	f002 fa77 	bl	b7514 <system_thread_set_state>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b5026:	f006 fc1f 	bl	bb868 <spark_protocol_instance>
   b502a:	4623      	mov	r3, r4
   b502c:	4622      	mov	r2, r4
   b502e:	2103      	movs	r1, #3
   b5030:	f006 fc2a 	bl	bb888 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b5034:	f006 fc18 	bl	bb868 <spark_protocol_instance>
   b5038:	4622      	mov	r2, r4
   b503a:	4623      	mov	r3, r4
   b503c:	210d      	movs	r1, #13
   b503e:	f006 fc1b 	bl	bb878 <spark_protocol_set_product_id>
        capacity_(0) {
   b5042:	e9cd 4400 	strd	r4, r4, [sp]
   b5046:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b5048:	f004 ff22 	bl	b9e90 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b504c:	4c1c      	ldr	r4, [pc, #112]	; (b50c0 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b504e:	4605      	mov	r5, r0
   b5050:	4669      	mov	r1, sp
   b5052:	a803      	add	r0, sp, #12
   b5054:	f7ff ffa6 	bl	b4fa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5058:	4626      	mov	r6, r4

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   b505a:	a903      	add	r1, sp, #12
   b505c:	a806      	add	r0, sp, #24
   b505e:	f7ff ffa1 	bl	b4fa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5062:	4b18      	ldr	r3, [pc, #96]	; (b50c4 <_GLOBAL__sub_I_SystemMode+0xbc>)
   b5064:	f846 3b04 	str.w	r3, [r6], #4
   b5068:	a906      	add	r1, sp, #24
   b506a:	a809      	add	r0, sp, #36	; 0x24
   b506c:	f7ff ff9a 	bl	b4fa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5070:	aa09      	add	r2, sp, #36	; 0x24
   b5072:	211e      	movs	r1, #30
   b5074:	4630      	mov	r0, r6
   b5076:	f004 f881 	bl	b917c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b507a:	a809      	add	r0, sp, #36	; 0x24
   b507c:	f7ff ff51 	bl	b4f22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5080:	a806      	add	r0, sp, #24
   b5082:	f7ff ff4e 	bl	b4f22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5086:	4b10      	ldr	r3, [pc, #64]	; (b50c8 <_GLOBAL__sub_I_SystemMode+0xc0>)
   b5088:	6023      	str	r3, [r4, #0]
   b508a:	6225      	str	r5, [r4, #32]
   b508c:	a803      	add	r0, sp, #12
   b508e:	f7ff ff48 	bl	b4f22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5092:	4b0e      	ldr	r3, [pc, #56]	; (b50cc <_GLOBAL__sub_I_SystemMode+0xc4>)
   b5094:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b5096:	f004 fefb 	bl	b9e90 <_Z16_fetch_usbserialv>
   b509a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b509e:	f004 fee5 	bl	b9e6c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b50a2:	f003 fd7d 	bl	b8ba0 <_ZN5spark10LogManager8instanceEv>
   b50a6:	4621      	mov	r1, r4
   b50a8:	f003 ff80 	bl	b8fac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   b50ac:	4668      	mov	r0, sp
   b50ae:	f7ff ff38 	bl	b4f22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b50b2:	b00c      	add	sp, #48	; 0x30
   b50b4:	bd70      	pop	{r4, r5, r6, pc}
   b50b6:	bf00      	nop
   b50b8:	2003e634 	.word	0x2003e634
   b50bc:	ffff0000 	.word	0xffff0000
   b50c0:	2003e640 	.word	0x2003e640
   b50c4:	000bdbe4 	.word	0x000bdbe4
   b50c8:	000be410 	.word	0x000be410
   b50cc:	000bdbfc 	.word	0x000bdbfc

000b50d0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeES9_SO_>:
		std::forward<_Variants>(__vars))...);
	else // for std::visit<R> use INVOKE<R>
	  return std::__invoke_r<_Result_type>(
	      std::forward<_Visitor>(__visitor),
	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
      }
   b50d0:	2000      	movs	r0, #0
   b50d2:	4770      	bx	lr

000b50d4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeES9_SO_>:
    }

    template<typename SourceT>
    bool operator()(const SourceT& val) {
        if constexpr (std::is_arithmetic_v<SourceT>) {
            ok = true;
   b50d4:	2301      	movs	r3, #1
   b50d6:	7003      	strb	r3, [r0, #0]
   b50d8:	7808      	ldrb	r0, [r1, #0]
   b50da:	4770      	bx	lr

000b50dc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeES9_SO_>:
   b50dc:	2301      	movs	r3, #1
   b50de:	7003      	strb	r3, [r0, #0]
            return static_cast<bool>(val);
   b50e0:	6808      	ldr	r0, [r1, #0]
   b50e2:	3800      	subs	r0, #0
   b50e4:	bf18      	it	ne
   b50e6:	2001      	movne	r0, #1
   b50e8:	4770      	bx	lr

000b50ea <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeES9_SO_>:
            ok = true;
   b50ea:	2301      	movs	r3, #1
   b50ec:	7003      	strb	r3, [r0, #0]
            return static_cast<bool>(val);
   b50ee:	6808      	ldr	r0, [r1, #0]
   b50f0:	3800      	subs	r0, #0
   b50f2:	bf18      	it	ne
   b50f4:	2001      	movne	r0, #1
   b50f6:	4770      	bx	lr

000b50f8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeES9_SO_>:
            ok = true;
   b50f8:	2301      	movs	r3, #1
   b50fa:	7003      	strb	r3, [r0, #0]
            return static_cast<bool>(val);
   b50fc:	e9d1 2300 	ldrd	r2, r3, [r1]
   b5100:	4313      	orrs	r3, r2
   b5102:	bf14      	ite	ne
   b5104:	2001      	movne	r0, #1
   b5106:	2000      	moveq	r0, #0
   b5108:	4770      	bx	lr

000b510a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeES9_SO_>:
            ok = true;
   b510a:	2301      	movs	r3, #1
   b510c:	7003      	strb	r3, [r0, #0]
            return static_cast<bool>(val);
   b510e:	e9d1 2300 	ldrd	r2, r3, [r1]
   b5112:	4313      	orrs	r3, r2
   b5114:	bf14      	ite	ne
   b5116:	2001      	movne	r0, #1
   b5118:	2000      	moveq	r0, #0
   b511a:	4770      	bx	lr

000b511c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeES9_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b511c:	b510      	push	{r4, lr}
            ok = true;
   b511e:	2401      	movs	r4, #1
   b5120:	7004      	strb	r4, [r0, #0]
            return static_cast<bool>(val);
   b5122:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5126:	2200      	movs	r2, #0
   b5128:	2300      	movs	r3, #0
   b512a:	f7ff fb9d 	bl	b4868 <__aeabi_dcmpeq>
   b512e:	b108      	cbz	r0, b5134 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeES9_SO_+0x18>
   b5130:	f04f 0400 	mov.w	r4, #0
      }
   b5134:	f004 0001 	and.w	r0, r4, #1
   b5138:	bd10      	pop	{r4, pc}

000b513a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeES9_SO_>:
   b513a:	2000      	movs	r0, #0
   b513c:	4770      	bx	lr

000b513e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeES9_SO_>:
   b513e:	2000      	movs	r0, #0
   b5140:	4770      	bx	lr

000b5142 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeES9_SO_>:
   b5142:	2000      	movs	r0, #0
   b5144:	4770      	bx	lr

000b5146 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeES9_SO_>:
   b5146:	2000      	movs	r0, #0
   b5148:	4770      	bx	lr

000b514a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeES9_SO_>:
    }

    template<typename SourceT>
    TargetT operator()(const SourceT& val) {
        if constexpr (std::is_arithmetic_v<SourceT>) {
            ok = true;
   b514a:	2301      	movs	r3, #1
   b514c:	7003      	strb	r3, [r0, #0]
   b514e:	7808      	ldrb	r0, [r1, #0]
   b5150:	4770      	bx	lr

000b5152 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeES9_SO_>:
   b5152:	2301      	movs	r3, #1
   b5154:	7003      	strb	r3, [r0, #0]
   b5156:	6808      	ldr	r0, [r1, #0]
   b5158:	4770      	bx	lr

000b515a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeES9_SO_>:
   b515a:	2301      	movs	r3, #1
   b515c:	7003      	strb	r3, [r0, #0]
   b515e:	6808      	ldr	r0, [r1, #0]
   b5160:	4770      	bx	lr

000b5162 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeES9_SO_>:
   b5162:	2301      	movs	r3, #1
   b5164:	7003      	strb	r3, [r0, #0]
   b5166:	6808      	ldr	r0, [r1, #0]
   b5168:	4770      	bx	lr

000b516a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeES9_SO_>:
   b516a:	2301      	movs	r3, #1
   b516c:	7003      	strb	r3, [r0, #0]
   b516e:	6808      	ldr	r0, [r1, #0]
   b5170:	4770      	bx	lr

000b5172 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeES9_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5172:	b508      	push	{r3, lr}
   b5174:	2301      	movs	r3, #1
   b5176:	7003      	strb	r3, [r0, #0]
            return static_cast<TargetT>(val);
   b5178:	e9d1 0100 	ldrd	r0, r1, [r1]
   b517c:	f7ff fba6 	bl	b48cc <__aeabi_d2iz>
      }
   b5180:	bd08      	pop	{r3, pc}

000b5182 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeES9_SO_>:
   b5182:	2000      	movs	r0, #0
   b5184:	4770      	bx	lr

000b5186 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeES9_SO_>:
   b5186:	2000      	movs	r0, #0
   b5188:	4770      	bx	lr

000b518a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeES9_SO_>:
   b518a:	2000      	movs	r0, #0
   b518c:	4770      	bx	lr

000b518e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESE_SO_>:
        return val;
    }

    template<typename SourceT>
    VariantMap operator()(const SourceT& val) const {
        return VariantMap();
   b518e:	2200      	movs	r2, #0
   b5190:	e9c0 2200 	strd	r2, r2, [r0]
   b5194:	6082      	str	r2, [r0, #8]
   b5196:	4770      	bx	lr

000b5198 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESE_SO_>:
   b5198:	2200      	movs	r2, #0
   b519a:	e9c0 2200 	strd	r2, r2, [r0]
   b519e:	6082      	str	r2, [r0, #8]
   b51a0:	4770      	bx	lr

000b51a2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESE_SO_>:
   b51a2:	2200      	movs	r2, #0
   b51a4:	e9c0 2200 	strd	r2, r2, [r0]
   b51a8:	6082      	str	r2, [r0, #8]
   b51aa:	4770      	bx	lr

000b51ac <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESE_SO_>:
   b51ac:	2200      	movs	r2, #0
   b51ae:	e9c0 2200 	strd	r2, r2, [r0]
   b51b2:	6082      	str	r2, [r0, #8]
   b51b4:	4770      	bx	lr

000b51b6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESE_SO_>:
   b51b6:	2200      	movs	r2, #0
   b51b8:	e9c0 2200 	strd	r2, r2, [r0]
   b51bc:	6082      	str	r2, [r0, #8]
   b51be:	4770      	bx	lr

000b51c0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESE_SO_>:
   b51c0:	2200      	movs	r2, #0
   b51c2:	e9c0 2200 	strd	r2, r2, [r0]
   b51c6:	6082      	str	r2, [r0, #8]
   b51c8:	4770      	bx	lr

000b51ca <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESE_SO_>:
   b51ca:	2200      	movs	r2, #0
   b51cc:	e9c0 2200 	strd	r2, r2, [r0]
   b51d0:	6082      	str	r2, [r0, #8]
   b51d2:	4770      	bx	lr

000b51d4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESE_SO_>:
   b51d4:	2200      	movs	r2, #0
   b51d6:	e9c0 2200 	strd	r2, r2, [r0]
   b51da:	6082      	str	r2, [r0, #8]
   b51dc:	4770      	bx	lr

000b51de <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESE_SO_>:
   b51de:	2200      	movs	r2, #0
   b51e0:	e9c0 2200 	strd	r2, r2, [r0]
   b51e4:	6082      	str	r2, [r0, #8]
   b51e6:	4770      	bx	lr

000b51e8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESE_SO_>:
   b51e8:	2200      	movs	r2, #0
   b51ea:	e9c0 2200 	strd	r2, r2, [r0]
   b51ee:	6082      	str	r2, [r0, #8]
   b51f0:	4770      	bx	lr

000b51f2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESL_SO_>:
   b51f2:	4770      	bx	lr

000b51f4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESL_SO_>:
   b51f4:	4770      	bx	lr

000b51f6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESL_SO_>:
   b51f6:	4770      	bx	lr

000b51f8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESL_SO_>:
   b51f8:	4770      	bx	lr

000b51fa <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESL_SO_>:
   b51fa:	4770      	bx	lr

000b51fc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESL_SO_>:
   b51fc:	4770      	bx	lr

000b51fe <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESL_SO_>:
   b51fe:	4770      	bx	lr

000b5200 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESU_SY_>:
   b5200:	4770      	bx	lr

000b5202 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4294967295EEEE14__visit_invokeESU_SY_>:
   b5202:	4770      	bx	lr

000b5204 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESU_SY_>:
      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
   b5204:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
   b5206:	780a      	ldrb	r2, [r1, #0]
   b5208:	701a      	strb	r2, [r3, #0]
      }
   b520a:	4770      	bx	lr

000b520c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESU_SY_>:
      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
   b520c:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
   b520e:	680a      	ldr	r2, [r1, #0]
   b5210:	601a      	str	r2, [r3, #0]
      }
   b5212:	4770      	bx	lr

000b5214 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESU_SY_>:
      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
   b5214:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
   b5216:	680a      	ldr	r2, [r1, #0]
   b5218:	601a      	str	r2, [r3, #0]
      }
   b521a:	4770      	bx	lr

000b521c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b521c:	b538      	push	{r3, r4, r5, lr}
        ok = true;
   b521e:	2301      	movs	r3, #1
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5220:	7815      	ldrb	r5, [r2, #0]
        return val ? "true" : "false";
   b5222:	4a05      	ldr	r2, [pc, #20]	; (b5238 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESA_SO_+0x1c>)
        ok = true;
   b5224:	700b      	strb	r3, [r1, #0]
        return val ? "true" : "false";
   b5226:	4905      	ldr	r1, [pc, #20]	; (b523c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESA_SO_+0x20>)
   b5228:	4604      	mov	r4, r0
   b522a:	2d00      	cmp	r5, #0
   b522c:	bf18      	it	ne
   b522e:	4611      	movne	r1, r2
   b5230:	f004 fc4b 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
      }
   b5234:	4620      	mov	r0, r4
   b5236:	bd38      	pop	{r3, r4, r5, pc}
   b5238:	000bdc0c 	.word	0x000bdc0c
   b523c:	000bdc11 	.word	0x000bdc11

000b5240 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5240:	b510      	push	{r4, lr}
            return String();
   b5242:	4903      	ldr	r1, [pc, #12]	; (b5250 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESA_SO_+0x10>)
   b5244:	4604      	mov	r4, r0
   b5246:	f004 fc40 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
      }
   b524a:	4620      	mov	r0, r4
   b524c:	bd10      	pop	{r4, pc}
   b524e:	bf00      	nop
   b5250:	000be3da 	.word	0x000be3da

000b5254 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5254:	b510      	push	{r4, lr}
   b5256:	4903      	ldr	r1, [pc, #12]	; (b5264 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESA_SO_+0x10>)
   b5258:	4604      	mov	r4, r0
   b525a:	f004 fc36 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
      }
   b525e:	4620      	mov	r0, r4
   b5260:	bd10      	pop	{r4, pc}
   b5262:	bf00      	nop
   b5264:	000be3da 	.word	0x000be3da

000b5268 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5268:	b510      	push	{r4, lr}
   b526a:	4903      	ldr	r1, [pc, #12]	; (b5278 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESA_SO_+0x10>)
   b526c:	4604      	mov	r4, r0
   b526e:	f004 fc2c 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
      }
   b5272:	4620      	mov	r0, r4
   b5274:	bd10      	pop	{r4, pc}
   b5276:	bf00      	nop
   b5278:	000be3da 	.word	0x000be3da

000b527c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b527c:	b510      	push	{r4, lr}
   b527e:	4903      	ldr	r1, [pc, #12]	; (b528c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESA_SO_+0x10>)
   b5280:	4604      	mov	r4, r0
   b5282:	f004 fc22 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
      }
   b5286:	4620      	mov	r0, r4
   b5288:	bd10      	pop	{r4, pc}
   b528a:	bf00      	nop
   b528c:	000be3da 	.word	0x000be3da

000b5290 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESL_SO_>:
    _Destroy(_Tp* __pointer)
    {
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
   b5290:	4608      	mov	r0, r1
   b5292:	f004 bbcf 	b.w	b9a34 <_ZN6StringD1Ev>

000b5296 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5296:	b510      	push	{r4, lr}
        ok = true;
   b5298:	2301      	movs	r3, #1
   b529a:	4604      	mov	r4, r0
   b529c:	700b      	strb	r3, [r1, #0]
        return val;
   b529e:	4611      	mov	r1, r2
   b52a0:	f004 fc6b 	bl	b9b7a <_ZN6StringC1ERKS_>
      }
   b52a4:	4620      	mov	r0, r4
   b52a6:	bd10      	pop	{r4, pc}

000b52a8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b52a8:	b570      	push	{r4, r5, r6, lr}
   b52aa:	b08a      	sub	sp, #40	; 0x28
            auto r = detail::to_chars(buf, buf + sizeof(buf), val);
   b52ac:	ad02      	add	r5, sp, #8
   b52ae:	ed92 0b00 	vldr	d0, [r2]
   b52b2:	4604      	mov	r4, r0
   b52b4:	460e      	mov	r6, r1
   b52b6:	aa0a      	add	r2, sp, #40	; 0x28
   b52b8:	4629      	mov	r1, r5
   b52ba:	4668      	mov	r0, sp
   b52bc:	f004 ff6e 	bl	ba19c <_ZN8particle6detail8to_charsEPcS1_d>
            SPARK_ASSERT(r.ec == std::errc());
   b52c0:	9b01      	ldr	r3, [sp, #4]
   b52c2:	b123      	cbz	r3, b52ce <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESA_SO_+0x26>
   b52c4:	4a07      	ldr	r2, [pc, #28]	; (b52e4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESA_SO_+0x3c>)
   b52c6:	4908      	ldr	r1, [pc, #32]	; (b52e8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESA_SO_+0x40>)
   b52c8:	200a      	movs	r0, #10
   b52ca:	f002 f8e1 	bl	b7490 <panic_>
            return String(buf, r.ptr - buf);
   b52ce:	9a00      	ldr	r2, [sp, #0]
            ok = true;
   b52d0:	2301      	movs	r3, #1
   b52d2:	7033      	strb	r3, [r6, #0]
            return String(buf, r.ptr - buf);
   b52d4:	1b52      	subs	r2, r2, r5
   b52d6:	4629      	mov	r1, r5
   b52d8:	4620      	mov	r0, r4
   b52da:	f004 fc0a 	bl	b9af2 <_ZN6StringC1EPKcj>
      }
   b52de:	4620      	mov	r0, r4
   b52e0:	b00a      	add	sp, #40	; 0x28
   b52e2:	bd70      	pop	{r4, r5, r6, pc}
   b52e4:	000b7311 	.word	0x000b7311
   b52e8:	000bdc17 	.word	0x000bdc17

000b52ec <_ZZN16DeviceInfoLedger17onCloudConnectionEvENUt_8appenderEPvPKhj>:
    	String jsonStr;

	    jsonStr.reserve(256);

        struct {
            static bool appender(void* appender, const uint8_t* data, size_t size) {
   b52ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b52ee:	4604      	mov	r4, r0
                String *s = (String *)appender;
                return (bool) s->concat(String((const char *)data, size));
   b52f0:	4668      	mov	r0, sp
   b52f2:	f004 fbfe 	bl	b9af2 <_ZN6StringC1EPKcj>
   b52f6:	4669      	mov	r1, sp
   b52f8:	4620      	mov	r0, r4
   b52fa:	f004 fc7f 	bl	b9bfc <_ZN6String6concatERKS_>
   b52fe:	4604      	mov	r4, r0
   b5300:	4668      	mov	r0, sp
   b5302:	f004 fb97 	bl	b9a34 <_ZN6StringD1Ev>
            }
   b5306:	1e20      	subs	r0, r4, #0
   b5308:	bf18      	it	ne
   b530a:	2001      	movne	r0, #1
   b530c:	b004      	add	sp, #16
   b530e:	bd10      	pop	{r4, pc}

000b5310 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5310:	b570      	push	{r4, r5, r6, lr}
   b5312:	460e      	mov	r6, r1
   b5314:	4605      	mov	r5, r0
    operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    int compareTo(const String &s) const;
    unsigned char equals(const String &s) const;
    unsigned char equals(const char *cstr) const;
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5316:	490a      	ldr	r1, [pc, #40]	; (b5340 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x30>)
   b5318:	4630      	mov	r0, r6
   b531a:	f004 fc88 	bl	b9c2e <_ZNK6String6equalsEPKc>
        if (val == "true") {
   b531e:	4604      	mov	r4, r0
   b5320:	b118      	cbz	r0, b532a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x1a>
            ok = true;
   b5322:	2301      	movs	r3, #1
   b5324:	702b      	strb	r3, [r5, #0]
            return true;
   b5326:	4618      	mov	r0, r3
      }
   b5328:	bd70      	pop	{r4, r5, r6, pc}
   b532a:	4906      	ldr	r1, [pc, #24]	; (b5344 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x34>)
   b532c:	4630      	mov	r0, r6
   b532e:	f004 fc7e 	bl	b9c2e <_ZNK6String6equalsEPKc>
        if (val == "false") {
   b5332:	2800      	cmp	r0, #0
   b5334:	d0f8      	beq.n	b5328 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x18>
            ok = true;
   b5336:	2301      	movs	r3, #1
   b5338:	702b      	strb	r3, [r5, #0]
            return false;
   b533a:	4620      	mov	r0, r4
   b533c:	e7f4      	b.n	b5328 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x18>
   b533e:	bf00      	nop
   b5340:	000bdc0c 	.word	0x000bdc0c
   b5344:	000bdc11 	.word	0x000bdc11

000b5348 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>:
      operator=(_Move_assign_base&& __rhs)
   b5348:	b507      	push	{r0, r1, r2, lr}
      {
	using __index_type = typename _Base::__index_type;
	if constexpr (__detail::__variant::__never_valueless<_Types...>())
	  return this->_M_index;
	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
	  return make_signed_t<__index_type>(this->_M_index);
   b534a:	f991 3010 	ldrsb.w	r3, [r1, #16]
    {
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;

      auto __func_ptr = __vtable._M_access(__variants.index()...);
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
   b534e:	4a05      	ldr	r2, [pc, #20]	; (b5364 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0+0x1c>)
	__variant::__raw_idx_visit(
   b5350:	9001      	str	r0, [sp, #4]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
   b5352:	3301      	adds	r3, #1
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
   b5354:	a801      	add	r0, sp, #4
   b5356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   b535a:	4798      	blx	r3
      }
   b535c:	b003      	add	sp, #12
   b535e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5362:	bf00      	nop
   b5364:	000bde2c 	.word	0x000bde2c

000b5368 <_ZNSt17_Function_handlerIFvvEZN16DeviceInfoLedger5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   b5368:	2a01      	cmp	r2, #1
   b536a:	d102      	bne.n	b5372 <_ZNSt17_Function_handlerIFvvEZN16DeviceInfoLedger5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b536c:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   b536e:	2000      	movs	r0, #0
   b5370:	4770      	bx	lr
	  switch (__op)
   b5372:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b5374:	bf04      	itt	eq
   b5376:	680b      	ldreq	r3, [r1, #0]
   b5378:	6003      	streq	r3, [r0, #0]
	      break;
   b537a:	e7f8      	b.n	b536e <_ZNSt17_Function_handlerIFvvEZN16DeviceInfoLedger5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b537c <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b537c:	2a01      	cmp	r2, #1
   b537e:	d102      	bne.n	b5386 <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5380:	6001      	str	r1, [r0, #0]
      }
   b5382:	2000      	movs	r0, #0
   b5384:	4770      	bx	lr
	  switch (__op)
   b5386:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b5388:	bf04      	itt	eq
   b538a:	680b      	ldreq	r3, [r1, #0]
   b538c:	6003      	streq	r3, [r0, #0]
	      break;
   b538e:	e7f8      	b.n	b5382 <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b5390 <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b5390:	2a01      	cmp	r2, #1
   b5392:	d102      	bne.n	b539a <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5394:	6001      	str	r1, [r0, #0]
      }
   b5396:	2000      	movs	r0, #0
   b5398:	4770      	bx	lr
	  switch (__op)
   b539a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b539c:	bf04      	itt	eq
   b539e:	680b      	ldreq	r3, [r1, #0]
   b53a0:	6003      	streq	r3, [r0, #0]
	      break;
   b53a2:	e7f8      	b.n	b5396 <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b53a4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESU_SY_>:
        ::new (__storage)
   b53a4:	6800      	ldr	r0, [r0, #0]
   b53a6:	f004 bbe8 	b.w	b9b7a <_ZN6StringC1ERKS_>

000b53aa <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESU_SY_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
   b53aa:	6803      	ldr	r3, [r0, #0]
   b53ac:	e9d1 0100 	ldrd	r0, r1, [r1]
   b53b0:	e9c3 0100 	strd	r0, r1, [r3]
      }
   b53b4:	4770      	bx	lr

000b53b6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESU_SY_>:
   b53b6:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
   b53b8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b53bc:	e9c3 0100 	strd	r0, r1, [r3]
      }
   b53c0:	4770      	bx	lr

000b53c2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESU_SY_>:
   b53c2:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
   b53c4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b53c8:	e9c3 0100 	strd	r0, r1, [r3]
      }
   b53cc:	4770      	bx	lr
	...

000b53d0 <_ZN26DeviceInfoLedgerLogHandlerD1Ev>:
#ifndef UNITTEST
DeviceInfoLedgerLogHandler::DeviceInfoLedgerLogHandler(LogLevel level, LogCategoryFilters filters) : StreamLogHandler(*this, level, filters) {

}

DeviceInfoLedgerLogHandler::~DeviceInfoLedgerLogHandler() {
   b53d0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b53d2:	4b04      	ldr	r3, [pc, #16]	; (b53e4 <_ZN26DeviceInfoLedgerLogHandlerD1Ev+0x14>)
   b53d4:	4604      	mov	r4, r0
   b53d6:	f840 3b04 	str.w	r3, [r0], #4
   b53da:	f003 fcb7 	bl	b8d4c <_ZN5spark6detail9LogFilterD1Ev>

}
   b53de:	4620      	mov	r0, r4
   b53e0:	bd10      	pop	{r4, pc}
   b53e2:	bf00      	nop
   b53e4:	000bdbe4 	.word	0x000bdbe4

000b53e8 <_ZThn36_N26DeviceInfoLedgerLogHandlerD1Ev>:
    DeviceInfoLedgerLogHandler(LogLevel level, LogCategoryFilters filters);

    /**
     * @brief Deleted when a new log handler is created
     */
    virtual ~DeviceInfoLedgerLogHandler();
   b53e8:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
   b53ec:	f7ff bff0 	b.w	b53d0 <_ZN26DeviceInfoLedgerLogHandlerD1Ev>

000b53f0 <_ZN26DeviceInfoLedgerLogHandlerD0Ev>:
DeviceInfoLedgerLogHandler::~DeviceInfoLedgerLogHandler() {
   b53f0:	b510      	push	{r4, lr}
   b53f2:	4604      	mov	r4, r0
}
   b53f4:	f7ff ffec 	bl	b53d0 <_ZN26DeviceInfoLedgerLogHandlerD1Ev>
   b53f8:	4620      	mov	r0, r4
   b53fa:	212c      	movs	r1, #44	; 0x2c
   b53fc:	f7ff fd09 	bl	b4e12 <_ZdlPvj>
   b5400:	4620      	mov	r0, r4
   b5402:	bd10      	pop	{r4, pc}

000b5404 <_ZThn36_N26DeviceInfoLedgerLogHandlerD0Ev>:
   b5404:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
   b5408:	f7ff bff2 	b.w	b53f0 <_ZN26DeviceInfoLedgerLogHandlerD0Ev>

000b540c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b540c:	b5f0      	push	{r4, r5, r6, r7, lr}
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b540e:	680a      	ldr	r2, [r1, #0]
        auto end = val.c_str() + val.length();
   b5410:	688c      	ldr	r4, [r1, #8]
   b5412:	4414      	add	r4, r2

      from_chars_result __res{__first, {}};

      int __sign = 1;
      if _GLIBCXX17_CONSTEXPR (std::is_signed<_Tp>::value)
	if (__first != __last && *__first == '-')
   b5414:	42a2      	cmp	r2, r4
   b5416:	4607      	mov	r7, r0
   b5418:	d01c      	beq.n	b5454 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x48>
   b541a:	7813      	ldrb	r3, [r2, #0]
   b541c:	2b2d      	cmp	r3, #45	; 0x2d
   b541e:	d119      	bne.n	b5454 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x48>
	  {
	    __sign = -1;
	    ++__first;
   b5420:	3201      	adds	r2, #1
	    __sign = -1;
   b5422:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    __from_chars_digit(const char*& __first, const char* __last, _Tp& __val,
   b5426:	4616      	mov	r6, r2
	  }

      using _Up = __detail::__unsigned_least_t<_Tp>;
      _Up __val = 0;
   b5428:	2300      	movs	r3, #0
      if (__builtin_mul_overflow(__val, __base, &__val)
   b542a:	200a      	movs	r0, #10
      while (__first != __last)
   b542c:	42a6      	cmp	r6, r4
   b542e:	46b4      	mov	ip, r6
   b5430:	d012      	beq.n	b5458 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x4c>
	  return '0' <= __c && __c <= ('0' + (__base - 1));
   b5432:	f89c 1000 	ldrb.w	r1, [ip]
   b5436:	3930      	subs	r1, #48	; 0x30
   b5438:	b2c9      	uxtb	r1, r1
   b543a:	2909      	cmp	r1, #9
   b543c:	f106 0601 	add.w	r6, r6, #1
   b5440:	d825      	bhi.n	b548e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x82>
      if (__builtin_mul_overflow(__val, __base, &__val)
   b5442:	fba3 3c00 	umull	r3, ip, r3, r0
   b5446:	f1bc 0f00 	cmp.w	ip, #0
   b544a:	d101      	bne.n	b5450 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x44>
	  || __builtin_add_overflow(__val, __c, &__val))
   b544c:	185b      	adds	r3, r3, r1
   b544e:	d3ed      	bcc.n	b542c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x20>
            return TargetT();
   b5450:	2000      	movs	r0, #0
   b5452:	e01b      	b.n	b548c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x80>
      int __sign = 1;
   b5454:	2501      	movs	r5, #1
   b5456:	e7e6      	b.n	b5426 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x1a>
      else if (__base <= 10)
	__valid = __detail::__from_chars_digit(__first, __last, __val, __base);
      else
	__valid = __detail::__from_chars_alnum(__first, __last, __val, __base);

      if (__builtin_expect(__first == __start, 0))
   b5458:	42a2      	cmp	r2, r4
   b545a:	d0f9      	beq.n	b5450 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x44>
	  else
	    {
	      if _GLIBCXX17_CONSTEXPR (std::is_signed<_Tp>::value)
		{
		  _Tp __tmp;
		  if (__builtin_mul_overflow(__val, __sign, &__tmp))
   b545c:	fb85 1203 	smull	r1, r2, r5, r3
   b5460:	ebb2 7fe1 	cmp.w	r2, r1, asr #31
   b5464:	bf14      	ite	ne
   b5466:	2201      	movne	r2, #1
   b5468:	2200      	moveq	r2, #0
   b546a:	2b00      	cmp	r3, #0
   b546c:	da06      	bge.n	b547c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x70>
   b546e:	2201      	movs	r2, #1
   b5470:	b11d      	cbz	r5, b547a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x6e>
   b5472:	3501      	adds	r5, #1
   b5474:	d102      	bne.n	b547c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x70>
   b5476:	428b      	cmp	r3, r1
   b5478:	d100      	bne.n	b547c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x70>
   b547a:	2200      	movs	r2, #0
   b547c:	4610      	mov	r0, r2
   b547e:	2a00      	cmp	r2, #0
   b5480:	d1e6      	bne.n	b5450 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x44>
        if (r.ec != std::errc() || r.ptr != end) {
   b5482:	4564      	cmp	r4, ip
   b5484:	d102      	bne.n	b548c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x80>
        ok = true;
   b5486:	2301      	movs	r3, #1
   b5488:	703b      	strb	r3, [r7, #0]
		    __res.ec = errc::result_out_of_range;
		  else
		    __value = __tmp;
   b548a:	4608      	mov	r0, r1
      }
   b548c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (__builtin_expect(__first == __start, 0))
   b548e:	4562      	cmp	r2, ip
   b5490:	e7e3      	b.n	b545a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x4e>

000b5492 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESL_SO_>:
    ::free(ptr);
   b5492:	6808      	ldr	r0, [r1, #0]
   b5494:	f002 b96c 	b.w	b7770 <free>

000b5498 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5498:	b510      	push	{r4, lr}
      if (_M_manager)
   b549a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b549c:	4604      	mov	r4, r0
      if (_M_manager)
   b549e:	b113      	cbz	r3, b54a6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b54a0:	2203      	movs	r2, #3
   b54a2:	4601      	mov	r1, r0
   b54a4:	4798      	blx	r3
    }
   b54a6:	4620      	mov	r0, r4
   b54a8:	bd10      	pop	{r4, pc}

000b54aa <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b54aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b54ae:	4605      	mov	r5, r0
   b54b0:	460f      	mov	r7, r1
   b54b2:	4614      	mov	r4, r2
    _Function_base() : _M_manager(nullptr) { }
   b54b4:	f04f 0800 	mov.w	r8, #0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54b8:	466e      	mov	r6, sp
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   b54ba:	42bd      	cmp	r5, r7
   b54bc:	d01c      	beq.n	b54f8 <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x4e>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b54be:	b1ac      	cbz	r4, b54ec <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x42>
   b54c0:	f8c4 8008 	str.w	r8, [r4, #8]
   b54c4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b54c8:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b54cc:	e894 0003 	ldmia.w	r4, {r0, r1}
   b54d0:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b54d4:	e896 0003 	ldmia.w	r6, {r0, r1}
   b54d8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b54dc:	68a2      	ldr	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54de:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b54e0:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b54e2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54e4:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b54e6:	68e2      	ldr	r2, [r4, #12]
   b54e8:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b54ea:	60e3      	str	r3, [r4, #12]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b54ec:	4628      	mov	r0, r5
   b54ee:	f7ff ffd3 	bl	b5498 <_ZNSt14_Function_baseD1Ev>
   b54f2:	3510      	adds	r5, #16
   b54f4:	3410      	adds	r4, #16
   b54f6:	e7e0      	b.n	b54ba <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x10>
	std::__relocate_object_a(std::__addressof(*__cur),
				 std::__addressof(*__first), __alloc);
      return __cur;
    }
   b54f8:	4620      	mov	r0, r4
   b54fa:	b002      	add	sp, #8
   b54fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5500 <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   b5500:	b40e      	push	{r1, r2, r3}
   b5502:	b500      	push	{lr}
   b5504:	b08c      	sub	sp, #48	; 0x30
   b5506:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b5508:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::trace(const char *fmt, ...) const {
   b550c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b5510:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5512:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b5516:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5518:	6801      	ldr	r1, [r0, #0]
   b551a:	aa04      	add	r2, sp, #16
   b551c:	2001      	movs	r0, #1
    attr.flags = 0;
   b551e:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5522:	f001 ffcd 	bl	b74c0 <log_message_v>
}
   b5526:	b00c      	add	sp, #48	; 0x30
   b5528:	f85d eb04 	ldr.w	lr, [sp], #4
   b552c:	b003      	add	sp, #12
   b552e:	4770      	bx	lr

000b5530 <_ZNK5spark6Logger4infoEPKcz>:
inline void spark::Logger::info(const char *fmt, ...) const {
   b5530:	b40e      	push	{r1, r2, r3}
   b5532:	b500      	push	{lr}
   b5534:	b08c      	sub	sp, #48	; 0x30
   b5536:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b5538:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b553c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b5540:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5542:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b5546:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5548:	6801      	ldr	r1, [r0, #0]
   b554a:	aa04      	add	r2, sp, #16
   b554c:	201e      	movs	r0, #30
    attr.flags = 0;
   b554e:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5552:	f001 ffb5 	bl	b74c0 <log_message_v>
}
   b5556:	b00c      	add	sp, #48	; 0x30
   b5558:	f85d eb04 	ldr.w	lr, [sp], #4
   b555c:	b003      	add	sp, #12
   b555e:	4770      	bx	lr

000b5560 <_ZSt26__throw_bad_variant_accessb>:
  {
   b5560:	b508      	push	{r3, lr}
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
   b5562:	f002 f925 	bl	b77b0 <abort>

000b5566 <_ZN8particle7VariantC1EPKc>:
    Variant(const char* val) :
   b5566:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5568:	4604      	mov	r4, r0
            v_(String(val)) {
   b556a:	4668      	mov	r0, sp
   b556c:	f004 faad 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
	  ::new ((void*)std::addressof(_M_storage))
   b5570:	4669      	mov	r1, sp
   b5572:	4620      	mov	r0, r4
   b5574:	f004 fae7 	bl	b9b46 <_ZN6StringC1EOS_>
	_M_index{_Np}
   b5578:	2307      	movs	r3, #7
   b557a:	7423      	strb	r3, [r4, #16]
   b557c:	4668      	mov	r0, sp
   b557e:	f004 fa59 	bl	b9a34 <_ZN6StringD1Ev>
    }
   b5582:	4620      	mov	r0, r4
   b5584:	b004      	add	sp, #16
   b5586:	bd10      	pop	{r4, pc}

000b5588 <_ZN8particle6LedgerD1Ev>:
    }

    /**
     * Destructor.
     */
    ~Ledger() {
   b5588:	b510      	push	{r4, lr}
   b558a:	4604      	mov	r4, r0
        if (instance_) {
   b558c:	6800      	ldr	r0, [r0, #0]
   b558e:	b110      	cbz	r0, b5596 <_ZN8particle6LedgerD1Ev+0xe>
            ledger_release(instance_, nullptr);
   b5590:	2100      	movs	r1, #0
   b5592:	f002 f825 	bl	b75e0 <ledger_release>
        }
    }
   b5596:	4620      	mov	r0, r4
   b5598:	bd10      	pop	{r4, pc}
	...

000b559c <_ZN16DeviceInfoLedgerD1Ev>:
DeviceInfoLedger::~DeviceInfoLedger() {
   b559c:	b510      	push	{r4, lr}
   b559e:	4b05      	ldr	r3, [pc, #20]	; (b55b4 <_ZN16DeviceInfoLedgerD1Ev+0x18>)
   b55a0:	4604      	mov	r4, r0
   b55a2:	f840 3b50 	str.w	r3, [r0], #80
   b55a6:	f7ff ffef 	bl	b5588 <_ZN8particle6LedgerD1Ev>
   b55aa:	1d20      	adds	r0, r4, #4
   b55ac:	f004 fa42 	bl	b9a34 <_ZN6StringD1Ev>
}
   b55b0:	4620      	mov	r0, r4
   b55b2:	bd10      	pop	{r4, pc}
   b55b4:	000be134 	.word	0x000be134

000b55b8 <_ZN16DeviceInfoLedgerD0Ev>:
DeviceInfoLedger::~DeviceInfoLedger() {
   b55b8:	b510      	push	{r4, lr}
   b55ba:	4604      	mov	r4, r0
}
   b55bc:	f7ff ffee 	bl	b559c <_ZN16DeviceInfoLedgerD1Ev>
   b55c0:	4620      	mov	r0, r4
   b55c2:	2158      	movs	r1, #88	; 0x58
   b55c4:	f7ff fc25 	bl	b4e12 <_ZdlPvj>
   b55c8:	4620      	mov	r0, r4
   b55ca:	bd10      	pop	{r4, pc}

000b55cc <_ZN16DeviceInfoLedgerC1Ev>:
DeviceInfoLedger::DeviceInfoLedger() {
   b55cc:	b510      	push	{r4, lr}
   b55ce:	4b0e      	ldr	r3, [pc, #56]	; (b5608 <_ZN16DeviceInfoLedgerC1Ev+0x3c>)
   b55d0:	490e      	ldr	r1, [pc, #56]	; (b560c <_ZN16DeviceInfoLedgerC1Ev+0x40>)
   b55d2:	4604      	mov	r4, r0
   b55d4:	f840 3b04 	str.w	r3, [r0], #4
   b55d8:	f004 fa77 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
   b55dc:	2300      	movs	r3, #0
   b55de:	2201      	movs	r2, #1
   b55e0:	e9c4 3305 	strd	r3, r3, [r4, #20]
   b55e4:	e9c4 3307 	strd	r3, r3, [r4, #28]
   b55e8:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
   b55ec:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
            instance_(instance) {
   b55f0:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
   b55f4:	6263      	str	r3, [r4, #36]	; 0x24
   b55f6:	62e2      	str	r2, [r4, #44]	; 0x2c
   b55f8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   b55fc:	6363      	str	r3, [r4, #52]	; 0x34
   b55fe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b5602:	6563      	str	r3, [r4, #84]	; 0x54
}
   b5604:	4620      	mov	r0, r4
   b5606:	bd10      	pop	{r4, pc}
   b5608:	000be134 	.word	0x000be134
   b560c:	000bdc3c 	.word	0x000bdc3c

000b5610 <_ZN16DeviceInfoLedger8instanceEv>:
DeviceInfoLedger &DeviceInfoLedger::instance() {
   b5610:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b5612:	4d06      	ldr	r5, [pc, #24]	; (b562c <_ZN16DeviceInfoLedger8instanceEv+0x1c>)
   b5614:	682b      	ldr	r3, [r5, #0]
   b5616:	b93b      	cbnz	r3, b5628 <_ZN16DeviceInfoLedger8instanceEv+0x18>
        _instance = new DeviceInfoLedger();
   b5618:	2058      	movs	r0, #88	; 0x58
   b561a:	f7ff fbf4 	bl	b4e06 <_Znwj>
   b561e:	4604      	mov	r4, r0
   b5620:	b108      	cbz	r0, b5626 <_ZN16DeviceInfoLedger8instanceEv+0x16>
   b5622:	f7ff ffd3 	bl	b55cc <_ZN16DeviceInfoLedgerC1Ev>
   b5626:	602c      	str	r4, [r5, #0]
}
   b5628:	6828      	ldr	r0, [r5, #0]
   b562a:	bd38      	pop	{r3, r4, r5, pc}
   b562c:	2003e668 	.word	0x2003e668

000b5630 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc>:
LogLevel DeviceInfoLedger::stringToLogLevel(const char *levelStr) const {
   b5630:	b510      	push	{r4, lr}
   b5632:	460c      	mov	r4, r1
    if (strstr(levelStr, "ALL") != 0) {
   b5634:	4620      	mov	r0, r4
   b5636:	4914      	ldr	r1, [pc, #80]	; (b5688 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x58>)
   b5638:	f006 fb0b 	bl	bbc52 <strstr>
   b563c:	b9e0      	cbnz	r0, b5678 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x48>
    if (strstr(levelStr, "TRACE") != 0) {
   b563e:	4913      	ldr	r1, [pc, #76]	; (b568c <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x5c>)
   b5640:	4620      	mov	r0, r4
   b5642:	f006 fb06 	bl	bbc52 <strstr>
   b5646:	b9b8      	cbnz	r0, b5678 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x48>
    if (strstr(levelStr, "INFO") != 0) {
   b5648:	4911      	ldr	r1, [pc, #68]	; (b5690 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x60>)
   b564a:	4620      	mov	r0, r4
   b564c:	f006 fb01 	bl	bbc52 <strstr>
   b5650:	b9a0      	cbnz	r0, b567c <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x4c>
    if (strstr(levelStr, "WARN") != 0) {
   b5652:	4910      	ldr	r1, [pc, #64]	; (b5694 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x64>)
   b5654:	4620      	mov	r0, r4
   b5656:	f006 fafc 	bl	bbc52 <strstr>
   b565a:	b988      	cbnz	r0, b5680 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x50>
    if (strstr(levelStr, "ERROR") != 0) {
   b565c:	490e      	ldr	r1, [pc, #56]	; (b5698 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x68>)
   b565e:	4620      	mov	r0, r4
   b5660:	f006 faf7 	bl	bbc52 <strstr>
   b5664:	b970      	cbnz	r0, b5684 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x54>
    if (strstr(levelStr, "PANIC") != 0) {
   b5666:	490d      	ldr	r1, [pc, #52]	; (b569c <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x6c>)
   b5668:	4620      	mov	r0, r4
   b566a:	f006 faf2 	bl	bbc52 <strstr>
        level = LOG_LEVEL_NONE;
   b566e:	2800      	cmp	r0, #0
   b5670:	bf14      	ite	ne
   b5672:	203c      	movne	r0, #60	; 0x3c
   b5674:	2046      	moveq	r0, #70	; 0x46
}
   b5676:	bd10      	pop	{r4, pc}
        level = LOG_LEVEL_ALL;
   b5678:	2001      	movs	r0, #1
   b567a:	e7fc      	b.n	b5676 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x46>
        level = LOG_LEVEL_INFO;
   b567c:	201e      	movs	r0, #30
   b567e:	e7fa      	b.n	b5676 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x46>
        level = LOG_LEVEL_WARN;
   b5680:	2028      	movs	r0, #40	; 0x28
   b5682:	e7f8      	b.n	b5676 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x46>
        level = LOG_LEVEL_ERROR;
   b5684:	2032      	movs	r0, #50	; 0x32
   b5686:	e7f6      	b.n	b5676 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x46>
   b5688:	000bdc69 	.word	0x000bdc69
   b568c:	000bdc4d 	.word	0x000bdc4d
   b5690:	000bdc58 	.word	0x000bdc58
   b5694:	000bdc48 	.word	0x000bdc48
   b5698:	000bdc5d 	.word	0x000bdc5d
   b569c:	000bdc63 	.word	0x000bdc63

000b56a0 <_ZN16DeviceInfoLedger5writeEh>:
void DeviceInfoLedger::write(uint8_t c) {
   b56a0:	b530      	push	{r4, r5, lr}
    if (!setupComplete) {
   b56a2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b56a6:	b39b      	cbz	r3, b5710 <_ZN16DeviceInfoLedger5writeEh+0x70>
    if (c == '\r') {
   b56a8:	290d      	cmp	r1, #13
   b56aa:	d031      	beq.n	b5710 <_ZN16DeviceInfoLedger5writeEh+0x70>
    if (retainedBuffer) {
   b56ac:	6943      	ldr	r3, [r0, #20]
   b56ae:	b1a3      	cbz	r3, b56da <_ZN16DeviceInfoLedger5writeEh+0x3a>
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_add(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }
   b56b0:	e9d0 340f 	ldrd	r3, r4, [r0, #60]	; 0x3c
   b56b4:	f3bf 8f5b 	dmb	ish
   b56b8:	3308      	adds	r3, #8
   b56ba:	e853 2f00 	ldrex	r2, [r3]
   b56be:	1c55      	adds	r5, r2, #1
   b56c0:	e843 5c00 	strex	ip, r5, [r3]
   b56c4:	f1bc 0f00 	cmp.w	ip, #0
   b56c8:	d1f7      	bne.n	b56ba <_ZN16DeviceInfoLedger5writeEh+0x1a>
   b56ca:	f3bf 8f5b 	dmb	ish
        retainedData[retainedHdr->offset++ % retainedDataSize] = c;
   b56ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
   b56d0:	fbb2 f5f3 	udiv	r5, r2, r3
   b56d4:	fb03 2215 	mls	r2, r3, r5, r2
   b56d8:	54a1      	strb	r1, [r4, r2]
    if (writeToConnectionLog && connectionLogSize && connectionLogBuffer) {
   b56da:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b56de:	b1bb      	cbz	r3, b5710 <_ZN16DeviceInfoLedger5writeEh+0x70>
   b56e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b56e2:	b1ab      	cbz	r3, b5710 <_ZN16DeviceInfoLedger5writeEh+0x70>
   b56e4:	6a04      	ldr	r4, [r0, #32]
   b56e6:	b19c      	cbz	r4, b5710 <_ZN16DeviceInfoLedger5writeEh+0x70>
   b56e8:	f3bf 8f5b 	dmb	ish
   b56ec:	f100 0228 	add.w	r2, r0, #40	; 0x28
   b56f0:	e852 3f00 	ldrex	r3, [r2]
   b56f4:	1c5d      	adds	r5, r3, #1
   b56f6:	e842 5c00 	strex	ip, r5, [r2]
   b56fa:	f1bc 0f00 	cmp.w	ip, #0
   b56fe:	d1f7      	bne.n	b56f0 <_ZN16DeviceInfoLedger5writeEh+0x50>
   b5700:	f3bf 8f5b 	dmb	ish
        connectionLogBuffer[connectionLogOffset++ % connectionLogSize] = c;
   b5704:	6a42      	ldr	r2, [r0, #36]	; 0x24
   b5706:	fbb3 f0f2 	udiv	r0, r3, r2
   b570a:	fb02 3310 	mls	r3, r2, r0, r3
   b570e:	54e1      	strb	r1, [r4, r3]
}
   b5710:	bd30      	pop	{r4, r5, pc}

000b5712 <_ZN26DeviceInfoLedgerLogHandler5writeEh>:

size_t DeviceInfoLedgerLogHandler::write(uint8_t c) {
   b5712:	b507      	push	{r0, r1, r2, lr}
   b5714:	9101      	str	r1, [sp, #4]
    DeviceInfoLedger::instance().write(c);
   b5716:	f7ff ff7b 	bl	b5610 <_ZN16DeviceInfoLedger8instanceEv>
   b571a:	9901      	ldr	r1, [sp, #4]
   b571c:	f7ff ffc0 	bl	b56a0 <_ZN16DeviceInfoLedger5writeEh>
    return 1;
}
   b5720:	2001      	movs	r0, #1
   b5722:	b003      	add	sp, #12
   b5724:	f85d fb04 	ldr.w	pc, [sp], #4

000b5728 <_ZThn36_N26DeviceInfoLedgerLogHandler5writeEh>:
    /**
     * @brief Virtual override in class Print for the StreamLogHandler to write data to the log
     * 
     * Calls write() in the DeviceInfoLedger singleton instance
     */
    virtual size_t write(uint8_t);
   b5728:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
   b572c:	f7ff bff1 	b.w	b5712 <_ZN26DeviceInfoLedgerLogHandler5writeEh>

000b5730 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5730:	b570      	push	{r4, r5, r6, lr}
   b5732:	4604      	mov	r4, r0
        capacity_(0) {
   b5734:	2000      	movs	r0, #0
   b5736:	e9c4 0000 	strd	r0, r0, [r4]
   b573a:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b573c:	684e      	ldr	r6, [r1, #4]
   b573e:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5740:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5742:	dd11      	ble.n	b5768 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x38>
    return ::realloc(ptr, size);
   b5744:	4631      	mov	r1, r6
   b5746:	f002 f81b 	bl	b7780 <realloc>
            if (!d) {
   b574a:	b168      	cbz	r0, b5768 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x38>
        data_ = d;
   b574c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b574e:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5750:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5754:	441a      	add	r2, r3
        for (; it != end; ++it, ++dest) {
   b5756:	429a      	cmp	r2, r3
   b5758:	d004      	beq.n	b5764 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x34>
            new(dest) T(*it);
   b575a:	f813 1b01 	ldrb.w	r1, [r3], #1
   b575e:	f800 1b01 	strb.w	r1, [r0], #1
        for (; it != end; ++it, ++dest) {
   b5762:	e7f8      	b.n	b5756 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x26>
        size_ = vector.size_;
   b5764:	686b      	ldr	r3, [r5, #4]
   b5766:	6063      	str	r3, [r4, #4]
}
   b5768:	4620      	mov	r0, r4
   b576a:	bd70      	pop	{r4, r5, r6, pc}

000b576c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESU_SY_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b576c:	b508      	push	{r3, lr}
namespace particle {

/**
 * A dynamically allocated buffer.
 */
class Buffer {
   b576e:	6800      	ldr	r0, [r0, #0]
   b5770:	f7ff ffde 	bl	b5730 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
      }
   b5774:	bd08      	pop	{r3, pc}

000b5776 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   b5776:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5778:	2300      	movs	r3, #0
   b577a:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b577c:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b577e:	4604      	mov	r4, r0
   b5780:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   b5782:	b12b      	cbz	r3, b5790 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5784:	2202      	movs	r2, #2
   b5786:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5788:	68eb      	ldr	r3, [r5, #12]
   b578a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b578c:	68ab      	ldr	r3, [r5, #8]
   b578e:	60a3      	str	r3, [r4, #8]
	}
    }
   b5790:	4620      	mov	r0, r4
   b5792:	bd38      	pop	{r3, r4, r5, pc}

000b5794 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>:
        capacity_(0) {
   b5794:	2200      	movs	r2, #0
   b5796:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b579a:	b510      	push	{r4, lr}
        capacity_(0) {
   b579c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b579e:	680c      	ldr	r4, [r1, #0]
   b57a0:	6004      	str	r4, [r0, #0]
   b57a2:	684c      	ldr	r4, [r1, #4]
   b57a4:	6044      	str	r4, [r0, #4]
   b57a6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b57a8:	600a      	str	r2, [r1, #0]
   b57aa:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b57ac:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b57ae:	608a      	str	r2, [r1, #8]
}
   b57b0:	bd10      	pop	{r4, pc}

000b57b2 <_ZN8particle6BufferaSEOS0_.isra.0>:
   b57b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b57b4:	4604      	mov	r4, r0
   b57b6:	a801      	add	r0, sp, #4
   b57b8:	f7ff ffec 	bl	b5794 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
   b57bc:	9b01      	ldr	r3, [sp, #4]
   b57be:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b57c0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b57c2:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b57c4:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b57c6:	6062      	str	r2, [r4, #4]
   b57c8:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b57ca:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b57cc:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b57ce:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b57d0:	9001      	str	r0, [sp, #4]
   b57d2:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b57d4:	f001 ffcc 	bl	b7770 <free>
   b57d8:	b004      	add	sp, #16
   b57da:	bd10      	pop	{r4, pc}

000b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>:
        capacity_(0) {
   b57dc:	2200      	movs	r2, #0
   b57de:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b57e2:	b510      	push	{r4, lr}
        capacity_(0) {
   b57e4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b57e6:	680c      	ldr	r4, [r1, #0]
   b57e8:	6004      	str	r4, [r0, #0]
   b57ea:	684c      	ldr	r4, [r1, #4]
   b57ec:	6044      	str	r4, [r0, #4]
   b57ee:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b57f0:	600a      	str	r2, [r1, #0]
   b57f2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b57f4:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b57f6:	608a      	str	r2, [r1, #8]
}
   b57f8:	bd10      	pop	{r4, pc}

000b57fa <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>:
        capacity_(0) {
   b57fa:	2200      	movs	r2, #0
   b57fc:	e9c0 2200 	strd	r2, r2, [r0]
    /**
     * Move constructor.
     *
     * @param map Map to move from.
     */
    Map(Map&& map) :
   b5800:	b510      	push	{r4, lr}
   b5802:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5804:	680c      	ldr	r4, [r1, #0]
   b5806:	6004      	str	r4, [r0, #0]
   b5808:	684c      	ldr	r4, [r1, #4]
   b580a:	6044      	str	r4, [r0, #4]
   b580c:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b580e:	600a      	str	r2, [r1, #0]
   b5810:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5812:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5814:	608a      	str	r2, [r1, #8]
            Map() {
        swap(*this, map);
    }
   b5816:	bd10      	pop	{r4, pc}

000b5818 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>:
      _Copy_ctor_base(const _Copy_ctor_base& __rhs)
   b5818:	b513      	push	{r0, r1, r4, lr}
      : _M_index(static_cast<__index_type>(variant_npos))
   b581a:	23ff      	movs	r3, #255	; 0xff
   b581c:	7403      	strb	r3, [r0, #16]
      __lhs._M_index = __rhs._M_index;
   b581e:	7c0b      	ldrb	r3, [r1, #16]
   b5820:	7403      	strb	r3, [r0, #16]
	  return make_signed_t<__index_type>(this->_M_index);
   b5822:	b25b      	sxtb	r3, r3
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
   b5824:	4a05      	ldr	r2, [pc, #20]	; (b583c <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_+0x24>)
      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
   b5826:	9001      	str	r0, [sp, #4]
      auto __func_ptr = __vtable._M_access(__variants.index()...);
   b5828:	3301      	adds	r3, #1
      _Copy_ctor_base(const _Copy_ctor_base& __rhs)
   b582a:	4604      	mov	r4, r0
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
   b582c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   b5830:	a801      	add	r0, sp, #4
   b5832:	4798      	blx	r3
      }
   b5834:	4620      	mov	r0, r4
   b5836:	b002      	add	sp, #8
   b5838:	bd10      	pop	{r4, pc}
   b583a:	bf00      	nop
   b583c:	000bde8c 	.word	0x000bde8c

000b5840 <_ZNSt4pairIK6StringN8particle7VariantEEC1ERKS4_>:
	explicit constexpr pair(const pair<_U1, _U2>& __p)
	: first(__p.first), second(__p.second) { }
#endif

#if __cplusplus >= 201103L
      constexpr pair(const pair&) = default;	///< Copy constructor
   b5840:	b538      	push	{r3, r4, r5, lr}
   b5842:	4604      	mov	r4, r0
   b5844:	460d      	mov	r5, r1
   b5846:	f004 f998 	bl	b9b7a <_ZN6StringC1ERKS_>
      _Move_ctor_base(const _Move_ctor_base&) = default;
   b584a:	f105 0110 	add.w	r1, r5, #16
   b584e:	f104 0010 	add.w	r0, r4, #16
   b5852:	f7ff ffe1 	bl	b5818 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
   b5856:	4620      	mov	r0, r4
   b5858:	bd38      	pop	{r3, r4, r5, pc}
	...

000b585c <_ZNK8particle7Variant2toI6StringEET_v>:
    T to() const {
   b585c:	b513      	push	{r0, r1, r4, lr}
        return std::visit(ConvertToVisitor<T>(), v_);
   b585e:	2300      	movs	r3, #0
   b5860:	f88d 3004 	strb.w	r3, [sp, #4]
	return this->_M_index != __index_type(variant_npos);
   b5864:	7c0b      	ldrb	r3, [r1, #16]

  template<typename _Visitor, typename... _Variants>
    constexpr decltype(auto)
    visit(_Visitor&& __visitor, _Variants&&... __variants)
    {
      if ((__variants.valueless_by_exception() || ...))
   b5866:	2bff      	cmp	r3, #255	; 0xff
    T to() const {
   b5868:	4604      	mov	r4, r0
   b586a:	d101      	bne.n	b5870 <_ZNK8particle7Variant2toI6StringEET_v+0x14>
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
   b586c:	f001 ffa0 	bl	b77b0 <abort>
			   std::forward<_Variants>(__variants)...);
   b5870:	4a04      	ldr	r2, [pc, #16]	; (b5884 <_ZNK8particle7Variant2toI6StringEET_v+0x28>)
	  return make_signed_t<__index_type>(this->_M_index);
   b5872:	b25b      	sxtb	r3, r3
			   std::forward<_Variants>(__variants)...);
   b5874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   b5878:	460a      	mov	r2, r1
   b587a:	a901      	add	r1, sp, #4
   b587c:	4798      	blx	r3
    }
   b587e:	4620      	mov	r0, r4
   b5880:	b002      	add	sp, #8
   b5882:	bd10      	pop	{r4, pc}
   b5884:	000bdf14 	.word	0x000bdf14

000b5888 <_ZNK8particle7Variant2toINS_3MapI6StringS0_St4lessIS3_EEEEET_v>:
    T to() const {
   b5888:	b513      	push	{r0, r1, r4, lr}
        return std::visit(ConvertToVisitor<T>(), v_);
   b588a:	2300      	movs	r3, #0
   b588c:	f88d 3004 	strb.w	r3, [sp, #4]
	return this->_M_index != __index_type(variant_npos);
   b5890:	7c0b      	ldrb	r3, [r1, #16]
      if ((__variants.valueless_by_exception() || ...))
   b5892:	2bff      	cmp	r3, #255	; 0xff
    T to() const {
   b5894:	4604      	mov	r4, r0
   b5896:	d101      	bne.n	b589c <_ZNK8particle7Variant2toINS_3MapI6StringS0_St4lessIS3_EEEEET_v+0x14>
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
   b5898:	f001 ff8a 	bl	b77b0 <abort>
			   std::forward<_Variants>(__variants)...);
   b589c:	4a04      	ldr	r2, [pc, #16]	; (b58b0 <_ZNK8particle7Variant2toINS_3MapI6StringS0_St4lessIS3_EEEEET_v+0x28>)
	  return make_signed_t<__index_type>(this->_M_index);
   b589e:	b25b      	sxtb	r3, r3
			   std::forward<_Variants>(__variants)...);
   b58a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   b58a4:	460a      	mov	r2, r1
   b58a6:	a901      	add	r1, sp, #4
   b58a8:	4798      	blx	r3
    }
   b58aa:	4620      	mov	r0, r4
   b58ac:	b002      	add	sp, #8
   b58ae:	bd10      	pop	{r4, pc}
   b58b0:	000bdee8 	.word	0x000bdee8

000b58b4 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_>:
    __to_chars_10(char* __first, char* __last, _Tp __val) noexcept
   b58b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b58b6:	461d      	mov	r5, r3
    __to_chars_len(_Tp __value, int __base = 10) noexcept
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
   b58b8:	2401      	movs	r4, #1
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
	  if (__value < __b2) return __n + 1;
	  if (__value < __b3) return __n + 2;
	  if (__value < __b4) return __n + 3;
   b58ba:	f242 770f 	movw	r7, #9999	; 0x270f
	  __value /= __b4;
   b58be:	f242 7610 	movw	r6, #10000	; 0x2710
	  if (__value < (unsigned)__base) return __n;
   b58c2:	2d09      	cmp	r5, #9
   b58c4:	d902      	bls.n	b58cc <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x18>
	  if (__value < __b2) return __n + 1;
   b58c6:	2d63      	cmp	r5, #99	; 0x63
   b58c8:	d807      	bhi.n	b58da <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x26>
   b58ca:	3401      	adds	r4, #1
      if (__builtin_expect((__last - __first) < __len, 0))
   b58cc:	1a55      	subs	r5, r2, r1
   b58ce:	42a5      	cmp	r5, r4
   b58d0:	d210      	bcs.n	b58f4 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x40>
	  __res.ptr = __last;
   b58d2:	6002      	str	r2, [r0, #0]
	  __res.ec = errc::value_too_large;
   b58d4:	238b      	movs	r3, #139	; 0x8b
      __res.ec = {};
   b58d6:	6043      	str	r3, [r0, #4]
    }
   b58d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  if (__value < __b3) return __n + 2;
   b58da:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   b58de:	d201      	bcs.n	b58e4 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x30>
   b58e0:	3402      	adds	r4, #2
   b58e2:	e7f3      	b.n	b58cc <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x18>
	  if (__value < __b4) return __n + 3;
   b58e4:	42bd      	cmp	r5, r7
   b58e6:	d801      	bhi.n	b58ec <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x38>
   b58e8:	3403      	adds	r4, #3
   b58ea:	e7ef      	b.n	b58cc <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x18>
	  __n += 4;
   b58ec:	3404      	adds	r4, #4
	  __value /= __b4;
   b58ee:	fbb5 f5f6 	udiv	r5, r5, r6
	  if (__value < (unsigned)__base) return __n;
   b58f2:	e7e6      	b.n	b58c2 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0xe>
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
   b58f4:	440c      	add	r4, r1
      unsigned __pos = __len - 1;
      while (__val >= 100)
	{
	  auto const __num = (__val % 100) * 2;
	  __val /= 100;
	  __first[__pos] = __digits[__num + 1];
   b58f6:	4d12      	ldr	r5, [pc, #72]	; (b5940 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x8c>)
   b58f8:	4622      	mov	r2, r4
	  auto const __num = (__val % 100) * 2;
   b58fa:	f04f 0c64 	mov.w	ip, #100	; 0x64
      while (__val >= 100)
   b58fe:	2b63      	cmp	r3, #99	; 0x63
   b5900:	d90e      	bls.n	b5920 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x6c>
	  auto const __num = (__val % 100) * 2;
   b5902:	fbb3 f7fc 	udiv	r7, r3, ip
   b5906:	fb0c 3617 	mls	r6, ip, r7, r3
	  __val /= 100;
   b590a:	463b      	mov	r3, r7
	  __first[__pos] = __digits[__num + 1];
   b590c:	eb05 0746 	add.w	r7, r5, r6, lsl #1
	  __first[__pos - 1] = __digits[__num];
   b5910:	f815 6016 	ldrb.w	r6, [r5, r6, lsl #1]
	  __first[__pos] = __digits[__num + 1];
   b5914:	787f      	ldrb	r7, [r7, #1]
   b5916:	f802 7c01 	strb.w	r7, [r2, #-1]
	  __first[__pos - 1] = __digits[__num];
   b591a:	f802 6d02 	strb.w	r6, [r2, #-2]!
      while (__val >= 100)
   b591e:	e7ee      	b.n	b58fe <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x4a>
	  __pos -= 2;
	}
      if (__val >= 10)
   b5920:	2b09      	cmp	r3, #9
	{
	  auto const __num = __val * 2;
	  __first[1] = __digits[__num + 1];
   b5922:	bf88      	it	hi
   b5924:	4a06      	ldrhi	r2, [pc, #24]	; (b5940 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x8c>)
      __res.ptr = __first + __len;
   b5926:	6004      	str	r4, [r0, #0]
   b5928:	bf89      	itett	hi
   b592a:	eb02 0543 	addhi.w	r5, r2, r3, lsl #1
	  __first[0] = __digits[__num];
	}
      else
	__first[0] = '0' + __val;
   b592e:	3330      	addls	r3, #48	; 0x30
	  __first[0] = __digits[__num];
   b5930:	f812 3013 	ldrbhi.w	r3, [r2, r3, lsl #1]
	  __first[1] = __digits[__num + 1];
   b5934:	786d      	ldrbhi	r5, [r5, #1]
	__first[0] = '0' + __val;
   b5936:	700b      	strb	r3, [r1, #0]
	  __first[1] = __digits[__num + 1];
   b5938:	bf88      	it	hi
   b593a:	704d      	strbhi	r5, [r1, #1]
      __res.ec = {};
   b593c:	2300      	movs	r3, #0
   b593e:	e7ca      	b.n	b58d6 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x22>
   b5940:	000be061 	.word	0x000be061

000b5944 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5944:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5946:	6813      	ldr	r3, [r2, #0]
   b5948:	b08b      	sub	sp, #44	; 0x2c
   b594a:	4604      	mov	r4, r0
   b594c:	460e      	mov	r6, r1
_GLIBCXX_TO_CHARS(unsigned int)
   b594e:	ad02      	add	r5, sp, #8
      if (__value == 0)
   b5950:	b973      	cbnz	r3, b5970 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESA_SO_+0x2c>
	  *__first = '0';
   b5952:	2330      	movs	r3, #48	; 0x30
   b5954:	f88d 3008 	strb.w	r3, [sp, #8]
	  return { __first + 1, errc{} };
   b5958:	f10d 0709 	add.w	r7, sp, #9
            ok = true;
   b595c:	2301      	movs	r3, #1
   b595e:	7033      	strb	r3, [r6, #0]
            return String(buf, r.ptr - buf);
   b5960:	1b7a      	subs	r2, r7, r5
   b5962:	4629      	mov	r1, r5
   b5964:	4620      	mov	r0, r4
   b5966:	f004 f8c4 	bl	b9af2 <_ZN6StringC1EPKcj>
      }
   b596a:	4620      	mov	r0, r4
   b596c:	b00b      	add	sp, #44	; 0x2c
   b596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
   b5970:	aa0a      	add	r2, sp, #40	; 0x28
   b5972:	4629      	mov	r1, r5
   b5974:	4668      	mov	r0, sp
   b5976:	f7ff ff9d 	bl	b58b4 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_>
            SPARK_ASSERT(r.ec == std::errc());
   b597a:	e9dd 7300 	ldrd	r7, r3, [sp]
   b597e:	2b00      	cmp	r3, #0
   b5980:	d0ec      	beq.n	b595c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESA_SO_+0x18>
   b5982:	4a03      	ldr	r2, [pc, #12]	; (b5990 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESA_SO_+0x4c>)
   b5984:	4903      	ldr	r1, [pc, #12]	; (b5994 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESA_SO_+0x50>)
   b5986:	200a      	movs	r0, #10
   b5988:	f001 fd82 	bl	b7490 <panic_>
   b598c:	e7e6      	b.n	b595c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESA_SO_+0x18>
   b598e:	bf00      	nop
   b5990:	000b7311 	.word	0x000b7311
   b5994:	000bdc17 	.word	0x000bdc17

000b5998 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5998:	b5f0      	push	{r4, r5, r6, r7, lr}
   b599a:	6813      	ldr	r3, [r2, #0]
   b599c:	b08b      	sub	sp, #44	; 0x2c
      if (__value == 0)
   b599e:	2b00      	cmp	r3, #0
   b59a0:	4604      	mov	r4, r0
   b59a2:	460e      	mov	r6, r1
   b59a4:	ad02      	add	r5, sp, #8
   b59a6:	d10e      	bne.n	b59c6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESA_SO_+0x2e>
	  *__first = '0';
   b59a8:	2330      	movs	r3, #48	; 0x30
   b59aa:	f88d 3008 	strb.w	r3, [sp, #8]
	  return { __first + 1, errc{} };
   b59ae:	f10d 0709 	add.w	r7, sp, #9
            ok = true;
   b59b2:	2301      	movs	r3, #1
   b59b4:	7033      	strb	r3, [r6, #0]
            return String(buf, r.ptr - buf);
   b59b6:	1b7a      	subs	r2, r7, r5
   b59b8:	4629      	mov	r1, r5
   b59ba:	4620      	mov	r0, r4
   b59bc:	f004 f899 	bl	b9af2 <_ZN6StringC1EPKcj>
      }
   b59c0:	4620      	mov	r0, r4
   b59c2:	b00b      	add	sp, #44	; 0x2c
   b59c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	      *__first++ = '-';
   b59c6:	bfbf      	itttt	lt
   b59c8:	222d      	movlt	r2, #45	; 0x2d
   b59ca:	f88d 2008 	strblt.w	r2, [sp, #8]
	    __unsigned_val = _Up(~__value) + _Up(1);
   b59ce:	425b      	neglt	r3, r3
   b59d0:	f10d 0109 	addlt.w	r1, sp, #9
	if (__value < 0)
   b59d4:	bfa8      	it	ge
   b59d6:	4629      	movge	r1, r5
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
   b59d8:	aa0a      	add	r2, sp, #40	; 0x28
   b59da:	4668      	mov	r0, sp
   b59dc:	f7ff ff6a 	bl	b58b4 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_>
            SPARK_ASSERT(r.ec == std::errc());
   b59e0:	e9dd 7300 	ldrd	r7, r3, [sp]
   b59e4:	2b00      	cmp	r3, #0
   b59e6:	d0e4      	beq.n	b59b2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESA_SO_+0x1a>
   b59e8:	4a02      	ldr	r2, [pc, #8]	; (b59f4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESA_SO_+0x5c>)
   b59ea:	4903      	ldr	r1, [pc, #12]	; (b59f8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESA_SO_+0x60>)
   b59ec:	200a      	movs	r0, #10
   b59ee:	f001 fd4f 	bl	b7490 <panic_>
   b59f2:	e7de      	b.n	b59b2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESA_SO_+0x1a>
   b59f4:	000b7311 	.word	0x000b7311
   b59f8:	000bdc17 	.word	0x000bdc17

000b59fc <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_>:
    __to_chars_10(char* __first, char* __last, _Tp __val) noexcept
   b59fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a00:	e9dd 460a 	ldrd	r4, r6, [sp, #40]	; 0x28
   b5a04:	4607      	mov	r7, r0
   b5a06:	4688      	mov	r8, r1
   b5a08:	4691      	mov	r9, r2
   b5a0a:	4620      	mov	r0, r4
   b5a0c:	4631      	mov	r1, r6
      unsigned __n = 1;
   b5a0e:	2501      	movs	r5, #1
	  if (__value < __b4) return __n + 3;
   b5a10:	f242 7a10 	movw	sl, #10000	; 0x2710
	  if (__value < (unsigned)__base) return __n;
   b5a14:	280a      	cmp	r0, #10
   b5a16:	f171 0300 	sbcs.w	r3, r1, #0
   b5a1a:	d304      	bcc.n	b5a26 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x2a>
	  if (__value < __b2) return __n + 1;
   b5a1c:	2864      	cmp	r0, #100	; 0x64
   b5a1e:	f171 0300 	sbcs.w	r3, r1, #0
   b5a22:	d20b      	bcs.n	b5a3c <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x40>
   b5a24:	3501      	adds	r5, #1
      if (__builtin_expect((__last - __first) < __len, 0))
   b5a26:	eba9 0308 	sub.w	r3, r9, r8
   b5a2a:	42ab      	cmp	r3, r5
   b5a2c:	d21a      	bcs.n	b5a64 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x68>
	  __res.ptr = __last;
   b5a2e:	f8c7 9000 	str.w	r9, [r7]
	  __res.ec = errc::value_too_large;
   b5a32:	238b      	movs	r3, #139	; 0x8b
      __res.ec = {};
   b5a34:	607b      	str	r3, [r7, #4]
    }
   b5a36:	4638      	mov	r0, r7
   b5a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  if (__value < __b3) return __n + 2;
   b5a3c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b5a40:	f171 0300 	sbcs.w	r3, r1, #0
   b5a44:	d201      	bcs.n	b5a4a <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x4e>
   b5a46:	3502      	adds	r5, #2
   b5a48:	e7ed      	b.n	b5a26 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x2a>
	  if (__value < __b4) return __n + 3;
   b5a4a:	4550      	cmp	r0, sl
   b5a4c:	f171 0300 	sbcs.w	r3, r1, #0
   b5a50:	d201      	bcs.n	b5a56 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x5a>
   b5a52:	3503      	adds	r5, #3
   b5a54:	e7e7      	b.n	b5a26 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x2a>
	  __value /= __b4;
   b5a56:	f242 7210 	movw	r2, #10000	; 0x2710
   b5a5a:	2300      	movs	r3, #0
   b5a5c:	f7fe ffce 	bl	b49fc <__aeabi_uldivmod>
	  __n += 4;
   b5a60:	3504      	adds	r5, #4
	  if (__value < (unsigned)__base) return __n;
   b5a62:	e7d7      	b.n	b5a14 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x18>
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
   b5a64:	4445      	add	r5, r8
	  __first[__pos] = __digits[__num + 1];
   b5a66:	f8df b06c 	ldr.w	fp, [pc, #108]	; b5ad4 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0xd8>
   b5a6a:	46aa      	mov	sl, r5
      while (__val >= 100)
   b5a6c:	2c64      	cmp	r4, #100	; 0x64
   b5a6e:	f176 0300 	sbcs.w	r3, r6, #0
   b5a72:	d31a      	bcc.n	b5aaa <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0xae>
	  auto const __num = (__val % 100) * 2;
   b5a74:	4620      	mov	r0, r4
   b5a76:	4631      	mov	r1, r6
   b5a78:	2264      	movs	r2, #100	; 0x64
   b5a7a:	2300      	movs	r3, #0
   b5a7c:	f7fe ffbe 	bl	b49fc <__aeabi_uldivmod>
	  __val /= 100;
   b5a80:	2300      	movs	r3, #0
	  auto const __num = (__val % 100) * 2;
   b5a82:	ea4f 0942 	mov.w	r9, r2, lsl #1
	  __val /= 100;
   b5a86:	4620      	mov	r0, r4
   b5a88:	4631      	mov	r1, r6
   b5a8a:	2264      	movs	r2, #100	; 0x64
   b5a8c:	f7fe ffb6 	bl	b49fc <__aeabi_uldivmod>
	  __first[__pos] = __digits[__num + 1];
   b5a90:	f119 0301 	adds.w	r3, r9, #1
	  __val /= 100;
   b5a94:	4604      	mov	r4, r0
	  __first[__pos] = __digits[__num + 1];
   b5a96:	f81b 3003 	ldrb.w	r3, [fp, r3]
   b5a9a:	f80a 3c01 	strb.w	r3, [sl, #-1]
	  __first[__pos - 1] = __digits[__num];
   b5a9e:	f81b 3009 	ldrb.w	r3, [fp, r9]
   b5aa2:	f80a 3d02 	strb.w	r3, [sl, #-2]!
	  __val /= 100;
   b5aa6:	460e      	mov	r6, r1
      while (__val >= 100)
   b5aa8:	e7e0      	b.n	b5a6c <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x70>
      if (__val >= 10)
   b5aaa:	2c0a      	cmp	r4, #10
   b5aac:	f176 0300 	sbcs.w	r3, r6, #0
   b5ab0:	d30b      	bcc.n	b5aca <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0xce>
	  auto const __num = __val * 2;
   b5ab2:	1924      	adds	r4, r4, r4
	  __first[1] = __digits[__num + 1];
   b5ab4:	4b07      	ldr	r3, [pc, #28]	; (b5ad4 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0xd8>)
   b5ab6:	1c62      	adds	r2, r4, #1
   b5ab8:	5c9a      	ldrb	r2, [r3, r2]
	  __first[0] = __digits[__num];
   b5aba:	5d1b      	ldrb	r3, [r3, r4]
	  __first[1] = __digits[__num + 1];
   b5abc:	f888 2001 	strb.w	r2, [r8, #1]
	  __first[0] = __digits[__num];
   b5ac0:	f888 3000 	strb.w	r3, [r8]
      __res.ptr = __first + __len;
   b5ac4:	603d      	str	r5, [r7, #0]
      __res.ec = {};
   b5ac6:	2300      	movs	r3, #0
   b5ac8:	e7b4      	b.n	b5a34 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x38>
	__first[0] = '0' + __val;
   b5aca:	3430      	adds	r4, #48	; 0x30
   b5acc:	f888 4000 	strb.w	r4, [r8]
   b5ad0:	e7f8      	b.n	b5ac4 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0xc8>
   b5ad2:	bf00      	nop
   b5ad4:	000bdf98 	.word	0x000bdf98

000b5ad8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ada:	460e      	mov	r6, r1
    return std::to_chars(first, last, value);
   b5adc:	e9d2 1300 	ldrd	r1, r3, [r2]
   b5ae0:	b08d      	sub	sp, #52	; 0x34
      if (__value == 0)
   b5ae2:	ea51 0203 	orrs.w	r2, r1, r3
   b5ae6:	4604      	mov	r4, r0
   b5ae8:	ad04      	add	r5, sp, #16
   b5aea:	d10e      	bne.n	b5b0a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESA_SO_+0x32>
	  *__first = '0';
   b5aec:	2330      	movs	r3, #48	; 0x30
   b5aee:	f88d 3010 	strb.w	r3, [sp, #16]
	  return { __first + 1, errc{} };
   b5af2:	f10d 0711 	add.w	r7, sp, #17
            ok = true;
   b5af6:	2301      	movs	r3, #1
   b5af8:	7033      	strb	r3, [r6, #0]
            return String(buf, r.ptr - buf);
   b5afa:	1b7a      	subs	r2, r7, r5
   b5afc:	4629      	mov	r1, r5
   b5afe:	4620      	mov	r0, r4
   b5b00:	f003 fff7 	bl	b9af2 <_ZN6StringC1EPKcj>
      }
   b5b04:	4620      	mov	r0, r4
   b5b06:	b00d      	add	sp, #52	; 0x34
   b5b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
   b5b0a:	e9cd 1300 	strd	r1, r3, [sp]
   b5b0e:	aa0c      	add	r2, sp, #48	; 0x30
   b5b10:	4629      	mov	r1, r5
   b5b12:	a802      	add	r0, sp, #8
   b5b14:	f7ff ff72 	bl	b59fc <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_>
            SPARK_ASSERT(r.ec == std::errc());
   b5b18:	e9dd 7302 	ldrd	r7, r3, [sp, #8]
   b5b1c:	2b00      	cmp	r3, #0
   b5b1e:	d0ea      	beq.n	b5af6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESA_SO_+0x1e>
   b5b20:	4a02      	ldr	r2, [pc, #8]	; (b5b2c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESA_SO_+0x54>)
   b5b22:	4903      	ldr	r1, [pc, #12]	; (b5b30 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESA_SO_+0x58>)
   b5b24:	200a      	movs	r0, #10
   b5b26:	f001 fcb3 	bl	b7490 <panic_>
   b5b2a:	e7e4      	b.n	b5af6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESA_SO_+0x1e>
   b5b2c:	000b7311 	.word	0x000b7311
   b5b30:	000bdc17 	.word	0x000bdc17

000b5b34 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    return std::to_chars(first, last, value);
   b5b36:	e9d2 3200 	ldrd	r3, r2, [r2]
   b5b3a:	b08d      	sub	sp, #52	; 0x34
   b5b3c:	460d      	mov	r5, r1
      if (__value == 0)
   b5b3e:	ea53 0102 	orrs.w	r1, r3, r2
   b5b42:	4604      	mov	r4, r0
   b5b44:	ae04      	add	r6, sp, #16
   b5b46:	d10e      	bne.n	b5b66 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x32>
	  *__first = '0';
   b5b48:	2330      	movs	r3, #48	; 0x30
   b5b4a:	f88d 3010 	strb.w	r3, [sp, #16]
	  return { __first + 1, errc{} };
   b5b4e:	f10d 0711 	add.w	r7, sp, #17
            ok = true;
   b5b52:	2301      	movs	r3, #1
   b5b54:	702b      	strb	r3, [r5, #0]
            return String(buf, r.ptr - buf);
   b5b56:	1bba      	subs	r2, r7, r6
   b5b58:	4631      	mov	r1, r6
   b5b5a:	4620      	mov	r0, r4
   b5b5c:	f003 ffc9 	bl	b9af2 <_ZN6StringC1EPKcj>
      }
   b5b60:	4620      	mov	r0, r4
   b5b62:	b00d      	add	sp, #52	; 0x34
   b5b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (__value < 0)
   b5b66:	2a00      	cmp	r2, #0
   b5b68:	da17      	bge.n	b5b9a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x66>
	      *__first++ = '-';
   b5b6a:	212d      	movs	r1, #45	; 0x2d
	    __unsigned_val = _Up(~__value) + _Up(1);
   b5b6c:	425b      	negs	r3, r3
	      *__first++ = '-';
   b5b6e:	f88d 1010 	strb.w	r1, [sp, #16]
	    __unsigned_val = _Up(~__value) + _Up(1);
   b5b72:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   b5b76:	f10d 0111 	add.w	r1, sp, #17
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
   b5b7a:	e9cd 3200 	strd	r3, r2, [sp]
   b5b7e:	a802      	add	r0, sp, #8
   b5b80:	aa0c      	add	r2, sp, #48	; 0x30
   b5b82:	f7ff ff3b 	bl	b59fc <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_>
            SPARK_ASSERT(r.ec == std::errc());
   b5b86:	e9dd 7302 	ldrd	r7, r3, [sp, #8]
   b5b8a:	2b00      	cmp	r3, #0
   b5b8c:	d0e1      	beq.n	b5b52 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x1e>
   b5b8e:	4a04      	ldr	r2, [pc, #16]	; (b5ba0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x6c>)
   b5b90:	4904      	ldr	r1, [pc, #16]	; (b5ba4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x70>)
   b5b92:	200a      	movs	r0, #10
   b5b94:	f001 fc7c 	bl	b7490 <panic_>
   b5b98:	e7db      	b.n	b5b52 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x1e>
   b5b9a:	4631      	mov	r1, r6
   b5b9c:	e7ed      	b.n	b5b7a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x46>
   b5b9e:	bf00      	nop
   b5ba0:	000b7311 	.word	0x000b7311
   b5ba4:	000bdc17 	.word	0x000bdc17

000b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>:
      void _M_reset()
   b5ba8:	b513      	push	{r0, r1, r4, lr}
	return this->_M_index != __index_type(variant_npos);
   b5baa:	7c03      	ldrb	r3, [r0, #16]
	if (!_M_valid()) [[unlikely]]
   b5bac:	2bff      	cmp	r3, #255	; 0xff
      void _M_reset()
   b5bae:	4604      	mov	r4, r0
	if (!_M_valid()) [[unlikely]]
   b5bb0:	d008      	beq.n	b5bc4 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv+0x1c>
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
   b5bb2:	4a05      	ldr	r2, [pc, #20]	; (b5bc8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv+0x20>)
	  return make_signed_t<__index_type>(this->_M_index);
   b5bb4:	b25b      	sxtb	r3, r3
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
   b5bb6:	4601      	mov	r1, r0
   b5bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   b5bbc:	a801      	add	r0, sp, #4
   b5bbe:	4798      	blx	r3
	_M_index = static_cast<__index_type>(variant_npos);
   b5bc0:	23ff      	movs	r3, #255	; 0xff
   b5bc2:	7423      	strb	r3, [r4, #16]
      }
   b5bc4:	b002      	add	sp, #8
   b5bc6:	bd10      	pop	{r4, pc}
   b5bc8:	000bdebc 	.word	0x000bdebc

000b5bcc <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>:
    struct pair
   b5bcc:	b510      	push	{r4, lr}
   b5bce:	4604      	mov	r4, r0
      { _M_reset(); }
   b5bd0:	3010      	adds	r0, #16
   b5bd2:	f7ff ffe9 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b5bd6:	4620      	mov	r0, r4
   b5bd8:	f003 ff2c 	bl	b9a34 <_ZN6StringD1Ev>
   b5bdc:	4620      	mov	r0, r4
   b5bde:	bd10      	pop	{r4, pc}

000b5be0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5be0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5be2:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5be6:	2628      	movs	r6, #40	; 0x28
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5be8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5bea:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5bee:	42ae      	cmp	r6, r5
   b5bf0:	d004      	beq.n	b5bfc <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev+0x1c>
            p->~T();
   b5bf2:	4628      	mov	r0, r5
   b5bf4:	f7ff ffea 	bl	b5bcc <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
        for (; p != end; ++p) {
   b5bf8:	3528      	adds	r5, #40	; 0x28
   b5bfa:	e7f8      	b.n	b5bee <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5bfc:	6820      	ldr	r0, [r4, #0]
   b5bfe:	f001 fdb7 	bl	b7770 <free>
}
   b5c02:	4620      	mov	r0, r4
   b5c04:	bd70      	pop	{r4, r5, r6, pc}

000b5c06 <_ZN8particle10LedgerDataC1Ev>:
    using Entry = VariantMap::Entry;

    /**
     * Construct empty ledger data.
     */
    LedgerData() :
   b5c06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5c08:	4604      	mov	r4, r0
        capacity_(0) {
   b5c0a:	2300      	movs	r3, #0
	  ::new ((void*)std::addressof(_M_storage))
   b5c0c:	4669      	mov	r1, sp
   b5c0e:	e9cd 3300 	strd	r3, r3, [sp]
   b5c12:	9302      	str	r3, [sp, #8]
   b5c14:	f7ff fdf1 	bl	b57fa <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	_M_index{_Np}
   b5c18:	230a      	movs	r3, #10
   b5c1a:	7423      	strb	r3, [r4, #16]
class Map {
   b5c1c:	4668      	mov	r0, sp
   b5c1e:	f7ff ffdf 	bl	b5be0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
            v_(VariantMap()) {
    }
   b5c22:	4620      	mov	r0, r4
   b5c24:	b004      	add	sp, #16
   b5c26:	bd10      	pop	{r4, pc}

000b5c28 <_ZN18DeviceConfigLedgerC1Ev>:
DeviceConfigLedger::DeviceConfigLedger() {
   b5c28:	4b11      	ldr	r3, [pc, #68]	; (b5c70 <_ZN18DeviceConfigLedgerC1Ev+0x48>)
   b5c2a:	b510      	push	{r4, lr}
   b5c2c:	4604      	mov	r4, r0
   b5c2e:	f840 3b08 	str.w	r3, [r0], #8
   b5c32:	f7ff ffe8 	bl	b5c06 <_ZN8particle10LedgerDataC1Ev>
   b5c36:	f104 0020 	add.w	r0, r4, #32
   b5c3a:	f7ff ffe4 	bl	b5c06 <_ZN8particle10LedgerDataC1Ev>
   b5c3e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5c42:	f7ff ffe0 	bl	b5c06 <_ZN8particle10LedgerDataC1Ev>
   b5c46:	490b      	ldr	r1, [pc, #44]	; (b5c74 <_ZN18DeviceConfigLedgerC1Ev+0x4c>)
   b5c48:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b5c4c:	f003 ff3d 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
   b5c50:	4909      	ldr	r1, [pc, #36]	; (b5c78 <_ZN18DeviceConfigLedgerC1Ev+0x50>)
   b5c52:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5c56:	f003 ff38 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
            instance_(instance) {
   b5c5a:	2300      	movs	r3, #0
   b5c5c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5c60:	e9c4 331f 	strd	r3, r3, [r4, #124]	; 0x7c
   b5c64:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
   b5c68:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
   b5c6c:	4620      	mov	r0, r4
   b5c6e:	bd10      	pop	{r4, pc}
   b5c70:	000be148 	.word	0x000be148
   b5c74:	000bdc6d 	.word	0x000bdc6d
   b5c78:	000bdc82 	.word	0x000bdc82

000b5c7c <_ZN18DeviceConfigLedger8instanceEv>:
DeviceConfigLedger &DeviceConfigLedger::instance() {
   b5c7c:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b5c7e:	4d06      	ldr	r5, [pc, #24]	; (b5c98 <_ZN18DeviceConfigLedger8instanceEv+0x1c>)
   b5c80:	682b      	ldr	r3, [r5, #0]
   b5c82:	b93b      	cbnz	r3, b5c94 <_ZN18DeviceConfigLedger8instanceEv+0x18>
        _instance = new DeviceConfigLedger();
   b5c84:	2088      	movs	r0, #136	; 0x88
   b5c86:	f7ff f8be 	bl	b4e06 <_Znwj>
   b5c8a:	4604      	mov	r4, r0
   b5c8c:	b108      	cbz	r0, b5c92 <_ZN18DeviceConfigLedger8instanceEv+0x16>
   b5c8e:	f7ff ffcb 	bl	b5c28 <_ZN18DeviceConfigLedgerC1Ev>
   b5c92:	602c      	str	r4, [r5, #0]
}
   b5c94:	6828      	ldr	r0, [r5, #0]
   b5c96:	bd38      	pop	{r3, r4, r5, pc}
   b5c98:	2003e66c 	.word	0x2003e66c

000b5c9c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESL_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5c9c:	b508      	push	{r3, lr}
   b5c9e:	4608      	mov	r0, r1
   b5ca0:	f7ff ff9e 	bl	b5be0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
      }
   b5ca4:	bd08      	pop	{r3, pc}

000b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ca6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5ca8:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5cac:	2618      	movs	r6, #24
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5cae:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5cb0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5cb4:	42ae      	cmp	r6, r5
   b5cb6:	d004      	beq.n	b5cc2 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev+0x1c>
      { _M_reset(); }
   b5cb8:	4628      	mov	r0, r5
   b5cba:	f7ff ff75 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b5cbe:	3518      	adds	r5, #24
   b5cc0:	e7f8      	b.n	b5cb4 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5cc2:	6820      	ldr	r0, [r4, #0]
   b5cc4:	f001 fd54 	bl	b7770 <free>
}
   b5cc8:	4620      	mov	r0, r4
   b5cca:	bd70      	pop	{r4, r5, r6, pc}

000b5ccc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESL_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5ccc:	b508      	push	{r3, lr}
   b5cce:	4608      	mov	r0, r1
   b5cd0:	f7ff ffe9 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
      }
   b5cd4:	bd08      	pop	{r3, pc}
	...

000b5cd8 <_ZN18DeviceConfigLedgerD1Ev>:
DeviceConfigLedger::~DeviceConfigLedger() {
   b5cd8:	b570      	push	{r4, r5, r6, lr}
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5cda:	e9d0 561f 	ldrd	r5, r6, [r0, #124]	; 0x7c
   b5cde:	4b17      	ldr	r3, [pc, #92]	; (b5d3c <_ZN18DeviceConfigLedgerD1Ev+0x64>)
   b5ce0:	6003      	str	r3, [r0, #0]
   b5ce2:	4604      	mov	r4, r0
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b5ce4:	42ae      	cmp	r6, r5
   b5ce6:	d004      	beq.n	b5cf2 <_ZN18DeviceConfigLedgerD1Ev+0x1a>
    class function<_Res(_ArgTypes...)>
   b5ce8:	4628      	mov	r0, r5
   b5cea:	f7ff fbd5 	bl	b5498 <_ZNSt14_Function_baseD1Ev>
   b5cee:	3510      	adds	r5, #16
   b5cf0:	e7f8      	b.n	b5ce4 <_ZN18DeviceConfigLedgerD1Ev+0xc>
	_M_deallocate(_M_impl._M_start,
   b5cf2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	if (__p)
   b5cf4:	b120      	cbz	r0, b5d00 <_ZN18DeviceConfigLedgerD1Ev+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b5cf6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
	::operator delete(__p
   b5cfa:	1a09      	subs	r1, r1, r0
   b5cfc:	f7ff f889 	bl	b4e12 <_ZdlPvj>
   b5d00:	f104 0074 	add.w	r0, r4, #116	; 0x74
   b5d04:	f7ff fc40 	bl	b5588 <_ZN8particle6LedgerD1Ev>
   b5d08:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b5d0c:	f7ff fc3c 	bl	b5588 <_ZN8particle6LedgerD1Ev>
   b5d10:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5d14:	f003 fe8e 	bl	b9a34 <_ZN6StringD1Ev>
   b5d18:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b5d1c:	f003 fe8a 	bl	b9a34 <_ZN6StringD1Ev>
      { _M_reset(); }
   b5d20:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5d24:	f7ff ff40 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b5d28:	f104 0020 	add.w	r0, r4, #32
   b5d2c:	f7ff ff3c 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b5d30:	f104 0008 	add.w	r0, r4, #8
   b5d34:	f7ff ff38 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
   b5d38:	4620      	mov	r0, r4
   b5d3a:	bd70      	pop	{r4, r5, r6, pc}
   b5d3c:	000be148 	.word	0x000be148

000b5d40 <_ZN18DeviceConfigLedgerD0Ev>:
DeviceConfigLedger::~DeviceConfigLedger() {
   b5d40:	b510      	push	{r4, lr}
   b5d42:	4604      	mov	r4, r0
}
   b5d44:	f7ff ffc8 	bl	b5cd8 <_ZN18DeviceConfigLedgerD1Ev>
   b5d48:	4620      	mov	r0, r4
   b5d4a:	2188      	movs	r1, #136	; 0x88
   b5d4c:	f7ff f861 	bl	b4e12 <_ZdlPvj>
   b5d50:	4620      	mov	r0, r4
   b5d52:	bd10      	pop	{r4, pc}

000b5d54 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4294967295EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5d54:	b508      	push	{r3, lr}
	      this->_M_reset();
   b5d56:	6800      	ldr	r0, [r0, #0]
   b5d58:	f7ff ff26 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
   b5d5c:	bd08      	pop	{r3, pc}

000b5d5e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5d5e:	b510      	push	{r4, lr}
   b5d60:	6804      	ldr	r4, [r0, #0]
		if (this->_M_index == __rhs_index)
   b5d62:	7c23      	ldrb	r3, [r4, #16]
   b5d64:	b123      	cbz	r3, b5d70 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SR_+0x12>
	      this->_M_reset();
   b5d66:	4620      	mov	r0, r4
   b5d68:	f7ff ff1e 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   b5d6c:	2300      	movs	r3, #0
   b5d6e:	7423      	strb	r3, [r4, #16]
      }
   b5d70:	bd10      	pop	{r4, pc}

000b5d72 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5d72:	b570      	push	{r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b5d74:	6804      	ldr	r4, [r0, #0]
	  return make_signed_t<__index_type>(this->_M_index);
   b5d76:	7c23      	ldrb	r3, [r4, #16]
		if (this->index() == __rhs_index)
   b5d78:	2b03      	cmp	r3, #3
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5d7a:	4605      	mov	r5, r0
   b5d7c:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
   b5d7e:	d104      	bne.n	b5d8a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_+0x18>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d80:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5d82:	680a      	ldr	r2, [r1, #0]
   b5d84:	6022      	str	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5d86:	600b      	str	r3, [r1, #0]
      }
   b5d88:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
   b5d8a:	2bff      	cmp	r3, #255	; 0xff
   b5d8c:	d00c      	beq.n	b5da8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_+0x36>
			auto __tmp(std::move(__rhs_mem));
   b5d8e:	680e      	ldr	r6, [r1, #0]
      _Variant_base& operator=(_Variant_base&&) = default;
   b5d90:	6840      	ldr	r0, [r0, #4]
   b5d92:	4621      	mov	r1, r4
   b5d94:	f7ff fad8 	bl	b5348 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b5d98:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
   b5d9a:	4620      	mov	r0, r4
   b5d9c:	f7ff ff04 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
   b5da0:	2303      	movs	r3, #3
        ::new (__storage)
   b5da2:	6026      	str	r6, [r4, #0]
	  this->_M_index = __rhs_index;
   b5da4:	7423      	strb	r3, [r4, #16]
   b5da6:	e7ef      	b.n	b5d88 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_+0x16>
	  this->_M_reset();
   b5da8:	4620      	mov	r0, r4
   b5daa:	f7ff fefd 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
   b5dae:	6833      	ldr	r3, [r6, #0]
   b5db0:	6023      	str	r3, [r4, #0]
	  this->_M_index = __rhs_index;
   b5db2:	2303      	movs	r3, #3
   b5db4:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
   b5db6:	6868      	ldr	r0, [r5, #4]
   b5db8:	f7ff fef6 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
   b5dbc:	e7e4      	b.n	b5d88 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_+0x16>

000b5dbe <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5dbe:	b570      	push	{r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b5dc0:	6804      	ldr	r4, [r0, #0]
	  return make_signed_t<__index_type>(this->_M_index);
   b5dc2:	7c23      	ldrb	r3, [r4, #16]
		if (this->index() == __rhs_index)
   b5dc4:	2b02      	cmp	r3, #2
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5dc6:	4605      	mov	r5, r0
   b5dc8:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
   b5dca:	d104      	bne.n	b5dd6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_+0x18>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5dcc:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5dce:	680a      	ldr	r2, [r1, #0]
   b5dd0:	6022      	str	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5dd2:	600b      	str	r3, [r1, #0]
      }
   b5dd4:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
   b5dd6:	2bff      	cmp	r3, #255	; 0xff
   b5dd8:	d00c      	beq.n	b5df4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_+0x36>
			auto __tmp(std::move(__rhs_mem));
   b5dda:	680e      	ldr	r6, [r1, #0]
      _Variant_base& operator=(_Variant_base&&) = default;
   b5ddc:	6840      	ldr	r0, [r0, #4]
   b5dde:	4621      	mov	r1, r4
   b5de0:	f7ff fab2 	bl	b5348 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b5de4:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
   b5de6:	4620      	mov	r0, r4
   b5de8:	f7ff fede 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
   b5dec:	2302      	movs	r3, #2
        ::new (__storage)
   b5dee:	6026      	str	r6, [r4, #0]
	  this->_M_index = __rhs_index;
   b5df0:	7423      	strb	r3, [r4, #16]
   b5df2:	e7ef      	b.n	b5dd4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_+0x16>
	  this->_M_reset();
   b5df4:	4620      	mov	r0, r4
   b5df6:	f7ff fed7 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
   b5dfa:	6833      	ldr	r3, [r6, #0]
   b5dfc:	6023      	str	r3, [r4, #0]
	  this->_M_index = __rhs_index;
   b5dfe:	2302      	movs	r3, #2
   b5e00:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
   b5e02:	6868      	ldr	r0, [r5, #4]
   b5e04:	f7ff fed0 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
   b5e08:	e7e4      	b.n	b5dd4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_+0x16>

000b5e0a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5e0a:	b570      	push	{r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b5e0c:	6804      	ldr	r4, [r0, #0]
	  return make_signed_t<__index_type>(this->_M_index);
   b5e0e:	7c23      	ldrb	r3, [r4, #16]
		if (this->index() == __rhs_index)
   b5e10:	2b01      	cmp	r3, #1
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5e12:	4605      	mov	r5, r0
   b5e14:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
   b5e16:	d104      	bne.n	b5e22 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_+0x18>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e18:	7823      	ldrb	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5e1a:	780a      	ldrb	r2, [r1, #0]
   b5e1c:	7022      	strb	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5e1e:	700b      	strb	r3, [r1, #0]
      }
   b5e20:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
   b5e22:	2bff      	cmp	r3, #255	; 0xff
   b5e24:	d00c      	beq.n	b5e40 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_+0x36>
			auto __tmp(std::move(__rhs_mem));
   b5e26:	780e      	ldrb	r6, [r1, #0]
      _Variant_base& operator=(_Variant_base&&) = default;
   b5e28:	6840      	ldr	r0, [r0, #4]
   b5e2a:	4621      	mov	r1, r4
   b5e2c:	f7ff fa8c 	bl	b5348 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b5e30:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
   b5e32:	4620      	mov	r0, r4
   b5e34:	f7ff feb8 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
   b5e38:	2301      	movs	r3, #1
        ::new (__storage)
   b5e3a:	7026      	strb	r6, [r4, #0]
	  this->_M_index = __rhs_index;
   b5e3c:	7423      	strb	r3, [r4, #16]
   b5e3e:	e7ef      	b.n	b5e20 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_+0x16>
	  this->_M_reset();
   b5e40:	4620      	mov	r0, r4
   b5e42:	f7ff feb1 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
   b5e46:	7833      	ldrb	r3, [r6, #0]
   b5e48:	7023      	strb	r3, [r4, #0]
	  this->_M_index = __rhs_index;
   b5e4a:	2301      	movs	r3, #1
   b5e4c:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
   b5e4e:	6868      	ldr	r0, [r5, #4]
   b5e50:	f7ff feaa 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
   b5e54:	e7e4      	b.n	b5e20 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_+0x16>

000b5e56 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4294967295EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5e56:	b510      	push	{r4, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b5e58:	6801      	ldr	r1, [r0, #0]
		if (!this->valueless_by_exception()) [[__likely__]]
   b5e5a:	7c0b      	ldrb	r3, [r1, #16]
   b5e5c:	2bff      	cmp	r3, #255	; 0xff
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5e5e:	4604      	mov	r4, r0
		if (!this->valueless_by_exception()) [[__likely__]]
   b5e60:	d005      	beq.n	b5e6e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4294967295EEEE14__visit_invokeESO_SJ_+0x18>
      _Variant_base& operator=(_Variant_base&&) = default;
   b5e62:	6840      	ldr	r0, [r0, #4]
   b5e64:	f7ff fa70 	bl	b5348 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
		    this->_M_reset();
   b5e68:	6820      	ldr	r0, [r4, #0]
   b5e6a:	f7ff fe9d 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
   b5e6e:	bd10      	pop	{r4, pc}

000b5e70 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5e70:	b538      	push	{r3, r4, r5, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b5e72:	6805      	ldr	r5, [r0, #0]
	  return make_signed_t<__index_type>(this->_M_index);
   b5e74:	7c2b      	ldrb	r3, [r5, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5e76:	4604      	mov	r4, r0
		if (this->index() == __rhs_index)
   b5e78:	b15b      	cbz	r3, b5e92 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SJ_+0x22>
		    if (!this->valueless_by_exception()) [[__likely__]]
   b5e7a:	2bff      	cmp	r3, #255	; 0xff
   b5e7c:	d00a      	beq.n	b5e94 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SJ_+0x24>
      _Variant_base& operator=(_Variant_base&&) = default;
   b5e7e:	6840      	ldr	r0, [r0, #4]
   b5e80:	4629      	mov	r1, r5
   b5e82:	f7ff fa61 	bl	b5348 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b5e86:	6824      	ldr	r4, [r4, #0]
	  this->_M_reset();
   b5e88:	4620      	mov	r0, r4
   b5e8a:	f7ff fe8d 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
   b5e8e:	2300      	movs	r3, #0
   b5e90:	7423      	strb	r3, [r4, #16]
      }
   b5e92:	bd38      	pop	{r3, r4, r5, pc}
	  this->_M_reset();
   b5e94:	4628      	mov	r0, r5
   b5e96:	f7ff fe87 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
   b5e9a:	2300      	movs	r3, #0
   b5e9c:	742b      	strb	r3, [r5, #16]
			__rhs._M_reset();
   b5e9e:	6860      	ldr	r0, [r4, #4]
   b5ea0:	f7ff fe82 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
   b5ea4:	e7f5      	b.n	b5e92 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SJ_+0x22>

000b5ea6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5ea6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
   b5ea8:	6804      	ldr	r4, [r0, #0]
		if (this->_M_index == __rhs_index)
   b5eaa:	7c23      	ldrb	r3, [r4, #16]
   b5eac:	2b09      	cmp	r3, #9
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5eae:	4605      	mov	r5, r0
   b5eb0:	460e      	mov	r6, r1
		if (this->_M_index == __rhs_index)
   b5eb2:	d114      	bne.n	b5ede <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SR_+0x38>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
   b5eb4:	a801      	add	r0, sp, #4
   b5eb6:	f7ff fc91 	bl	b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
   b5eba:	682b      	ldr	r3, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5ebc:	9901      	ldr	r1, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5ebe:	681a      	ldr	r2, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5ec0:	6019      	str	r1, [r3, #0]
   b5ec2:	9902      	ldr	r1, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ec4:	9201      	str	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5ec6:	685a      	ldr	r2, [r3, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5ec8:	6059      	str	r1, [r3, #4]
   b5eca:	9903      	ldr	r1, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ecc:	9202      	str	r2, [sp, #8]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
   b5ece:	a801      	add	r0, sp, #4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5ed0:	689a      	ldr	r2, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5ed2:	6099      	str	r1, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ed4:	9203      	str	r2, [sp, #12]
   b5ed6:	f7ff fee6 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
      }
   b5eda:	b004      	add	sp, #16
   b5edc:	bd70      	pop	{r4, r5, r6, pc}
	      this->_M_reset();
   b5ede:	4620      	mov	r0, r4
   b5ee0:	f7ff fe62 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   b5ee4:	2309      	movs	r3, #9
   b5ee6:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
   b5ee8:	4631      	mov	r1, r6
   b5eea:	4620      	mov	r0, r4
   b5eec:	f7ff fc76 	bl	b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  return make_signed_t<__index_type>(this->_M_index);
   b5ef0:	7c20      	ldrb	r0, [r4, #16]
      if (__v.index() != _Np)
   b5ef2:	2809      	cmp	r0, #9
   b5ef4:	d0f1      	beq.n	b5eda <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SR_+0x34>
	__throw_bad_variant_access(__v.valueless_by_exception());
   b5ef6:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
   b5efa:	4258      	negs	r0, r3
   b5efc:	4158      	adcs	r0, r3
   b5efe:	f7ff fb2f 	bl	b5560 <_ZSt26__throw_bad_variant_accessb>

000b5f02 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5f02:	b538      	push	{r3, r4, r5, lr}
   b5f04:	6804      	ldr	r4, [r0, #0]
		if (this->_M_index == __rhs_index)
   b5f06:	7c23      	ldrb	r3, [r4, #16]
   b5f08:	2b08      	cmp	r3, #8
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5f0a:	460d      	mov	r5, r1
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
   b5f0c:	4620      	mov	r0, r4
		if (this->_M_index == __rhs_index)
   b5f0e:	d103      	bne.n	b5f18 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SR_+0x16>
      }
   b5f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
   b5f14:	f7ff bc4d 	b.w	b57b2 <_ZN8particle6BufferaSEOS0_.isra.0>
	      this->_M_reset();
   b5f18:	f7ff fe46 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   b5f1c:	2308      	movs	r3, #8
   b5f1e:	7423      	strb	r3, [r4, #16]
   b5f20:	4629      	mov	r1, r5
   b5f22:	4620      	mov	r0, r4
   b5f24:	f7ff fc36 	bl	b5794 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
	  return make_signed_t<__index_type>(this->_M_index);
   b5f28:	7c20      	ldrb	r0, [r4, #16]
      if (__v.index() != _Np)
   b5f2a:	2808      	cmp	r0, #8
   b5f2c:	d005      	beq.n	b5f3a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SR_+0x38>
	__throw_bad_variant_access(__v.valueless_by_exception());
   b5f2e:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
   b5f32:	4258      	negs	r0, r3
   b5f34:	4158      	adcs	r0, r3
   b5f36:	f7ff fb13 	bl	b5560 <_ZSt26__throw_bad_variant_accessb>
      }
   b5f3a:	bd38      	pop	{r3, r4, r5, pc}

000b5f3c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5f3c:	b538      	push	{r3, r4, r5, lr}
   b5f3e:	6804      	ldr	r4, [r0, #0]
		if (this->_M_index == __rhs_index)
   b5f40:	7c23      	ldrb	r3, [r4, #16]
   b5f42:	2b07      	cmp	r3, #7
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5f44:	460d      	mov	r5, r1
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
   b5f46:	4620      	mov	r0, r4
		if (this->_M_index == __rhs_index)
   b5f48:	d103      	bne.n	b5f52 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SR_+0x16>
      }
   b5f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
   b5f4e:	f003 be1f 	b.w	b9b90 <_ZN6StringaSEOS_>
	      this->_M_reset();
   b5f52:	f7ff fe29 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   b5f56:	2307      	movs	r3, #7
   b5f58:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
   b5f5a:	4629      	mov	r1, r5
   b5f5c:	4620      	mov	r0, r4
   b5f5e:	f003 fdf2 	bl	b9b46 <_ZN6StringC1EOS_>
	  return make_signed_t<__index_type>(this->_M_index);
   b5f62:	7c20      	ldrb	r0, [r4, #16]
      if (__v.index() != _Np)
   b5f64:	2807      	cmp	r0, #7
   b5f66:	d005      	beq.n	b5f74 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SR_+0x38>
	__throw_bad_variant_access(__v.valueless_by_exception());
   b5f68:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
   b5f6c:	4258      	negs	r0, r3
   b5f6e:	4158      	adcs	r0, r3
   b5f70:	f7ff faf6 	bl	b5560 <_ZSt26__throw_bad_variant_accessb>
      }
   b5f74:	bd38      	pop	{r3, r4, r5, pc}

000b5f76 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5f76:	b538      	push	{r3, r4, r5, lr}
   b5f78:	6804      	ldr	r4, [r0, #0]
		if (this->_M_index == __rhs_index)
   b5f7a:	7c23      	ldrb	r3, [r4, #16]
   b5f7c:	2b06      	cmp	r3, #6
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5f7e:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
   b5f80:	d104      	bne.n	b5f8c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SR_+0x16>
      ::new ((void*)std::addressof(__storage))
   b5f82:	e9d5 2300 	ldrd	r2, r3, [r5]
   b5f86:	e9c4 2300 	strd	r2, r3, [r4]
      }
   b5f8a:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
   b5f8c:	4620      	mov	r0, r4
   b5f8e:	f7ff fe0b 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   b5f92:	2306      	movs	r3, #6
   b5f94:	7423      	strb	r3, [r4, #16]
   b5f96:	e7f4      	b.n	b5f82 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SR_+0xc>

000b5f98 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5f98:	b538      	push	{r3, r4, r5, lr}
   b5f9a:	6804      	ldr	r4, [r0, #0]
		if (this->_M_index == __rhs_index)
   b5f9c:	7c23      	ldrb	r3, [r4, #16]
   b5f9e:	2b05      	cmp	r3, #5
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5fa0:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
   b5fa2:	d104      	bne.n	b5fae <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SR_+0x16>
      ::new ((void*)std::addressof(__storage))
   b5fa4:	e9d5 2300 	ldrd	r2, r3, [r5]
   b5fa8:	e9c4 2300 	strd	r2, r3, [r4]
      }
   b5fac:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
   b5fae:	4620      	mov	r0, r4
   b5fb0:	f7ff fdfa 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   b5fb4:	2305      	movs	r3, #5
   b5fb6:	7423      	strb	r3, [r4, #16]
   b5fb8:	e7f4      	b.n	b5fa4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SR_+0xc>

000b5fba <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5fba:	b538      	push	{r3, r4, r5, lr}
   b5fbc:	6804      	ldr	r4, [r0, #0]
		if (this->_M_index == __rhs_index)
   b5fbe:	7c23      	ldrb	r3, [r4, #16]
   b5fc0:	2b04      	cmp	r3, #4
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5fc2:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
   b5fc4:	d104      	bne.n	b5fd0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SR_+0x16>
      ::new ((void*)std::addressof(__storage))
   b5fc6:	e9d5 2300 	ldrd	r2, r3, [r5]
   b5fca:	e9c4 2300 	strd	r2, r3, [r4]
      }
   b5fce:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
   b5fd0:	4620      	mov	r0, r4
   b5fd2:	f7ff fde9 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   b5fd6:	2304      	movs	r3, #4
   b5fd8:	7423      	strb	r3, [r4, #16]
   b5fda:	e7f4      	b.n	b5fc6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SR_+0xc>

000b5fdc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5fdc:	b538      	push	{r3, r4, r5, lr}
   b5fde:	6804      	ldr	r4, [r0, #0]
		if (this->_M_index == __rhs_index)
   b5fe0:	7c23      	ldrb	r3, [r4, #16]
   b5fe2:	2b03      	cmp	r3, #3
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5fe4:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
   b5fe6:	d102      	bne.n	b5fee <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SR_+0x12>
      ::new ((void*)std::addressof(__storage))
   b5fe8:	682b      	ldr	r3, [r5, #0]
   b5fea:	6023      	str	r3, [r4, #0]
      }
   b5fec:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
   b5fee:	4620      	mov	r0, r4
   b5ff0:	f7ff fdda 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   b5ff4:	2303      	movs	r3, #3
   b5ff6:	7423      	strb	r3, [r4, #16]
   b5ff8:	e7f6      	b.n	b5fe8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SR_+0xc>

000b5ffa <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b5ffa:	b538      	push	{r3, r4, r5, lr}
   b5ffc:	6804      	ldr	r4, [r0, #0]
		if (this->_M_index == __rhs_index)
   b5ffe:	7c23      	ldrb	r3, [r4, #16]
   b6000:	2b02      	cmp	r3, #2
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b6002:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
   b6004:	d102      	bne.n	b600c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SR_+0x12>
      ::new ((void*)std::addressof(__storage))
   b6006:	682b      	ldr	r3, [r5, #0]
   b6008:	6023      	str	r3, [r4, #0]
      }
   b600a:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
   b600c:	4620      	mov	r0, r4
   b600e:	f7ff fdcb 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   b6012:	2302      	movs	r3, #2
   b6014:	7423      	strb	r3, [r4, #16]
   b6016:	e7f6      	b.n	b6006 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SR_+0xc>

000b6018 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b6018:	b538      	push	{r3, r4, r5, lr}
   b601a:	6804      	ldr	r4, [r0, #0]
		if (this->_M_index == __rhs_index)
   b601c:	7c23      	ldrb	r3, [r4, #16]
   b601e:	2b01      	cmp	r3, #1
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b6020:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
   b6022:	d102      	bne.n	b602a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SR_+0x12>
      ::new ((void*)std::addressof(__storage))
   b6024:	782b      	ldrb	r3, [r5, #0]
   b6026:	7023      	strb	r3, [r4, #0]
      }
   b6028:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
   b602a:	4620      	mov	r0, r4
   b602c:	f7ff fdbc 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   b6030:	2301      	movs	r3, #1
   b6032:	7423      	strb	r3, [r4, #16]
   b6034:	e7f6      	b.n	b6024 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SR_+0xc>

000b6036 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b6036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b6038:	6804      	ldr	r4, [r0, #0]
	  return make_signed_t<__index_type>(this->_M_index);
   b603a:	7c23      	ldrb	r3, [r4, #16]
		if (this->index() == __rhs_index)
   b603c:	2b06      	cmp	r3, #6
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b603e:	4605      	mov	r5, r0
   b6040:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
   b6042:	d108      	bne.n	b6056 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_+0x20>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6044:	e9d4 2300 	ldrd	r2, r3, [r4]
      __a = _GLIBCXX_MOVE(__b);
   b6048:	e9d1 0100 	ldrd	r0, r1, [r1]
   b604c:	e9c4 0100 	strd	r0, r1, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6050:	e9c6 2300 	strd	r2, r3, [r6]
      }
   b6054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
   b6056:	2bff      	cmp	r3, #255	; 0xff
   b6058:	d00e      	beq.n	b6078 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_+0x42>
			auto __tmp(std::move(__rhs_mem));
   b605a:	e9d1 6700 	ldrd	r6, r7, [r1]
      _Variant_base& operator=(_Variant_base&&) = default;
   b605e:	6840      	ldr	r0, [r0, #4]
   b6060:	4621      	mov	r1, r4
   b6062:	f7ff f971 	bl	b5348 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b6066:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
   b6068:	4620      	mov	r0, r4
   b606a:	f7ff fd9d 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
   b606e:	2306      	movs	r3, #6
        ::new (__storage)
   b6070:	e9c4 6700 	strd	r6, r7, [r4]
	  this->_M_index = __rhs_index;
   b6074:	7423      	strb	r3, [r4, #16]
   b6076:	e7ed      	b.n	b6054 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_+0x1e>
	  this->_M_reset();
   b6078:	4620      	mov	r0, r4
   b607a:	f7ff fd95 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
   b607e:	e9d6 2300 	ldrd	r2, r3, [r6]
   b6082:	e9c4 2300 	strd	r2, r3, [r4]
	  this->_M_index = __rhs_index;
   b6086:	2306      	movs	r3, #6
   b6088:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
   b608a:	6868      	ldr	r0, [r5, #4]
   b608c:	f7ff fd8c 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
   b6090:	e7e0      	b.n	b6054 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_+0x1e>

000b6092 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b6092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b6094:	6804      	ldr	r4, [r0, #0]
	  return make_signed_t<__index_type>(this->_M_index);
   b6096:	7c23      	ldrb	r3, [r4, #16]
		if (this->index() == __rhs_index)
   b6098:	2b05      	cmp	r3, #5
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b609a:	4605      	mov	r5, r0
   b609c:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
   b609e:	d108      	bne.n	b60b2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_+0x20>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b60a0:	e9d4 2300 	ldrd	r2, r3, [r4]
      __a = _GLIBCXX_MOVE(__b);
   b60a4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b60a8:	e9c4 0100 	strd	r0, r1, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
   b60ac:	e9c6 2300 	strd	r2, r3, [r6]
      }
   b60b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
   b60b2:	2bff      	cmp	r3, #255	; 0xff
   b60b4:	d00e      	beq.n	b60d4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_+0x42>
			auto __tmp(std::move(__rhs_mem));
   b60b6:	e9d1 6700 	ldrd	r6, r7, [r1]
      _Variant_base& operator=(_Variant_base&&) = default;
   b60ba:	6840      	ldr	r0, [r0, #4]
   b60bc:	4621      	mov	r1, r4
   b60be:	f7ff f943 	bl	b5348 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b60c2:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
   b60c4:	4620      	mov	r0, r4
   b60c6:	f7ff fd6f 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
   b60ca:	2305      	movs	r3, #5
        ::new (__storage)
   b60cc:	e9c4 6700 	strd	r6, r7, [r4]
	  this->_M_index = __rhs_index;
   b60d0:	7423      	strb	r3, [r4, #16]
   b60d2:	e7ed      	b.n	b60b0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_+0x1e>
	  this->_M_reset();
   b60d4:	4620      	mov	r0, r4
   b60d6:	f7ff fd67 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
   b60da:	e9d6 2300 	ldrd	r2, r3, [r6]
   b60de:	e9c4 2300 	strd	r2, r3, [r4]
	  this->_M_index = __rhs_index;
   b60e2:	2305      	movs	r3, #5
   b60e4:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
   b60e6:	6868      	ldr	r0, [r5, #4]
   b60e8:	f7ff fd5e 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
   b60ec:	e7e0      	b.n	b60b0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_+0x1e>

000b60ee <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b60ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b60f0:	6804      	ldr	r4, [r0, #0]
	  return make_signed_t<__index_type>(this->_M_index);
   b60f2:	7c23      	ldrb	r3, [r4, #16]
		if (this->index() == __rhs_index)
   b60f4:	2b04      	cmp	r3, #4
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b60f6:	4605      	mov	r5, r0
   b60f8:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
   b60fa:	d108      	bne.n	b610e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_+0x20>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b60fc:	e9d4 2300 	ldrd	r2, r3, [r4]
      __a = _GLIBCXX_MOVE(__b);
   b6100:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6104:	e9c4 0100 	strd	r0, r1, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6108:	e9c6 2300 	strd	r2, r3, [r6]
      }
   b610c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
   b610e:	2bff      	cmp	r3, #255	; 0xff
   b6110:	d00e      	beq.n	b6130 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_+0x42>
			auto __tmp(std::move(__rhs_mem));
   b6112:	e9d1 6700 	ldrd	r6, r7, [r1]
      _Variant_base& operator=(_Variant_base&&) = default;
   b6116:	6840      	ldr	r0, [r0, #4]
   b6118:	4621      	mov	r1, r4
   b611a:	f7ff f915 	bl	b5348 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b611e:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
   b6120:	4620      	mov	r0, r4
   b6122:	f7ff fd41 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
   b6126:	2304      	movs	r3, #4
        ::new (__storage)
   b6128:	e9c4 6700 	strd	r6, r7, [r4]
	  this->_M_index = __rhs_index;
   b612c:	7423      	strb	r3, [r4, #16]
   b612e:	e7ed      	b.n	b610c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_+0x1e>
	  this->_M_reset();
   b6130:	4620      	mov	r0, r4
   b6132:	f7ff fd39 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
   b6136:	e9d6 2300 	ldrd	r2, r3, [r6]
   b613a:	e9c4 2300 	strd	r2, r3, [r4]
	  this->_M_index = __rhs_index;
   b613e:	2304      	movs	r3, #4
   b6140:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
   b6142:	6868      	ldr	r0, [r5, #4]
   b6144:	f7ff fd30 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
   b6148:	e7e0      	b.n	b610c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_+0x1e>

000b614a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b614a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b614c:	6804      	ldr	r4, [r0, #0]
	  return make_signed_t<__index_type>(this->_M_index);
   b614e:	7c23      	ldrb	r3, [r4, #16]
		if (this->index() == __rhs_index)
   b6150:	2b09      	cmp	r3, #9
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b6152:	4606      	mov	r6, r0
   b6154:	460d      	mov	r5, r1
		if (this->index() == __rhs_index)
   b6156:	d10d      	bne.n	b6174 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_+0x2a>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6158:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b615a:	680a      	ldr	r2, [r1, #0]
   b615c:	6022      	str	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b615e:	600b      	str	r3, [r1, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6160:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6162:	684a      	ldr	r2, [r1, #4]
   b6164:	6062      	str	r2, [r4, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6166:	604b      	str	r3, [r1, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6168:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b616a:	688a      	ldr	r2, [r1, #8]
   b616c:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b616e:	608b      	str	r3, [r1, #8]
      }
   b6170:	b004      	add	sp, #16
   b6172:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
   b6174:	2bff      	cmp	r3, #255	; 0xff
   b6176:	d014      	beq.n	b61a2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_+0x58>
			auto __tmp(std::move(__rhs_mem));
   b6178:	a801      	add	r0, sp, #4
   b617a:	f7ff fb2f 	bl	b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
      _Variant_base& operator=(_Variant_base&&) = default;
   b617e:	e9d6 1000 	ldrd	r1, r0, [r6]
   b6182:	f7ff f8e1 	bl	b5348 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b6186:	6834      	ldr	r4, [r6, #0]
	  this->_M_reset();
   b6188:	4620      	mov	r0, r4
   b618a:	f7ff fd0d 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
   b618e:	a901      	add	r1, sp, #4
   b6190:	4620      	mov	r0, r4
   b6192:	f7ff fb23 	bl	b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  this->_M_index = __rhs_index;
   b6196:	2309      	movs	r3, #9
   b6198:	7423      	strb	r3, [r4, #16]
			auto __tmp(std::move(__rhs_mem));
   b619a:	a801      	add	r0, sp, #4
   b619c:	f7ff fd83 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
   b61a0:	e7e6      	b.n	b6170 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_+0x26>
	  this->_M_reset();
   b61a2:	4620      	mov	r0, r4
   b61a4:	f7ff fd00 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
   b61a8:	4629      	mov	r1, r5
   b61aa:	4620      	mov	r0, r4
   b61ac:	f7ff fb16 	bl	b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  this->_M_index = __rhs_index;
   b61b0:	2309      	movs	r3, #9
   b61b2:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
   b61b4:	6870      	ldr	r0, [r6, #4]
   b61b6:	f7ff fcf7 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
   b61ba:	e7d9      	b.n	b6170 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_+0x26>

000b61bc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b61bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b61be:	6805      	ldr	r5, [r0, #0]
	  return make_signed_t<__index_type>(this->_M_index);
   b61c0:	7c2b      	ldrb	r3, [r5, #16]
		if (this->index() == __rhs_index)
   b61c2:	2b08      	cmp	r3, #8
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b61c4:	4604      	mov	r4, r0
   b61c6:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
   b61c8:	d110      	bne.n	b61ec <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_+0x30>
   b61ca:	4629      	mov	r1, r5
   b61cc:	a801      	add	r0, sp, #4
   b61ce:	f7ff fae1 	bl	b5794 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
   b61d2:	4631      	mov	r1, r6
   b61d4:	4628      	mov	r0, r5
   b61d6:	f7ff faec 	bl	b57b2 <_ZN8particle6BufferaSEOS0_.isra.0>
      __b = _GLIBCXX_MOVE(__tmp);
   b61da:	a901      	add	r1, sp, #4
   b61dc:	4630      	mov	r0, r6
   b61de:	f7ff fae8 	bl	b57b2 <_ZN8particle6BufferaSEOS0_.isra.0>
    ::free(ptr);
   b61e2:	9801      	ldr	r0, [sp, #4]
   b61e4:	f001 fac4 	bl	b7770 <free>
      }
   b61e8:	b004      	add	sp, #16
   b61ea:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
   b61ec:	2bff      	cmp	r3, #255	; 0xff
   b61ee:	d011      	beq.n	b6214 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_+0x58>
   b61f0:	a801      	add	r0, sp, #4
   b61f2:	f7ff facf 	bl	b5794 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
      _Variant_base& operator=(_Variant_base&&) = default;
   b61f6:	e9d4 1000 	ldrd	r1, r0, [r4]
   b61fa:	f7ff f8a5 	bl	b5348 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b61fe:	6824      	ldr	r4, [r4, #0]
	  this->_M_reset();
   b6200:	4620      	mov	r0, r4
   b6202:	f7ff fcd1 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b6206:	a901      	add	r1, sp, #4
   b6208:	4620      	mov	r0, r4
   b620a:	f7ff fac3 	bl	b5794 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
	  this->_M_index = __rhs_index;
   b620e:	2308      	movs	r3, #8
   b6210:	7423      	strb	r3, [r4, #16]
   b6212:	e7e6      	b.n	b61e2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_+0x26>
	  this->_M_reset();
   b6214:	4628      	mov	r0, r5
   b6216:	f7ff fcc7 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b621a:	4631      	mov	r1, r6
   b621c:	4628      	mov	r0, r5
   b621e:	f7ff fab9 	bl	b5794 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
	  this->_M_index = __rhs_index;
   b6222:	2308      	movs	r3, #8
   b6224:	742b      	strb	r3, [r5, #16]
			__rhs._M_reset();
   b6226:	6860      	ldr	r0, [r4, #4]
   b6228:	f7ff fcbe 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
   b622c:	e7dc      	b.n	b61e8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_+0x2c>

000b622e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b622e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b6230:	6805      	ldr	r5, [r0, #0]
	  return make_signed_t<__index_type>(this->_M_index);
   b6232:	7c2b      	ldrb	r3, [r5, #16]
		if (this->index() == __rhs_index)
   b6234:	2b07      	cmp	r3, #7
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b6236:	4604      	mov	r4, r0
   b6238:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
   b623a:	d110      	bne.n	b625e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_+0x30>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b623c:	4629      	mov	r1, r5
   b623e:	4668      	mov	r0, sp
   b6240:	f003 fc81 	bl	b9b46 <_ZN6StringC1EOS_>
      __a = _GLIBCXX_MOVE(__b);
   b6244:	4631      	mov	r1, r6
   b6246:	4628      	mov	r0, r5
   b6248:	f003 fca2 	bl	b9b90 <_ZN6StringaSEOS_>
      __b = _GLIBCXX_MOVE(__tmp);
   b624c:	4669      	mov	r1, sp
   b624e:	4630      	mov	r0, r6
   b6250:	f003 fc9e 	bl	b9b90 <_ZN6StringaSEOS_>
			auto __tmp(std::move(__rhs_mem));
   b6254:	4668      	mov	r0, sp
   b6256:	f003 fbed 	bl	b9a34 <_ZN6StringD1Ev>
      }
   b625a:	b004      	add	sp, #16
   b625c:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
   b625e:	2bff      	cmp	r3, #255	; 0xff
   b6260:	d011      	beq.n	b6286 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_+0x58>
			auto __tmp(std::move(__rhs_mem));
   b6262:	4668      	mov	r0, sp
   b6264:	f003 fc6f 	bl	b9b46 <_ZN6StringC1EOS_>
      _Variant_base& operator=(_Variant_base&&) = default;
   b6268:	e9d4 1000 	ldrd	r1, r0, [r4]
   b626c:	f7ff f86c 	bl	b5348 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b6270:	6824      	ldr	r4, [r4, #0]
	  this->_M_reset();
   b6272:	4620      	mov	r0, r4
   b6274:	f7ff fc98 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
   b6278:	4669      	mov	r1, sp
   b627a:	4620      	mov	r0, r4
   b627c:	f003 fc63 	bl	b9b46 <_ZN6StringC1EOS_>
	  this->_M_index = __rhs_index;
   b6280:	2307      	movs	r3, #7
   b6282:	7423      	strb	r3, [r4, #16]
   b6284:	e7e6      	b.n	b6254 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_+0x26>
	  this->_M_reset();
   b6286:	4628      	mov	r0, r5
   b6288:	f7ff fc8e 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
   b628c:	4631      	mov	r1, r6
   b628e:	4628      	mov	r0, r5
   b6290:	f003 fc59 	bl	b9b46 <_ZN6StringC1EOS_>
	  this->_M_index = __rhs_index;
   b6294:	2307      	movs	r3, #7
   b6296:	742b      	strb	r3, [r5, #16]
			__rhs._M_reset();
   b6298:	6860      	ldr	r0, [r4, #4]
   b629a:	f7ff fc85 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
   b629e:	e7dc      	b.n	b625a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_+0x2c>

000b62a0 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>:
    get(variant<_Types...>& __v)
   b62a0:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
   b62a2:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
   b62a4:	2b0a      	cmp	r3, #10
   b62a6:	d004      	beq.n	b62b2 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
   b62a8:	3bff      	subs	r3, #255	; 0xff
   b62aa:	4258      	negs	r0, r3
   b62ac:	4158      	adcs	r0, r3
   b62ae:	f7ff f957 	bl	b5560 <_ZSt26__throw_bad_variant_accessb>
    }
   b62b2:	bd08      	pop	{r3, pc}

000b62b4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b62b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b62b6:	6806      	ldr	r6, [r0, #0]
	  return make_signed_t<__index_type>(this->_M_index);
   b62b8:	7c33      	ldrb	r3, [r6, #16]
		if (this->index() == __rhs_index)
   b62ba:	2b0a      	cmp	r3, #10
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b62bc:	4605      	mov	r5, r0
   b62be:	460c      	mov	r4, r1
		if (this->index() == __rhs_index)
   b62c0:	d110      	bne.n	b62e4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_+0x30>
		      std::get<__rhs_index>(*this);
   b62c2:	4630      	mov	r0, r6
   b62c4:	f7ff ffec 	bl	b62a0 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
      __a = _GLIBCXX_MOVE(__b);
   b62c8:	6822      	ldr	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b62ca:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   b62cc:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b62ce:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b62d0:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b62d2:	6862      	ldr	r2, [r4, #4]
   b62d4:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b62d6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b62d8:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b62da:	68a2      	ldr	r2, [r4, #8]
   b62dc:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b62de:	60a3      	str	r3, [r4, #8]
      }
   b62e0:	b004      	add	sp, #16
   b62e2:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
   b62e4:	2bff      	cmp	r3, #255	; 0xff
   b62e6:	d014      	beq.n	b6312 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_+0x5e>
			auto __tmp(std::move(__rhs_mem));
   b62e8:	4668      	mov	r0, sp
   b62ea:	f7ff fa86 	bl	b57fa <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
      _Variant_base& operator=(_Variant_base&&) = default;
   b62ee:	e9d5 1000 	ldrd	r1, r0, [r5]
   b62f2:	f7ff f829 	bl	b5348 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   b62f6:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
   b62f8:	4620      	mov	r0, r4
   b62fa:	f7ff fc55 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
   b62fe:	4669      	mov	r1, sp
   b6300:	4620      	mov	r0, r4
   b6302:	f7ff fa7a 	bl	b57fa <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  this->_M_index = __rhs_index;
   b6306:	230a      	movs	r3, #10
   b6308:	7423      	strb	r3, [r4, #16]
   b630a:	4668      	mov	r0, sp
   b630c:	f7ff fc68 	bl	b5be0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
   b6310:	e7e6      	b.n	b62e0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_+0x2c>
	  this->_M_reset();
   b6312:	4630      	mov	r0, r6
   b6314:	f7ff fc48 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
   b6318:	4621      	mov	r1, r4
   b631a:	4630      	mov	r0, r6
   b631c:	f7ff fa6d 	bl	b57fa <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  this->_M_index = __rhs_index;
   b6320:	230a      	movs	r3, #10
   b6322:	7433      	strb	r3, [r6, #16]
			__rhs._M_reset();
   b6324:	6868      	ldr	r0, [r5, #4]
   b6326:	f7ff fc3f 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
   b632a:	e7d9      	b.n	b62e0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_+0x2c>

000b632c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b632c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
   b632e:	6804      	ldr	r4, [r0, #0]
		if (this->_M_index == __rhs_index)
   b6330:	7c23      	ldrb	r3, [r4, #16]
   b6332:	2b0a      	cmp	r3, #10
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b6334:	4605      	mov	r5, r0
   b6336:	460e      	mov	r6, r1
		if (this->_M_index == __rhs_index)
   b6338:	d114      	bne.n	b6364 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SR_+0x38>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
   b633a:	4668      	mov	r0, sp
   b633c:	f7ff fa5d 	bl	b57fa <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
   b6340:	682b      	ldr	r3, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6342:	9900      	ldr	r1, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6344:	681a      	ldr	r2, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6346:	6019      	str	r1, [r3, #0]
   b6348:	9901      	ldr	r1, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b634a:	9200      	str	r2, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b634c:	685a      	ldr	r2, [r3, #4]
      __a = _GLIBCXX_MOVE(__b);
   b634e:	6059      	str	r1, [r3, #4]
   b6350:	9902      	ldr	r1, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6352:	9201      	str	r2, [sp, #4]
   b6354:	4668      	mov	r0, sp
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6356:	689a      	ldr	r2, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6358:	6099      	str	r1, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b635a:	9202      	str	r2, [sp, #8]
   b635c:	f7ff fc40 	bl	b5be0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
      }
   b6360:	b004      	add	sp, #16
   b6362:	bd70      	pop	{r4, r5, r6, pc}
	      this->_M_reset();
   b6364:	4620      	mov	r0, r4
   b6366:	f7ff fc1f 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   b636a:	230a      	movs	r3, #10
   b636c:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
   b636e:	4631      	mov	r1, r6
   b6370:	4620      	mov	r0, r4
   b6372:	f7ff fa42 	bl	b57fa <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  return std::get<_Np>(*this);
   b6376:	4620      	mov	r0, r4
   b6378:	f7ff ff92 	bl	b62a0 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
      }
   b637c:	e7f0      	b.n	b6360 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SR_+0x34>

000b637e <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>:
    T& as() {
   b637e:	b510      	push	{r4, lr}
        if (!is<T>()) {
   b6380:	7c03      	ldrb	r3, [r0, #16]
   b6382:	2b0a      	cmp	r3, #10
    T& as() {
   b6384:	b088      	sub	sp, #32
   b6386:	4604      	mov	r4, r0
        if (!is<T>()) {
   b6388:	d01f      	beq.n	b63ca <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v+0x4c>
            v_ = to<T>();
   b638a:	4601      	mov	r1, r0
   b638c:	4668      	mov	r0, sp
   b638e:	f7ff fa7b 	bl	b5888 <_ZNK8particle7Variant2toINS_3MapI6StringS0_St4lessIS3_EEEEET_v>
	  if (index() == __index)
   b6392:	7c23      	ldrb	r3, [r4, #16]
   b6394:	2b0a      	cmp	r3, #10
   b6396:	d11d      	bne.n	b63d4 <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v+0x56>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
   b6398:	4669      	mov	r1, sp
   b639a:	a804      	add	r0, sp, #16
   b639c:	f7ff fa2d 	bl	b57fa <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
   b63a0:	4620      	mov	r0, r4
   b63a2:	f7ff ff7d 	bl	b62a0 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
      __a = _GLIBCXX_MOVE(__b);
   b63a6:	9a04      	ldr	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b63a8:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   b63aa:	6002      	str	r2, [r0, #0]
   b63ac:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b63ae:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b63b0:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b63b2:	6042      	str	r2, [r0, #4]
   b63b4:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b63b6:	9305      	str	r3, [sp, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b63b8:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b63ba:	6082      	str	r2, [r0, #8]
   b63bc:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
   b63be:	9306      	str	r3, [sp, #24]
   b63c0:	f7ff fc0e 	bl	b5be0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
   b63c4:	4668      	mov	r0, sp
   b63c6:	f7ff fc0b 	bl	b5be0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
   b63ca:	4620      	mov	r0, r4
   b63cc:	f7ff ff68 	bl	b62a0 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
    }
   b63d0:	b008      	add	sp, #32
   b63d2:	bd10      	pop	{r4, pc}
	      this->_M_reset();
   b63d4:	4620      	mov	r0, r4
   b63d6:	f7ff fbe7 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   b63da:	230a      	movs	r3, #10
   b63dc:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
   b63de:	4669      	mov	r1, sp
   b63e0:	4620      	mov	r0, r4
   b63e2:	f7ff fa0a 	bl	b57fa <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  return std::get<_Np>(*this);
   b63e6:	4620      	mov	r0, r4
   b63e8:	f7ff ff5a 	bl	b62a0 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
   b63ec:	e7ea      	b.n	b63c4 <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v+0x46>
	...

000b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>:
      swap(variant& __rhs)
   b63f0:	b507      	push	{r0, r1, r2, lr}
	  return make_signed_t<__index_type>(this->_M_index);
   b63f2:	f991 3010 	ldrsb.w	r3, [r1, #16]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
   b63f6:	4a05      	ldr	r2, [pc, #20]	; (b640c <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_+0x1c>)
      auto __func_ptr = __vtable._M_access(__variants.index()...);
   b63f8:	3301      	adds	r3, #1
	__detail::__variant::__raw_idx_visit(
   b63fa:	e9cd 0100 	strd	r0, r1, [sp]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
   b63fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   b6402:	4668      	mov	r0, sp
   b6404:	4798      	blx	r3
      }
   b6406:	b003      	add	sp, #12
   b6408:	f85d fb04 	ldr.w	pc, [sp], #4
   b640c:	000bde5c 	.word	0x000bde5c

000b6410 <_ZN18DeviceConfigLedger5setupEv>:
void DeviceConfigLedger::setup() {
   b6410:	b530      	push	{r4, r5, lr}
    if (configDefaultLedgerEnabled) {
   b6412:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
void DeviceConfigLedger::setup() {
   b6416:	b087      	sub	sp, #28
   b6418:	4604      	mov	r4, r0
    if (configDefaultLedgerEnabled) {
   b641a:	b323      	cbz	r3, b6466 <_ZN18DeviceConfigLedger5setupEv+0x56>
        configDefaultLedger = Particle.ledger(configDefaultLedgerName);
   b641c:	6d01      	ldr	r1, [r0, #80]	; 0x50
   b641e:	4668      	mov	r0, sp
   b6420:	f001 fa96 	bl	b7950 <_ZN10CloudClass6ledgerEPKc>
      __a = _GLIBCXX_MOVE(__b);
   b6424:	9a00      	ldr	r2, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6426:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __a = _GLIBCXX_MOVE(__b);
   b6428:	6722      	str	r2, [r4, #112]	; 0x70
   b642a:	4668      	mov	r0, sp
   b642c:	f104 0570 	add.w	r5, r4, #112	; 0x70
      __b = _GLIBCXX_MOVE(__tmp);
   b6430:	9300      	str	r3, [sp, #0]
   b6432:	f7ff f8a9 	bl	b5588 <_ZN8particle6LedgerD1Ev>
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b6436:	4b21      	ldr	r3, [pc, #132]	; (b64bc <_ZN18DeviceConfigLedger5setupEv+0xac>)
   b6438:	9303      	str	r3, [sp, #12]
        configDefaultLedger.onSync([this](Ledger ledger) {
   b643a:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   b643c:	4b20      	ldr	r3, [pc, #128]	; (b64c0 <_ZN18DeviceConfigLedger5setupEv+0xb0>)
   b643e:	9302      	str	r3, [sp, #8]
   b6440:	4628      	mov	r0, r5
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6442:	9400      	str	r4, [sp, #0]
   b6444:	f002 f99c 	bl	b8780 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE>
    class function<_Res(_ArgTypes...)>
   b6448:	4668      	mov	r0, sp
   b644a:	f7ff f825 	bl	b5498 <_ZNSt14_Function_baseD1Ev>
        defaultConfig = configDefaultLedger.get();
   b644e:	4629      	mov	r1, r5
   b6450:	4668      	mov	r0, sp
   b6452:	f002 f903 	bl	b865c <_ZNK8particle6Ledger3getEv>
    { __lhs.swap(__rhs); }
   b6456:	f104 0008 	add.w	r0, r4, #8
   b645a:	4669      	mov	r1, sp
   b645c:	f7ff ffc8 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   b6460:	4668      	mov	r0, sp
   b6462:	f7ff fba1 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    if (configDeviceLedgerEnabled) {
   b6466:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
   b646a:	b323      	cbz	r3, b64b6 <_ZN18DeviceConfigLedger5setupEv+0xa6>
        configDeviceLedger = Particle.ledger(configDeviceLedgerName);
   b646c:	6e21      	ldr	r1, [r4, #96]	; 0x60
   b646e:	4668      	mov	r0, sp
   b6470:	f001 fa6e 	bl	b7950 <_ZN10CloudClass6ledgerEPKc>
      __a = _GLIBCXX_MOVE(__b);
   b6474:	9a00      	ldr	r2, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6476:	6f63      	ldr	r3, [r4, #116]	; 0x74
      __a = _GLIBCXX_MOVE(__b);
   b6478:	6762      	str	r2, [r4, #116]	; 0x74
   b647a:	4668      	mov	r0, sp
   b647c:	f104 0574 	add.w	r5, r4, #116	; 0x74
      __b = _GLIBCXX_MOVE(__tmp);
   b6480:	9300      	str	r3, [sp, #0]
   b6482:	f7ff f881 	bl	b5588 <_ZN8particle6LedgerD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   b6486:	4b0f      	ldr	r3, [pc, #60]	; (b64c4 <_ZN18DeviceConfigLedger5setupEv+0xb4>)
   b6488:	9303      	str	r3, [sp, #12]
        configDeviceLedger.onSync([this](Ledger ledger) {
   b648a:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   b648c:	4b0e      	ldr	r3, [pc, #56]	; (b64c8 <_ZN18DeviceConfigLedger5setupEv+0xb8>)
   b648e:	9302      	str	r3, [sp, #8]
   b6490:	4628      	mov	r0, r5
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6492:	9400      	str	r4, [sp, #0]
   b6494:	f002 f974 	bl	b8780 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE>
    class function<_Res(_ArgTypes...)>
   b6498:	4668      	mov	r0, sp
   b649a:	f7fe fffd 	bl	b5498 <_ZNSt14_Function_baseD1Ev>
        deviceConfig = configDeviceLedger.get();
   b649e:	4629      	mov	r1, r5
   b64a0:	4668      	mov	r0, sp
   b64a2:	f002 f8db 	bl	b865c <_ZNK8particle6Ledger3getEv>
    { __lhs.swap(__rhs); }
   b64a6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b64aa:	4669      	mov	r1, sp
   b64ac:	f7ff ffa0 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   b64b0:	4668      	mov	r0, sp
   b64b2:	f7ff fb79 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
   b64b6:	b007      	add	sp, #28
   b64b8:	bd30      	pop	{r4, r5, pc}
   b64ba:	bf00      	nop
   b64bc:	000b64cd 	.word	0x000b64cd
   b64c0:	000b5391 	.word	0x000b5391
   b64c4:	000b64fd 	.word	0x000b64fd
   b64c8:	000b537d 	.word	0x000b537d

000b64cc <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b64cc:	b510      	push	{r4, lr}
   b64ce:	b088      	sub	sp, #32
      __a = _GLIBCXX_MOVE(__b);
   b64d0:	680b      	ldr	r3, [r1, #0]
   b64d2:	9301      	str	r3, [sp, #4]
   b64d4:	4604      	mov	r4, r0
      __b = _GLIBCXX_MOVE(__tmp);
   b64d6:	2300      	movs	r3, #0
   b64d8:	600b      	str	r3, [r1, #0]
            defaultConfig = ledger.get();
   b64da:	a802      	add	r0, sp, #8
   b64dc:	a901      	add	r1, sp, #4
   b64de:	f002 f8bd 	bl	b865c <_ZNK8particle6Ledger3getEv>
        swap(var1.v_, var2.v_);
   b64e2:	6820      	ldr	r0, [r4, #0]
    { __lhs.swap(__rhs); }
   b64e4:	a902      	add	r1, sp, #8
   b64e6:	3008      	adds	r0, #8
   b64e8:	f7ff ff82 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   b64ec:	a802      	add	r0, sp, #8
   b64ee:	f7ff fb5b 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b64f2:	a801      	add	r0, sp, #4
   b64f4:	f7ff f848 	bl	b5588 <_ZN8particle6LedgerD1Ev>
      }
   b64f8:	b008      	add	sp, #32
   b64fa:	bd10      	pop	{r4, pc}

000b64fc <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E0_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b64fc:	b510      	push	{r4, lr}
   b64fe:	b088      	sub	sp, #32
      __a = _GLIBCXX_MOVE(__b);
   b6500:	680b      	ldr	r3, [r1, #0]
   b6502:	9301      	str	r3, [sp, #4]
   b6504:	4604      	mov	r4, r0
      __b = _GLIBCXX_MOVE(__tmp);
   b6506:	2300      	movs	r3, #0
   b6508:	600b      	str	r3, [r1, #0]
            deviceConfig = ledger.get();
   b650a:	a802      	add	r0, sp, #8
   b650c:	a901      	add	r1, sp, #4
   b650e:	f002 f8a5 	bl	b865c <_ZNK8particle6Ledger3getEv>
   b6512:	6820      	ldr	r0, [r4, #0]
    { __lhs.swap(__rhs); }
   b6514:	a902      	add	r1, sp, #8
   b6516:	3038      	adds	r0, #56	; 0x38
   b6518:	f7ff ff6a 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   b651c:	a802      	add	r0, sp, #8
   b651e:	f7ff fb43 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b6522:	a801      	add	r0, sp, #4
   b6524:	f7ff f830 	bl	b5588 <_ZN8particle6LedgerD1Ev>
      }
   b6528:	b008      	add	sp, #32
   b652a:	bd10      	pop	{r4, pc}

000b652c <_ZN8particle7VariantC1EOS0_>:
    Variant(Variant&& var) :
   b652c:	b510      	push	{r4, lr}
	_M_index{_Np}
   b652e:	2300      	movs	r3, #0
   b6530:	4604      	mov	r4, r0
   b6532:	7403      	strb	r3, [r0, #16]
    { __lhs.swap(__rhs); }
   b6534:	f7ff ff5c 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
    }
   b6538:	4620      	mov	r0, r4
   b653a:	bd10      	pop	{r4, pc}

000b653c <_ZN8particle10LedgerDataC1ENS_7VariantE>:
     *
     * If the `Variant` is not a map, empty ledger data is constructed.
     *
     * @param var `Variant` value.
     */
    LedgerData(Variant var) {
   b653c:	b510      	push	{r4, lr}
	_M_index{_Np}
   b653e:	2300      	movs	r3, #0
   b6540:	7403      	strb	r3, [r0, #16]
        if (var.isMap()) {
   b6542:	7c0b      	ldrb	r3, [r1, #16]
   b6544:	2b0a      	cmp	r3, #10
    LedgerData(Variant var) {
   b6546:	b08a      	sub	sp, #40	; 0x28
   b6548:	4604      	mov	r4, r0
        if (var.isMap()) {
   b654a:	d10c      	bne.n	b6566 <_ZN8particle10LedgerDataC1ENS_7VariantE+0x2a>
            v_ = std::move(var);
   b654c:	a804      	add	r0, sp, #16
   b654e:	f7ff ffed 	bl	b652c <_ZN8particle7VariantC1EOS0_>
    { __lhs.swap(__rhs); }
   b6552:	4620      	mov	r0, r4
   b6554:	a904      	add	r1, sp, #16
   b6556:	f7ff ff4b 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   b655a:	a804      	add	r0, sp, #16
   b655c:	f7ff fb24 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        } else {
            v_ = var.toMap();
        }
    }
   b6560:	4620      	mov	r0, r4
   b6562:	b00a      	add	sp, #40	; 0x28
   b6564:	bd10      	pop	{r4, pc}
        return to<VariantMap>();
   b6566:	4668      	mov	r0, sp
   b6568:	f7ff f98e 	bl	b5888 <_ZNK8particle7Variant2toINS_3MapI6StringS0_St4lessIS3_EEEEET_v>
	  ::new ((void*)std::addressof(_M_storage))
   b656c:	4669      	mov	r1, sp
   b656e:	a804      	add	r0, sp, #16
   b6570:	f7ff f943 	bl	b57fa <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	_M_index{_Np}
   b6574:	230a      	movs	r3, #10
    { __lhs.swap(__rhs); }
   b6576:	a904      	add	r1, sp, #16
   b6578:	4620      	mov	r0, r4
	_M_index{_Np}
   b657a:	f88d 3020 	strb.w	r3, [sp, #32]
    { __lhs.swap(__rhs); }
   b657e:	f7ff ff37 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   b6582:	a804      	add	r0, sp, #16
   b6584:	f7ff fb10 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b6588:	4668      	mov	r0, sp
   b658a:	f7ff fb29 	bl	b5be0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
   b658e:	e7e7      	b.n	b6560 <_ZN8particle10LedgerDataC1ENS_7VariantE+0x24>

000b6590 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b6594:	2300      	movs	r3, #0
   b6596:	e9c0 3300 	strd	r3, r3, [r0]
   b659a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b659c:	f8d1 9004 	ldr.w	r9, [r1, #4]
   b65a0:	4599      	cmp	r9, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b65a2:	4606      	mov	r6, r0
   b65a4:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b65a6:	dd57      	ble.n	b6658 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xc8>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b65a8:	f04f 0a28 	mov.w	sl, #40	; 0x28
    return ::malloc(size);
   b65ac:	fb0a f009 	mul.w	r0, sl, r9
   b65b0:	f001 f8d6 	bl	b7760 <malloc>
            if (!d) {
   b65b4:	4607      	mov	r7, r0
   b65b6:	2800      	cmp	r0, #0
   b65b8:	d04e      	beq.n	b6658 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xc8>
            move(d, data_, data_ + size_);
   b65ba:	e9d6 4500 	ldrd	r4, r5, [r6]
        if (dest > p && dest < end) {
   b65be:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b65c0:	fb0a 4505 	mla	r5, sl, r5, r4
        if (dest > p && dest < end) {
   b65c4:	d919      	bls.n	b65fa <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x6a>
   b65c6:	42a8      	cmp	r0, r5
   b65c8:	d218      	bcs.n	b65fc <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x6c>
            --end;
   b65ca:	3d28      	subs	r5, #40	; 0x28
            dest += end - p - 1;
   b65cc:	f1a4 0a28 	sub.w	sl, r4, #40	; 0x28
   b65d0:	1b2c      	subs	r4, r5, r4
   b65d2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b65d4:	45aa      	cmp	sl, r5
   b65d6:	d028      	beq.n	b662a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x9a>
                new(dest) T(std::move(*end));
   b65d8:	b14c      	cbz	r4, b65ee <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x5e>
      constexpr pair(pair&&) = default;		///< Move constructor
   b65da:	4629      	mov	r1, r5
   b65dc:	4620      	mov	r0, r4
   b65de:	f003 facc 	bl	b9b7a <_ZN6StringC1ERKS_>
   b65e2:	f105 0110 	add.w	r1, r5, #16
   b65e6:	f104 0010 	add.w	r0, r4, #16
   b65ea:	f7ff ff9f 	bl	b652c <_ZN8particle7VariantC1EOS0_>
                end->~T();
   b65ee:	4628      	mov	r0, r5
   b65f0:	f7ff faec 	bl	b5bcc <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
            for (; end != p; --end, --dest) {
   b65f4:	3d28      	subs	r5, #40	; 0x28
   b65f6:	3c28      	subs	r4, #40	; 0x28
   b65f8:	e7ec      	b.n	b65d4 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x44>
        } else if (dest != p) {
   b65fa:	d016      	beq.n	b662a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x9a>
   b65fc:	46ba      	mov	sl, r7
            for (; p != end; ++p, ++dest) {
   b65fe:	42a5      	cmp	r5, r4
   b6600:	d013      	beq.n	b662a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x9a>
                new(dest) T(std::move(*p));
   b6602:	f1ba 0f00 	cmp.w	sl, #0
   b6606:	d009      	beq.n	b661c <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x8c>
   b6608:	4621      	mov	r1, r4
   b660a:	4650      	mov	r0, sl
   b660c:	f003 fab5 	bl	b9b7a <_ZN6StringC1ERKS_>
   b6610:	f104 0110 	add.w	r1, r4, #16
   b6614:	f10a 0010 	add.w	r0, sl, #16
   b6618:	f7ff ff88 	bl	b652c <_ZN8particle7VariantC1EOS0_>
                p->~T();
   b661c:	4620      	mov	r0, r4
   b661e:	f7ff fad5 	bl	b5bcc <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
            for (; p != end; ++p, ++dest) {
   b6622:	3428      	adds	r4, #40	; 0x28
   b6624:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
   b6628:	e7e9      	b.n	b65fe <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x6e>
    ::free(ptr);
   b662a:	6830      	ldr	r0, [r6, #0]
   b662c:	f001 f8a0 	bl	b7770 <free>
        data_ = d;
   b6630:	6037      	str	r7, [r6, #0]
        capacity_ = n;
   b6632:	f8c6 9008 	str.w	r9, [r6, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6636:	e9d8 4300 	ldrd	r4, r3, [r8]
   b663a:	2528      	movs	r5, #40	; 0x28
   b663c:	fb05 4503 	mla	r5, r5, r3, r4
        for (; it != end; ++it, ++dest) {
   b6640:	42a5      	cmp	r5, r4
   b6642:	d006      	beq.n	b6652 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xc2>
            new(dest) T(*it);
   b6644:	4621      	mov	r1, r4
   b6646:	4638      	mov	r0, r7
   b6648:	f7ff f8fa 	bl	b5840 <_ZNSt4pairIK6StringN8particle7VariantEEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b664c:	3428      	adds	r4, #40	; 0x28
   b664e:	3728      	adds	r7, #40	; 0x28
   b6650:	e7f6      	b.n	b6640 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xb0>
        size_ = vector.size_;
   b6652:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6656:	6073      	str	r3, [r6, #4]
}
   b6658:	4630      	mov	r0, r6
   b665a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b665e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESE_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b665e:	b510      	push	{r4, lr}
        ok = true;
   b6660:	2301      	movs	r3, #1
   b6662:	4604      	mov	r4, r0
   b6664:	700b      	strb	r3, [r1, #0]
            cmp_(map.cmp_) {
   b6666:	4611      	mov	r1, r2
   b6668:	f7ff ff92 	bl	b6590 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_>
      }
   b666c:	4620      	mov	r0, r4
   b666e:	bd10      	pop	{r4, pc}

000b6670 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESU_SY_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b6670:	b508      	push	{r3, lr}
   b6672:	6800      	ldr	r0, [r0, #0]
   b6674:	f7ff ff8c 	bl	b6590 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_>
      }
   b6678:	bd08      	pop	{r3, pc}
	...

000b667c <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b667c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6680:	e9d0 7900 	ldrd	r7, r9, [r0]
   b6684:	4688      	mov	r8, r1

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b6686:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   b668a:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b668c:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   b6690:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   b6694:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6696:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   b669a:	d102      	bne.n	b66a2 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b669c:	481b      	ldr	r0, [pc, #108]	; (b670c <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x90>)
   b669e:	f005 f93f 	bl	bb920 <_ZSt20__throw_length_errorPKc>
   b66a2:	2c01      	cmp	r4, #1
   b66a4:	4622      	mov	r2, r4
   b66a6:	bf38      	it	cc
   b66a8:	2201      	movcc	r2, #1
   b66aa:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b66ac:	eba8 0a07 	sub.w	sl, r8, r7

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b66b0:	d228      	bcs.n	b6704 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b66b2:	b34c      	cbz	r4, b6708 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>
   b66b4:	429c      	cmp	r4, r3
   b66b6:	bf28      	it	cs
   b66b8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b66ba:	0120      	lsls	r0, r4, #4
   b66bc:	9101      	str	r1, [sp, #4]
   b66be:	f7fe fba2 	bl	b4e06 <_Znwj>
   b66c2:	9901      	ldr	r1, [sp, #4]
   b66c4:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b66c6:	eb15 000a 	adds.w	r0, r5, sl
   b66ca:	d001      	beq.n	b66d0 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x54>
   b66cc:	f7ff f853 	bl	b5776 <_ZNSt8functionIFvvEEC1ERKS1_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
   b66d0:	4641      	mov	r1, r8
   b66d2:	462a      	mov	r2, r5
   b66d4:	4638      	mov	r0, r7
   b66d6:	f7fe fee8 	bl	b54aa <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   b66da:	4649      	mov	r1, r9
   b66dc:	f100 0210 	add.w	r2, r0, #16
   b66e0:	4640      	mov	r0, r8
   b66e2:	f7fe fee2 	bl	b54aa <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   b66e6:	4680      	mov	r8, r0
	if (__p)
   b66e8:	b127      	cbz	r7, b66f4 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b66ea:	68b1      	ldr	r1, [r6, #8]
	::operator delete(__p
   b66ec:	4638      	mov	r0, r7
   b66ee:	1bc9      	subs	r1, r1, r7
   b66f0:	f7fe fb8f 	bl	b4e12 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b66f4:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   b66f8:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b66fc:	60b4      	str	r4, [r6, #8]
    }
   b66fe:	b002      	add	sp, #8
   b6700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b6704:	461c      	mov	r4, r3
   b6706:	e7d8      	b.n	b66ba <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6708:	4625      	mov	r5, r4
   b670a:	e7dc      	b.n	b66c6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4a>
   b670c:	000bdca9 	.word	0x000bdca9

000b6710 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b6710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b6712:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6714:	4605      	mov	r5, r0
        if (n > 0) {
   b6716:	dd13      	ble.n	b6740 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b6718:	2714      	movs	r7, #20
    return ::malloc(size);
   b671a:	fb07 f006 	mul.w	r0, r7, r6
   b671e:	f001 f81f 	bl	b7760 <malloc>
            if (!d) {
   b6722:	4604      	mov	r4, r0
   b6724:	b158      	cbz	r0, b673e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b6726:	e9d5 1200 	ldrd	r1, r2, [r5]
   b672a:	fb07 1202 	mla	r2, r7, r2, r1
   b672e:	f7fe fc0b 	bl	b4f48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b6732:	6828      	ldr	r0, [r5, #0]
   b6734:	f001 f81c 	bl	b7770 <free>
        data_ = d;
   b6738:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b673a:	60ae      	str	r6, [r5, #8]
        return true;
   b673c:	2001      	movs	r0, #1
    }
   b673e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b6740:	2400      	movs	r4, #0
   b6742:	e7f6      	b.n	b6732 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>

000b6744 <_ZN26DeviceInfoLedgerLogHandlerC1E8LogLevelN5spark6VectorINS1_17LogCategoryFilterENS1_16DefaultAllocatorEEE>:
DeviceInfoLedgerLogHandler::DeviceInfoLedgerLogHandler(LogLevel level, LogCategoryFilters filters) : StreamLogHandler(*this, level, filters) {
   b6744:	b570      	push	{r4, r5, r6, lr}
   b6746:	b08a      	sub	sp, #40	; 0x28
   b6748:	4604      	mov	r4, r0
   b674a:	460e      	mov	r6, r1
   b674c:	a801      	add	r0, sp, #4
   b674e:	4611      	mov	r1, r2
   b6750:	f7fe fc28 	bl	b4fa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6754:	4625      	mov	r5, r4
        stream_(&stream) {
   b6756:	a901      	add	r1, sp, #4
   b6758:	a804      	add	r0, sp, #16
   b675a:	f7fe fc23 	bl	b4fa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b675e:	4b12      	ldr	r3, [pc, #72]	; (b67a8 <_ZN26DeviceInfoLedgerLogHandlerC1E8LogLevelN5spark6VectorINS1_17LogCategoryFilterENS1_16DefaultAllocatorEEE+0x64>)
   b6760:	f845 3b04 	str.w	r3, [r5], #4
   b6764:	a904      	add	r1, sp, #16
   b6766:	a807      	add	r0, sp, #28
   b6768:	f7fe fc1c 	bl	b4fa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b676c:	aa07      	add	r2, sp, #28
   b676e:	4631      	mov	r1, r6
   b6770:	4628      	mov	r0, r5
   b6772:	f002 fd03 	bl	b917c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6776:	a807      	add	r0, sp, #28
   b6778:	f7fe fbd3 	bl	b4f22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b677c:	a804      	add	r0, sp, #16
   b677e:	f7fe fbd0 	bl	b4f22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6782:	4623      	mov	r3, r4
   b6784:	4a09      	ldr	r2, [pc, #36]	; (b67ac <_ZN26DeviceInfoLedgerLogHandlerC1E8LogLevelN5spark6VectorINS1_17LogCategoryFilterENS1_16DefaultAllocatorEEE+0x68>)
   b6786:	f843 2b24 	str.w	r2, [r3], #36
   b678a:	a801      	add	r0, sp, #4
   b678c:	6223      	str	r3, [r4, #32]
   b678e:	f7fe fbc8 	bl	b4f22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>

  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b6792:	2300      	movs	r3, #0
   b6794:	62a3      	str	r3, [r4, #40]	; 0x28
   b6796:	4b06      	ldr	r3, [pc, #24]	; (b67b0 <_ZN26DeviceInfoLedgerLogHandlerC1E8LogLevelN5spark6VectorINS1_17LogCategoryFilterENS1_16DefaultAllocatorEEE+0x6c>)
}
   b6798:	4620      	mov	r0, r4
DeviceInfoLedgerLogHandler::DeviceInfoLedgerLogHandler(LogLevel level, LogCategoryFilters filters) : StreamLogHandler(*this, level, filters) {
   b679a:	f103 0208 	add.w	r2, r3, #8
   b679e:	3324      	adds	r3, #36	; 0x24
   b67a0:	6022      	str	r2, [r4, #0]
   b67a2:	6263      	str	r3, [r4, #36]	; 0x24
}
   b67a4:	b00a      	add	sp, #40	; 0x28
   b67a6:	bd70      	pop	{r4, r5, r6, pc}
   b67a8:	000bdbe4 	.word	0x000bdbe4
   b67ac:	000be410 	.word	0x000be410
   b67b0:	000be150 	.word	0x000be150

000b67b4 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b67b4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b67b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b67b8:	4604      	mov	r4, r0
   b67ba:	460d      	mov	r5, r1
   b67bc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b67be:	d914      	bls.n	b67ea <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b67c0:	4290      	cmp	r0, r2
   b67c2:	d213      	bcs.n	b67ec <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b67c4:	f1a2 0618 	sub.w	r6, r2, #24
            dest += end - p - 1;
   b67c8:	1a75      	subs	r5, r6, r1
   b67ca:	f1a1 0718 	sub.w	r7, r1, #24
   b67ce:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b67d0:	42b7      	cmp	r7, r6
   b67d2:	d018      	beq.n	b6806 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b67d4:	b11c      	cbz	r4, b67de <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b67d6:	4631      	mov	r1, r6
   b67d8:	4620      	mov	r0, r4
   b67da:	f7ff fea7 	bl	b652c <_ZN8particle7VariantC1EOS0_>
      { _M_reset(); }
   b67de:	4630      	mov	r0, r6
   b67e0:	f7ff f9e2 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            for (; end != p; --end, --dest) {
   b67e4:	3e18      	subs	r6, #24
   b67e6:	3c18      	subs	r4, #24
   b67e8:	e7f2      	b.n	b67d0 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b67ea:	d00c      	beq.n	b6806 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b67ec:	42b5      	cmp	r5, r6
   b67ee:	d00a      	beq.n	b6806 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b67f0:	b11c      	cbz	r4, b67fa <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b67f2:	4629      	mov	r1, r5
   b67f4:	4620      	mov	r0, r4
   b67f6:	f7ff fe99 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   b67fa:	4628      	mov	r0, r5
   b67fc:	f7ff f9d4 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            for (; p != end; ++p, ++dest) {
   b6800:	3518      	adds	r5, #24
   b6802:	3418      	adds	r4, #24
   b6804:	e7f2      	b.n	b67ec <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6808 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b680a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b680c:	4605      	mov	r5, r0
        if (n > 0) {
   b680e:	dd13      	ble.n	b6838 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b6810:	2718      	movs	r7, #24
    return ::malloc(size);
   b6812:	fb07 f006 	mul.w	r0, r7, r6
   b6816:	f000 ffa3 	bl	b7760 <malloc>
            if (!d) {
   b681a:	4604      	mov	r4, r0
   b681c:	b158      	cbz	r0, b6836 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b681e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6822:	fb07 1202 	mla	r2, r7, r2, r1
   b6826:	f7ff ffc5 	bl	b67b4 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b682a:	6828      	ldr	r0, [r5, #0]
   b682c:	f000 ffa0 	bl	b7770 <free>
        data_ = d;
   b6830:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6832:	60ae      	str	r6, [r5, #8]
        return true;
   b6834:	2001      	movs	r0, #1
    }
   b6836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b6838:	2400      	movs	r4, #0
   b683a:	e7f6      	b.n	b682a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b683c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b683c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b6840:	2300      	movs	r3, #0
   b6842:	e9c0 3300 	strd	r3, r3, [r0]
   b6846:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6848:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b684a:	6849      	ldr	r1, [r1, #4]
   b684c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b684e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6850:	dd15      	ble.n	b687e <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x42>
   b6852:	f7ff ffd9 	bl	b6808 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6856:	b190      	cbz	r0, b687e <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x42>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6858:	e9d5 6300 	ldrd	r6, r3, [r5]
   b685c:	f04f 0818 	mov.w	r8, #24
   b6860:	6827      	ldr	r7, [r4, #0]
   b6862:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   b6866:	45b0      	cmp	r8, r6
   b6868:	d007      	beq.n	b687a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
            new(dest) T(*it);
   b686a:	b11f      	cbz	r7, b6874 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x38>
      _Move_ctor_base(const _Move_ctor_base&) = default;
   b686c:	4631      	mov	r1, r6
   b686e:	4638      	mov	r0, r7
   b6870:	f7fe ffd2 	bl	b5818 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
        for (; it != end; ++it, ++dest) {
   b6874:	3618      	adds	r6, #24
   b6876:	3718      	adds	r7, #24
   b6878:	e7f5      	b.n	b6866 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x2a>
        size_ = vector.size_;
   b687a:	686b      	ldr	r3, [r5, #4]
   b687c:	6063      	str	r3, [r4, #4]
}
   b687e:	4620      	mov	r0, r4
   b6880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6884 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESU_SY_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   b6884:	b508      	push	{r3, lr}
        ::new (__storage)
   b6886:	6800      	ldr	r0, [r0, #0]
   b6888:	f7ff ffd8 	bl	b683c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_>
      }
   b688c:	bd08      	pop	{r3, pc}

000b688e <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0>:

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b688e:	b530      	push	{r4, r5, lr}
   b6890:	b087      	sub	sp, #28
    return insert(size_, std::move(value));
   b6892:	6845      	ldr	r5, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6894:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6896:	4668      	mov	r0, sp
   b6898:	f7ff fe48 	bl	b652c <_ZN8particle7VariantC1EOS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b689c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b68a0:	4299      	cmp	r1, r3
   b68a2:	da10      	bge.n	b68c6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0+0x38>
        return false;
    }
    T* const p = data_ + i;
   b68a4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b68a6:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b68a8:	2218      	movs	r2, #24
   b68aa:	fb02 3505 	mla	r5, r2, r5, r3
    move(p + 1, p, data_ + size_);
   b68ae:	f105 0018 	add.w	r0, r5, #24
   b68b2:	fb02 3201 	mla	r2, r2, r1, r3
   b68b6:	4629      	mov	r1, r5
   b68b8:	f7ff ff7c 	bl	b67b4 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b68bc:	b975      	cbnz	r5, b68dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0+0x4e>
    ++size_;
   b68be:	6863      	ldr	r3, [r4, #4]
   b68c0:	3301      	adds	r3, #1
   b68c2:	6063      	str	r3, [r4, #4]
    return true;
   b68c4:	e005      	b.n	b68d2 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b68c6:	3101      	adds	r1, #1
   b68c8:	4620      	mov	r0, r4
   b68ca:	f7ff ff9d 	bl	b6808 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b68ce:	2800      	cmp	r0, #0
   b68d0:	d1e8      	bne.n	b68a4 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0+0x16>
      { _M_reset(); }
   b68d2:	4668      	mov	r0, sp
   b68d4:	f7ff f968 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
   b68d8:	b007      	add	sp, #28
   b68da:	bd30      	pop	{r4, r5, pc}
    new(p) T(std::move(value));
   b68dc:	4669      	mov	r1, sp
   b68de:	4628      	mov	r0, r5
   b68e0:	f7ff fe24 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   b68e4:	e7eb      	b.n	b68be <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0+0x30>

000b68e6 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE>:
Variant DeviceConfigLedger::getConfigVariant(const char *key, Variant defaultValue) const {
   b68e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b68ea:	460c      	mov	r4, r1
   b68ec:	b09a      	sub	sp, #104	; 0x68
   b68ee:	4615      	mov	r5, r2
    Variant result;
   b68f0:	2100      	movs	r1, #0
   b68f2:	2218      	movs	r2, #24
     *
     * @param name Entry name.
     * @return `true` if the entry exists, otherwise `false`.
     */
    bool has(const char* name) const {
        return v_.has(name);
   b68f4:	f104 0720 	add.w	r7, r4, #32
Variant DeviceConfigLedger::getConfigVariant(const char *key, Variant defaultValue) const {
   b68f8:	4606      	mov	r6, r0
    Variant result;
   b68fa:	f005 f92d 	bl	bbb58 <memset>
        capacity_(0) {
   b68fe:	2300      	movs	r3, #0
   b6900:	4629      	mov	r1, r5
   b6902:	4638      	mov	r0, r7
   b6904:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b6908:	9303      	str	r3, [sp, #12]
   b690a:	f004 f80f 	bl	ba92c <_ZNK8particle7Variant3hasEPKc>
    if (localConfig.has(key)) {
   b690e:	b158      	cbz	r0, b6928 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x42>
        return v_.get(name);
   b6910:	462a      	mov	r2, r5
   b6912:	4639      	mov	r1, r7
   b6914:	a810      	add	r0, sp, #64	; 0x40
   b6916:	f004 f820 	bl	ba95a <_ZNK8particle7Variant3getEPKc>
        sources.append(localConfig.get(key));
   b691a:	a801      	add	r0, sp, #4
   b691c:	a910      	add	r1, sp, #64	; 0x40
   b691e:	f7ff ffb6 	bl	b688e <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0>
   b6922:	a810      	add	r0, sp, #64	; 0x40
   b6924:	f7ff f940 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        return v_.has(name);
   b6928:	f104 0708 	add.w	r7, r4, #8
   b692c:	4629      	mov	r1, r5
   b692e:	4638      	mov	r0, r7
   b6930:	f003 fffc 	bl	ba92c <_ZNK8particle7Variant3hasEPKc>
    if (defaultConfig.has(key)) {
   b6934:	b158      	cbz	r0, b694e <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x68>
        return v_.get(name);
   b6936:	462a      	mov	r2, r5
   b6938:	4639      	mov	r1, r7
   b693a:	a810      	add	r0, sp, #64	; 0x40
   b693c:	f004 f80d 	bl	ba95a <_ZNK8particle7Variant3getEPKc>
        sources.append(defaultConfig.get(key));
   b6940:	a801      	add	r0, sp, #4
   b6942:	a910      	add	r1, sp, #64	; 0x40
   b6944:	f7ff ffa3 	bl	b688e <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0>
   b6948:	a810      	add	r0, sp, #64	; 0x40
   b694a:	f7ff f92d 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        return v_.has(name);
   b694e:	3438      	adds	r4, #56	; 0x38
   b6950:	4629      	mov	r1, r5
   b6952:	4620      	mov	r0, r4
   b6954:	f003 ffea 	bl	ba92c <_ZNK8particle7Variant3hasEPKc>
    if (deviceConfig.has(key)) {
   b6958:	b158      	cbz	r0, b6972 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x8c>
        return v_.get(name);
   b695a:	462a      	mov	r2, r5
   b695c:	4621      	mov	r1, r4
   b695e:	a810      	add	r0, sp, #64	; 0x40
   b6960:	f003 fffb 	bl	ba95a <_ZNK8particle7Variant3getEPKc>
        sources.append(deviceConfig.get(key));
   b6964:	a801      	add	r0, sp, #4
   b6966:	a910      	add	r1, sp, #64	; 0x40
   b6968:	f7ff ff91 	bl	b688e <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0>
   b696c:	a810      	add	r0, sp, #64	; 0x40
   b696e:	f7ff f91b 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    return data_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::Iterator spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6972:	e9dd 5701 	ldrd	r5, r7, [sp, #4]
   b6976:	2318      	movs	r3, #24
   b6978:	fb03 5707 	mla	r7, r3, r7, r5
    for(Variant source : sources) {
   b697c:	42af      	cmp	r7, r5
   b697e:	d04d      	beq.n	b6a1c <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x136>
      _Move_ctor_base(const _Move_ctor_base&) = default;
   b6980:	4629      	mov	r1, r5
   b6982:	a804      	add	r0, sp, #16
   b6984:	f7fe ff48 	bl	b5818 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
	  return make_signed_t<__index_type>(this->_M_index);
   b6988:	f89d 3020 	ldrb.w	r3, [sp, #32]
        if (source.isMap()) {
   b698c:	2b0a      	cmp	r3, #10
   b698e:	d11f      	bne.n	b69d0 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0xea>
        return as<VariantMap>();
   b6990:	a804      	add	r0, sp, #16
   b6992:	f7ff fcf4 	bl	b637e <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b6996:	e9d0 4300 	ldrd	r4, r3, [r0]
   b699a:	f04f 0828 	mov.w	r8, #40	; 0x28
   b699e:	fb08 4803 	mla	r8, r8, r3, r4
            for(Map<String,Variant>::Entry entry : source.asMap().entries()) {
   b69a2:	4544      	cmp	r4, r8
   b69a4:	d035      	beq.n	b6a12 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x12c>
   b69a6:	4621      	mov	r1, r4
   b69a8:	a810      	add	r0, sp, #64	; 0x40
   b69aa:	f7fe ff49 	bl	b5840 <_ZNSt4pairIK6StringN8particle7VariantEEC1ERKS4_>
      _Move_ctor_base(const _Move_ctor_base&) = default;
   b69ae:	a914      	add	r1, sp, #80	; 0x50
   b69b0:	a80a      	add	r0, sp, #40	; 0x28
   b69b2:	f7fe ff31 	bl	b5818 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
                result.set(entry.first, entry.second);
   b69b6:	aa0a      	add	r2, sp, #40	; 0x28
   b69b8:	a910      	add	r1, sp, #64	; 0x40
   b69ba:	4630      	mov	r0, r6
   b69bc:	f004 f8f4 	bl	baba8 <_ZN8particle7Variant3setERK6StringS0_>
      { _M_reset(); }
   b69c0:	a80a      	add	r0, sp, #40	; 0x28
   b69c2:	f7ff f8f1 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            for(Map<String,Variant>::Entry entry : source.asMap().entries()) {
   b69c6:	a810      	add	r0, sp, #64	; 0x40
   b69c8:	f7ff f900 	bl	b5bcc <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
   b69cc:	3428      	adds	r4, #40	; 0x28
   b69ce:	e7e8      	b.n	b69a2 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0xbc>
        if (source.isArray()) {
   b69d0:	2b09      	cmp	r3, #9
   b69d2:	d113      	bne.n	b69fc <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x116>
            for(int ii = 0; ii < source.size(); ii++) {
   b69d4:	2400      	movs	r4, #0
   b69d6:	a804      	add	r0, sp, #16
   b69d8:	f003 fdb6 	bl	ba548 <_ZNK8particle7Variant4sizeEv>
   b69dc:	42a0      	cmp	r0, r4
   b69de:	dd18      	ble.n	b6a12 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x12c>
                result.append(source.at(ii));
   b69e0:	4622      	mov	r2, r4
   b69e2:	a904      	add	r1, sp, #16
   b69e4:	a810      	add	r0, sp, #64	; 0x40
   b69e6:	f003 fd07 	bl	ba3f8 <_ZNK8particle7Variant2atEi>
   b69ea:	a910      	add	r1, sp, #64	; 0x40
   b69ec:	4630      	mov	r0, r6
   b69ee:	f003 ff37 	bl	ba860 <_ZN8particle7Variant6appendES0_>
   b69f2:	a810      	add	r0, sp, #64	; 0x40
   b69f4:	f7ff f8d8 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            for(int ii = 0; ii < source.size(); ii++) {
   b69f8:	3401      	adds	r4, #1
   b69fa:	e7ec      	b.n	b69d6 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0xf0>
      _Move_ctor_base(const _Move_ctor_base&) = default;
   b69fc:	a904      	add	r1, sp, #16
   b69fe:	a810      	add	r0, sp, #64	; 0x40
   b6a00:	f7fe ff0a 	bl	b5818 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
    { __lhs.swap(__rhs); }
   b6a04:	4630      	mov	r0, r6
   b6a06:	a910      	add	r1, sp, #64	; 0x40
   b6a08:	f7ff fcf2 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   b6a0c:	a810      	add	r0, sp, #64	; 0x40
   b6a0e:	f7ff f8cb 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b6a12:	a804      	add	r0, sp, #16
   b6a14:	f7ff f8c8 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    for(Variant source : sources) {
   b6a18:	3518      	adds	r5, #24
   b6a1a:	e7af      	b.n	b697c <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x96>
    Vector<Variant> sources;
   b6a1c:	a801      	add	r0, sp, #4
   b6a1e:	f7ff f942 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
}
   b6a22:	4630      	mov	r0, r6
   b6a24:	b01a      	add	sp, #104	; 0x68
   b6a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b6a2c <_ZNK18DeviceConfigLedger12getConfigIntEPKci>:
    int getConfigInt(const char *key, int defaultValue = 0) const { return getConfigVariant(key, Variant(defaultValue)).toInt(); };
   b6a2c:	b510      	push	{r4, lr}
   b6a2e:	b08e      	sub	sp, #56	; 0x38
	_M_index{_Np}
   b6a30:	2302      	movs	r3, #2
	: _M_storage(std::forward<_Args>(__args)...)
   b6a32:	9202      	str	r2, [sp, #8]
	_M_index{_Np}
   b6a34:	f88d 3018 	strb.w	r3, [sp, #24]
   b6a38:	460a      	mov	r2, r1
   b6a3a:	ab02      	add	r3, sp, #8
   b6a3c:	4601      	mov	r1, r0
   b6a3e:	a808      	add	r0, sp, #32
   b6a40:	f7ff ff51 	bl	b68e6 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE>
        return std::visit(ConvertToVisitor<T>(), v_);
   b6a44:	2300      	movs	r3, #0
   b6a46:	f88d 3004 	strb.w	r3, [sp, #4]
	return this->_M_index != __index_type(variant_npos);
   b6a4a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
      if ((__variants.valueless_by_exception() || ...))
   b6a4e:	2bff      	cmp	r3, #255	; 0xff
   b6a50:	d101      	bne.n	b6a56 <_ZNK18DeviceConfigLedger12getConfigIntEPKci+0x2a>
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
   b6a52:	f000 fead 	bl	b77b0 <abort>
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
   b6a56:	4a08      	ldr	r2, [pc, #32]	; (b6a78 <_ZNK18DeviceConfigLedger12getConfigIntEPKci+0x4c>)
	  return make_signed_t<__index_type>(this->_M_index);
   b6a58:	b25b      	sxtb	r3, r3
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
   b6a5a:	a908      	add	r1, sp, #32
   b6a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   b6a60:	a801      	add	r0, sp, #4
   b6a62:	4798      	blx	r3
   b6a64:	4604      	mov	r4, r0
      { _M_reset(); }
   b6a66:	a808      	add	r0, sp, #32
   b6a68:	f7ff f89e 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b6a6c:	a802      	add	r0, sp, #8
   b6a6e:	f7ff f89b 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b6a72:	4620      	mov	r0, r4
   b6a74:	b00e      	add	sp, #56	; 0x38
   b6a76:	bd10      	pop	{r4, pc}
   b6a78:	000bdf40 	.word	0x000bdf40

000b6a7c <_ZNK18DeviceConfigLedger15getConfigStringEPKcS1_>:
    String getConfigString(const char *key, const char *defaultValue = "") const { return getConfigVariant(key, Variant(defaultValue)).toString(); };
   b6a7c:	b530      	push	{r4, r5, lr}
   b6a7e:	b08f      	sub	sp, #60	; 0x3c
   b6a80:	4604      	mov	r4, r0
   b6a82:	460d      	mov	r5, r1
   b6a84:	a802      	add	r0, sp, #8
   b6a86:	4619      	mov	r1, r3
   b6a88:	9201      	str	r2, [sp, #4]
   b6a8a:	f7fe fd6c 	bl	b5566 <_ZN8particle7VariantC1EPKc>
   b6a8e:	9a01      	ldr	r2, [sp, #4]
   b6a90:	ab02      	add	r3, sp, #8
   b6a92:	4629      	mov	r1, r5
   b6a94:	a808      	add	r0, sp, #32
   b6a96:	f7ff ff26 	bl	b68e6 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE>
        return to<String>();
   b6a9a:	a908      	add	r1, sp, #32
   b6a9c:	4620      	mov	r0, r4
   b6a9e:	f7fe fedd 	bl	b585c <_ZNK8particle7Variant2toI6StringEET_v>
   b6aa2:	a808      	add	r0, sp, #32
   b6aa4:	f7ff f880 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b6aa8:	a802      	add	r0, sp, #8
   b6aaa:	f7ff f87d 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b6aae:	4620      	mov	r0, r4
   b6ab0:	b00f      	add	sp, #60	; 0x3c
   b6ab2:	bd30      	pop	{r4, r5, pc}

000b6ab4 <_ZNK19DeviceConfigWrapper13getConfigBoolEPKcb.isra.0>:
    bool getConfigBool(const char *key, bool defaultValue = false) const { return DeviceConfigLedger::instance().getConfigBool(key, defaultValue); };
   b6ab4:	b510      	push	{r4, lr}
   b6ab6:	b090      	sub	sp, #64	; 0x40
   b6ab8:	460c      	mov	r4, r1
   b6aba:	9001      	str	r0, [sp, #4]
   b6abc:	f7ff f8de 	bl	b5c7c <_ZN18DeviceConfigLedger8instanceEv>
	_M_index{_Np}
   b6ac0:	2301      	movs	r3, #1
   b6ac2:	4601      	mov	r1, r0
   b6ac4:	f88d 3020 	strb.w	r3, [sp, #32]
    bool getConfigBool(const char *key, bool defaultValue = false) const { return getConfigVariant(key, Variant(defaultValue)).toBool(); };
   b6ac8:	9a01      	ldr	r2, [sp, #4]
	: _M_storage(std::forward<_Args>(__args)...)
   b6aca:	f88d 4010 	strb.w	r4, [sp, #16]
   b6ace:	ab04      	add	r3, sp, #16
   b6ad0:	a80a      	add	r0, sp, #40	; 0x28
   b6ad2:	f7ff ff08 	bl	b68e6 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE>
        return std::visit(ConvertToVisitor<T>(), v_);
   b6ad6:	2300      	movs	r3, #0
   b6ad8:	f88d 300c 	strb.w	r3, [sp, #12]
	return this->_M_index != __index_type(variant_npos);
   b6adc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
      if ((__variants.valueless_by_exception() || ...))
   b6ae0:	2bff      	cmp	r3, #255	; 0xff
   b6ae2:	d101      	bne.n	b6ae8 <_ZNK19DeviceConfigWrapper13getConfigBoolEPKcb.isra.0+0x34>
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
   b6ae4:	f000 fe64 	bl	b77b0 <abort>
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
   b6ae8:	4a08      	ldr	r2, [pc, #32]	; (b6b0c <_ZNK19DeviceConfigWrapper13getConfigBoolEPKcb.isra.0+0x58>)
	  return make_signed_t<__index_type>(this->_M_index);
   b6aea:	b25b      	sxtb	r3, r3
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
   b6aec:	a90a      	add	r1, sp, #40	; 0x28
   b6aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   b6af2:	a803      	add	r0, sp, #12
   b6af4:	4798      	blx	r3
   b6af6:	4604      	mov	r4, r0
      { _M_reset(); }
   b6af8:	a80a      	add	r0, sp, #40	; 0x28
   b6afa:	f7ff f855 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b6afe:	a804      	add	r0, sp, #16
   b6b00:	f7ff f852 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    bool getConfigBool(const char *key, bool defaultValue = false) const { return DeviceConfigLedger::instance().getConfigBool(key, defaultValue); };
   b6b04:	4620      	mov	r0, r4
   b6b06:	b010      	add	sp, #64	; 0x40
   b6b08:	bd10      	pop	{r4, pc}
   b6b0a:	bf00      	nop
   b6b0c:	000bdf6c 	.word	0x000bdf6c

000b6b10 <_ZN16DeviceInfoLedger17onCloudConnectionEv>:
void DeviceInfoLedger::onCloudConnection() {
   b6b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    Variant data;
   b6b12:	2218      	movs	r2, #24
void DeviceInfoLedger::onCloudConnection() {
   b6b14:	b09b      	sub	sp, #108	; 0x6c
   b6b16:	4605      	mov	r5, r0
    Variant data;
   b6b18:	2100      	movs	r1, #0
   b6b1a:	eb0d 0002 	add.w	r0, sp, r2
   b6b1e:	f005 f81b 	bl	bbb58 <memset>
	return __atomic_load_n(&_M_i, int(__m));
   b6b22:	f3bf 8f5b 	dmb	ish
   b6b26:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   b6b28:	f3bf 8f5b 	dmb	ish
    if (offset) {
   b6b2c:	b387      	cbz	r7, b6b90 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x80>
        if (size > connectionLogSize) {
   b6b2e:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   b6b30:	42be      	cmp	r6, r7
   b6b32:	bf28      	it	cs
   b6b34:	463e      	movcs	r6, r7
        char *buf = new char[size + 1];
   b6b36:	1c70      	adds	r0, r6, #1
   b6b38:	f7fe f967 	bl	b4e0a <_Znaj>
        if (buf) {
   b6b3c:	4604      	mov	r4, r0
   b6b3e:	b1f8      	cbz	r0, b6b80 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x70>
   b6b40:	1bbb      	subs	r3, r7, r6
   b6b42:	1e41      	subs	r1, r0, #1
            for(size_t ii = 0; ii < size; ii++) {
   b6b44:	42bb      	cmp	r3, r7
   b6b46:	d00a      	beq.n	b6b5e <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x4e>
                buf[ii] = (char) connectionLogBuffer[(offset - size + ii) % connectionLogSize];
   b6b48:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b6b4a:	fbb3 f2f0 	udiv	r2, r3, r0
   b6b4e:	fb00 3212 	mls	r2, r0, r2, r3
   b6b52:	6a28      	ldr	r0, [r5, #32]
   b6b54:	5c82      	ldrb	r2, [r0, r2]
   b6b56:	f801 2f01 	strb.w	r2, [r1, #1]!
            for(size_t ii = 0; ii < size; ii++) {
   b6b5a:	3301      	adds	r3, #1
   b6b5c:	e7f2      	b.n	b6b44 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x34>
            buf[size] = 0;
   b6b5e:	2300      	movs	r3, #0
   b6b60:	55a3      	strb	r3, [r4, r6]
            data.set("connLog", buf);
   b6b62:	4621      	mov	r1, r4
   b6b64:	a812      	add	r0, sp, #72	; 0x48
   b6b66:	f7fe fcfe 	bl	b5566 <_ZN8particle7VariantC1EPKc>
   b6b6a:	498b      	ldr	r1, [pc, #556]	; (b6d98 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x288>)
   b6b6c:	aa12      	add	r2, sp, #72	; 0x48
   b6b6e:	a806      	add	r0, sp, #24
   b6b70:	f003 ffac 	bl	baacc <_ZN8particle7Variant3setEPKcS0_>
   b6b74:	a812      	add	r0, sp, #72	; 0x48
   b6b76:	f7ff f817 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            delete[] buf;
   b6b7a:	4620      	mov	r0, r4
   b6b7c:	f7fe f947 	bl	b4e0e <_ZdaPv>
        writeToConnectionLog = false;
   b6b80:	2300      	movs	r3, #0
   b6b82:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	__atomic_store_n(&_M_i, __i, int(__m));
   b6b86:	f3bf 8f5b 	dmb	ish
   b6b8a:	62ab      	str	r3, [r5, #40]	; 0x28
   b6b8c:	f3bf 8f5b 	dmb	ish
    if (lastRunLog) {
   b6b90:	69e9      	ldr	r1, [r5, #28]
   b6b92:	b151      	cbz	r1, b6baa <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x9a>
        data.set("lastRun", lastRunLog);
   b6b94:	a812      	add	r0, sp, #72	; 0x48
   b6b96:	f7fe fce6 	bl	b5566 <_ZN8particle7VariantC1EPKc>
   b6b9a:	4980      	ldr	r1, [pc, #512]	; (b6d9c <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x28c>)
   b6b9c:	aa12      	add	r2, sp, #72	; 0x48
   b6b9e:	a806      	add	r0, sp, #24
   b6ba0:	f003 ff94 	bl	baacc <_ZN8particle7Variant3setEPKcS0_>
   b6ba4:	a812      	add	r0, sp, #72	; 0x48
   b6ba6:	f7fe ffff 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    if (resetReason != RESET_REASON_NONE) {
   b6baa:	6cab      	ldr	r3, [r5, #72]	; 0x48
   b6bac:	b1db      	cbz	r3, b6be6 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0xd6>
        data.set("resetReason", resetReason);
   b6bae:	497c      	ldr	r1, [pc, #496]	; (b6da0 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x290>)
	: _M_storage(std::forward<_Args>(__args)...)
   b6bb0:	9312      	str	r3, [sp, #72]	; 0x48
   b6bb2:	aa12      	add	r2, sp, #72	; 0x48
	_M_index{_Np}
   b6bb4:	2302      	movs	r3, #2
   b6bb6:	a806      	add	r0, sp, #24
   b6bb8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   b6bbc:	f003 ff86 	bl	baacc <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
   b6bc0:	a812      	add	r0, sp, #72	; 0x48
   b6bc2:	f7fe fff1 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        if (resetReason ==  RESET_REASON_USER) {
   b6bc6:	6cab      	ldr	r3, [r5, #72]	; 0x48
   b6bc8:	2b8c      	cmp	r3, #140	; 0x8c
   b6bca:	d10c      	bne.n	b6be6 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0xd6>
            data.set("resetReasonData", resetReasonData);
   b6bcc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	: _M_storage(std::forward<_Args>(__args)...)
   b6bce:	9312      	str	r3, [sp, #72]	; 0x48
   b6bd0:	4974      	ldr	r1, [pc, #464]	; (b6da4 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x294>)
	_M_index{_Np}
   b6bd2:	2303      	movs	r3, #3
   b6bd4:	aa12      	add	r2, sp, #72	; 0x48
   b6bd6:	a806      	add	r0, sp, #24
   b6bd8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   b6bdc:	f003 ff76 	bl	baacc <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
   b6be0:	a812      	add	r0, sp, #72	; 0x48
   b6be2:	f7fe ffe1 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    bool getConfigIncludeDiag() const { return getConfigBool("includeDiag", false); };
   b6be6:	4870      	ldr	r0, [pc, #448]	; (b6da8 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x298>)
   b6be8:	2100      	movs	r1, #0
   b6bea:	f7ff ff63 	bl	b6ab4 <_ZNK19DeviceConfigWrapper13getConfigBoolEPKcb.isra.0>
   b6bee:	ac0c      	add	r4, sp, #48	; 0x30
    if (getConfigIncludeDiag()) {
   b6bf0:	b1f8      	cbz	r0, b6c32 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x122>
    	String jsonStr;
   b6bf2:	496e      	ldr	r1, [pc, #440]	; (b6dac <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x29c>)
   b6bf4:	4620      	mov	r0, r4
   b6bf6:	f002 ff68 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
	    jsonStr.reserve(256);
   b6bfa:	f44f 7180 	mov.w	r1, #256	; 0x100
   b6bfe:	4620      	mov	r0, r4
   b6c00:	f002 ff36 	bl	b9a70 <_ZN6String7reserveEj>
        system_format_diag_data(nullptr, 0, 0, Callback.appender, &jsonStr, nullptr);
   b6c04:	2200      	movs	r2, #0
   b6c06:	4b6a      	ldr	r3, [pc, #424]	; (b6db0 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2a0>)
   b6c08:	4611      	mov	r1, r2
   b6c0a:	e9cd 4200 	strd	r4, r2, [sp]
   b6c0e:	4610      	mov	r0, r2
   b6c10:	f000 fc98 	bl	b7544 <system_format_diag_data>
        data.set("diag", Variant::fromJSON(jsonStr));
   b6c14:	990c      	ldr	r1, [sp, #48]	; 0x30
   b6c16:	a812      	add	r0, sp, #72	; 0x48
   b6c18:	f004 fa45 	bl	bb0a6 <_ZN8particle7Variant8fromJSONEPKc>
   b6c1c:	4965      	ldr	r1, [pc, #404]	; (b6db4 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2a4>)
   b6c1e:	aa12      	add	r2, sp, #72	; 0x48
   b6c20:	a806      	add	r0, sp, #24
   b6c22:	f003 ff53 	bl	baacc <_ZN8particle7Variant3setEPKcS0_>
   b6c26:	a812      	add	r0, sp, #72	; 0x48
   b6c28:	f7fe ffbe 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    	String jsonStr;
   b6c2c:	4620      	mov	r0, r4
   b6c2e:	f002 ff01 	bl	b9a34 <_ZN6StringD1Ev>
    bool getConfigIncludeTower() const { return getConfigBool("includeTower", false); };
   b6c32:	4861      	ldr	r0, [pc, #388]	; (b6db8 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2a8>)
   b6c34:	2100      	movs	r1, #0
   b6c36:	f7ff ff3d 	bl	b6ab4 <_ZNK19DeviceConfigWrapper13getConfigBoolEPKcb.isra.0>
    if (getConfigIncludeTower()) {
   b6c3a:	2800      	cmp	r0, #0
   b6c3c:	d064      	beq.n	b6d08 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x1f8>
        CellularGlobalIdentity cgi = {0};
   b6c3e:	2610      	movs	r6, #16
   b6c40:	4632      	mov	r2, r6
   b6c42:	2100      	movs	r1, #0
   b6c44:	a802      	add	r0, sp, #8
   b6c46:	f004 ff87 	bl	bbb58 <memset>
        cellular_result_t res = cellular_global_identity(&cgi, NULL);
   b6c4a:	2100      	movs	r1, #0
   b6c4c:	a802      	add	r0, sp, #8
        cgi.size = sizeof(CellularGlobalIdentity);
   b6c4e:	f8ad 6008 	strh.w	r6, [sp, #8]
        cellular_result_t res = cellular_global_identity(&cgi, NULL);
   b6c52:	f000 fb23 	bl	b729c <cellular_global_identity>
        if (res == SYSTEM_ERROR_NONE) {
   b6c56:	4601      	mov	r1, r0
   b6c58:	2800      	cmp	r0, #0
   b6c5a:	f040 8096 	bne.w	b6d8a <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x27a>
            Variant tower;
   b6c5e:	2218      	movs	r2, #24
   b6c60:	4620      	mov	r0, r4
   b6c62:	f004 ff79 	bl	bbb58 <memset>
	_M_index{_Np}
   b6c66:	2602      	movs	r6, #2
            tower.set("mcc", cgi.mobile_country_code);
   b6c68:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   b6c6c:	4953      	ldr	r1, [pc, #332]	; (b6dbc <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2ac>)
	: _M_storage(std::forward<_Args>(__args)...)
   b6c6e:	9312      	str	r3, [sp, #72]	; 0x48
   b6c70:	aa12      	add	r2, sp, #72	; 0x48
   b6c72:	4620      	mov	r0, r4
	_M_index{_Np}
   b6c74:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
   b6c78:	f003 ff28 	bl	baacc <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
   b6c7c:	a812      	add	r0, sp, #72	; 0x48
   b6c7e:	f7fe ff93 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            tower.set("mnc", cgi.mobile_network_code);
   b6c82:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   b6c86:	494e      	ldr	r1, [pc, #312]	; (b6dc0 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2b0>)
	: _M_storage(std::forward<_Args>(__args)...)
   b6c88:	9312      	str	r3, [sp, #72]	; 0x48
   b6c8a:	aa12      	add	r2, sp, #72	; 0x48
   b6c8c:	4620      	mov	r0, r4
	_M_index{_Np}
   b6c8e:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
   b6c92:	f003 ff1b 	bl	baacc <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
   b6c96:	a812      	add	r0, sp, #72	; 0x48
   b6c98:	f7fe ff86 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            tower.set("cid", cgi.cell_id);
   b6c9c:	9b05      	ldr	r3, [sp, #20]
   b6c9e:	4949      	ldr	r1, [pc, #292]	; (b6dc4 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2b4>)
	: _M_storage(std::forward<_Args>(__args)...)
   b6ca0:	9312      	str	r3, [sp, #72]	; 0x48
   b6ca2:	aa12      	add	r2, sp, #72	; 0x48
	_M_index{_Np}
   b6ca4:	2303      	movs	r3, #3
   b6ca6:	4620      	mov	r0, r4
   b6ca8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   b6cac:	f003 ff0e 	bl	baacc <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
   b6cb0:	a812      	add	r0, sp, #72	; 0x48
   b6cb2:	f7fe ff79 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            tower.set("lac", cgi.location_area_code);
   b6cb6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   b6cba:	4943      	ldr	r1, [pc, #268]	; (b6dc8 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2b8>)
	: _M_storage(std::forward<_Args>(__args)...)
   b6cbc:	9312      	str	r3, [sp, #72]	; 0x48
   b6cbe:	aa12      	add	r2, sp, #72	; 0x48
   b6cc0:	4620      	mov	r0, r4
	_M_index{_Np}
   b6cc2:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
   b6cc6:	f003 ff01 	bl	baacc <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
   b6cca:	a812      	add	r0, sp, #72	; 0x48
   b6ccc:	f7fe ff6c 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      _Move_ctor_base(const _Move_ctor_base&) = default;
   b6cd0:	4621      	mov	r1, r4
   b6cd2:	a812      	add	r0, sp, #72	; 0x48
   b6cd4:	f7fe fda0 	bl	b5818 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
            data.set("tower", tower);
   b6cd8:	493c      	ldr	r1, [pc, #240]	; (b6dcc <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2bc>)
   b6cda:	aa12      	add	r2, sp, #72	; 0x48
   b6cdc:	a806      	add	r0, sp, #24
   b6cde:	f003 fef5 	bl	baacc <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
   b6ce2:	a812      	add	r0, sp, #72	; 0x48
   b6ce4:	f7fe ff60 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            _deviceInfoLog.trace("Cellular Info: cid=%lu lac=%u mcc=%u mnc=%u", cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);
   b6ce8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   b6cec:	9301      	str	r3, [sp, #4]
   b6cee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   b6cf2:	4837      	ldr	r0, [pc, #220]	; (b6dd0 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2c0>)
   b6cf4:	9300      	str	r3, [sp, #0]
   b6cf6:	9a05      	ldr	r2, [sp, #20]
   b6cf8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   b6cfc:	4935      	ldr	r1, [pc, #212]	; (b6dd4 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2c4>)
   b6cfe:	f7fe fbff 	bl	b5500 <_ZNK5spark6Logger5traceEPKcz>
   b6d02:	4620      	mov	r0, r4
   b6d04:	f7fe ff50 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    bool getConfigIncludeGeneral() const { return getConfigBool("includeGeneral", false); };
   b6d08:	4833      	ldr	r0, [pc, #204]	; (b6dd8 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2c8>)
   b6d0a:	2100      	movs	r1, #0
   b6d0c:	f7ff fed2 	bl	b6ab4 <_ZNK19DeviceConfigWrapper13getConfigBoolEPKcb.isra.0>
    if (getConfigIncludeGeneral()) {
   b6d10:	b1f0      	cbz	r0, b6d50 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x240>
        SystemVersionInfo info = {};
   b6d12:	261c      	movs	r6, #28
   b6d14:	4632      	mov	r2, r6
   b6d16:	2100      	movs	r1, #0
   b6d18:	a812      	add	r0, sp, #72	; 0x48
   b6d1a:	f004 ff1d 	bl	bbb58 <memset>
        system_version_info(&info, nullptr);
   b6d1e:	2100      	movs	r1, #0
   b6d20:	a812      	add	r0, sp, #72	; 0x48
        info.size = sizeof(SystemVersionInfo);
   b6d22:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
        system_version_info(&info, nullptr);
   b6d26:	f000 fbfd 	bl	b7524 <system_version_info>
        return String(info.versionString);
   b6d2a:	a914      	add	r1, sp, #80	; 0x50
   b6d2c:	4620      	mov	r0, r4
   b6d2e:	f002 fecc 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
        data.set("sysver", System.version().c_str());        
   b6d32:	990c      	ldr	r1, [sp, #48]	; 0x30
   b6d34:	a812      	add	r0, sp, #72	; 0x48
   b6d36:	f7fe fc16 	bl	b5566 <_ZN8particle7VariantC1EPKc>
   b6d3a:	4928      	ldr	r1, [pc, #160]	; (b6ddc <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2cc>)
   b6d3c:	aa12      	add	r2, sp, #72	; 0x48
   b6d3e:	a806      	add	r0, sp, #24
   b6d40:	f003 fec4 	bl	baacc <_ZN8particle7Variant3setEPKcS0_>
   b6d44:	a812      	add	r0, sp, #72	; 0x48
   b6d46:	f7fe ff2f 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b6d4a:	4620      	mov	r0, r4
   b6d4c:	f002 fe72 	bl	b9a34 <_ZN6StringD1Ev>
      _Move_ctor_base(const _Move_ctor_base&) = default;
   b6d50:	a906      	add	r1, sp, #24
   b6d52:	4620      	mov	r0, r4
   b6d54:	f7fe fd60 	bl	b5818 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
    infoLedger.set(data, Ledger::REPLACE); // Ledger::REPLACE Ledger::MERGE
   b6d58:	4621      	mov	r1, r4
   b6d5a:	a812      	add	r0, sp, #72	; 0x48
   b6d5c:	f7ff fbee 	bl	b653c <_ZN8particle10LedgerDataC1ENS_7VariantE>
   b6d60:	2200      	movs	r2, #0
   b6d62:	a912      	add	r1, sp, #72	; 0x48
   b6d64:	f105 0050 	add.w	r0, r5, #80	; 0x50
   b6d68:	f001 fc9a 	bl	b86a0 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE>
      { _M_reset(); }
   b6d6c:	a812      	add	r0, sp, #72	; 0x48
   b6d6e:	f7fe ff1b 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b6d72:	4620      	mov	r0, r4
   b6d74:	f7fe ff18 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    _deviceInfoLog.trace("infoLedger updated");
   b6d78:	4919      	ldr	r1, [pc, #100]	; (b6de0 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2d0>)
   b6d7a:	4815      	ldr	r0, [pc, #84]	; (b6dd0 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2c0>)
   b6d7c:	f7fe fbc0 	bl	b5500 <_ZNK5spark6Logger5traceEPKcz>
   b6d80:	a806      	add	r0, sp, #24
   b6d82:	f7fe ff11 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
   b6d86:	b01b      	add	sp, #108	; 0x6c
   b6d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _deviceInfoLog.info("cellular_global_identity failed %d", res);
   b6d8a:	4602      	mov	r2, r0
   b6d8c:	4915      	ldr	r1, [pc, #84]	; (b6de4 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2d4>)
   b6d8e:	4810      	ldr	r0, [pc, #64]	; (b6dd0 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2c0>)
   b6d90:	f7fe fbce 	bl	b5530 <_ZNK5spark6Logger4infoEPKcz>
   b6d94:	e7b8      	b.n	b6d08 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x1f8>
   b6d96:	bf00      	nop
   b6d98:	000bdcc3 	.word	0x000bdcc3
   b6d9c:	000bdccb 	.word	0x000bdccb
   b6da0:	000bdcd3 	.word	0x000bdcd3
   b6da4:	000bdcdf 	.word	0x000bdcdf
   b6da8:	000bdcef 	.word	0x000bdcef
   b6dac:	000be3da 	.word	0x000be3da
   b6db0:	000b52ed 	.word	0x000b52ed
   b6db4:	000bdcfb 	.word	0x000bdcfb
   b6db8:	000bdd00 	.word	0x000bdd00
   b6dbc:	000bdd0d 	.word	0x000bdd0d
   b6dc0:	000bdd11 	.word	0x000bdd11
   b6dc4:	000bdd15 	.word	0x000bdd15
   b6dc8:	000bdd19 	.word	0x000bdd19
   b6dcc:	000bdd1d 	.word	0x000bdd1d
   b6dd0:	2003e664 	.word	0x2003e664
   b6dd4:	000bdd23 	.word	0x000bdd23
   b6dd8:	000bdd72 	.word	0x000bdd72
   b6ddc:	000bdd81 	.word	0x000bdd81
   b6de0:	000bdd88 	.word	0x000bdd88
   b6de4:	000bdd4f 	.word	0x000bdd4f

000b6de8 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE>:
void DeviceInfoLedger::getLogLevelFilters(LogLevel &level, LogCategoryFilters &filters) const {
   b6de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6dec:	b0a4      	sub	sp, #144	; 0x90
   b6dee:	460d      	mov	r5, r1
   b6df0:	4614      	mov	r4, r2
   b6df2:	4607      	mov	r7, r0
    String getConfigString(const char *key, const char *defaultValue = "") const { return DeviceConfigLedger::instance().getConfigString(key, defaultValue); };
   b6df4:	f7fe ff42 	bl	b5c7c <_ZN18DeviceConfigLedger8instanceEv>
   b6df8:	4b51      	ldr	r3, [pc, #324]	; (b6f40 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x158>)
   b6dfa:	4a52      	ldr	r2, [pc, #328]	; (b6f44 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x15c>)
   b6dfc:	4601      	mov	r1, r0
   b6dfe:	a81a      	add	r0, sp, #104	; 0x68
   b6e00:	f7ff fe3c 	bl	b6a7c <_ZNK18DeviceConfigLedger15getConfigStringEPKcS1_>
    level = stringToLogLevel(getConfigString("logLevel").c_str());
   b6e04:	991a      	ldr	r1, [sp, #104]	; 0x68
   b6e06:	4638      	mov	r0, r7
   b6e08:	f7fe fc12 	bl	b5630 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc>
   b6e0c:	7028      	strb	r0, [r5, #0]
   b6e0e:	a81a      	add	r0, sp, #104	; 0x68
   b6e10:	f002 fe10 	bl	b9a34 <_ZN6StringD1Ev>
    destruct(data_, data_ + size_);
   b6e14:	e9d4 5300 	ldrd	r5, r3, [r4]
   b6e18:	2614      	movs	r6, #20
   b6e1a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6e1e:	42ae      	cmp	r6, r5
   b6e20:	d004      	beq.n	b6e2c <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x44>
class LogCategoryFilter {
   b6e22:	4628      	mov	r0, r5
   b6e24:	f002 fe06 	bl	b9a34 <_ZN6StringD1Ev>
   b6e28:	3514      	adds	r5, #20
   b6e2a:	e7f8      	b.n	b6e1e <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x36>
    size_ = 0;
   b6e2c:	2300      	movs	r3, #0
   b6e2e:	6063      	str	r3, [r4, #4]
    Variant logFilters = getConfigVariant("logFilters");
   b6e30:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
	_M_index{_Np}
   b6e34:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    Variant getConfigVariant(const char *key, Variant defaultValue = {}) const { return DeviceConfigLedger::instance().getConfigVariant(key, defaultValue);};
   b6e38:	f7fe ff20 	bl	b5c7c <_ZN18DeviceConfigLedger8instanceEv>
      _Move_ctor_base(const _Move_ctor_base&) = default;
   b6e3c:	a914      	add	r1, sp, #80	; 0x50
   b6e3e:	4605      	mov	r5, r0
   b6e40:	a81a      	add	r0, sp, #104	; 0x68
   b6e42:	f7fe fce9 	bl	b5818 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
   b6e46:	ab1a      	add	r3, sp, #104	; 0x68
   b6e48:	4a3f      	ldr	r2, [pc, #252]	; (b6f48 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x160>)
   b6e4a:	4629      	mov	r1, r5
   b6e4c:	a80e      	add	r0, sp, #56	; 0x38
   b6e4e:	f7ff fd4a 	bl	b68e6 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE>
      { _M_reset(); }
   b6e52:	a81a      	add	r0, sp, #104	; 0x68
   b6e54:	f7fe fea8 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b6e58:	a814      	add	r0, sp, #80	; 0x50
   b6e5a:	f7fe fea5 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    if (logFilters.isMap()) {
   b6e5e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   b6e62:	2b0a      	cmp	r3, #10
   b6e64:	d165      	bne.n	b6f32 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x14a>
        return as<VariantMap>();
   b6e66:	a80e      	add	r0, sp, #56	; 0x38
   b6e68:	f7ff fa89 	bl	b637e <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
    return data_ + size_;
   b6e6c:	e9d0 5300 	ldrd	r5, r3, [r0]
   b6e70:	f04f 0828 	mov.w	r8, #40	; 0x28
   b6e74:	fb08 5803 	mla	r8, r8, r3, r5
        for(Map<String,Variant>::Entry entry : logFilters.asMap().entries()) {
   b6e78:	4545      	cmp	r5, r8
   b6e7a:	d05a      	beq.n	b6f32 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x14a>
   b6e7c:	4629      	mov	r1, r5
   b6e7e:	a81a      	add	r0, sp, #104	; 0x68
   b6e80:	f7fe fcde 	bl	b5840 <_ZNSt4pairIK6StringN8particle7VariantEEC1ERKS4_>
            String category = entry.first;
   b6e84:	a91a      	add	r1, sp, #104	; 0x68
   b6e86:	a801      	add	r0, sp, #4
   b6e88:	f002 fe77 	bl	b9b7a <_ZN6StringC1ERKS_>
        return to<String>();
   b6e8c:	a91e      	add	r1, sp, #120	; 0x78
   b6e8e:	a814      	add	r0, sp, #80	; 0x50
   b6e90:	f7fe fce4 	bl	b585c <_ZNK8particle7Variant2toI6StringEET_v>
            LogLevel level = stringToLogLevel(entry.second.toString().c_str());    
   b6e94:	9914      	ldr	r1, [sp, #80]	; 0x50
   b6e96:	4638      	mov	r0, r7
   b6e98:	f7fe fbca 	bl	b5630 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc>
   b6e9c:	4606      	mov	r6, r0
   b6e9e:	a814      	add	r0, sp, #80	; 0x50
   b6ea0:	f002 fdc8 	bl	b9a34 <_ZN6StringD1Ev>
            filters.append(LogCategoryFilter(category, level));         
   b6ea4:	a901      	add	r1, sp, #4
   b6ea6:	a805      	add	r0, sp, #20
   b6ea8:	f002 fe67 	bl	b9b7a <_ZN6StringC1ERKS_>
        level_(level) {
   b6eac:	a905      	add	r1, sp, #20
   b6eae:	a809      	add	r0, sp, #36	; 0x24
   b6eb0:	f002 fe63 	bl	b9b7a <_ZN6StringC1ERKS_>
class LogCategoryFilter {
   b6eb4:	a909      	add	r1, sp, #36	; 0x24
   b6eb6:	a814      	add	r0, sp, #80	; 0x50
        level_(level) {
   b6eb8:	f88d 6034 	strb.w	r6, [sp, #52]	; 0x34
    return insert(size_, std::move(value));
   b6ebc:	6866      	ldr	r6, [r4, #4]
class LogCategoryFilter {
   b6ebe:	f002 fe42 	bl	b9b46 <_ZN6StringC1EOS_>
   b6ec2:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   b6ec6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6eca:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6ece:	4299      	cmp	r1, r3
   b6ed0:	da10      	bge.n	b6ef4 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x10c>
    T* const p = data_ + i;
   b6ed2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6ed4:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b6ed6:	2214      	movs	r2, #20
   b6ed8:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b6edc:	f106 0014 	add.w	r0, r6, #20
   b6ee0:	fb02 3201 	mla	r2, r2, r1, r3
   b6ee4:	4631      	mov	r1, r6
   b6ee6:	f7fe f82f 	bl	b4f48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b6eea:	b9d6      	cbnz	r6, b6f22 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x13a>
    ++size_;
   b6eec:	6863      	ldr	r3, [r4, #4]
   b6eee:	3301      	adds	r3, #1
   b6ef0:	6063      	str	r3, [r4, #4]
    return true;
   b6ef2:	e005      	b.n	b6f00 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x118>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6ef4:	3101      	adds	r1, #1
   b6ef6:	4620      	mov	r0, r4
   b6ef8:	f7ff fc0a 	bl	b6710 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6efc:	2800      	cmp	r0, #0
   b6efe:	d1e8      	bne.n	b6ed2 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xea>
   b6f00:	a814      	add	r0, sp, #80	; 0x50
   b6f02:	f002 fd97 	bl	b9a34 <_ZN6StringD1Ev>
   b6f06:	a809      	add	r0, sp, #36	; 0x24
   b6f08:	f002 fd94 	bl	b9a34 <_ZN6StringD1Ev>
   b6f0c:	a805      	add	r0, sp, #20
   b6f0e:	f002 fd91 	bl	b9a34 <_ZN6StringD1Ev>
            String category = entry.first;
   b6f12:	a801      	add	r0, sp, #4
   b6f14:	f002 fd8e 	bl	b9a34 <_ZN6StringD1Ev>
        for(Map<String,Variant>::Entry entry : logFilters.asMap().entries()) {
   b6f18:	a81a      	add	r0, sp, #104	; 0x68
   b6f1a:	f7fe fe57 	bl	b5bcc <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
   b6f1e:	3528      	adds	r5, #40	; 0x28
   b6f20:	e7aa      	b.n	b6e78 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x90>
   b6f22:	a914      	add	r1, sp, #80	; 0x50
   b6f24:	4630      	mov	r0, r6
   b6f26:	f002 fe0e 	bl	b9b46 <_ZN6StringC1EOS_>
   b6f2a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   b6f2e:	7433      	strb	r3, [r6, #16]
   b6f30:	e7dc      	b.n	b6eec <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x104>
   b6f32:	a80e      	add	r0, sp, #56	; 0x38
   b6f34:	f7fe fe38 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
   b6f38:	b024      	add	sp, #144	; 0x90
   b6f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6f3e:	bf00      	nop
   b6f40:	000be3da 	.word	0x000be3da
   b6f44:	000bdc95 	.word	0x000bdc95
   b6f48:	000bdc9e 	.word	0x000bdc9e

000b6f4c <_ZN16DeviceInfoLedger19configureLogHandlerEv>:
void DeviceInfoLedger::configureLogHandler() {
   b6f4c:	b530      	push	{r4, r5, lr}
    if (logHandler) {
   b6f4e:	6d43      	ldr	r3, [r0, #84]	; 0x54
void DeviceInfoLedger::configureLogHandler() {
   b6f50:	b089      	sub	sp, #36	; 0x24
   b6f52:	4604      	mov	r4, r0
    if (logHandler) {
   b6f54:	b15b      	cbz	r3, b6f6e <_ZN16DeviceInfoLedger19configureLogHandlerEv+0x22>
        LogManager::instance()->removeHandler(logHandler);
   b6f56:	f001 fe23 	bl	b8ba0 <_ZN5spark10LogManager8instanceEv>
   b6f5a:	6d61      	ldr	r1, [r4, #84]	; 0x54
   b6f5c:	f002 f86d 	bl	b903a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        delete logHandler;
   b6f60:	6d60      	ldr	r0, [r4, #84]	; 0x54
   b6f62:	b110      	cbz	r0, b6f6a <_ZN16DeviceInfoLedger19configureLogHandlerEv+0x1e>
   b6f64:	6803      	ldr	r3, [r0, #0]
   b6f66:	685b      	ldr	r3, [r3, #4]
   b6f68:	4798      	blx	r3
        logHandler = nullptr;
   b6f6a:	2300      	movs	r3, #0
   b6f6c:	6563      	str	r3, [r4, #84]	; 0x54
        capacity_(0) {
   b6f6e:	2300      	movs	r3, #0
    getLogLevelFilters(level, filters);
   b6f70:	aa02      	add	r2, sp, #8
   b6f72:	f10d 0107 	add.w	r1, sp, #7
   b6f76:	4620      	mov	r0, r4
   b6f78:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6f7c:	9304      	str	r3, [sp, #16]
   b6f7e:	f7ff ff33 	bl	b6de8 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE>
    logHandler = new DeviceInfoLedgerLogHandler(level, filters);
   b6f82:	a902      	add	r1, sp, #8
   b6f84:	a805      	add	r0, sp, #20
   b6f86:	f7fe f80d 	bl	b4fa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6f8a:	202c      	movs	r0, #44	; 0x2c
   b6f8c:	f7fd ff3b 	bl	b4e06 <_Znwj>
   b6f90:	4605      	mov	r5, r0
   b6f92:	b120      	cbz	r0, b6f9e <_ZN16DeviceInfoLedger19configureLogHandlerEv+0x52>
   b6f94:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b6f98:	aa05      	add	r2, sp, #20
   b6f9a:	f7ff fbd3 	bl	b6744 <_ZN26DeviceInfoLedgerLogHandlerC1E8LogLevelN5spark6VectorINS1_17LogCategoryFilterENS1_16DefaultAllocatorEEE>
   b6f9e:	6565      	str	r5, [r4, #84]	; 0x54
   b6fa0:	a805      	add	r0, sp, #20
   b6fa2:	f7fd ffbe 	bl	b4f22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
	LogManager::instance()->addHandler(logHandler);
   b6fa6:	f001 fdfb 	bl	b8ba0 <_ZN5spark10LogManager8instanceEv>
   b6faa:	6d61      	ldr	r1, [r4, #84]	; 0x54
   b6fac:	f001 fffe 	bl	b8fac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
    LogCategoryFilters filters;
   b6fb0:	a802      	add	r0, sp, #8
   b6fb2:	f7fd ffb6 	bl	b4f22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   b6fb6:	b009      	add	sp, #36	; 0x24
   b6fb8:	bd30      	pop	{r4, r5, pc}
	...

000b6fbc <_ZN16DeviceInfoLedger12updateConfigEv>:
void DeviceInfoLedger::updateConfig() {
   b6fbc:	b570      	push	{r4, r5, r6, lr}
   b6fbe:	b086      	sub	sp, #24
   b6fc0:	4604      	mov	r4, r0
        DeviceInfoLedger::instance().getConfigLastRunLog(),
   b6fc2:	f7fe fb25 	bl	b5610 <_ZN16DeviceInfoLedger8instanceEv>
    int getConfigInt(const char *key, int defaultValue = 0) const { return DeviceConfigLedger::instance().getConfigInt(key, defaultValue); };
   b6fc6:	f7fe fe59 	bl	b5c7c <_ZN18DeviceConfigLedger8instanceEv>
   b6fca:	4921      	ldr	r1, [pc, #132]	; (b7050 <_ZN16DeviceInfoLedger12updateConfigEv+0x94>)
   b6fcc:	2200      	movs	r2, #0
   b6fce:	f7ff fd2d 	bl	b6a2c <_ZNK18DeviceConfigLedger12getConfigIntEPKci>
   b6fd2:	4605      	mov	r5, r0
        DeviceInfoLedger::instance().getConfigConnectionLog(),
   b6fd4:	f7fe fb1c 	bl	b5610 <_ZN16DeviceInfoLedger8instanceEv>
   b6fd8:	f7fe fe50 	bl	b5c7c <_ZN18DeviceConfigLedger8instanceEv>
   b6fdc:	491d      	ldr	r1, [pc, #116]	; (b7054 <_ZN16DeviceInfoLedger12updateConfigEv+0x98>)
   b6fde:	2200      	movs	r2, #0
   b6fe0:	f7ff fd24 	bl	b6a2c <_ZNK18DeviceConfigLedger12getConfigIntEPKci>
   b6fe4:	4606      	mov	r6, r0
        DeviceInfoLedger::instance().getConfigString("logLevel").c_str());
   b6fe6:	f7fe fb13 	bl	b5610 <_ZN16DeviceInfoLedger8instanceEv>
    String getConfigString(const char *key, const char *defaultValue = "") const { return DeviceConfigLedger::instance().getConfigString(key, defaultValue); };
   b6fea:	f7fe fe47 	bl	b5c7c <_ZN18DeviceConfigLedger8instanceEv>
   b6fee:	4b1a      	ldr	r3, [pc, #104]	; (b7058 <_ZN16DeviceInfoLedger12updateConfigEv+0x9c>)
   b6ff0:	4a1a      	ldr	r2, [pc, #104]	; (b705c <_ZN16DeviceInfoLedger12updateConfigEv+0xa0>)
   b6ff2:	4601      	mov	r1, r0
   b6ff4:	a802      	add	r0, sp, #8
   b6ff6:	f7ff fd41 	bl	b6a7c <_ZNK18DeviceConfigLedger15getConfigStringEPKcS1_>
    _deviceInfoLog.info("updateConfig lastRunLog=%d connectionLog=%d logLevel=%s", 
   b6ffa:	9b02      	ldr	r3, [sp, #8]
   b6ffc:	4918      	ldr	r1, [pc, #96]	; (b7060 <_ZN16DeviceInfoLedger12updateConfigEv+0xa4>)
   b6ffe:	4819      	ldr	r0, [pc, #100]	; (b7064 <_ZN16DeviceInfoLedger12updateConfigEv+0xa8>)
   b7000:	9300      	str	r3, [sp, #0]
   b7002:	462a      	mov	r2, r5
   b7004:	4633      	mov	r3, r6
   b7006:	f7fe fa93 	bl	b5530 <_ZNK5spark6Logger4infoEPKcz>
        DeviceInfoLedger::instance().getConfigString("logLevel").c_str());
   b700a:	a802      	add	r0, sp, #8
   b700c:	f002 fd12 	bl	b9a34 <_ZN6StringD1Ev>
    configureLogHandler();
   b7010:	4620      	mov	r0, r4
   b7012:	f7ff ff9b 	bl	b6f4c <_ZN16DeviceInfoLedger19configureLogHandlerEv>
    connectionLogSize = DeviceInfoLedger::instance().getConfigConnectionLog();
   b7016:	f7fe fafb 	bl	b5610 <_ZN16DeviceInfoLedger8instanceEv>
    int getConfigInt(const char *key, int defaultValue = 0) const { return DeviceConfigLedger::instance().getConfigInt(key, defaultValue); };
   b701a:	f7fe fe2f 	bl	b5c7c <_ZN18DeviceConfigLedger8instanceEv>
   b701e:	490d      	ldr	r1, [pc, #52]	; (b7054 <_ZN16DeviceInfoLedger12updateConfigEv+0x98>)
   b7020:	2200      	movs	r2, #0
   b7022:	f7ff fd03 	bl	b6a2c <_ZNK18DeviceConfigLedger12getConfigIntEPKci>
   b7026:	6260      	str	r0, [r4, #36]	; 0x24
    if (connectionLogBuffer) {
   b7028:	6a20      	ldr	r0, [r4, #32]
   b702a:	b118      	cbz	r0, b7034 <_ZN16DeviceInfoLedger12updateConfigEv+0x78>
        delete[] connectionLogBuffer;
   b702c:	f7fd feef 	bl	b4e0e <_ZdaPv>
        connectionLogBuffer = nullptr;
   b7030:	2300      	movs	r3, #0
   b7032:	6223      	str	r3, [r4, #32]
    if (connectionLogSize) {
   b7034:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7036:	b110      	cbz	r0, b703e <_ZN16DeviceInfoLedger12updateConfigEv+0x82>
        connectionLogBuffer = new uint8_t[connectionLogSize];
   b7038:	f7fd fee7 	bl	b4e0a <_Znaj>
   b703c:	6220      	str	r0, [r4, #32]
   b703e:	2300      	movs	r3, #0
   b7040:	f3bf 8f5b 	dmb	ish
   b7044:	62a3      	str	r3, [r4, #40]	; 0x28
   b7046:	f3bf 8f5b 	dmb	ish
}
   b704a:	b006      	add	sp, #24
   b704c:	bd70      	pop	{r4, r5, r6, pc}
   b704e:	bf00      	nop
   b7050:	000bdd9b 	.word	0x000bdd9b
   b7054:	000bdda6 	.word	0x000bdda6
   b7058:	000be3da 	.word	0x000be3da
   b705c:	000bdc95 	.word	0x000bdc95
   b7060:	000bddb4 	.word	0x000bddb4
   b7064:	2003e664 	.word	0x2003e664

000b7068 <_ZN16DeviceInfoLedger5setupEv>:
void DeviceInfoLedger::setup() {
   b7068:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (setupComplete) {
   b706a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
void DeviceInfoLedger::setup() {
   b706e:	b085      	sub	sp, #20
   b7070:	4604      	mov	r4, r0
    if (setupComplete) {
   b7072:	2b00      	cmp	r3, #0
   b7074:	f040 809e 	bne.w	b71b4 <_ZN16DeviceInfoLedger5setupEv+0x14c>
    DeviceConfigLedger::instance().withUpdateCallback([this]() { updateConfig(); });
   b7078:	f7fe fe00 	bl	b5c7c <_ZN18DeviceConfigLedger8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   b707c:	4b5a      	ldr	r3, [pc, #360]	; (b71e8 <_ZN16DeviceInfoLedger5setupEv+0x180>)
   b707e:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7080:	4b5a      	ldr	r3, [pc, #360]	; (b71ec <_ZN16DeviceInfoLedger5setupEv+0x184>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b7082:	9400      	str	r4, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7084:	9302      	str	r3, [sp, #8]
   b7086:	4605      	mov	r5, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b7088:	e9d0 0320 	ldrd	r0, r3, [r0, #128]	; 0x80
   b708c:	4298      	cmp	r0, r3
   b708e:	d07e      	beq.n	b718e <_ZN16DeviceInfoLedger5setupEv+0x126>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7090:	b110      	cbz	r0, b7098 <_ZN16DeviceInfoLedger5setupEv+0x30>
   b7092:	4669      	mov	r1, sp
   b7094:	f7fe fb6f 	bl	b5776 <_ZNSt8functionIFvvEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   b7098:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
   b709c:	3310      	adds	r3, #16
   b709e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    class function<_Res(_ArgTypes...)>
   b70a2:	4668      	mov	r0, sp
   b70a4:	f7fe f9f8 	bl	b5498 <_ZNSt14_Function_baseD1Ev>
        int reason = RESET_REASON_NONE;
   b70a8:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b70aa:	4611      	mov	r1, r2
   b70ac:	4668      	mov	r0, sp
        int reason = RESET_REASON_NONE;
   b70ae:	9200      	str	r2, [sp, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   b70b0:	f000 f91e 	bl	b72f0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   b70b4:	9b00      	ldr	r3, [sp, #0]
    resetReason = System.resetReason();
   b70b6:	64a3      	str	r3, [r4, #72]	; 0x48
    if (resetReason ==  RESET_REASON_USER) {
   b70b8:	2b8c      	cmp	r3, #140	; 0x8c
   b70ba:	f04f 0200 	mov.w	r2, #0
   b70be:	d106      	bne.n	b70ce <_ZN16DeviceInfoLedger5setupEv+0x66>
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
   b70c0:	4669      	mov	r1, sp
   b70c2:	4610      	mov	r0, r2
        uint32_t data = 0;
   b70c4:	9200      	str	r2, [sp, #0]
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
   b70c6:	f000 f913 	bl	b72f0 <HAL_Core_Get_Last_Reset_Info>
        return data;
   b70ca:	9b00      	ldr	r3, [sp, #0]
        resetReasonData = System.resetReasonData();
   b70cc:	64e3      	str	r3, [r4, #76]	; 0x4c
    infoLedger = Particle.ledger(infoLedgerName);
   b70ce:	6861      	ldr	r1, [r4, #4]
   b70d0:	4668      	mov	r0, sp
   b70d2:	f000 fc3d 	bl	b7950 <_ZN10CloudClass6ledgerEPKc>
      __a = _GLIBCXX_MOVE(__b);
   b70d6:	9a00      	ldr	r2, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b70d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   b70da:	6522      	str	r2, [r4, #80]	; 0x50
   b70dc:	4668      	mov	r0, sp
      __b = _GLIBCXX_MOVE(__tmp);
   b70de:	9300      	str	r3, [sp, #0]
   b70e0:	f7fe fa52 	bl	b5588 <_ZN8particle6LedgerD1Ev>
    updateConfig();
   b70e4:	4620      	mov	r0, r4
   b70e6:	f7ff ff69 	bl	b6fbc <_ZN16DeviceInfoLedger12updateConfigEv>
    if (retainedBuffer && retainedBufferSize && retainedBufferSize > sizeof(RetainedBufferHeader)) {
   b70ea:	6963      	ldr	r3, [r4, #20]
   b70ec:	2b00      	cmp	r3, #0
   b70ee:	d077      	beq.n	b71e0 <_ZN16DeviceInfoLedger5setupEv+0x178>
   b70f0:	69a2      	ldr	r2, [r4, #24]
   b70f2:	2a0c      	cmp	r2, #12
   b70f4:	d974      	bls.n	b71e0 <_ZN16DeviceInfoLedger5setupEv+0x178>
        retainedData = &retainedBuffer[sizeof(RetainedBufferHeader)];
   b70f6:	f103 010c 	add.w	r1, r3, #12
   b70fa:	6421      	str	r1, [r4, #64]	; 0x40
        retainedDataSize = retainedBufferSize - sizeof(RetainedBufferHeader);
   b70fc:	f1a2 010c 	sub.w	r1, r2, #12
        retainedHdr = (RetainedBufferHeader *)retainedBuffer;
   b7100:	63e3      	str	r3, [r4, #60]	; 0x3c
        retainedDataSize = retainedBufferSize - sizeof(RetainedBufferHeader);
   b7102:	6461      	str	r1, [r4, #68]	; 0x44
        if (retainedHdr->magic == retainedMagicBytes && retainedHdr->size == retainedBufferSize && retainedHdr->headerSize == sizeof(RetainedBufferHeader)) {
   b7104:	4d3a      	ldr	r5, [pc, #232]	; (b71f0 <_ZN16DeviceInfoLedger5setupEv+0x188>)
   b7106:	6819      	ldr	r1, [r3, #0]
   b7108:	42a9      	cmp	r1, r5
   b710a:	d155      	bne.n	b71b8 <_ZN16DeviceInfoLedger5setupEv+0x150>
   b710c:	8899      	ldrh	r1, [r3, #4]
   b710e:	428a      	cmp	r2, r1
   b7110:	d152      	bne.n	b71b8 <_ZN16DeviceInfoLedger5setupEv+0x150>
   b7112:	799b      	ldrb	r3, [r3, #6]
   b7114:	2b0c      	cmp	r3, #12
   b7116:	d14f      	bne.n	b71b8 <_ZN16DeviceInfoLedger5setupEv+0x150>
            _deviceInfoLog.info("retained buffer valid");
   b7118:	4936      	ldr	r1, [pc, #216]	; (b71f4 <_ZN16DeviceInfoLedger5setupEv+0x18c>)
   b711a:	4837      	ldr	r0, [pc, #220]	; (b71f8 <_ZN16DeviceInfoLedger5setupEv+0x190>)
   b711c:	f7fe fa08 	bl	b5530 <_ZNK5spark6Logger4infoEPKcz>
	return __atomic_load_n(&_M_i, int(__m));
   b7120:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7122:	f3bf 8f5b 	dmb	ish
   b7126:	689b      	ldr	r3, [r3, #8]
   b7128:	f3bf 8f5b 	dmb	ish
            if (retainedHdr->offset > 0) {
   b712c:	2b00      	cmp	r3, #0
   b712e:	d03e      	beq.n	b71ae <_ZN16DeviceInfoLedger5setupEv+0x146>
   b7130:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7132:	f3bf 8f5b 	dmb	ish
   b7136:	689f      	ldr	r7, [r3, #8]
   b7138:	f3bf 8f5b 	dmb	ish
                if (size > retainedDataSize) {
   b713c:	6c66      	ldr	r6, [r4, #68]	; 0x44
   b713e:	f7fe fd9d 	bl	b5c7c <_ZN18DeviceConfigLedger8instanceEv>
   b7142:	492e      	ldr	r1, [pc, #184]	; (b71fc <_ZN16DeviceInfoLedger5setupEv+0x194>)
   b7144:	2200      	movs	r2, #0
   b7146:	f7ff fc71 	bl	b6a2c <_ZNK18DeviceConfigLedger12getConfigIntEPKci>
                if (lastRunLogConfig > 0) {
   b714a:	1e05      	subs	r5, r0, #0
   b714c:	dd28      	ble.n	b71a0 <_ZN16DeviceInfoLedger5setupEv+0x138>
                    if (size > (size_t)lastRunLogConfig) {
   b714e:	42be      	cmp	r6, r7
   b7150:	bf28      	it	cs
   b7152:	463e      	movcs	r6, r7
   b7154:	42b5      	cmp	r5, r6
   b7156:	bf28      	it	cs
   b7158:	4635      	movcs	r5, r6
                    lastRunLog = new char[size + 1];
   b715a:	1c68      	adds	r0, r5, #1
   b715c:	f7fd fe55 	bl	b4e0a <_Znaj>
   b7160:	61e0      	str	r0, [r4, #28]
                    if (lastRunLog) {
   b7162:	b1e8      	cbz	r0, b71a0 <_ZN16DeviceInfoLedger5setupEv+0x138>
   b7164:	426b      	negs	r3, r5
   b7166:	18e8      	adds	r0, r5, r3
                        for(size_t ii = 0; ii < size; ii++) {
   b7168:	b1c3      	cbz	r3, b719c <_ZN16DeviceInfoLedger5setupEv+0x134>
   b716a:	e9d4 260f 	ldrd	r2, r6, [r4, #60]	; 0x3c
   b716e:	f3bf 8f5b 	dmb	ish
   b7172:	6892      	ldr	r2, [r2, #8]
   b7174:	f3bf 8f5b 	dmb	ish
                            lastRunLog[ii] = retainedData[(retainedHdr->offset - size + ii) % retainedDataSize];
   b7178:	6c61      	ldr	r1, [r4, #68]	; 0x44
   b717a:	441a      	add	r2, r3
   b717c:	fbb2 f7f1 	udiv	r7, r2, r1
   b7180:	fb01 2217 	mls	r2, r1, r7, r2
   b7184:	3301      	adds	r3, #1
   b7186:	5cb1      	ldrb	r1, [r6, r2]
   b7188:	69e2      	ldr	r2, [r4, #28]
   b718a:	5411      	strb	r1, [r2, r0]
                        for(size_t ii = 0; ii < size; ii++) {
   b718c:	e7eb      	b.n	b7166 <_ZN16DeviceInfoLedger5setupEv+0xfe>
	  _M_realloc_insert(end(), __x);
   b718e:	4601      	mov	r1, r0
   b7190:	466a      	mov	r2, sp
   b7192:	f105 007c 	add.w	r0, r5, #124	; 0x7c
   b7196:	f7ff fa71 	bl	b667c <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   b719a:	e782      	b.n	b70a2 <_ZN16DeviceInfoLedger5setupEv+0x3a>
                        lastRunLog[size] = 0;
   b719c:	69e2      	ldr	r2, [r4, #28]
   b719e:	5553      	strb	r3, [r2, r5]
	__atomic_store_n(&_M_i, __i, int(__m));
   b71a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b71a2:	f3bf 8f5b 	dmb	ish
   b71a6:	2200      	movs	r2, #0
   b71a8:	609a      	str	r2, [r3, #8]
   b71aa:	f3bf 8f5b 	dmb	ish
    setupComplete = true;
   b71ae:	2301      	movs	r3, #1
   b71b0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
   b71b4:	b005      	add	sp, #20
   b71b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _deviceInfoLog.info("retained buffer reinitialized");
   b71b8:	4911      	ldr	r1, [pc, #68]	; (b7200 <_ZN16DeviceInfoLedger5setupEv+0x198>)
   b71ba:	480f      	ldr	r0, [pc, #60]	; (b71f8 <_ZN16DeviceInfoLedger5setupEv+0x190>)
   b71bc:	f7fe f9b8 	bl	b5530 <_ZNK5spark6Logger4infoEPKcz>
            retainedHdr->magic = retainedMagicBytes;
   b71c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b71c2:	601d      	str	r5, [r3, #0]
            retainedHdr->size = retainedBufferSize;
   b71c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b71c6:	69a2      	ldr	r2, [r4, #24]
   b71c8:	809a      	strh	r2, [r3, #4]
            retainedHdr->headerSize = sizeof(RetainedBufferHeader);
   b71ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b71cc:	220c      	movs	r2, #12
   b71ce:	719a      	strb	r2, [r3, #6]
            retainedHdr->reserved1 = 0;
   b71d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b71d2:	2300      	movs	r3, #0
   b71d4:	71d3      	strb	r3, [r2, #7]
   b71d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b71d8:	f3bf 8f5b 	dmb	ish
   b71dc:	6093      	str	r3, [r2, #8]
   b71de:	e7e4      	b.n	b71aa <_ZN16DeviceInfoLedger5setupEv+0x142>
        retainedBuffer = nullptr;
   b71e0:	2300      	movs	r3, #0
        retainedBufferSize = 0;
   b71e2:	e9c4 3305 	strd	r3, r3, [r4, #20]
   b71e6:	e7e2      	b.n	b71ae <_ZN16DeviceInfoLedger5setupEv+0x146>
   b71e8:	000b7205 	.word	0x000b7205
   b71ec:	000b5369 	.word	0x000b5369
   b71f0:	de8e46cc 	.word	0xde8e46cc
   b71f4:	000bddec 	.word	0x000bddec
   b71f8:	2003e664 	.word	0x2003e664
   b71fc:	000bdd9b 	.word	0x000bdd9b
   b7200:	000bde02 	.word	0x000bde02

000b7204 <_ZNSt17_Function_handlerIFvvEZN16DeviceInfoLedger5setupEvEUlvE_E9_M_invokeERKSt9_Any_data>:
    DeviceConfigLedger::instance().withUpdateCallback([this]() { updateConfig(); });
   b7204:	6800      	ldr	r0, [r0, #0]
   b7206:	f7ff bed9 	b.w	b6fbc <_ZN16DeviceInfoLedger12updateConfigEv>
	...

000b720c <_GLOBAL__sub_I__ZN18DeviceConfigLedger9_instanceE>:
        name_(name) {
   b720c:	4b01      	ldr	r3, [pc, #4]	; (b7214 <_GLOBAL__sub_I__ZN18DeviceConfigLedger9_instanceE+0x8>)
   b720e:	4a02      	ldr	r2, [pc, #8]	; (b7218 <_GLOBAL__sub_I__ZN18DeviceConfigLedger9_instanceE+0xc>)
   b7210:	601a      	str	r2, [r3, #0]
}
   b7212:	4770      	bx	lr
   b7214:	2003e664 	.word	0x2003e664
   b7218:	000bde20 	.word	0x000bde20

000b721c <_ZN16DeviceInfoLedger4loopEv>:
void DeviceInfoLedger::loop() {
   b721c:	b510      	push	{r4, lr}
   b721e:	4604      	mov	r4, r0
    if (Network.ready()) {
   b7220:	481c      	ldr	r0, [pc, #112]	; (b7294 <_ZN16DeviceInfoLedger4loopEv+0x78>)
   b7222:	f002 fad0 	bl	b97c6 <_ZN5spark12NetworkClass5readyEv>
   b7226:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   b722a:	b310      	cbz	r0, b7272 <_ZN16DeviceInfoLedger4loopEv+0x56>
        if (!isNetworkConnected) {
   b722c:	b913      	cbnz	r3, b7234 <_ZN16DeviceInfoLedger4loopEv+0x18>
            isNetworkConnected = true;
   b722e:	2301      	movs	r3, #1
   b7230:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b7234:	4b18      	ldr	r3, [pc, #96]	; (b7298 <_ZN16DeviceInfoLedger4loopEv+0x7c>)
   b7236:	2200      	movs	r2, #0
   b7238:	6858      	ldr	r0, [r3, #4]
   b723a:	4611      	mov	r1, r2
   b723c:	f000 fa38 	bl	b76b0 <network_ready>
   b7240:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    if (Cellular.ready()) {
   b7244:	b1d0      	cbz	r0, b727c <_ZN16DeviceInfoLedger4loopEv+0x60>
        if (!isCellularConnected) {
   b7246:	b913      	cbnz	r3, b724e <_ZN16DeviceInfoLedger4loopEv+0x32>
            isCellularConnected = true;
   b7248:	2301      	movs	r3, #1
   b724a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b724e:	f000 f9a7 	bl	b75a0 <spark_cloud_flag_connected>
   b7252:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    if (Particle.connected()) {
   b7256:	b1b0      	cbz	r0, b7286 <_ZN16DeviceInfoLedger4loopEv+0x6a>
        if (!isCloudConnected) {
   b7258:	b9db      	cbnz	r3, b7292 <_ZN16DeviceInfoLedger4loopEv+0x76>
            isCloudConnected = true;
   b725a:	2301      	movs	r3, #1
   b725c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
            connectionCount++;
   b7260:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b7262:	3301      	adds	r3, #1
   b7264:	6363      	str	r3, [r4, #52]	; 0x34
            onCloudConnection();
   b7266:	6823      	ldr	r3, [r4, #0]
   b7268:	4620      	mov	r0, r4
   b726a:	689b      	ldr	r3, [r3, #8]
}
   b726c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            onCloudConnection();
   b7270:	4718      	bx	r3
        if (isNetworkConnected) {
   b7272:	2b00      	cmp	r3, #0
   b7274:	d0de      	beq.n	b7234 <_ZN16DeviceInfoLedger4loopEv+0x18>
            isNetworkConnected = false;
   b7276:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   b727a:	e7db      	b.n	b7234 <_ZN16DeviceInfoLedger4loopEv+0x18>
        if (isCellularConnected) {
   b727c:	2b00      	cmp	r3, #0
   b727e:	d0e6      	beq.n	b724e <_ZN16DeviceInfoLedger4loopEv+0x32>
            isCellularConnected = false;
   b7280:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
   b7284:	e7e3      	b.n	b724e <_ZN16DeviceInfoLedger4loopEv+0x32>
        if (isCloudConnected) {
   b7286:	b123      	cbz	r3, b7292 <_ZN16DeviceInfoLedger4loopEv+0x76>
            writeToConnectionLog = true;
   b7288:	2301      	movs	r3, #1
            isCloudConnected = false;
   b728a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
            writeToConnectionLog = true;
   b728e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
   b7292:	bd10      	pop	{r4, pc}
   b7294:	2003e6f8 	.word	0x2003e6f8
   b7298:	2003e674 	.word	0x2003e674

000b729c <cellular_global_identity>:
DYNALIB_FN(32, hal_cellular, cellular_unlock, void(void*))
DYNALIB_FN(33, hal_cellular, cellular_set_power_mode, void(int mode, void* reserved))
DYNALIB_FN(34, hal_cellular, cellular_set_active_sim, cellular_result_t(int, void*))
DYNALIB_FN(35, hal_cellular, cellular_get_active_sim, cellular_result_t(int*, void*))
DYNALIB_FN(36, hal_cellular, cellular_credentials_clear, int(void*))
DYNALIB_FN(37, hal_cellular, cellular_global_identity, cellular_result_t(CellularGlobalIdentity*, void*))
   b729c:	b508      	push	{r3, lr}
   b729e:	4b03      	ldr	r3, [pc, #12]	; (b72ac <cellular_global_identity+0x10>)
   b72a0:	681b      	ldr	r3, [r3, #0]
   b72a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b72a6:	9301      	str	r3, [sp, #4]
   b72a8:	bd08      	pop	{r3, pc}
   b72aa:	0000      	.short	0x0000
   b72ac:	00030274 	.word	0x00030274

000b72b0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b72b0:	b508      	push	{r3, lr}
   b72b2:	4b02      	ldr	r3, [pc, #8]	; (b72bc <os_mutex_recursive_create+0xc>)
   b72b4:	681b      	ldr	r3, [r3, #0]
   b72b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b72b8:	9301      	str	r3, [sp, #4]
   b72ba:	bd08      	pop	{r3, pc}
   b72bc:	00030248 	.word	0x00030248

000b72c0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b72c0:	b508      	push	{r3, lr}
   b72c2:	4b02      	ldr	r3, [pc, #8]	; (b72cc <os_mutex_recursive_destroy+0xc>)
   b72c4:	681b      	ldr	r3, [r3, #0]
   b72c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b72c8:	9301      	str	r3, [sp, #4]
   b72ca:	bd08      	pop	{r3, pc}
   b72cc:	00030248 	.word	0x00030248

000b72d0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b72d0:	b508      	push	{r3, lr}
   b72d2:	4b02      	ldr	r3, [pc, #8]	; (b72dc <os_mutex_recursive_lock+0xc>)
   b72d4:	681b      	ldr	r3, [r3, #0]
   b72d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b72d8:	9301      	str	r3, [sp, #4]
   b72da:	bd08      	pop	{r3, pc}
   b72dc:	00030248 	.word	0x00030248

000b72e0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b72e0:	b508      	push	{r3, lr}
   b72e2:	4b02      	ldr	r3, [pc, #8]	; (b72ec <os_mutex_recursive_unlock+0xc>)
   b72e4:	681b      	ldr	r3, [r3, #0]
   b72e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b72e8:	9301      	str	r3, [sp, #4]
   b72ea:	bd08      	pop	{r3, pc}
   b72ec:	00030248 	.word	0x00030248

000b72f0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   b72f0:	b508      	push	{r3, lr}
   b72f2:	4b02      	ldr	r3, [pc, #8]	; (b72fc <HAL_Core_Get_Last_Reset_Info+0xc>)
   b72f4:	681b      	ldr	r3, [r3, #0]
   b72f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b72f8:	9301      	str	r3, [sp, #4]
   b72fa:	bd08      	pop	{r3, pc}
   b72fc:	00030234 	.word	0x00030234

000b7300 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7300:	b508      	push	{r3, lr}
   b7302:	4b02      	ldr	r3, [pc, #8]	; (b730c <HAL_RNG_GetRandomNumber+0xc>)
   b7304:	681b      	ldr	r3, [r3, #0]
   b7306:	685b      	ldr	r3, [r3, #4]
   b7308:	9301      	str	r3, [sp, #4]
   b730a:	bd08      	pop	{r3, pc}
   b730c:	00030218 	.word	0x00030218

000b7310 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7310:	b508      	push	{r3, lr}
   b7312:	4b02      	ldr	r3, [pc, #8]	; (b731c <HAL_Delay_Microseconds+0xc>)
   b7314:	681b      	ldr	r3, [r3, #0]
   b7316:	68db      	ldr	r3, [r3, #12]
   b7318:	9301      	str	r3, [sp, #4]
   b731a:	bd08      	pop	{r3, pc}
   b731c:	00030218 	.word	0x00030218

000b7320 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7320:	b508      	push	{r3, lr}
   b7322:	4b02      	ldr	r3, [pc, #8]	; (b732c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7324:	681b      	ldr	r3, [r3, #0]
   b7326:	695b      	ldr	r3, [r3, #20]
   b7328:	9301      	str	r3, [sp, #4]
   b732a:	bd08      	pop	{r3, pc}
   b732c:	00030218 	.word	0x00030218

000b7330 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b7330:	b508      	push	{r3, lr}
   b7332:	4b02      	ldr	r3, [pc, #8]	; (b733c <hal_timer_millis+0xc>)
   b7334:	681b      	ldr	r3, [r3, #0]
   b7336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b7338:	9301      	str	r3, [sp, #4]
   b733a:	bd08      	pop	{r3, pc}
   b733c:	00030218 	.word	0x00030218

000b7340 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7340:	b508      	push	{r3, lr}
   b7342:	4b02      	ldr	r3, [pc, #8]	; (b734c <inet_inet_ntop+0xc>)
   b7344:	681b      	ldr	r3, [r3, #0]
   b7346:	695b      	ldr	r3, [r3, #20]
   b7348:	9301      	str	r3, [sp, #4]
   b734a:	bd08      	pop	{r3, pc}
   b734c:	00030264 	.word	0x00030264

000b7350 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7350:	b508      	push	{r3, lr}
   b7352:	4b02      	ldr	r3, [pc, #8]	; (b735c <netdb_freeaddrinfo+0xc>)
   b7354:	681b      	ldr	r3, [r3, #0]
   b7356:	689b      	ldr	r3, [r3, #8]
   b7358:	9301      	str	r3, [sp, #4]
   b735a:	bd08      	pop	{r3, pc}
   b735c:	00030268 	.word	0x00030268

000b7360 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7360:	b508      	push	{r3, lr}
   b7362:	4b02      	ldr	r3, [pc, #8]	; (b736c <netdb_getaddrinfo+0xc>)
   b7364:	681b      	ldr	r3, [r3, #0]
   b7366:	68db      	ldr	r3, [r3, #12]
   b7368:	9301      	str	r3, [sp, #4]
   b736a:	bd08      	pop	{r3, pc}
   b736c:	00030268 	.word	0x00030268

000b7370 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b7370:	b508      	push	{r3, lr}
   b7372:	4b02      	ldr	r3, [pc, #8]	; (b737c <hal_usart_end+0xc>)
   b7374:	681b      	ldr	r3, [r3, #0]
   b7376:	689b      	ldr	r3, [r3, #8]
   b7378:	9301      	str	r3, [sp, #4]
   b737a:	bd08      	pop	{r3, pc}
   b737c:	0003023c 	.word	0x0003023c

000b7380 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7380:	b508      	push	{r3, lr}
   b7382:	4b02      	ldr	r3, [pc, #8]	; (b738c <hal_usart_write+0xc>)
   b7384:	681b      	ldr	r3, [r3, #0]
   b7386:	68db      	ldr	r3, [r3, #12]
   b7388:	9301      	str	r3, [sp, #4]
   b738a:	bd08      	pop	{r3, pc}
   b738c:	0003023c 	.word	0x0003023c

000b7390 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7390:	b508      	push	{r3, lr}
   b7392:	4b02      	ldr	r3, [pc, #8]	; (b739c <hal_usart_available+0xc>)
   b7394:	681b      	ldr	r3, [r3, #0]
   b7396:	691b      	ldr	r3, [r3, #16]
   b7398:	9301      	str	r3, [sp, #4]
   b739a:	bd08      	pop	{r3, pc}
   b739c:	0003023c 	.word	0x0003023c

000b73a0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b73a0:	b508      	push	{r3, lr}
   b73a2:	4b02      	ldr	r3, [pc, #8]	; (b73ac <hal_usart_read+0xc>)
   b73a4:	681b      	ldr	r3, [r3, #0]
   b73a6:	695b      	ldr	r3, [r3, #20]
   b73a8:	9301      	str	r3, [sp, #4]
   b73aa:	bd08      	pop	{r3, pc}
   b73ac:	0003023c 	.word	0x0003023c

000b73b0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b73b0:	b508      	push	{r3, lr}
   b73b2:	4b02      	ldr	r3, [pc, #8]	; (b73bc <hal_usart_peek+0xc>)
   b73b4:	681b      	ldr	r3, [r3, #0]
   b73b6:	699b      	ldr	r3, [r3, #24]
   b73b8:	9301      	str	r3, [sp, #4]
   b73ba:	bd08      	pop	{r3, pc}
   b73bc:	0003023c 	.word	0x0003023c

000b73c0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b73c0:	b508      	push	{r3, lr}
   b73c2:	4b02      	ldr	r3, [pc, #8]	; (b73cc <hal_usart_flush+0xc>)
   b73c4:	681b      	ldr	r3, [r3, #0]
   b73c6:	69db      	ldr	r3, [r3, #28]
   b73c8:	9301      	str	r3, [sp, #4]
   b73ca:	bd08      	pop	{r3, pc}
   b73cc:	0003023c 	.word	0x0003023c

000b73d0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b73d0:	b508      	push	{r3, lr}
   b73d2:	4b02      	ldr	r3, [pc, #8]	; (b73dc <hal_usart_available_data_for_write+0xc>)
   b73d4:	681b      	ldr	r3, [r3, #0]
   b73d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b73d8:	9301      	str	r3, [sp, #4]
   b73da:	bd08      	pop	{r3, pc}
   b73dc:	0003023c 	.word	0x0003023c

000b73e0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b73e0:	b508      	push	{r3, lr}
   b73e2:	4b02      	ldr	r3, [pc, #8]	; (b73ec <hal_usart_begin_config+0xc>)
   b73e4:	681b      	ldr	r3, [r3, #0]
   b73e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b73e8:	9301      	str	r3, [sp, #4]
   b73ea:	bd08      	pop	{r3, pc}
   b73ec:	0003023c 	.word	0x0003023c

000b73f0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b73f0:	b508      	push	{r3, lr}
   b73f2:	4b02      	ldr	r3, [pc, #8]	; (b73fc <hal_usart_init_ex+0xc>)
   b73f4:	681b      	ldr	r3, [r3, #0]
   b73f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b73f8:	9301      	str	r3, [sp, #4]
   b73fa:	bd08      	pop	{r3, pc}
   b73fc:	0003023c 	.word	0x0003023c

000b7400 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7400:	b508      	push	{r3, lr}
   b7402:	4b02      	ldr	r3, [pc, #8]	; (b740c <HAL_USB_USART_Init+0xc>)
   b7404:	681b      	ldr	r3, [r3, #0]
   b7406:	681b      	ldr	r3, [r3, #0]
   b7408:	9301      	str	r3, [sp, #4]
   b740a:	bd08      	pop	{r3, pc}
   b740c:	0003024c 	.word	0x0003024c

000b7410 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7410:	b508      	push	{r3, lr}
   b7412:	4b02      	ldr	r3, [pc, #8]	; (b741c <HAL_USB_USART_Begin+0xc>)
   b7414:	681b      	ldr	r3, [r3, #0]
   b7416:	685b      	ldr	r3, [r3, #4]
   b7418:	9301      	str	r3, [sp, #4]
   b741a:	bd08      	pop	{r3, pc}
   b741c:	0003024c 	.word	0x0003024c

000b7420 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b7420:	b508      	push	{r3, lr}
   b7422:	4b02      	ldr	r3, [pc, #8]	; (b742c <HAL_USB_USART_End+0xc>)
   b7424:	681b      	ldr	r3, [r3, #0]
   b7426:	689b      	ldr	r3, [r3, #8]
   b7428:	9301      	str	r3, [sp, #4]
   b742a:	bd08      	pop	{r3, pc}
   b742c:	0003024c 	.word	0x0003024c

000b7430 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
   b7430:	b508      	push	{r3, lr}
   b7432:	4b02      	ldr	r3, [pc, #8]	; (b743c <HAL_USB_USART_Available_Data+0xc>)
   b7434:	681b      	ldr	r3, [r3, #0]
   b7436:	691b      	ldr	r3, [r3, #16]
   b7438:	9301      	str	r3, [sp, #4]
   b743a:	bd08      	pop	{r3, pc}
   b743c:	0003024c 	.word	0x0003024c

000b7440 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
   b7440:	b508      	push	{r3, lr}
   b7442:	4b02      	ldr	r3, [pc, #8]	; (b744c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7444:	681b      	ldr	r3, [r3, #0]
   b7446:	695b      	ldr	r3, [r3, #20]
   b7448:	9301      	str	r3, [sp, #4]
   b744a:	bd08      	pop	{r3, pc}
   b744c:	0003024c 	.word	0x0003024c

000b7450 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7450:	b508      	push	{r3, lr}
   b7452:	4b02      	ldr	r3, [pc, #8]	; (b745c <HAL_USB_USART_Receive_Data+0xc>)
   b7454:	681b      	ldr	r3, [r3, #0]
   b7456:	699b      	ldr	r3, [r3, #24]
   b7458:	9301      	str	r3, [sp, #4]
   b745a:	bd08      	pop	{r3, pc}
   b745c:	0003024c 	.word	0x0003024c

000b7460 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7460:	b508      	push	{r3, lr}
   b7462:	4b02      	ldr	r3, [pc, #8]	; (b746c <HAL_USB_USART_Send_Data+0xc>)
   b7464:	681b      	ldr	r3, [r3, #0]
   b7466:	69db      	ldr	r3, [r3, #28]
   b7468:	9301      	str	r3, [sp, #4]
   b746a:	bd08      	pop	{r3, pc}
   b746c:	0003024c 	.word	0x0003024c

000b7470 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
   b7470:	b508      	push	{r3, lr}
   b7472:	4b02      	ldr	r3, [pc, #8]	; (b747c <HAL_USB_USART_Flush_Data+0xc>)
   b7474:	681b      	ldr	r3, [r3, #0]
   b7476:	6a1b      	ldr	r3, [r3, #32]
   b7478:	9301      	str	r3, [sp, #4]
   b747a:	bd08      	pop	{r3, pc}
   b747c:	0003024c 	.word	0x0003024c

000b7480 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b7480:	b508      	push	{r3, lr}
   b7482:	4b02      	ldr	r3, [pc, #8]	; (b748c <HAL_USB_USART_Is_Connected+0xc>)
   b7484:	681b      	ldr	r3, [r3, #0]
   b7486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7488:	9301      	str	r3, [sp, #4]
   b748a:	bd08      	pop	{r3, pc}
   b748c:	0003024c 	.word	0x0003024c

000b7490 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7490:	b508      	push	{r3, lr}
   b7492:	4b02      	ldr	r3, [pc, #8]	; (b749c <panic_+0xc>)
   b7494:	681b      	ldr	r3, [r3, #0]
   b7496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7498:	9301      	str	r3, [sp, #4]
   b749a:	bd08      	pop	{r3, pc}
   b749c:	00030260 	.word	0x00030260

000b74a0 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   b74a0:	b508      	push	{r3, lr}
   b74a2:	4b02      	ldr	r3, [pc, #8]	; (b74ac <jsmn_init+0xc>)
   b74a4:	681b      	ldr	r3, [r3, #0]
   b74a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b74a8:	9301      	str	r3, [sp, #4]
   b74aa:	bd08      	pop	{r3, pc}
   b74ac:	00030260 	.word	0x00030260

000b74b0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b74b0:	b508      	push	{r3, lr}
   b74b2:	4b02      	ldr	r3, [pc, #8]	; (b74bc <log_message+0xc>)
   b74b4:	681b      	ldr	r3, [r3, #0]
   b74b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b74b8:	9301      	str	r3, [sp, #4]
   b74ba:	bd08      	pop	{r3, pc}
   b74bc:	00030260 	.word	0x00030260

000b74c0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b74c0:	b508      	push	{r3, lr}
   b74c2:	4b02      	ldr	r3, [pc, #8]	; (b74cc <log_message_v+0xc>)
   b74c4:	681b      	ldr	r3, [r3, #0]
   b74c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b74c8:	9301      	str	r3, [sp, #4]
   b74ca:	bd08      	pop	{r3, pc}
   b74cc:	00030260 	.word	0x00030260

000b74d0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b74d0:	b508      	push	{r3, lr}
   b74d2:	4b02      	ldr	r3, [pc, #8]	; (b74dc <log_level_name+0xc>)
   b74d4:	681b      	ldr	r3, [r3, #0]
   b74d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b74d8:	9301      	str	r3, [sp, #4]
   b74da:	bd08      	pop	{r3, pc}
   b74dc:	00030260 	.word	0x00030260

000b74e0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b74e0:	b508      	push	{r3, lr}
   b74e2:	4b02      	ldr	r3, [pc, #8]	; (b74ec <log_set_callbacks+0xc>)
   b74e4:	681b      	ldr	r3, [r3, #0]
   b74e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b74e8:	9301      	str	r3, [sp, #4]
   b74ea:	bd08      	pop	{r3, pc}
   b74ec:	00030260 	.word	0x00030260

000b74f0 <jsmn_parse>:
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
DYNALIB_FN(39, services, diag_command, int(int, void*, void*))
DYNALIB_FN(40, services, set_system_error_message, void(const char*, ...))
DYNALIB_FN(41, services, clear_system_error_message, void())
DYNALIB_FN(42, services, get_system_error_message, const char*(int))
DYNALIB_FN(43, services, jsmn_parse, int(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   b74f0:	b508      	push	{r3, lr}
   b74f2:	4b03      	ldr	r3, [pc, #12]	; (b7500 <jsmn_parse+0x10>)
   b74f4:	681b      	ldr	r3, [r3, #0]
   b74f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b74fa:	9301      	str	r3, [sp, #4]
   b74fc:	bd08      	pop	{r3, pc}
   b74fe:	0000      	.short	0x0000
   b7500:	00030260 	.word	0x00030260

000b7504 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7504:	b508      	push	{r3, lr}
   b7506:	4b02      	ldr	r3, [pc, #8]	; (b7510 <set_system_mode+0xc>)
   b7508:	681b      	ldr	r3, [r3, #0]
   b750a:	685b      	ldr	r3, [r3, #4]
   b750c:	9301      	str	r3, [sp, #4]
   b750e:	bd08      	pop	{r3, pc}
   b7510:	00030220 	.word	0x00030220

000b7514 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7514:	b508      	push	{r3, lr}
   b7516:	4b02      	ldr	r3, [pc, #8]	; (b7520 <system_thread_set_state+0xc>)
   b7518:	681b      	ldr	r3, [r3, #0]
   b751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b751c:	9301      	str	r3, [sp, #4]
   b751e:	bd08      	pop	{r3, pc}
   b7520:	00030220 	.word	0x00030220

000b7524 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
   b7524:	b508      	push	{r3, lr}
   b7526:	4b02      	ldr	r3, [pc, #8]	; (b7530 <system_version_info+0xc>)
   b7528:	681b      	ldr	r3, [r3, #0]
   b752a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b752c:	9301      	str	r3, [sp, #4]
   b752e:	bd08      	pop	{r3, pc}
   b7530:	00030220 	.word	0x00030220

000b7534 <application_thread_invoke>:
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b7534:	b508      	push	{r3, lr}
   b7536:	4b02      	ldr	r3, [pc, #8]	; (b7540 <application_thread_invoke+0xc>)
   b7538:	681b      	ldr	r3, [r3, #0]
   b753a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b753c:	9301      	str	r3, [sp, #4]
   b753e:	bd08      	pop	{r3, pc}
   b7540:	00030220 	.word	0x00030220

000b7544 <system_format_diag_data>:
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))
   b7544:	b508      	push	{r3, lr}
   b7546:	4b03      	ldr	r3, [pc, #12]	; (b7554 <system_format_diag_data+0x10>)
   b7548:	681b      	ldr	r3, [r3, #0]
   b754a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b754e:	9301      	str	r3, [sp, #4]
   b7550:	bd08      	pop	{r3, pc}
   b7552:	0000      	.short	0x0000
   b7554:	00030220 	.word	0x00030220

000b7558 <system_ctrl_set_app_request_handler>:

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7558:	b508      	push	{r3, lr}
   b755a:	4b03      	ldr	r3, [pc, #12]	; (b7568 <system_ctrl_set_app_request_handler+0x10>)
   b755c:	681b      	ldr	r3, [r3, #0]
   b755e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7562:	9301      	str	r3, [sp, #4]
   b7564:	bd08      	pop	{r3, pc}
   b7566:	0000      	.short	0x0000
   b7568:	00030220 	.word	0x00030220

000b756c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b756c:	b508      	push	{r3, lr}
   b756e:	4b03      	ldr	r3, [pc, #12]	; (b757c <system_ctrl_set_result+0x10>)
   b7570:	681b      	ldr	r3, [r3, #0]
   b7572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7576:	9301      	str	r3, [sp, #4]
   b7578:	bd08      	pop	{r3, pc}
   b757a:	0000      	.short	0x0000
   b757c:	00030220 	.word	0x00030220

000b7580 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b7580:	b508      	push	{r3, lr}
   b7582:	4b02      	ldr	r3, [pc, #8]	; (b758c <spark_process+0xc>)
   b7584:	681b      	ldr	r3, [r3, #0]
   b7586:	689b      	ldr	r3, [r3, #8]
   b7588:	9301      	str	r3, [sp, #4]
   b758a:	bd08      	pop	{r3, pc}
   b758c:	00030244 	.word	0x00030244

000b7590 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b7590:	b508      	push	{r3, lr}
   b7592:	4b02      	ldr	r3, [pc, #8]	; (b759c <spark_cloud_flag_connect+0xc>)
   b7594:	681b      	ldr	r3, [r3, #0]
   b7596:	68db      	ldr	r3, [r3, #12]
   b7598:	9301      	str	r3, [sp, #4]
   b759a:	bd08      	pop	{r3, pc}
   b759c:	00030244 	.word	0x00030244

000b75a0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b75a0:	b508      	push	{r3, lr}
   b75a2:	4b02      	ldr	r3, [pc, #8]	; (b75ac <spark_cloud_flag_connected+0xc>)
   b75a4:	681b      	ldr	r3, [r3, #0]
   b75a6:	695b      	ldr	r3, [r3, #20]
   b75a8:	9301      	str	r3, [sp, #4]
   b75aa:	bd08      	pop	{r3, pc}
   b75ac:	00030244 	.word	0x00030244

000b75b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b75b0:	b508      	push	{r3, lr}
   b75b2:	4b02      	ldr	r3, [pc, #8]	; (b75bc <spark_set_random_seed_from_cloud_handler+0xc>)
   b75b4:	681b      	ldr	r3, [r3, #0]
   b75b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b75b8:	9301      	str	r3, [sp, #4]
   b75ba:	bd08      	pop	{r3, pc}
   b75bc:	00030244 	.word	0x00030244

000b75c0 <ledger_get_instance>:
#include "system_ledger.h"
#endif

DYNALIB_BEGIN(system_ledger)

DYNALIB_FN(0, system_ledger, ledger_get_instance, int(ledger_instance**, const char*, void*))
   b75c0:	b508      	push	{r3, lr}
   b75c2:	4b02      	ldr	r3, [pc, #8]	; (b75cc <ledger_get_instance+0xc>)
   b75c4:	681b      	ldr	r3, [r3, #0]
   b75c6:	681b      	ldr	r3, [r3, #0]
   b75c8:	9301      	str	r3, [sp, #4]
   b75ca:	bd08      	pop	{r3, pc}
   b75cc:	00030294 	.word	0x00030294

000b75d0 <ledger_add_ref>:
DYNALIB_FN(1, system_ledger, ledger_add_ref, void(ledger_instance*, void*))
   b75d0:	b508      	push	{r3, lr}
   b75d2:	4b02      	ldr	r3, [pc, #8]	; (b75dc <ledger_add_ref+0xc>)
   b75d4:	681b      	ldr	r3, [r3, #0]
   b75d6:	685b      	ldr	r3, [r3, #4]
   b75d8:	9301      	str	r3, [sp, #4]
   b75da:	bd08      	pop	{r3, pc}
   b75dc:	00030294 	.word	0x00030294

000b75e0 <ledger_release>:
DYNALIB_FN(2, system_ledger, ledger_release, void(ledger_instance*, void*))
   b75e0:	b508      	push	{r3, lr}
   b75e2:	4b02      	ldr	r3, [pc, #8]	; (b75ec <ledger_release+0xc>)
   b75e4:	681b      	ldr	r3, [r3, #0]
   b75e6:	689b      	ldr	r3, [r3, #8]
   b75e8:	9301      	str	r3, [sp, #4]
   b75ea:	bd08      	pop	{r3, pc}
   b75ec:	00030294 	.word	0x00030294

000b75f0 <ledger_lock>:
DYNALIB_FN(3, system_ledger, ledger_lock, void(ledger_instance*, void*))
   b75f0:	b508      	push	{r3, lr}
   b75f2:	4b02      	ldr	r3, [pc, #8]	; (b75fc <ledger_lock+0xc>)
   b75f4:	681b      	ldr	r3, [r3, #0]
   b75f6:	68db      	ldr	r3, [r3, #12]
   b75f8:	9301      	str	r3, [sp, #4]
   b75fa:	bd08      	pop	{r3, pc}
   b75fc:	00030294 	.word	0x00030294

000b7600 <ledger_unlock>:
DYNALIB_FN(4, system_ledger, ledger_unlock, void(ledger_instance*, void*))
   b7600:	b508      	push	{r3, lr}
   b7602:	4b02      	ldr	r3, [pc, #8]	; (b760c <ledger_unlock+0xc>)
   b7604:	681b      	ldr	r3, [r3, #0]
   b7606:	691b      	ldr	r3, [r3, #16]
   b7608:	9301      	str	r3, [sp, #4]
   b760a:	bd08      	pop	{r3, pc}
   b760c:	00030294 	.word	0x00030294

000b7610 <ledger_set_callbacks>:
DYNALIB_FN(5, system_ledger, ledger_set_callbacks, void(ledger_instance*, const ledger_callbacks*, void*))
   b7610:	b508      	push	{r3, lr}
   b7612:	4b02      	ldr	r3, [pc, #8]	; (b761c <ledger_set_callbacks+0xc>)
   b7614:	681b      	ldr	r3, [r3, #0]
   b7616:	695b      	ldr	r3, [r3, #20]
   b7618:	9301      	str	r3, [sp, #4]
   b761a:	bd08      	pop	{r3, pc}
   b761c:	00030294 	.word	0x00030294

000b7620 <ledger_set_app_data>:
DYNALIB_FN(6, system_ledger, ledger_set_app_data, void(ledger_instance*, void*, ledger_destroy_app_data_callback, void*))
   b7620:	b508      	push	{r3, lr}
   b7622:	4b02      	ldr	r3, [pc, #8]	; (b762c <ledger_set_app_data+0xc>)
   b7624:	681b      	ldr	r3, [r3, #0]
   b7626:	699b      	ldr	r3, [r3, #24]
   b7628:	9301      	str	r3, [sp, #4]
   b762a:	bd08      	pop	{r3, pc}
   b762c:	00030294 	.word	0x00030294

000b7630 <ledger_get_app_data>:
DYNALIB_FN(7, system_ledger, ledger_get_app_data, void*(ledger_instance*, void*))
   b7630:	b508      	push	{r3, lr}
   b7632:	4b02      	ldr	r3, [pc, #8]	; (b763c <ledger_get_app_data+0xc>)
   b7634:	681b      	ldr	r3, [r3, #0]
   b7636:	69db      	ldr	r3, [r3, #28]
   b7638:	9301      	str	r3, [sp, #4]
   b763a:	bd08      	pop	{r3, pc}
   b763c:	00030294 	.word	0x00030294

000b7640 <ledger_open>:
DYNALIB_FN(8, system_ledger, ledger_get_info, int(ledger_instance*, ledger_info*, void*))
DYNALIB_FN(9, system_ledger, ledger_open, int(ledger_stream**, ledger_instance*, int, void*))
   b7640:	b508      	push	{r3, lr}
   b7642:	4b02      	ldr	r3, [pc, #8]	; (b764c <ledger_open+0xc>)
   b7644:	681b      	ldr	r3, [r3, #0]
   b7646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7648:	9301      	str	r3, [sp, #4]
   b764a:	bd08      	pop	{r3, pc}
   b764c:	00030294 	.word	0x00030294

000b7650 <ledger_close>:
DYNALIB_FN(10, system_ledger, ledger_close, int(ledger_stream*, int, void*))
   b7650:	b508      	push	{r3, lr}
   b7652:	4b02      	ldr	r3, [pc, #8]	; (b765c <ledger_close+0xc>)
   b7654:	681b      	ldr	r3, [r3, #0]
   b7656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7658:	9301      	str	r3, [sp, #4]
   b765a:	bd08      	pop	{r3, pc}
   b765c:	00030294 	.word	0x00030294

000b7660 <ledger_read>:
DYNALIB_FN(11, system_ledger, ledger_read, int(ledger_stream*, char*, size_t, void*))
   b7660:	b508      	push	{r3, lr}
   b7662:	4b02      	ldr	r3, [pc, #8]	; (b766c <ledger_read+0xc>)
   b7664:	681b      	ldr	r3, [r3, #0]
   b7666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7668:	9301      	str	r3, [sp, #4]
   b766a:	bd08      	pop	{r3, pc}
   b766c:	00030294 	.word	0x00030294

000b7670 <ledger_write>:
DYNALIB_FN(12, system_ledger, ledger_write, int(ledger_stream*, const char*, size_t, void*))
   b7670:	b508      	push	{r3, lr}
   b7672:	4b02      	ldr	r3, [pc, #8]	; (b767c <ledger_write+0xc>)
   b7674:	681b      	ldr	r3, [r3, #0]
   b7676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7678:	9301      	str	r3, [sp, #4]
   b767a:	bd08      	pop	{r3, pc}
   b767c:	00030294 	.word	0x00030294

000b7680 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7680:	b508      	push	{r3, lr}
   b7682:	4b02      	ldr	r3, [pc, #8]	; (b768c <network_connect+0xc>)
   b7684:	681b      	ldr	r3, [r3, #0]
   b7686:	685b      	ldr	r3, [r3, #4]
   b7688:	9301      	str	r3, [sp, #4]
   b768a:	bd08      	pop	{r3, pc}
   b768c:	00030240 	.word	0x00030240

000b7690 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7690:	b508      	push	{r3, lr}
   b7692:	4b02      	ldr	r3, [pc, #8]	; (b769c <network_connecting+0xc>)
   b7694:	681b      	ldr	r3, [r3, #0]
   b7696:	689b      	ldr	r3, [r3, #8]
   b7698:	9301      	str	r3, [sp, #4]
   b769a:	bd08      	pop	{r3, pc}
   b769c:	00030240 	.word	0x00030240

000b76a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b76a0:	b508      	push	{r3, lr}
   b76a2:	4b02      	ldr	r3, [pc, #8]	; (b76ac <network_disconnect+0xc>)
   b76a4:	681b      	ldr	r3, [r3, #0]
   b76a6:	68db      	ldr	r3, [r3, #12]
   b76a8:	9301      	str	r3, [sp, #4]
   b76aa:	bd08      	pop	{r3, pc}
   b76ac:	00030240 	.word	0x00030240

000b76b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b76b0:	b508      	push	{r3, lr}
   b76b2:	4b02      	ldr	r3, [pc, #8]	; (b76bc <network_ready+0xc>)
   b76b4:	681b      	ldr	r3, [r3, #0]
   b76b6:	691b      	ldr	r3, [r3, #16]
   b76b8:	9301      	str	r3, [sp, #4]
   b76ba:	bd08      	pop	{r3, pc}
   b76bc:	00030240 	.word	0x00030240

000b76c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b76c0:	b508      	push	{r3, lr}
   b76c2:	4b02      	ldr	r3, [pc, #8]	; (b76cc <network_on+0xc>)
   b76c4:	681b      	ldr	r3, [r3, #0]
   b76c6:	695b      	ldr	r3, [r3, #20]
   b76c8:	9301      	str	r3, [sp, #4]
   b76ca:	bd08      	pop	{r3, pc}
   b76cc:	00030240 	.word	0x00030240

000b76d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b76d0:	b508      	push	{r3, lr}
   b76d2:	4b02      	ldr	r3, [pc, #8]	; (b76dc <network_off+0xc>)
   b76d4:	681b      	ldr	r3, [r3, #0]
   b76d6:	699b      	ldr	r3, [r3, #24]
   b76d8:	9301      	str	r3, [sp, #4]
   b76da:	bd08      	pop	{r3, pc}
   b76dc:	00030240 	.word	0x00030240

000b76e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b76e0:	b508      	push	{r3, lr}
   b76e2:	4b02      	ldr	r3, [pc, #8]	; (b76ec <network_listen+0xc>)
   b76e4:	681b      	ldr	r3, [r3, #0]
   b76e6:	69db      	ldr	r3, [r3, #28]
   b76e8:	9301      	str	r3, [sp, #4]
   b76ea:	bd08      	pop	{r3, pc}
   b76ec:	00030240 	.word	0x00030240

000b76f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b76f0:	b508      	push	{r3, lr}
   b76f2:	4b02      	ldr	r3, [pc, #8]	; (b76fc <network_listening+0xc>)
   b76f4:	681b      	ldr	r3, [r3, #0]
   b76f6:	6a1b      	ldr	r3, [r3, #32]
   b76f8:	9301      	str	r3, [sp, #4]
   b76fa:	bd08      	pop	{r3, pc}
   b76fc:	00030240 	.word	0x00030240

000b7700 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7700:	b508      	push	{r3, lr}
   b7702:	4b02      	ldr	r3, [pc, #8]	; (b770c <network_set_listen_timeout+0xc>)
   b7704:	681b      	ldr	r3, [r3, #0]
   b7706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7708:	9301      	str	r3, [sp, #4]
   b770a:	bd08      	pop	{r3, pc}
   b770c:	00030240 	.word	0x00030240

000b7710 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7710:	b508      	push	{r3, lr}
   b7712:	4b02      	ldr	r3, [pc, #8]	; (b771c <network_get_listen_timeout+0xc>)
   b7714:	681b      	ldr	r3, [r3, #0]
   b7716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7718:	9301      	str	r3, [sp, #4]
   b771a:	bd08      	pop	{r3, pc}
   b771c:	00030240 	.word	0x00030240

000b7720 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7720:	b508      	push	{r3, lr}
   b7722:	4b02      	ldr	r3, [pc, #8]	; (b772c <network_is_on+0xc>)
   b7724:	681b      	ldr	r3, [r3, #0]
   b7726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7728:	9301      	str	r3, [sp, #4]
   b772a:	bd08      	pop	{r3, pc}
   b772c:	00030240 	.word	0x00030240

000b7730 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7730:	b508      	push	{r3, lr}
   b7732:	4b02      	ldr	r3, [pc, #8]	; (b773c <network_is_off+0xc>)
   b7734:	681b      	ldr	r3, [r3, #0]
   b7736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7738:	9301      	str	r3, [sp, #4]
   b773a:	bd08      	pop	{r3, pc}
   b773c:	00030240 	.word	0x00030240

000b7740 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b7740:	b508      	push	{r3, lr}
   b7742:	4b02      	ldr	r3, [pc, #8]	; (b774c <network_prefer+0xc>)
   b7744:	681b      	ldr	r3, [r3, #0]
   b7746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7748:	9301      	str	r3, [sp, #4]
   b774a:	bd08      	pop	{r3, pc}
   b774c:	00030240 	.word	0x00030240

000b7750 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b7750:	b508      	push	{r3, lr}
   b7752:	4b02      	ldr	r3, [pc, #8]	; (b775c <network_is_preferred+0xc>)
   b7754:	681b      	ldr	r3, [r3, #0]
   b7756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7758:	9301      	str	r3, [sp, #4]
   b775a:	bd08      	pop	{r3, pc}
   b775c:	00030240 	.word	0x00030240

000b7760 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7760:	b508      	push	{r3, lr}
   b7762:	4b02      	ldr	r3, [pc, #8]	; (b776c <malloc+0xc>)
   b7764:	681b      	ldr	r3, [r3, #0]
   b7766:	681b      	ldr	r3, [r3, #0]
   b7768:	9301      	str	r3, [sp, #4]
   b776a:	bd08      	pop	{r3, pc}
   b776c:	0003021c 	.word	0x0003021c

000b7770 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7770:	b508      	push	{r3, lr}
   b7772:	4b02      	ldr	r3, [pc, #8]	; (b777c <free+0xc>)
   b7774:	681b      	ldr	r3, [r3, #0]
   b7776:	685b      	ldr	r3, [r3, #4]
   b7778:	9301      	str	r3, [sp, #4]
   b777a:	bd08      	pop	{r3, pc}
   b777c:	0003021c 	.word	0x0003021c

000b7780 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7780:	b508      	push	{r3, lr}
   b7782:	4b02      	ldr	r3, [pc, #8]	; (b778c <realloc+0xc>)
   b7784:	681b      	ldr	r3, [r3, #0]
   b7786:	689b      	ldr	r3, [r3, #8]
   b7788:	9301      	str	r3, [sp, #4]
   b778a:	bd08      	pop	{r3, pc}
   b778c:	0003021c 	.word	0x0003021c

000b7790 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7790:	b508      	push	{r3, lr}
   b7792:	4b02      	ldr	r3, [pc, #8]	; (b779c <snprintf+0xc>)
   b7794:	681b      	ldr	r3, [r3, #0]
   b7796:	69db      	ldr	r3, [r3, #28]
   b7798:	9301      	str	r3, [sp, #4]
   b779a:	bd08      	pop	{r3, pc}
   b779c:	0003021c 	.word	0x0003021c

000b77a0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b77a0:	b508      	push	{r3, lr}
   b77a2:	4b02      	ldr	r3, [pc, #8]	; (b77ac <vsnprintf+0xc>)
   b77a4:	681b      	ldr	r3, [r3, #0]
   b77a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b77a8:	9301      	str	r3, [sp, #4]
   b77aa:	bd08      	pop	{r3, pc}
   b77ac:	0003021c 	.word	0x0003021c

000b77b0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b77b0:	b508      	push	{r3, lr}
   b77b2:	4b02      	ldr	r3, [pc, #8]	; (b77bc <abort+0xc>)
   b77b4:	681b      	ldr	r3, [r3, #0]
   b77b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b77b8:	9301      	str	r3, [sp, #4]
   b77ba:	bd08      	pop	{r3, pc}
   b77bc:	0003021c 	.word	0x0003021c

000b77c0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b77c0:	b508      	push	{r3, lr}
   b77c2:	4b02      	ldr	r3, [pc, #8]	; (b77cc <_malloc_r+0xc>)
   b77c4:	681b      	ldr	r3, [r3, #0]
   b77c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b77c8:	9301      	str	r3, [sp, #4]
   b77ca:	bd08      	pop	{r3, pc}
   b77cc:	0003021c 	.word	0x0003021c

000b77d0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b77d0:	b508      	push	{r3, lr}
   b77d2:	4b02      	ldr	r3, [pc, #8]	; (b77dc <__errno+0xc>)
   b77d4:	681b      	ldr	r3, [r3, #0]
   b77d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b77d8:	9301      	str	r3, [sp, #4]
   b77da:	bd08      	pop	{r3, pc}
   b77dc:	0003021c 	.word	0x0003021c

000b77e0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b77e0:	b508      	push	{r3, lr}
   b77e2:	4b02      	ldr	r3, [pc, #8]	; (b77ec <__assert_func+0xc>)
   b77e4:	681b      	ldr	r3, [r3, #0]
   b77e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b77e8:	9301      	str	r3, [sp, #4]
   b77ea:	bd08      	pop	{r3, pc}
   b77ec:	0003021c 	.word	0x0003021c

000b77f0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b77f0:	b508      	push	{r3, lr}
   b77f2:	4b02      	ldr	r3, [pc, #8]	; (b77fc <newlib_impure_ptr_callback+0xc>)
   b77f4:	681b      	ldr	r3, [r3, #0]
   b77f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b77f8:	9301      	str	r3, [sp, #4]
   b77fa:	bd08      	pop	{r3, pc}
   b77fc:	0003021c 	.word	0x0003021c

000b7800 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7800:	b510      	push	{r4, lr}
   b7802:	4604      	mov	r4, r0
    ::free(ptr);
   b7804:	6800      	ldr	r0, [r0, #0]
   b7806:	f7ff ffb3 	bl	b7770 <free>
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   b780a:	4620      	mov	r0, r4
   b780c:	bd10      	pop	{r4, pc}

000b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b780e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b7810:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b7812:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b7814:	b17c      	cbz	r4, b7836 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b7816:	6863      	ldr	r3, [r4, #4]
   b7818:	3b01      	subs	r3, #1
   b781a:	6063      	str	r3, [r4, #4]
   b781c:	b95b      	cbnz	r3, b7836 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b781e:	6823      	ldr	r3, [r4, #0]
   b7820:	4620      	mov	r0, r4
   b7822:	689b      	ldr	r3, [r3, #8]
   b7824:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7826:	68a3      	ldr	r3, [r4, #8]
   b7828:	3b01      	subs	r3, #1
   b782a:	60a3      	str	r3, [r4, #8]
   b782c:	b91b      	cbnz	r3, b7836 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b782e:	6823      	ldr	r3, [r4, #0]
   b7830:	4620      	mov	r0, r4
   b7832:	68db      	ldr	r3, [r3, #12]
   b7834:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b7836:	4628      	mov	r0, r5
   b7838:	bd38      	pop	{r3, r4, r5, pc}

000b783a <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>:
    bool realloc(int n) {
   b783a:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b783c:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b783e:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7840:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7842:	dd03      	ble.n	b784c <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b7844:	f7ff ff9c 	bl	b7780 <realloc>
            if (!d) {
   b7848:	b918      	cbnz	r0, b7852 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x18>
    }
   b784a:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b784c:	f7ff ff90 	bl	b7770 <free>
        T* d = nullptr;
   b7850:	2000      	movs	r0, #0
        data_ = d;
   b7852:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7854:	60a5      	str	r5, [r4, #8]
        return true;
   b7856:	2001      	movs	r0, #1
   b7858:	e7f7      	b.n	b784a <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x10>

000b785a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b785a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b785c:	6843      	ldr	r3, [r0, #4]
   b785e:	3b01      	subs	r3, #1
    {
   b7860:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7862:	6043      	str	r3, [r0, #4]
   b7864:	b963      	cbnz	r3, b7880 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7866:	6803      	ldr	r3, [r0, #0]
   b7868:	689b      	ldr	r3, [r3, #8]
   b786a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b786c:	68a3      	ldr	r3, [r4, #8]
   b786e:	3b01      	subs	r3, #1
   b7870:	60a3      	str	r3, [r4, #8]
   b7872:	b92b      	cbnz	r3, b7880 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7874:	6823      	ldr	r3, [r4, #0]
   b7876:	4620      	mov	r0, r4
   b7878:	68db      	ldr	r3, [r3, #12]
    }
   b787a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b787e:	4718      	bx	r3
    }
   b7880:	bd10      	pop	{r4, pc}

000b7882 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7882:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7884:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7888:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b788a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b788e:	42ae      	cmp	r6, r5
   b7890:	d004      	beq.n	b789c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b7892:	4628      	mov	r0, r5
   b7894:	f002 f8ce 	bl	b9a34 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b7898:	3510      	adds	r5, #16
   b789a:	e7f8      	b.n	b788e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b789c:	6820      	ldr	r0, [r4, #0]
   b789e:	f7ff ff67 	bl	b7770 <free>
}
   b78a2:	4620      	mov	r0, r4
   b78a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b78a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b78a8:	4802      	ldr	r0, [pc, #8]	; (b78b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b78aa:	2300      	movs	r3, #0
   b78ac:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b78ae:	f7ff bcff 	b.w	b72b0 <os_mutex_recursive_create>
   b78b2:	bf00      	nop
   b78b4:	2003e670 	.word	0x2003e670

000b78b8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b78b8:	2200      	movs	r2, #0
   b78ba:	6840      	ldr	r0, [r0, #4]
   b78bc:	4611      	mov	r1, r2
   b78be:	f7ff bef7 	b.w	b76b0 <network_ready>

000b78c2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b78c2:	2200      	movs	r2, #0
   b78c4:	6840      	ldr	r0, [r0, #4]
   b78c6:	4611      	mov	r1, r2
   b78c8:	f7ff bf12 	b.w	b76f0 <network_listening>

000b78cc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b78cc:	2200      	movs	r2, #0
   b78ce:	6840      	ldr	r0, [r0, #4]
   b78d0:	4611      	mov	r1, r2
   b78d2:	f7ff bf1d 	b.w	b7710 <network_get_listen_timeout>

000b78d6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b78d6:	6840      	ldr	r0, [r0, #4]
   b78d8:	2200      	movs	r2, #0
   b78da:	f7ff bf11 	b.w	b7700 <network_set_listen_timeout>

000b78de <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b78de:	6840      	ldr	r0, [r0, #4]
   b78e0:	2200      	movs	r2, #0
   b78e2:	f081 0101 	eor.w	r1, r1, #1
   b78e6:	f7ff befb 	b.w	b76e0 <network_listen>

000b78ea <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b78ea:	2300      	movs	r3, #0
   b78ec:	6840      	ldr	r0, [r0, #4]
   b78ee:	461a      	mov	r2, r3
   b78f0:	4619      	mov	r1, r3
   b78f2:	f7ff beed 	b.w	b76d0 <network_off>

000b78f6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b78f6:	2300      	movs	r3, #0
   b78f8:	6840      	ldr	r0, [r0, #4]
   b78fa:	461a      	mov	r2, r3
   b78fc:	4619      	mov	r1, r3
   b78fe:	f7ff bedf 	b.w	b76c0 <network_on>

000b7902 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7902:	2200      	movs	r2, #0
   b7904:	6840      	ldr	r0, [r0, #4]
   b7906:	4611      	mov	r1, r2
   b7908:	f7ff bec2 	b.w	b7690 <network_connecting>

000b790c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b790c:	6840      	ldr	r0, [r0, #4]
   b790e:	2200      	movs	r2, #0
   b7910:	2102      	movs	r1, #2
   b7912:	f7ff bec5 	b.w	b76a0 <network_disconnect>

000b7916 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7916:	2300      	movs	r3, #0
   b7918:	6840      	ldr	r0, [r0, #4]
   b791a:	461a      	mov	r2, r3
   b791c:	f7ff beb0 	b.w	b7680 <network_connect>

000b7920 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b7920:	4b08      	ldr	r3, [pc, #32]	; (b7944 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b7922:	b510      	push	{r4, lr}
   b7924:	2428      	movs	r4, #40	; 0x28
   b7926:	4622      	mov	r2, r4
   b7928:	4618      	mov	r0, r3
   b792a:	2100      	movs	r1, #0
   b792c:	f004 f914 	bl	bbb58 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7930:	4b05      	ldr	r3, [pc, #20]	; (b7948 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b7932:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b7934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7938:	6042      	str	r2, [r0, #4]
   b793a:	2204      	movs	r2, #4
   b793c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b793e:	4a03      	ldr	r2, [pc, #12]	; (b794c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b7940:	601a      	str	r2, [r3, #0]
   b7942:	bd10      	pop	{r4, pc}
   b7944:	2003e67c 	.word	0x2003e67c
   b7948:	2003e674 	.word	0x2003e674
   b794c:	000be18c 	.word	0x000be18c

000b7950 <_ZN10CloudClass6ledgerEPKc>:
    return size;
}

#if Wiring_Ledger

Ledger CloudClass::ledger(const char* name) {
   b7950:	b530      	push	{r4, r5, lr}
    ledger_instance* instance = nullptr;
   b7952:	2500      	movs	r5, #0
Ledger CloudClass::ledger(const char* name) {
   b7954:	b08d      	sub	sp, #52	; 0x34
   b7956:	4604      	mov	r4, r0
    int r = ledger_get_instance(&instance, name, nullptr);
   b7958:	462a      	mov	r2, r5
   b795a:	a803      	add	r0, sp, #12
    ledger_instance* instance = nullptr;
   b795c:	9503      	str	r5, [sp, #12]
    int r = ledger_get_instance(&instance, name, nullptr);
   b795e:	f7ff fe2f 	bl	b75c0 <ledger_get_instance>
    if (r < 0) {
   b7962:	2800      	cmp	r0, #0
   b7964:	da0f      	bge.n	b7986 <_ZN10CloudClass6ledgerEPKc+0x36>
        LOG(ERROR, "ledger_get_instance() failed: %d", r);
   b7966:	2320      	movs	r3, #32
   b7968:	e9cd 3504 	strd	r3, r5, [sp, #16]
   b796c:	4b07      	ldr	r3, [pc, #28]	; (b798c <_ZN10CloudClass6ledgerEPKc+0x3c>)
   b796e:	9001      	str	r0, [sp, #4]
   b7970:	9300      	str	r3, [sp, #0]
   b7972:	4907      	ldr	r1, [pc, #28]	; (b7990 <_ZN10CloudClass6ledgerEPKc+0x40>)
   b7974:	462b      	mov	r3, r5
   b7976:	aa04      	add	r2, sp, #16
   b7978:	2032      	movs	r0, #50	; 0x32
   b797a:	f7ff fd99 	bl	b74b0 <log_message>
            Ledger(nullptr) {
    }

    // This constructor is for internal use only
    explicit Ledger(ledger_instance* instance, bool addRef = true) :
            instance_(instance) {
   b797e:	6025      	str	r5, [r4, #0]
        return Ledger();
    }
    return Ledger(instance, false /* addRef */);
}
   b7980:	4620      	mov	r0, r4
   b7982:	b00d      	add	sp, #52	; 0x34
   b7984:	bd30      	pop	{r4, r5, pc}
   b7986:	9b03      	ldr	r3, [sp, #12]
   b7988:	6023      	str	r3, [r4, #0]
        if (instance_ && addRef) {
   b798a:	e7f9      	b.n	b7980 <_ZN10CloudClass6ledgerEPKc+0x30>
   b798c:	000be1e8 	.word	0x000be1e8
   b7990:	000be1c8 	.word	0x000be1c8

000b7994 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7994:	2200      	movs	r2, #0
   b7996:	6840      	ldr	r0, [r0, #4]
   b7998:	4611      	mov	r1, r2
   b799a:	f7ff bea9 	b.w	b76f0 <network_listening>

000b799e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b799e:	2200      	movs	r2, #0
   b79a0:	6840      	ldr	r0, [r0, #4]
   b79a2:	4611      	mov	r1, r2
   b79a4:	f7ff beb4 	b.w	b7710 <network_get_listen_timeout>

000b79a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b79a8:	6840      	ldr	r0, [r0, #4]
   b79aa:	2200      	movs	r2, #0
   b79ac:	f7ff bea8 	b.w	b7700 <network_set_listen_timeout>

000b79b0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b79b0:	6840      	ldr	r0, [r0, #4]
   b79b2:	2200      	movs	r2, #0
   b79b4:	f081 0101 	eor.w	r1, r1, #1
   b79b8:	f7ff be92 	b.w	b76e0 <network_listen>

000b79bc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b79bc:	2300      	movs	r3, #0
   b79be:	6840      	ldr	r0, [r0, #4]
   b79c0:	461a      	mov	r2, r3
   b79c2:	4619      	mov	r1, r3
   b79c4:	f7ff be84 	b.w	b76d0 <network_off>

000b79c8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b79c8:	2300      	movs	r3, #0
   b79ca:	6840      	ldr	r0, [r0, #4]
   b79cc:	461a      	mov	r2, r3
   b79ce:	4619      	mov	r1, r3
   b79d0:	f7ff be76 	b.w	b76c0 <network_on>

000b79d4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b79d4:	2200      	movs	r2, #0
   b79d6:	6840      	ldr	r0, [r0, #4]
   b79d8:	4611      	mov	r1, r2
   b79da:	f7ff be69 	b.w	b76b0 <network_ready>

000b79de <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b79de:	2200      	movs	r2, #0
   b79e0:	6840      	ldr	r0, [r0, #4]
   b79e2:	4611      	mov	r1, r2
   b79e4:	f7ff be54 	b.w	b7690 <network_connecting>

000b79e8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b79e8:	6840      	ldr	r0, [r0, #4]
   b79ea:	2200      	movs	r2, #0
   b79ec:	2102      	movs	r1, #2
   b79ee:	f7ff be57 	b.w	b76a0 <network_disconnect>

000b79f2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b79f2:	2300      	movs	r3, #0
   b79f4:	6840      	ldr	r0, [r0, #4]
   b79f6:	461a      	mov	r2, r3
   b79f8:	f7ff be42 	b.w	b7680 <network_connect>

000b79fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b79fc:	4b02      	ldr	r3, [pc, #8]	; (b7a08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b79fe:	2203      	movs	r2, #3
   b7a00:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7a02:	4a02      	ldr	r2, [pc, #8]	; (b7a0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7a04:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7a06:	4770      	bx	lr
   b7a08:	2003e6a4 	.word	0x2003e6a4
   b7a0c:	000be214 	.word	0x000be214

000b7a10 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
#include <chrono>

class WireTransmission {
public:
  WireTransmission(uint8_t address)
      : address_{address},
   b7a10:	4b05      	ldr	r3, [pc, #20]	; (b7a28 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS},
        buffer_(nullptr) {
   b7a12:	21ff      	movs	r1, #255	; 0xff
   b7a14:	2200      	movs	r2, #0
   b7a16:	e9c3 1200 	strd	r1, r2, [r3]
   b7a1a:	2001      	movs	r0, #1
   b7a1c:	2164      	movs	r1, #100	; 0x64
   b7a1e:	e9c3 0102 	strd	r0, r1, [r3, #8]
   b7a22:	611a      	str	r2, [r3, #16]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
   b7a24:	4770      	bx	lr
   b7a26:	bf00      	nop
   b7a28:	2003e6ac 	.word	0x2003e6ac

000b7a2c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7a2c:	4770      	bx	lr

000b7a2e <_ZN9IPAddressD0Ev>:
   b7a2e:	b510      	push	{r4, lr}
   b7a30:	2118      	movs	r1, #24
   b7a32:	4604      	mov	r4, r0
   b7a34:	f7fd f9ed 	bl	b4e12 <_ZdlPvj>
   b7a38:	4620      	mov	r0, r4
   b7a3a:	bd10      	pop	{r4, pc}

000b7a3c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7a3e:	7d03      	ldrb	r3, [r0, #20]
   b7a40:	2b06      	cmp	r3, #6
{
   b7a42:	b08d      	sub	sp, #52	; 0x34
   b7a44:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7a46:	f100 0704 	add.w	r7, r0, #4
   b7a4a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7a4e:	d012      	beq.n	b7a76 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7a50:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7a54:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7a58:	220a      	movs	r2, #10
   b7a5a:	4630      	mov	r0, r6
   b7a5c:	f001 ff9b 	bl	b9996 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7a60:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7a62:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7a64:	d019      	beq.n	b7a9a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7a66:	2c00      	cmp	r4, #0
   b7a68:	d0f4      	beq.n	b7a54 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7a6a:	212e      	movs	r1, #46	; 0x2e
   b7a6c:	4630      	mov	r0, r6
   b7a6e:	f001 ff8f 	bl	b9990 <_ZN5Print5printEc>
   b7a72:	4404      	add	r4, r0
   b7a74:	e7ee      	b.n	b7a54 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7a76:	232f      	movs	r3, #47	; 0x2f
   b7a78:	466a      	mov	r2, sp
   b7a7a:	4639      	mov	r1, r7
   b7a7c:	200a      	movs	r0, #10
		buf[0] = 0;
   b7a7e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7a82:	f7ff fc5d 	bl	b7340 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7a86:	4668      	mov	r0, sp
   b7a88:	f7fd f962 	bl	b4d50 <strlen>
   b7a8c:	6833      	ldr	r3, [r6, #0]
   b7a8e:	4602      	mov	r2, r0
   b7a90:	68db      	ldr	r3, [r3, #12]
   b7a92:	4669      	mov	r1, sp
   b7a94:	4630      	mov	r0, r6
   b7a96:	4798      	blx	r3
   b7a98:	4604      	mov	r4, r0
    }
    return n;
}
   b7a9a:	4620      	mov	r0, r4
   b7a9c:	b00d      	add	sp, #52	; 0x34
   b7a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7aa0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7aa0:	b510      	push	{r4, lr}
   b7aa2:	4b05      	ldr	r3, [pc, #20]	; (b7ab8 <_ZN9IPAddressC1Ev+0x18>)
   b7aa4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7aa6:	2211      	movs	r2, #17
   b7aa8:	f840 3b04 	str.w	r3, [r0], #4
   b7aac:	2100      	movs	r1, #0
   b7aae:	f004 f853 	bl	bbb58 <memset>
}
   b7ab2:	4620      	mov	r0, r4
   b7ab4:	bd10      	pop	{r4, pc}
   b7ab6:	bf00      	nop
   b7ab8:	000be258 	.word	0x000be258

000b7abc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7abc:	4603      	mov	r3, r0
   b7abe:	4a07      	ldr	r2, [pc, #28]	; (b7adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7ac0:	b510      	push	{r4, lr}
   b7ac2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7ac6:	f101 0210 	add.w	r2, r1, #16
   b7aca:	f851 4b04 	ldr.w	r4, [r1], #4
   b7ace:	f843 4b04 	str.w	r4, [r3], #4
   b7ad2:	4291      	cmp	r1, r2
   b7ad4:	d1f9      	bne.n	b7aca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7ad6:	780a      	ldrb	r2, [r1, #0]
   b7ad8:	701a      	strb	r2, [r3, #0]
}
   b7ada:	bd10      	pop	{r4, pc}
   b7adc:	000be258 	.word	0x000be258

000b7ae0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7ae0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7ae2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7ae6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7aea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7aee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7af2:	2304      	movs	r3, #4
   b7af4:	6041      	str	r1, [r0, #4]
   b7af6:	7503      	strb	r3, [r0, #20]
}
   b7af8:	bd10      	pop	{r4, pc}
	...

000b7afc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7afc:	b507      	push	{r0, r1, r2, lr}
   b7afe:	4b06      	ldr	r3, [pc, #24]	; (b7b18 <_ZN9IPAddressC1EPKh+0x1c>)
   b7b00:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7b02:	78cb      	ldrb	r3, [r1, #3]
   b7b04:	9300      	str	r3, [sp, #0]
   b7b06:	788b      	ldrb	r3, [r1, #2]
   b7b08:	784a      	ldrb	r2, [r1, #1]
   b7b0a:	7809      	ldrb	r1, [r1, #0]
   b7b0c:	f7ff ffe8 	bl	b7ae0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7b10:	b003      	add	sp, #12
   b7b12:	f85d fb04 	ldr.w	pc, [sp], #4
   b7b16:	bf00      	nop
   b7b18:	000be258 	.word	0x000be258

000b7b1c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b7b1c:	f100 0310 	add.w	r3, r0, #16
   b7b20:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b7b22:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b7b26:	2901      	cmp	r1, #1
   b7b28:	4618      	mov	r0, r3
   b7b2a:	d108      	bne.n	b7b3e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b7b2c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b7b30:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b7b34:	3a01      	subs	r2, #1
   b7b36:	f103 0310 	add.w	r3, r3, #16
   b7b3a:	d1f2      	bne.n	b7b22 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b7b3c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b7b3e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b7b40:	bf04      	itt	eq
   b7b42:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b7b46:	1852      	addeq	r2, r2, r1
   b7b48:	e7f4      	b.n	b7b34 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b7b4a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7b4a:	4770      	bx	lr

000b7b4c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b7b4c:	2000      	movs	r0, #0
   b7b4e:	4770      	bx	lr

000b7b50 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7b50:	b510      	push	{r4, lr}
   b7b52:	2110      	movs	r1, #16
   b7b54:	4604      	mov	r4, r0
   b7b56:	f7fd f95c 	bl	b4e12 <_ZdlPvj>
   b7b5a:	4620      	mov	r0, r4
   b7b5c:	bd10      	pop	{r4, pc}

000b7b5e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7b5e:	b508      	push	{r3, lr}
      { delete this; }
   b7b60:	f7ff fff6 	bl	b7b50 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7b64:	bd08      	pop	{r3, pc}

000b7b66 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b7b66:	b40e      	push	{r1, r2, r3}
   b7b68:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7b6a:	b088      	sub	sp, #32
   b7b6c:	af00      	add	r7, sp, #0
   b7b6e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7b72:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7b74:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7b78:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7b7a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7b7c:	462b      	mov	r3, r5
   b7b7e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b7b80:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7b82:	f7ff fe0d 	bl	b77a0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b7b86:	280f      	cmp	r0, #15
   b7b88:	687a      	ldr	r2, [r7, #4]
   b7b8a:	d91a      	bls.n	b7bc2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b7b8c:	f100 0308 	add.w	r3, r0, #8
   b7b90:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b7b94:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b7b96:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7b9a:	1c41      	adds	r1, r0, #1
   b7b9c:	462b      	mov	r3, r5
   b7b9e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b7ba0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7ba2:	f7ff fdfd 	bl	b77a0 <vsnprintf>
        if (n > 0) {
   b7ba6:	1e02      	subs	r2, r0, #0
   b7ba8:	dd04      	ble.n	b7bb4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b7baa:	6823      	ldr	r3, [r4, #0]
   b7bac:	4669      	mov	r1, sp
   b7bae:	689b      	ldr	r3, [r3, #8]
   b7bb0:	4620      	mov	r0, r4
   b7bb2:	4798      	blx	r3
   b7bb4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b7bb6:	3720      	adds	r7, #32
   b7bb8:	46bd      	mov	sp, r7
   b7bba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7bbe:	b003      	add	sp, #12
   b7bc0:	4770      	bx	lr
    } else if (n > 0) {
   b7bc2:	2800      	cmp	r0, #0
   b7bc4:	d0f7      	beq.n	b7bb6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b7bc6:	6823      	ldr	r3, [r4, #0]
   b7bc8:	4602      	mov	r2, r0
   b7bca:	689b      	ldr	r3, [r3, #8]
   b7bcc:	f107 0110 	add.w	r1, r7, #16
   b7bd0:	4620      	mov	r0, r4
   b7bd2:	4798      	blx	r3
}
   b7bd4:	e7ef      	b.n	b7bb6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b7bd6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7bd6:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   b7bd8:	68c4      	ldr	r4, [r0, #12]
   b7bda:	b17c      	cbz	r4, b7bfc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
        delete[] tokens;
   b7bdc:	6820      	ldr	r0, [r4, #0]
   b7bde:	b108      	cbz	r0, b7be4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   b7be0:	f7fd f915 	bl	b4e0e <_ZdaPv>
        if (freeJson) {
   b7be4:	7a23      	ldrb	r3, [r4, #8]
   b7be6:	b11b      	cbz	r3, b7bf0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   b7be8:	6860      	ldr	r0, [r4, #4]
            delete[] json;
   b7bea:	b108      	cbz	r0, b7bf0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   b7bec:	f7fd f90f 	bl	b4e0e <_ZdaPv>
   b7bf0:	4620      	mov	r0, r4
   b7bf2:	210c      	movs	r1, #12
   b7bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7bf8:	f7fd b90b 	b.w	b4e12 <_ZdlPvj>
   b7bfc:	bd10      	pop	{r4, pc}

000b7bfe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7bfe:	b538      	push	{r3, r4, r5, lr}
   b7c00:	680b      	ldr	r3, [r1, #0]
   b7c02:	6003      	str	r3, [r0, #0]
   b7c04:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b7c06:	6843      	ldr	r3, [r0, #4]
   b7c08:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7c0a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b7c0c:	d008      	beq.n	b7c20 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b7c0e:	b115      	cbz	r5, b7c16 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b7c10:	686b      	ldr	r3, [r5, #4]
   b7c12:	3301      	adds	r3, #1
   b7c14:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b7c16:	6860      	ldr	r0, [r4, #4]
   b7c18:	b108      	cbz	r0, b7c1e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b7c1a:	f7ff fe1e 	bl	b785a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b7c1e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7c20:	bd38      	pop	{r3, r4, r5, pc}

000b7c22 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b7c22:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b7c24:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b7c26:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7c2a:	689b      	ldr	r3, [r3, #8]
   b7c2c:	2201      	movs	r2, #1
   b7c2e:	f10d 0107 	add.w	r1, sp, #7
   b7c32:	4798      	blx	r3
}
   b7c34:	b003      	add	sp, #12
   b7c36:	f85d fb04 	ldr.w	pc, [sp], #4

000b7c3a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7c3a:	460b      	mov	r3, r1
   b7c3c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b7c3e:	2200      	movs	r2, #0
   b7c40:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b7c42:	e9c0 2200 	strd	r2, r2, [r0]
   b7c46:	4604      	mov	r4, r0
        t_ = t;
   b7c48:	6083      	str	r3, [r0, #8]
    if (t) {
   b7c4a:	b90b      	cbnz	r3, b7c50 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b7c4c:	4620      	mov	r0, r4
   b7c4e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b7c50:	f7ff ffd5 	bl	b7bfe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b7c54:	e7fa      	b.n	b7c4c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b7c56 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b7c56:	6883      	ldr	r3, [r0, #8]
   b7c58:	b1eb      	cbz	r3, b7c96 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b7c5a:	781a      	ldrb	r2, [r3, #0]
   b7c5c:	2a03      	cmp	r2, #3
   b7c5e:	d81a      	bhi.n	b7c96 <_ZNK5spark9JSONValue4typeEv+0x40>
   b7c60:	e8df f002 	tbb	[pc, r2]
   b7c64:	1b021704 	.word	0x1b021704
   b7c68:	2005      	movs	r0, #5
   b7c6a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b7c6c:	6802      	ldr	r2, [r0, #0]
   b7c6e:	685b      	ldr	r3, [r3, #4]
   b7c70:	6852      	ldr	r2, [r2, #4]
   b7c72:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b7c74:	282d      	cmp	r0, #45	; 0x2d
   b7c76:	d012      	beq.n	b7c9e <_ZNK5spark9JSONValue4typeEv+0x48>
   b7c78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7c7c:	2b09      	cmp	r3, #9
   b7c7e:	d90e      	bls.n	b7c9e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b7c80:	2874      	cmp	r0, #116	; 0x74
   b7c82:	d00e      	beq.n	b7ca2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b7c84:	2866      	cmp	r0, #102	; 0x66
   b7c86:	d00c      	beq.n	b7ca2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b7c88:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b7c8c:	4258      	negs	r0, r3
   b7c8e:	4158      	adcs	r0, r3
   b7c90:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b7c92:	2006      	movs	r0, #6
   b7c94:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b7c96:	2000      	movs	r0, #0
   b7c98:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b7c9a:	2004      	movs	r0, #4
   b7c9c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b7c9e:	2003      	movs	r0, #3
   b7ca0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b7ca2:	2002      	movs	r0, #2
}
   b7ca4:	4770      	bx	lr
	...

000b7ca8 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   b7ca8:	b510      	push	{r4, lr}
   b7caa:	4604      	mov	r4, r0
    switch (type()) {
   b7cac:	f7ff ffd3 	bl	b7c56 <_ZNK5spark9JSONValue4typeEv>
   b7cb0:	2803      	cmp	r0, #3
   b7cb2:	d00d      	beq.n	b7cd0 <_ZNK5spark9JSONValue6toBoolEv+0x28>
   b7cb4:	2804      	cmp	r0, #4
   b7cb6:	d01e      	beq.n	b7cf6 <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   b7cb8:	2802      	cmp	r0, #2
   b7cba:	d12b      	bne.n	b7d14 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   b7cbc:	6822      	ldr	r2, [r4, #0]
   b7cbe:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b7cc0:	6852      	ldr	r2, [r2, #4]
   b7cc2:	685b      	ldr	r3, [r3, #4]
   b7cc4:	5cd0      	ldrb	r0, [r2, r3]
   b7cc6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b7cca:	4258      	negs	r0, r3
   b7ccc:	4158      	adcs	r0, r3
}
   b7cce:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   b7cd0:	68a3      	ldr	r3, [r4, #8]
   b7cd2:	6822      	ldr	r2, [r4, #0]
   b7cd4:	685b      	ldr	r3, [r3, #4]
   b7cd6:	6854      	ldr	r4, [r2, #4]
   b7cd8:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   b7cda:	490f      	ldr	r1, [pc, #60]	; (b7d18 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   b7cdc:	4620      	mov	r0, r4
   b7cde:	f7fd f82d 	bl	b4d3c <strcmp>
   b7ce2:	2800      	cmp	r0, #0
   b7ce4:	d0f3      	beq.n	b7cce <_ZNK5spark9JSONValue6toBoolEv+0x26>
   b7ce6:	490d      	ldr	r1, [pc, #52]	; (b7d1c <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   b7ce8:	4620      	mov	r0, r4
   b7cea:	f7fd f827 	bl	b4d3c <strcmp>
   b7cee:	3800      	subs	r0, #0
   b7cf0:	bf18      	it	ne
   b7cf2:	2001      	movne	r0, #1
   b7cf4:	e7eb      	b.n	b7cce <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   b7cf6:	6822      	ldr	r2, [r4, #0]
   b7cf8:	68a3      	ldr	r3, [r4, #8]
   b7cfa:	6852      	ldr	r2, [r2, #4]
   b7cfc:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   b7cfe:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   b7d00:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   b7d02:	2800      	cmp	r0, #0
   b7d04:	d0e3      	beq.n	b7cce <_ZNK5spark9JSONValue6toBoolEv+0x26>
   b7d06:	4906      	ldr	r1, [pc, #24]	; (b7d20 <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   b7d08:	4620      	mov	r0, r4
   b7d0a:	f7fd f817 	bl	b4d3c <strcmp>
   b7d0e:	2800      	cmp	r0, #0
   b7d10:	d1e3      	bne.n	b7cda <_ZNK5spark9JSONValue6toBoolEv+0x32>
   b7d12:	e7dc      	b.n	b7cce <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   b7d14:	2000      	movs	r0, #0
   b7d16:	e7da      	b.n	b7cce <_ZNK5spark9JSONValue6toBoolEv+0x26>
   b7d18:	000be266 	.word	0x000be266
   b7d1c:	000be264 	.word	0x000be264
   b7d20:	000bdc11 	.word	0x000bdc11

000b7d24 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b7d24:	b510      	push	{r4, lr}
   b7d26:	4604      	mov	r4, r0
    switch (type()) {
   b7d28:	f7ff ff95 	bl	b7c56 <_ZNK5spark9JSONValue4typeEv>
   b7d2c:	2802      	cmp	r0, #2
   b7d2e:	d00e      	beq.n	b7d4e <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b7d30:	1ec3      	subs	r3, r0, #3
   b7d32:	b2db      	uxtb	r3, r3
   b7d34:	2b01      	cmp	r3, #1
   b7d36:	d814      	bhi.n	b7d62 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b7d38:	6822      	ldr	r2, [r4, #0]
   b7d3a:	68a3      	ldr	r3, [r4, #8]
   b7d3c:	6850      	ldr	r0, [r2, #4]
   b7d3e:	685b      	ldr	r3, [r3, #4]
}
   b7d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b7d44:	220a      	movs	r2, #10
   b7d46:	2100      	movs	r1, #0
   b7d48:	4418      	add	r0, r3
   b7d4a:	f004 be49 	b.w	bc9e0 <strtol>
        const char* const s = d_->json + t_->start;
   b7d4e:	6822      	ldr	r2, [r4, #0]
   b7d50:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b7d52:	6852      	ldr	r2, [r2, #4]
   b7d54:	685b      	ldr	r3, [r3, #4]
   b7d56:	5cd0      	ldrb	r0, [r2, r3]
   b7d58:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b7d5c:	4258      	negs	r0, r3
   b7d5e:	4158      	adcs	r0, r3
}
   b7d60:	bd10      	pop	{r4, pc}
    switch (type()) {
   b7d62:	2000      	movs	r0, #0
   b7d64:	e7fc      	b.n	b7d60 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000b7d68 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   b7d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7d6c:	b086      	sub	sp, #24
   b7d6e:	4607      	mov	r7, r0
   b7d70:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   b7d72:	a802      	add	r0, sp, #8
   b7d74:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   b7d76:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   b7d78:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   b7d7a:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   b7d7c:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   b7d7e:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   b7d80:	f7ff fb8e 	bl	b74a0 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   b7d84:	e9cd 4400 	strd	r4, r4, [sp]
   b7d88:	4623      	mov	r3, r4
   b7d8a:	4642      	mov	r2, r8
   b7d8c:	4639      	mov	r1, r7
   b7d8e:	a802      	add	r0, sp, #8
   b7d90:	f7ff fbae 	bl	b74f0 <jsmn_parse>
    if (n <= 0) {
   b7d94:	1e06      	subs	r6, r0, #0
   b7d96:	dd24      	ble.n	b7de2 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7a>
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   b7d98:	f1b6 6f00 	cmp.w	r6, #134217728	; 0x8000000
   b7d9c:	4912      	ldr	r1, [pc, #72]	; (b7de8 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x80>)
   b7d9e:	bfb4      	ite	lt
   b7da0:	0130      	lsllt	r0, r6, #4
   b7da2:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   b7da6:	f003 fdb9 	bl	bb91c <_ZnajRKSt9nothrow_t>
    if (!t) {
   b7daa:	4605      	mov	r5, r0
   b7dac:	b198      	cbz	r0, b7dd6 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
    jsmn_init(&parser, nullptr); // Reset parser
   b7dae:	2100      	movs	r1, #0
   b7db0:	a802      	add	r0, sp, #8
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   b7db2:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   b7db4:	f7ff fb74 	bl	b74a0 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   b7db8:	e9cd 6400 	strd	r6, r4, [sp]
   b7dbc:	462b      	mov	r3, r5
   b7dbe:	4642      	mov	r2, r8
   b7dc0:	4639      	mov	r1, r7
   b7dc2:	a802      	add	r0, sp, #8
   b7dc4:	f7ff fb94 	bl	b74f0 <jsmn_parse>
   b7dc8:	42a0      	cmp	r0, r4
   b7dca:	dd07      	ble.n	b7ddc <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>
    *tokens = t.release();
   b7dcc:	f8ca 5000 	str.w	r5, [sl]
    return true;
   b7dd0:	2001      	movs	r0, #1
    *count = n;
   b7dd2:	f8c9 6000 	str.w	r6, [r9]
}
   b7dd6:	b006      	add	sp, #24
   b7dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
	{
	  static_assert(sizeof(_Tp)>0,
			"can't delete pointer to incomplete type");
	  delete [] __ptr;
   b7ddc:	4628      	mov	r0, r5
   b7dde:	f7fd f816 	bl	b4e0e <_ZdaPv>
	}
   b7de2:	4620      	mov	r0, r4
   b7de4:	e7f7      	b.n	b7dd6 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
   b7de6:	bf00      	nop
   b7de8:	000be5b4 	.word	0x000be5b4

000b7dec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   b7dec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   b7df0:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   b7df2:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   b7df4:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   b7df6:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   b7df8:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   b7dfa:	4607      	mov	r7, r0
    const char *s = s1;
   b7dfc:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   b7dfe:	4619      	mov	r1, r3
                    *str = 0x0d;
   b7e00:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   b7e04:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   b7e08:	42b4      	cmp	r4, r6
   b7e0a:	d063      	beq.n	b7ed4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
            ++s;
   b7e0c:	4625      	mov	r5, r4
        if (*s == '\\') {
   b7e0e:	f815 2b01 	ldrb.w	r2, [r5], #1
   b7e12:	2a5c      	cmp	r2, #92	; 0x5c
   b7e14:	d12b      	bne.n	b7e6e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   b7e16:	42a1      	cmp	r1, r4
   b7e18:	d007      	beq.n	b7e2a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   b7e1a:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   b7e1e:	4618      	mov	r0, r3
   b7e20:	465a      	mov	r2, fp
   b7e22:	f003 fe7f 	bl	bbb24 <memmove>
   b7e26:	4603      	mov	r3, r0
                str += n;
   b7e28:	445b      	add	r3, fp
            if (s == end) {
   b7e2a:	42b5      	cmp	r5, r6
   b7e2c:	d039      	beq.n	b7ea2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   b7e2e:	7862      	ldrb	r2, [r4, #1]
   b7e30:	2a75      	cmp	r2, #117	; 0x75
   b7e32:	d12a      	bne.n	b7e8a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   b7e34:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   b7e36:	1ab2      	subs	r2, r6, r2
   b7e38:	2a03      	cmp	r2, #3
   b7e3a:	dd32      	ble.n	b7ea2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   b7e3c:	1da0      	adds	r0, r4, #6
   b7e3e:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   b7e42:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   b7e46:	45ae      	cmp	lr, r5
   b7e48:	d053      	beq.n	b7ef2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   b7e4a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   b7e4e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   b7e52:	fa5f fb82 	uxtb.w	fp, r2
   b7e56:	f1bb 0f09 	cmp.w	fp, #9
   b7e5a:	d905      	bls.n	b7e68 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   b7e5c:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   b7e60:	2a05      	cmp	r2, #5
   b7e62:	d807      	bhi.n	b7e74 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   b7e64:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   b7e68:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   b7e6c:	e7eb      	b.n	b7e46 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
            ++s;
   b7e6e:	4628      	mov	r0, r5
   b7e70:	4604      	mov	r4, r0
   b7e72:	e7c9      	b.n	b7e08 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   b7e74:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   b7e78:	2a05      	cmp	r2, #5
   b7e7a:	d812      	bhi.n	b7ea2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   b7e7c:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   b7e80:	e7f2      	b.n	b7e68 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   b7e82:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   b7e86:	4601      	mov	r1, r0
   b7e88:	e7f2      	b.n	b7e70 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   b7e8a:	2a6e      	cmp	r2, #110	; 0x6e
   b7e8c:	d01c      	beq.n	b7ec8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   b7e8e:	d80e      	bhi.n	b7eae <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   b7e90:	2a62      	cmp	r2, #98	; 0x62
   b7e92:	d013      	beq.n	b7ebc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   b7e94:	d807      	bhi.n	b7ea6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   b7e96:	2a2f      	cmp	r2, #47	; 0x2f
   b7e98:	d011      	beq.n	b7ebe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   b7e9a:	2a5c      	cmp	r2, #92	; 0x5c
   b7e9c:	d00f      	beq.n	b7ebe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   b7e9e:	2a22      	cmp	r2, #34	; 0x22
   b7ea0:	d00d      	beq.n	b7ebe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   b7ea2:	2000      	movs	r0, #0
   b7ea4:	e023      	b.n	b7eee <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   b7ea6:	2a66      	cmp	r2, #102	; 0x66
   b7ea8:	d1fb      	bne.n	b7ea2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   b7eaa:	220c      	movs	r2, #12
   b7eac:	e007      	b.n	b7ebe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   b7eae:	2a72      	cmp	r2, #114	; 0x72
   b7eb0:	d00d      	beq.n	b7ece <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   b7eb2:	2a74      	cmp	r2, #116	; 0x74
   b7eb4:	d1f5      	bne.n	b7ea2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   b7eb6:	f883 a000 	strb.w	sl, [r3]
                    break;
   b7eba:	e001      	b.n	b7ec0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   b7ebc:	2208      	movs	r2, #8
   b7ebe:	701a      	strb	r2, [r3, #0]
                ++s;
   b7ec0:	1ca1      	adds	r1, r4, #2
                ++str;
   b7ec2:	3301      	adds	r3, #1
                ++s;
   b7ec4:	4608      	mov	r0, r1
   b7ec6:	e7d3      	b.n	b7e70 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   b7ec8:	f04f 020a 	mov.w	r2, #10
   b7ecc:	e7f7      	b.n	b7ebe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   b7ece:	f883 9000 	strb.w	r9, [r3]
                    break;
   b7ed2:	e7f5      	b.n	b7ec0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
    if (s != s1) {
   b7ed4:	42a1      	cmp	r1, r4
   b7ed6:	d006      	beq.n	b7ee6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   b7ed8:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   b7eda:	4618      	mov	r0, r3
   b7edc:	4622      	mov	r2, r4
   b7ede:	f003 fe21 	bl	bbb24 <memmove>
   b7ee2:	4603      	mov	r3, r0
        str += n;
   b7ee4:	4423      	add	r3, r4
    t->end = str - json; // Update string length
   b7ee6:	eba3 0308 	sub.w	r3, r3, r8
   b7eea:	60bb      	str	r3, [r7, #8]
    return true;
   b7eec:	2001      	movs	r0, #1
}
   b7eee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   b7ef2:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   b7ef6:	d9c4      	bls.n	b7e82 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   b7ef8:	4621      	mov	r1, r4
   b7efa:	e7b9      	b.n	b7e70 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000b7efc <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   b7efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7efe:	4604      	mov	r4, r0
   b7f00:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   b7f02:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   b7f06:	2700      	movs	r7, #0
    while (t != end) {
   b7f08:	42b4      	cmp	r4, r6
   b7f0a:	d010      	beq.n	b7f2e <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   b7f0c:	7823      	ldrb	r3, [r4, #0]
   b7f0e:	2b03      	cmp	r3, #3
   b7f10:	d108      	bne.n	b7f24 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   b7f12:	4629      	mov	r1, r5
   b7f14:	4620      	mov	r0, r4
   b7f16:	f7ff ff69 	bl	b7dec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   b7f1a:	b148      	cbz	r0, b7f30 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   b7f1c:	68a3      	ldr	r3, [r4, #8]
   b7f1e:	54ef      	strb	r7, [r5, r3]
        ++t;
   b7f20:	3410      	adds	r4, #16
    while (t != end) {
   b7f22:	e7f1      	b.n	b7f08 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   b7f24:	2b00      	cmp	r3, #0
   b7f26:	d1fb      	bne.n	b7f20 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   b7f28:	68a2      	ldr	r2, [r4, #8]
   b7f2a:	54ab      	strb	r3, [r5, r2]
   b7f2c:	e7f8      	b.n	b7f20 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   b7f2e:	2001      	movs	r0, #1
}
   b7f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b7f34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7f34:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7f36:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b7f38:	e9c0 3300 	strd	r3, r3, [r0]
   b7f3c:	4604      	mov	r4, r0
        n_(0) {
   b7f3e:	480e      	ldr	r0, [pc, #56]	; (b7f78 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b7f40:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b7f44:	b1a9      	cbz	r1, b7f72 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b7f46:	780b      	ldrb	r3, [r1, #0]
   b7f48:	2b03      	cmp	r3, #3
   b7f4a:	d006      	beq.n	b7f5a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b7f4c:	b98b      	cbnz	r3, b7f72 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b7f4e:	6813      	ldr	r3, [r2, #0]
   b7f50:	6858      	ldr	r0, [r3, #4]
   b7f52:	684b      	ldr	r3, [r1, #4]
   b7f54:	5cc3      	ldrb	r3, [r0, r3]
   b7f56:	2b6e      	cmp	r3, #110	; 0x6e
   b7f58:	d007      	beq.n	b7f6a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b7f5a:	6813      	ldr	r3, [r2, #0]
   b7f5c:	684d      	ldr	r5, [r1, #4]
   b7f5e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b7f60:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b7f62:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b7f64:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b7f66:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b7f68:	60e3      	str	r3, [r4, #12]
   b7f6a:	4611      	mov	r1, r2
   b7f6c:	4620      	mov	r0, r4
   b7f6e:	f7ff fe46 	bl	b7bfe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7f72:	4620      	mov	r0, r4
   b7f74:	bd38      	pop	{r3, r4, r5, pc}
   b7f76:	bf00      	nop
   b7f78:	000be3da 	.word	0x000be3da

000b7f7c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7f7c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7f7e:	2500      	movs	r5, #0
   b7f80:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b7f82:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b7f86:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b7f8a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b7f8e:	4604      	mov	r4, r0
   b7f90:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b7f92:	b14b      	cbz	r3, b7fa8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b7f94:	781a      	ldrb	r2, [r3, #0]
   b7f96:	2a01      	cmp	r2, #1
   b7f98:	d106      	bne.n	b7fa8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b7f9a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b7f9e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b7fa0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b7fa2:	6143      	str	r3, [r0, #20]
   b7fa4:	f7ff fe2b 	bl	b7bfe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7fa8:	4620      	mov	r0, r4
   b7faa:	bd38      	pop	{r3, r4, r5, pc}

000b7fac <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b7fac:	b510      	push	{r4, lr}
    if (!n_) {
   b7fae:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b7fb0:	4604      	mov	r4, r0
    if (!n_) {
   b7fb2:	b163      	cbz	r3, b7fce <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b7fb4:	6880      	ldr	r0, [r0, #8]
   b7fb6:	60e0      	str	r0, [r4, #12]
    --n_;
   b7fb8:	3b01      	subs	r3, #1
    ++t_;
   b7fba:	3010      	adds	r0, #16
   b7fbc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b7fbe:	6120      	str	r0, [r4, #16]
    --n_;
   b7fc0:	6163      	str	r3, [r4, #20]
    if (n_) {
   b7fc2:	b113      	cbz	r3, b7fca <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b7fc4:	f7ff fdaa 	bl	b7b1c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b7fc8:	60a0      	str	r0, [r4, #8]
    return true;
   b7fca:	2001      	movs	r0, #1
   b7fcc:	e000      	b.n	b7fd0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b7fce:	4618      	mov	r0, r3
}
   b7fd0:	bd10      	pop	{r4, pc}

000b7fd2 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONArrayIterator::JSONArrayIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7fd2:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7fd4:	2500      	movs	r5, #0
   b7fd6:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b7fd8:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b7fdc:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b7fe0:	4604      	mov	r4, r0
   b7fe2:	4611      	mov	r1, r2
   b7fe4:	6105      	str	r5, [r0, #16]
    if (t && t->type == JSMN_ARRAY) {
   b7fe6:	b14b      	cbz	r3, b7ffc <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
   b7fe8:	781a      	ldrb	r2, [r3, #0]
   b7fea:	2a02      	cmp	r2, #2
   b7fec:	d106      	bne.n	b7ffc <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
        t_ = t + 1; // First element
   b7fee:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of elements
   b7ff2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First element
   b7ff4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of elements
   b7ff6:	6103      	str	r3, [r0, #16]
   b7ff8:	f7ff fe01 	bl	b7bfe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7ffc:	4620      	mov	r0, r4
   b7ffe:	bd38      	pop	{r3, r4, r5, pc}

000b8000 <_ZN5spark17JSONArrayIterator4nextEv>:
bool spark::JSONArrayIterator::next() {
   b8000:	b510      	push	{r4, lr}
    if (!n_) {
   b8002:	6903      	ldr	r3, [r0, #16]
bool spark::JSONArrayIterator::next() {
   b8004:	4604      	mov	r4, r0
    if (!n_) {
   b8006:	b14b      	cbz	r3, b801c <_ZN5spark17JSONArrayIterator4nextEv+0x1c>
    v_ = t_;
   b8008:	6880      	ldr	r0, [r0, #8]
   b800a:	60e0      	str	r0, [r4, #12]
    --n_;
   b800c:	3b01      	subs	r3, #1
   b800e:	6123      	str	r3, [r4, #16]
    if (n_) {
   b8010:	b113      	cbz	r3, b8018 <_ZN5spark17JSONArrayIterator4nextEv+0x18>
        t_ = skipToken(t_);
   b8012:	f7ff fd83 	bl	b7b1c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b8016:	60a0      	str	r0, [r4, #8]
    return true;
   b8018:	2001      	movs	r0, #1
   b801a:	e000      	b.n	b801e <_ZN5spark17JSONArrayIterator4nextEv+0x1e>
        return false;
   b801c:	4618      	mov	r0, r3
}
   b801e:	bd10      	pop	{r4, pc}

000b8020 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b8020:	b510      	push	{r4, lr}
    write('}');
   b8022:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b8024:	4604      	mov	r4, r0
    write('}');
   b8026:	f7ff fdfc 	bl	b7c22 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b802a:	2301      	movs	r3, #1
   b802c:	7123      	strb	r3, [r4, #4]
}
   b802e:	4620      	mov	r0, r4
   b8030:	bd10      	pop	{r4, pc}

000b8032 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b8032:	b508      	push	{r3, lr}
    switch (state_) {
   b8034:	7903      	ldrb	r3, [r0, #4]
   b8036:	2b01      	cmp	r3, #1
   b8038:	d002      	beq.n	b8040 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b803a:	2b02      	cmp	r3, #2
   b803c:	d004      	beq.n	b8048 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b803e:	bd08      	pop	{r3, pc}
        write(',');
   b8040:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b8042:	f7ff fdee 	bl	b7c22 <_ZN5spark10JSONWriter5writeEc>
}
   b8046:	e7fa      	b.n	b803e <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b8048:	213a      	movs	r1, #58	; 0x3a
   b804a:	e7fa      	b.n	b8042 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b804c <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b804c:	b510      	push	{r4, lr}
   b804e:	4604      	mov	r4, r0
    writeSeparator();
   b8050:	f7ff ffef 	bl	b8032 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b8054:	4620      	mov	r0, r4
   b8056:	217b      	movs	r1, #123	; 0x7b
   b8058:	f7ff fde3 	bl	b7c22 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b805c:	2300      	movs	r3, #0
   b805e:	7123      	strb	r3, [r4, #4]
}
   b8060:	4620      	mov	r0, r4
   b8062:	bd10      	pop	{r4, pc}

000b8064 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b8064:	b513      	push	{r0, r1, r4, lr}
   b8066:	4604      	mov	r4, r0
   b8068:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b806a:	f7ff ffe2 	bl	b8032 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b806e:	6823      	ldr	r3, [r4, #0]
   b8070:	9a01      	ldr	r2, [sp, #4]
   b8072:	68db      	ldr	r3, [r3, #12]
   b8074:	4903      	ldr	r1, [pc, #12]	; (b8084 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b8076:	4620      	mov	r0, r4
   b8078:	4798      	blx	r3
    state_ = NEXT;
   b807a:	2301      	movs	r3, #1
}
   b807c:	4620      	mov	r0, r4
    state_ = NEXT;
   b807e:	7123      	strb	r3, [r4, #4]
}
   b8080:	b002      	add	sp, #8
   b8082:	bd10      	pop	{r4, pc}
   b8084:	000be1e5 	.word	0x000be1e5

000b8088 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b8088:	b513      	push	{r0, r1, r4, lr}
   b808a:	4604      	mov	r4, r0
   b808c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b808e:	f7ff ffd0 	bl	b8032 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b8092:	6823      	ldr	r3, [r4, #0]
   b8094:	9a01      	ldr	r2, [sp, #4]
   b8096:	68db      	ldr	r3, [r3, #12]
   b8098:	4903      	ldr	r1, [pc, #12]	; (b80a8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b809a:	4620      	mov	r0, r4
   b809c:	4798      	blx	r3
    state_ = NEXT;
   b809e:	2301      	movs	r3, #1
}
   b80a0:	4620      	mov	r0, r4
    state_ = NEXT;
   b80a2:	7123      	strb	r3, [r4, #4]
}
   b80a4:	b002      	add	sp, #8
   b80a6:	bd10      	pop	{r4, pc}
   b80a8:	000bdd4c 	.word	0x000bdd4c

000b80ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b80ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b80b0:	460d      	mov	r5, r1
    write('"');
   b80b2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b80b4:	4690      	mov	r8, r2
   b80b6:	4604      	mov	r4, r0
    write('"');
   b80b8:	f7ff fdb3 	bl	b7c22 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b80bc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b8164 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b80c0:	44a8      	add	r8, r5
    const char *s = str;
   b80c2:	462f      	mov	r7, r5
    while (s != end) {
   b80c4:	4547      	cmp	r7, r8
   b80c6:	46ba      	mov	sl, r7
   b80c8:	d03d      	beq.n	b8146 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b80ca:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b80ce:	2e22      	cmp	r6, #34	; 0x22
   b80d0:	d006      	beq.n	b80e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b80d2:	2e5c      	cmp	r6, #92	; 0x5c
   b80d4:	d004      	beq.n	b80e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b80d6:	4630      	mov	r0, r6
   b80d8:	f003 fd06 	bl	bbae8 <isprint>
   b80dc:	2800      	cmp	r0, #0
   b80de:	d1f1      	bne.n	b80c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b80e0:	6823      	ldr	r3, [r4, #0]
   b80e2:	ebaa 0205 	sub.w	r2, sl, r5
   b80e6:	689b      	ldr	r3, [r3, #8]
   b80e8:	4629      	mov	r1, r5
   b80ea:	4620      	mov	r0, r4
   b80ec:	4798      	blx	r3
            write('\\');
   b80ee:	215c      	movs	r1, #92	; 0x5c
   b80f0:	4620      	mov	r0, r4
   b80f2:	f7ff fd96 	bl	b7c22 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b80f6:	2e0d      	cmp	r6, #13
   b80f8:	d80a      	bhi.n	b8110 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b80fa:	2e07      	cmp	r6, #7
   b80fc:	d91c      	bls.n	b8138 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b80fe:	f1a6 0308 	sub.w	r3, r6, #8
   b8102:	2b05      	cmp	r3, #5
   b8104:	d818      	bhi.n	b8138 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b8106:	e8df f003 	tbb	[pc, r3]
   b810a:	0f0d      	.short	0x0f0d
   b810c:	15131711 	.word	0x15131711
   b8110:	2e22      	cmp	r6, #34	; 0x22
   b8112:	d001      	beq.n	b8118 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b8114:	2e5c      	cmp	r6, #92	; 0x5c
   b8116:	d10f      	bne.n	b8138 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b8118:	4631      	mov	r1, r6
                write('b');
   b811a:	4620      	mov	r0, r4
   b811c:	f7ff fd81 	bl	b7c22 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b8120:	463d      	mov	r5, r7
    while (s != end) {
   b8122:	e7cf      	b.n	b80c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b8124:	2162      	movs	r1, #98	; 0x62
   b8126:	e7f8      	b.n	b811a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b8128:	2174      	movs	r1, #116	; 0x74
   b812a:	e7f6      	b.n	b811a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b812c:	216e      	movs	r1, #110	; 0x6e
   b812e:	e7f4      	b.n	b811a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b8130:	2166      	movs	r1, #102	; 0x66
   b8132:	e7f2      	b.n	b811a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b8134:	2172      	movs	r1, #114	; 0x72
   b8136:	e7f0      	b.n	b811a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b8138:	6823      	ldr	r3, [r4, #0]
   b813a:	4632      	mov	r2, r6
   b813c:	68db      	ldr	r3, [r3, #12]
   b813e:	4649      	mov	r1, r9
   b8140:	4620      	mov	r0, r4
   b8142:	4798      	blx	r3
                break;
   b8144:	e7ec      	b.n	b8120 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b8146:	42bd      	cmp	r5, r7
   b8148:	d005      	beq.n	b8156 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b814a:	6823      	ldr	r3, [r4, #0]
   b814c:	1b7a      	subs	r2, r7, r5
   b814e:	689b      	ldr	r3, [r3, #8]
   b8150:	4629      	mov	r1, r5
   b8152:	4620      	mov	r0, r4
   b8154:	4798      	blx	r3
    }
    write('"');
   b8156:	2122      	movs	r1, #34	; 0x22
   b8158:	4620      	mov	r0, r4
   b815a:	f7ff fd62 	bl	b7c22 <_ZN5spark10JSONWriter5writeEc>
}
   b815e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8162:	bf00      	nop
   b8164:	000be268 	.word	0x000be268

000b8168 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b8168:	b513      	push	{r0, r1, r4, lr}
   b816a:	4604      	mov	r4, r0
   b816c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b8170:	f7ff ff5f 	bl	b8032 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b8174:	4620      	mov	r0, r4
   b8176:	e9dd 2100 	ldrd	r2, r1, [sp]
   b817a:	f7ff ff97 	bl	b80ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b817e:	2302      	movs	r3, #2
}
   b8180:	4620      	mov	r0, r4
    state_ = VALUE;
   b8182:	7123      	strb	r3, [r4, #4]
}
   b8184:	b002      	add	sp, #8
   b8186:	bd10      	pop	{r4, pc}

000b8188 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b8188:	b513      	push	{r0, r1, r4, lr}
   b818a:	4604      	mov	r4, r0
   b818c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b8190:	f7ff ff4f 	bl	b8032 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b8194:	4620      	mov	r0, r4
   b8196:	e9dd 2100 	ldrd	r2, r1, [sp]
   b819a:	f7ff ff87 	bl	b80ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b819e:	2301      	movs	r3, #1
}
   b81a0:	4620      	mov	r0, r4
    state_ = NEXT;
   b81a2:	7123      	strb	r3, [r4, #4]
}
   b81a4:	b002      	add	sp, #8
   b81a6:	bd10      	pop	{r4, pc}

000b81a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b81a8:	b538      	push	{r3, r4, r5, lr}
   b81aa:	2300      	movs	r3, #0
   b81ac:	4604      	mov	r4, r0
   b81ae:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b81b0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b81b2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b81b4:	f7fc fe27 	bl	b4e06 <_Znwj>
   b81b8:	b128      	cbz	r0, b81c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b81ba:	2301      	movs	r3, #1
   b81bc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b81c0:	4b02      	ldr	r3, [pc, #8]	; (b81cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   b81c2:	6003      	str	r3, [r0, #0]
   b81c4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b81c6:	6020      	str	r0, [r4, #0]
	}
   b81c8:	4620      	mov	r0, r4
   b81ca:	bd38      	pop	{r3, r4, r5, pc}
   b81cc:	000be278 	.word	0x000be278

000b81d0 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   b81d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b81d2:	4604      	mov	r4, r0
   b81d4:	b087      	sub	sp, #28
   b81d6:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   b81d8:	200c      	movs	r0, #12
   b81da:	4927      	ldr	r1, [pc, #156]	; (b8278 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   b81dc:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   b81de:	f003 fb9b 	bl	bb918 <_ZnwjRKSt9nothrow_t>
   b81e2:	4601      	mov	r1, r0
   b81e4:	b118      	cbz	r0, b81ee <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   b81e6:	2300      	movs	r3, #0
   b81e8:	e9c0 3300 	strd	r3, r3, [r0]
   b81ec:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   b81ee:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b81f0:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   b81f2:	f7ff ffd9 	bl	b81a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const // never throws
      { return _M_ptr == 0 ? false : true; }
   b81f6:	9a02      	ldr	r2, [sp, #8]
    if (!d) {
   b81f8:	b942      	cbnz	r2, b820c <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   b81fa:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   b81fe:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   b8200:	a803      	add	r0, sp, #12
   b8202:	f7ff fb04 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8206:	4620      	mov	r0, r4
   b8208:	b007      	add	sp, #28
   b820a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   b820c:	2300      	movs	r3, #0
   b820e:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   b8210:	4629      	mov	r1, r5
   b8212:	ab01      	add	r3, sp, #4
   b8214:	4630      	mov	r0, r6
   b8216:	f7ff fda7 	bl	b7d68 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   b821a:	b918      	cbnz	r0, b8224 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   b821c:	e9c4 0000 	strd	r0, r0, [r4]
   b8220:	60a0      	str	r0, [r4, #8]
}
   b8222:	e7ed      	b.n	b8200 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   b8224:	4914      	ldr	r1, [pc, #80]	; (b8278 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
   b8226:	1c68      	adds	r0, r5, #1
   b8228:	f003 fb78 	bl	bb91c <_ZnajRKSt9nothrow_t>
      { return _M_ptr; }
   b822c:	9f02      	ldr	r7, [sp, #8]
   b822e:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   b8230:	b918      	cbnz	r0, b823a <_ZN5spark9JSONValue9parseCopyEPKcj+0x6a>
      constexpr __shared_count() noexcept : _M_pi(0)
   b8232:	e9c4 0000 	strd	r0, r0, [r4]
        t_(nullptr) {
   b8236:	60a0      	str	r0, [r4, #8]
}
   b8238:	e7e2      	b.n	b8200 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    memcpy(d->json, json, size); // TODO: Copy only token data
   b823a:	462a      	mov	r2, r5
   b823c:	4631      	mov	r1, r6
   b823e:	f003 fc63 	bl	bbb08 <memcpy>
    d->freeJson = true;
   b8242:	2301      	movs	r3, #1
    if (!stringize(d->tokens, tokenCount, d->json)) {
   b8244:	687a      	ldr	r2, [r7, #4]
   b8246:	9901      	ldr	r1, [sp, #4]
   b8248:	6838      	ldr	r0, [r7, #0]
    d->freeJson = true;
   b824a:	723b      	strb	r3, [r7, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   b824c:	f7ff fe56 	bl	b7efc <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   b8250:	2800      	cmp	r0, #0
   b8252:	d0e3      	beq.n	b821c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
      { return _M_ptr; }
   b8254:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   b8256:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8258:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   b825a:	9b03      	ldr	r3, [sp, #12]
   b825c:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   b825e:	b113      	cbz	r3, b8266 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   b8260:	685a      	ldr	r2, [r3, #4]
   b8262:	3201      	adds	r2, #1
   b8264:	605a      	str	r2, [r3, #4]
   b8266:	aa04      	add	r2, sp, #16
   b8268:	4620      	mov	r0, r4
   b826a:	f7ff fce6 	bl	b7c3a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b826e:	a805      	add	r0, sp, #20
   b8270:	f7ff facd 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8274:	e7c4      	b.n	b8200 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   b8276:	bf00      	nop
   b8278:	000be5b4 	.word	0x000be5b4

000b827c <_ZN8particle12_GLOBAL__N_112LedgerStream4peekEv>:
        return r;
    }

    int available() override {
        return -1; // Not supported
    }
   b827c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8280:	4770      	bx	lr

000b8282 <_ZN8particle12_GLOBAL__N_112LedgerStream5flushEv>:
    int peek() override {
        return -1; // Not supported
    }

    void flush() override {
    }
   b8282:	4770      	bx	lr

000b8284 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj>:
    size_t readBytes(char* data, size_t size) override {
   b8284:	b530      	push	{r4, r5, lr}
   b8286:	4605      	mov	r5, r0
        if (!stream_ || error() < 0) {
   b8288:	6940      	ldr	r0, [r0, #20]
    size_t readBytes(char* data, size_t size) override {
   b828a:	b08b      	sub	sp, #44	; 0x2c
        if (!stream_ || error() < 0) {
   b828c:	b1f8      	cbz	r0, b82ce <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x4a>
   b828e:	686b      	ldr	r3, [r5, #4]
   b8290:	2b00      	cmp	r3, #0
   b8292:	db16      	blt.n	b82c2 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x3e>
        int r = ledger_read(stream_, data, size, nullptr);
   b8294:	2300      	movs	r3, #0
   b8296:	f7ff f9e3 	bl	b7660 <ledger_read>
        if (r < 0) {
   b829a:	1e04      	subs	r4, r0, #0
   b829c:	da13      	bge.n	b82c6 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x42>
            if (r != Error::END_OF_STREAM || bytesRead_ > 0) {
   b829e:	f114 0fc9 	cmn.w	r4, #201	; 0xc9
   b82a2:	d101      	bne.n	b82a8 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x24>
   b82a4:	69ab      	ldr	r3, [r5, #24]
   b82a6:	b15b      	cbz	r3, b82c0 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x3c>
                LOG(ERROR, "ledger_read() failed: %d", r);
   b82a8:	2220      	movs	r2, #32
   b82aa:	2300      	movs	r3, #0
   b82ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b82b0:	4a08      	ldr	r2, [pc, #32]	; (b82d4 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x50>)
   b82b2:	9200      	str	r2, [sp, #0]
   b82b4:	4908      	ldr	r1, [pc, #32]	; (b82d8 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x54>)
   b82b6:	9401      	str	r4, [sp, #4]
   b82b8:	aa02      	add	r2, sp, #8
   b82ba:	2032      	movs	r0, #50	; 0x32
   b82bc:	f7ff f8f8 	bl	b74b0 <log_message>
    void setWriteError(int err = 1) { write_error = err; }
   b82c0:	606c      	str	r4, [r5, #4]
            return 0;
   b82c2:	2000      	movs	r0, #0
   b82c4:	e003      	b.n	b82ce <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x4a>
        bytesRead_ += r;
   b82c6:	69ab      	ldr	r3, [r5, #24]
   b82c8:	4423      	add	r3, r4
   b82ca:	4620      	mov	r0, r4
   b82cc:	61ab      	str	r3, [r5, #24]
    }
   b82ce:	b00b      	add	sp, #44	; 0x2c
   b82d0:	bd30      	pop	{r4, r5, pc}
   b82d2:	bf00      	nop
   b82d4:	000be28c 	.word	0x000be28c
   b82d8:	000be1c8 	.word	0x000be1c8

000b82dc <_ZN8particle12_GLOBAL__N_112LedgerStream4readEv>:
    int read() override {
   b82dc:	b507      	push	{r0, r1, r2, lr}
        size_t n = readBytes((char*)&b, 1);
   b82de:	2201      	movs	r2, #1
   b82e0:	f10d 0107 	add.w	r1, sp, #7
   b82e4:	f7ff ffce 	bl	b8284 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj>
        if (n != 1) {
   b82e8:	2801      	cmp	r0, #1
        return b;
   b82ea:	bf0c      	ite	eq
   b82ec:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
            return -1;
   b82f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    }
   b82f4:	b003      	add	sp, #12
   b82f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b82fc <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj>:
    size_t write(const uint8_t* data, size_t size) override {
   b82fc:	b570      	push	{r4, r5, r6, lr}
   b82fe:	4605      	mov	r5, r0
        if (!stream_ || error() < 0) {
   b8300:	6940      	ldr	r0, [r0, #20]
    size_t write(const uint8_t* data, size_t size) override {
   b8302:	b08a      	sub	sp, #40	; 0x28
        if (!stream_ || error() < 0) {
   b8304:	b1d8      	cbz	r0, b833e <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj+0x42>
   b8306:	686b      	ldr	r3, [r5, #4]
   b8308:	2b00      	cmp	r3, #0
   b830a:	db12      	blt.n	b8332 <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj+0x36>
        int r = ledger_write(stream_, (const char*)data, size, nullptr);
   b830c:	2300      	movs	r3, #0
   b830e:	f7ff f9af 	bl	b7670 <ledger_write>
        if (r < 0) {
   b8312:	1e04      	subs	r4, r0, #0
   b8314:	da0f      	bge.n	b8336 <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj+0x3a>
            LOG(ERROR, "ledger_write() failed: %d", r);
   b8316:	2320      	movs	r3, #32
   b8318:	2600      	movs	r6, #0
   b831a:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b831e:	4b09      	ldr	r3, [pc, #36]	; (b8344 <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj+0x48>)
   b8320:	9300      	str	r3, [sp, #0]
   b8322:	4909      	ldr	r1, [pc, #36]	; (b8348 <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj+0x4c>)
   b8324:	9401      	str	r4, [sp, #4]
   b8326:	4633      	mov	r3, r6
   b8328:	aa02      	add	r2, sp, #8
   b832a:	2032      	movs	r0, #50	; 0x32
   b832c:	f7ff f8c0 	bl	b74b0 <log_message>
   b8330:	606c      	str	r4, [r5, #4]
            return 0;
   b8332:	2000      	movs	r0, #0
   b8334:	e003      	b.n	b833e <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj+0x42>
        bytesWritten_ += r;
   b8336:	69eb      	ldr	r3, [r5, #28]
   b8338:	4423      	add	r3, r4
   b833a:	4620      	mov	r0, r4
   b833c:	61eb      	str	r3, [r5, #28]
    }
   b833e:	b00a      	add	sp, #40	; 0x28
   b8340:	bd70      	pop	{r4, r5, r6, pc}
   b8342:	bf00      	nop
   b8344:	000be2a5 	.word	0x000be2a5
   b8348:	000be1c8 	.word	0x000be1c8

000b834c <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEh>:
    size_t write(uint8_t b) override {
   b834c:	b507      	push	{r0, r1, r2, lr}
        return write(&b, 1);
   b834e:	2201      	movs	r2, #1
    size_t write(uint8_t b) override {
   b8350:	f88d 1007 	strb.w	r1, [sp, #7]
        return write(&b, 1);
   b8354:	f10d 0107 	add.w	r1, sp, #7
   b8358:	f7ff ffd0 	bl	b82fc <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj>
    }
   b835c:	b003      	add	sp, #12
   b835e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8364 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi>:
            return r;
        }
        return 0;
    }

    int close(int flags = 0) {
   b8364:	b530      	push	{r4, r5, lr}
   b8366:	4605      	mov	r5, r0
        if (!stream_) {
   b8368:	6940      	ldr	r0, [r0, #20]
    int close(int flags = 0) {
   b836a:	b08b      	sub	sp, #44	; 0x2c
        if (!stream_) {
   b836c:	b1c0      	cbz	r0, b83a0 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi+0x3c>
            return 0;
        }
        int r = ledger_close(stream_, flags, nullptr);
   b836e:	2200      	movs	r2, #0
   b8370:	f7ff f96e 	bl	b7650 <ledger_close>
        if (r < 0) {
   b8374:	1e04      	subs	r4, r0, #0
   b8376:	da0b      	bge.n	b8390 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi+0x2c>
            LOG(ERROR, "ledger_close() failed: %d", r);
   b8378:	2220      	movs	r2, #32
   b837a:	2300      	movs	r3, #0
   b837c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b8380:	4a08      	ldr	r2, [pc, #32]	; (b83a4 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi+0x40>)
   b8382:	9200      	str	r2, [sp, #0]
   b8384:	4908      	ldr	r1, [pc, #32]	; (b83a8 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi+0x44>)
   b8386:	9401      	str	r4, [sp, #4]
   b8388:	aa02      	add	r2, sp, #8
   b838a:	2032      	movs	r0, #50	; 0x32
   b838c:	f7ff f890 	bl	b74b0 <log_message>
   b8390:	2300      	movs	r3, #0
        }
        clearWriteError();
        stream_ = nullptr;
        bytesRead_ = 0;
   b8392:	e9c5 3305 	strd	r3, r3, [r5, #20]
   b8396:	606b      	str	r3, [r5, #4]
        bytesWritten_ = 0;
   b8398:	61eb      	str	r3, [r5, #28]
        return r;
    }
   b839a:	4620      	mov	r0, r4
   b839c:	b00b      	add	sp, #44	; 0x2c
   b839e:	bd30      	pop	{r4, r5, pc}
            return 0;
   b83a0:	4604      	mov	r4, r0
   b83a2:	e7fa      	b.n	b839a <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi+0x36>
   b83a4:	000be2bf 	.word	0x000be2bf
   b83a8:	000be1c8 	.word	0x000be1c8

000b83ac <_ZN8particle12_GLOBAL__N_112LedgerStreamD1Ev>:
    ~LedgerStream() {
   b83ac:	b510      	push	{r4, lr}
   b83ae:	4b04      	ldr	r3, [pc, #16]	; (b83c0 <_ZN8particle12_GLOBAL__N_112LedgerStreamD1Ev+0x14>)
   b83b0:	6003      	str	r3, [r0, #0]
   b83b2:	4604      	mov	r4, r0
        close(LEDGER_STREAM_CLOSE_DISCARD);
   b83b4:	2101      	movs	r1, #1
   b83b6:	f7ff ffd5 	bl	b8364 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi>
    }
   b83ba:	4620      	mov	r0, r4
   b83bc:	bd10      	pop	{r4, pc}
   b83be:	bf00      	nop
   b83c0:	000be35c 	.word	0x000be35c

000b83c4 <_ZN8particle12_GLOBAL__N_112LedgerStreamD0Ev>:
    ~LedgerStream() {
   b83c4:	b510      	push	{r4, lr}
   b83c6:	4604      	mov	r4, r0
    }
   b83c8:	f7ff fff0 	bl	b83ac <_ZN8particle12_GLOBAL__N_112LedgerStreamD1Ev>
   b83cc:	4620      	mov	r0, r4
   b83ce:	2120      	movs	r1, #32
   b83d0:	f7fc fd1f 	bl	b4e12 <_ZdlPvj>
   b83d4:	4620      	mov	r0, r4
   b83d6:	bd10      	pop	{r4, pc}

000b83d8 <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi>:
    int open(int mode) {
   b83d8:	b510      	push	{r4, lr}
   b83da:	b08c      	sub	sp, #48	; 0x30
   b83dc:	4604      	mov	r4, r0
   b83de:	9103      	str	r1, [sp, #12]
        close(LEDGER_STREAM_CLOSE_DISCARD);
   b83e0:	2101      	movs	r1, #1
   b83e2:	f7ff ffbf 	bl	b8364 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi>
        int r = ledger_open(&stream_, ledger_, mode, nullptr);
   b83e6:	6921      	ldr	r1, [r4, #16]
   b83e8:	9a03      	ldr	r2, [sp, #12]
   b83ea:	2300      	movs	r3, #0
   b83ec:	f104 0014 	add.w	r0, r4, #20
   b83f0:	f7ff f926 	bl	b7640 <ledger_open>
        if (r < 0) {
   b83f4:	1e04      	subs	r4, r0, #0
   b83f6:	f04f 0300 	mov.w	r3, #0
   b83fa:	da0d      	bge.n	b8418 <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi+0x40>
            LOG(ERROR, "ledger_open() failed: %d", r);
   b83fc:	2220      	movs	r2, #32
   b83fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b8402:	4a06      	ldr	r2, [pc, #24]	; (b841c <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi+0x44>)
   b8404:	9200      	str	r2, [sp, #0]
   b8406:	4906      	ldr	r1, [pc, #24]	; (b8420 <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi+0x48>)
   b8408:	9401      	str	r4, [sp, #4]
   b840a:	aa04      	add	r2, sp, #16
   b840c:	2032      	movs	r0, #50	; 0x32
   b840e:	f7ff f84f 	bl	b74b0 <log_message>
    }
   b8412:	4620      	mov	r0, r4
   b8414:	b00c      	add	sp, #48	; 0x30
   b8416:	bd10      	pop	{r4, pc}
        return 0;
   b8418:	461c      	mov	r4, r3
   b841a:	e7fa      	b.n	b8412 <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi+0x3a>
   b841c:	000be2d9 	.word	0x000be2d9
   b8420:	000be1c8 	.word	0x000be1c8

000b8424 <_ZN8particle12_GLOBAL__N_118syncCallbackSystemEP15ledger_instancePv>:
        appData->onSync(Ledger(ledger));
    }
}

// Callback wrapper executed in the system thread
void syncCallbackSystem(ledger_instance* ledger, void* appData) {
   b8424:	b510      	push	{r4, lr}
    // Dispatch the callback to the application thread
    ledger_add_ref(ledger, nullptr);
   b8426:	2100      	movs	r1, #0
void syncCallbackSystem(ledger_instance* ledger, void* appData) {
   b8428:	4604      	mov	r4, r0
    ledger_add_ref(ledger, nullptr);
   b842a:	f7ff f8d1 	bl	b75d0 <ledger_add_ref>
    int r = application_thread_invoke(syncCallbackApp, ledger, nullptr);
   b842e:	4806      	ldr	r0, [pc, #24]	; (b8448 <_ZN8particle12_GLOBAL__N_118syncCallbackSystemEP15ledger_instancePv+0x24>)
   b8430:	2200      	movs	r2, #0
   b8432:	4621      	mov	r1, r4
   b8434:	f7ff f87e 	bl	b7534 <application_thread_invoke>
    if (r != 0) { // FIXME: application_thread_invoke() doesn't really handle errors as of now
   b8438:	b128      	cbz	r0, b8446 <_ZN8particle12_GLOBAL__N_118syncCallbackSystemEP15ledger_instancePv+0x22>
        ledger_release(ledger, nullptr);
   b843a:	4620      	mov	r0, r4
   b843c:	2100      	movs	r1, #0
    }
}
   b843e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ledger_release(ledger, nullptr);
   b8442:	f7ff b8cd 	b.w	b75e0 <ledger_release>
}
   b8446:	bd10      	pop	{r4, pc}
   b8448:	000b8531 	.word	0x000b8531

000b844c <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance>:
LedgerAppData* getLedgerAppData(ledger_instance* ledger) {
   b844c:	b538      	push	{r3, r4, r5, lr}
    auto appData = static_cast<LedgerAppData*>(ledger_get_app_data(ledger, nullptr));
   b844e:	2100      	movs	r1, #0
LedgerAppData* getLedgerAppData(ledger_instance* ledger) {
   b8450:	4605      	mov	r5, r0
    auto appData = static_cast<LedgerAppData*>(ledger_get_app_data(ledger, nullptr));
   b8452:	f7ff f8ed 	bl	b7630 <ledger_get_app_data>
    if (!appData) {
   b8456:	4604      	mov	r4, r0
   b8458:	b9d0      	cbnz	r0, b8490 <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance+0x44>
        ledger_lock(ledger, nullptr);
   b845a:	4601      	mov	r1, r0
   b845c:	4628      	mov	r0, r5
   b845e:	f7ff f8c7 	bl	b75f0 <ledger_lock>
        appData = static_cast<LedgerAppData*>(ledger_get_app_data(ledger, nullptr));
   b8462:	4621      	mov	r1, r4
   b8464:	4628      	mov	r0, r5
   b8466:	f7ff f8e3 	bl	b7630 <ledger_get_app_data>
        if (!appData) {
   b846a:	4604      	mov	r4, r0
   b846c:	b960      	cbnz	r0, b8488 <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance+0x3c>
            appData = new(std::nothrow) LedgerAppData();
   b846e:	4909      	ldr	r1, [pc, #36]	; (b8494 <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance+0x48>)
   b8470:	2010      	movs	r0, #16
   b8472:	f003 fa51 	bl	bb918 <_ZnwjRKSt9nothrow_t>
   b8476:	4604      	mov	r4, r0
   b8478:	b130      	cbz	r0, b8488 <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance+0x3c>
    _Function_base() : _M_manager(nullptr) { }
   b847a:	2300      	movs	r3, #0
   b847c:	6083      	str	r3, [r0, #8]
                ledger_set_app_data(ledger, appData, destroyLedgerAppData, nullptr);
   b847e:	4601      	mov	r1, r0
   b8480:	4a05      	ldr	r2, [pc, #20]	; (b8498 <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance+0x4c>)
   b8482:	4628      	mov	r0, r5
   b8484:	f7ff f8cc 	bl	b7620 <ledger_set_app_data>
        SCOPE_GUARD({
   b8488:	2100      	movs	r1, #0
   b848a:	4628      	mov	r0, r5
   b848c:	f7ff f8b8 	bl	b7600 <ledger_unlock>
}
   b8490:	4620      	mov	r0, r4
   b8492:	bd38      	pop	{r3, r4, r5, pc}
   b8494:	000be5b4 	.word	0x000be5b4
   b8498:	000b8519 	.word	0x000b8519

000b849c <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE>:
        return r;
    }
    return 0;
}

int setLedgerData(ledger_instance* ledger, const LedgerData& data) {
   b849c:	b570      	push	{r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b849e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b84a2:	b092      	sub	sp, #72	; 0x48
   b84a4:	2500      	movs	r5, #0
   b84a6:	e9cd 5303 	strd	r5, r3, [sp, #12]
            bytesWritten_(0) {
   b84aa:	e9cd 0506 	strd	r0, r5, [sp, #24]
   b84ae:	4b17      	ldr	r3, [pc, #92]	; (b850c <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE+0x70>)
   b84b0:	9302      	str	r3, [sp, #8]
int setLedgerData(ledger_instance* ledger, const LedgerData& data) {
   b84b2:	460e      	mov	r6, r1
    LedgerStream stream(ledger);
    CHECK(stream.open(LEDGER_STREAM_MODE_WRITE));
   b84b4:	a802      	add	r0, sp, #8
   b84b6:	2102      	movs	r1, #2
            bytesWritten_(0) {
   b84b8:	e9cd 5508 	strd	r5, r5, [sp, #32]
    CHECK(stream.open(LEDGER_STREAM_MODE_WRITE));
   b84bc:	f7ff ff8c 	bl	b83d8 <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi>
   b84c0:	1e04      	subs	r4, r0, #0
   b84c2:	db15      	blt.n	b84f0 <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE+0x54>
    int r = encodeToCBOR(data.variant(), stream);
   b84c4:	a902      	add	r1, sp, #8
   b84c6:	4630      	mov	r0, r6
   b84c8:	f002 f91d 	bl	ba706 <_ZN8particle12encodeToCBORERKNS_7VariantER5Print>
    if (r < 0) {
   b84cc:	1e04      	subs	r4, r0, #0
   b84ce:	da15      	bge.n	b84fc <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE+0x60>
    int getWriteError() const { return write_error; }
   b84d0:	9b03      	ldr	r3, [sp, #12]
        // encodeToCBOR() can't forward stream errors
        int err = stream.error();
        if (err < 0) {
            r = err;
        }
        LOG(ERROR, "Failed to encode ledger data: %d", r);
   b84d2:	490f      	ldr	r1, [pc, #60]	; (b8510 <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE+0x74>)
        if (err < 0) {
   b84d4:	42ab      	cmp	r3, r5
   b84d6:	bfb8      	it	lt
   b84d8:	461c      	movlt	r4, r3
        LOG(ERROR, "Failed to encode ledger data: %d", r);
   b84da:	2320      	movs	r3, #32
   b84dc:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   b84e0:	4b0c      	ldr	r3, [pc, #48]	; (b8514 <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE+0x78>)
   b84e2:	9300      	str	r3, [sp, #0]
   b84e4:	9401      	str	r4, [sp, #4]
   b84e6:	462b      	mov	r3, r5
   b84e8:	aa0a      	add	r2, sp, #40	; 0x28
   b84ea:	2032      	movs	r0, #50	; 0x32
   b84ec:	f7fe ffe0 	bl	b74b0 <log_message>
    LedgerStream stream(ledger);
   b84f0:	a802      	add	r0, sp, #8
   b84f2:	f7ff ff5b 	bl	b83ac <_ZN8particle12_GLOBAL__N_112LedgerStreamD1Ev>
        return r;
    }
    CHECK(stream.close()); // Flush the data
    return 0;
}
   b84f6:	4620      	mov	r0, r4
   b84f8:	b012      	add	sp, #72	; 0x48
   b84fa:	bd70      	pop	{r4, r5, r6, pc}
    CHECK(stream.close()); // Flush the data
   b84fc:	4629      	mov	r1, r5
   b84fe:	a802      	add	r0, sp, #8
   b8500:	f7ff ff30 	bl	b8364 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi>
   b8504:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   b8508:	e7f2      	b.n	b84f0 <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE+0x54>
   b850a:	bf00      	nop
   b850c:	000be35c 	.word	0x000be35c
   b8510:	000be1c8 	.word	0x000be1c8
   b8514:	000be2f2 	.word	0x000be2f2

000b8518 <_ZN8particle12_GLOBAL__N_120destroyLedgerAppDataEPv>:
void destroyLedgerAppData(void* appData) {
   b8518:	b510      	push	{r4, lr}
    delete static_cast<LedgerAppData*>(appData);
   b851a:	4604      	mov	r4, r0
   b851c:	b138      	cbz	r0, b852e <_ZN8particle12_GLOBAL__N_120destroyLedgerAppDataEPv+0x16>
    class function<_Res(_ArgTypes...)>
   b851e:	f7fc ffbb 	bl	b5498 <_ZNSt14_Function_baseD1Ev>
   b8522:	4620      	mov	r0, r4
   b8524:	2110      	movs	r1, #16
}
   b8526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete static_cast<LedgerAppData*>(appData);
   b852a:	f7fc bc72 	b.w	b4e12 <_ZdlPvj>
}
   b852e:	bd10      	pop	{r4, pc}

000b8530 <_ZN8particle12_GLOBAL__N_115syncCallbackAppEPv>:
void syncCallbackApp(void* data) {
   b8530:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8532:	4605      	mov	r5, r0
    auto appData = getLedgerAppData(ledger);
   b8534:	f7ff ff8a 	bl	b844c <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance>
    if (appData && appData->onSync) {
   b8538:	4604      	mov	r4, r0
   b853a:	b190      	cbz	r0, b8562 <_ZN8particle12_GLOBAL__N_115syncCallbackAppEPv+0x32>
   b853c:	6883      	ldr	r3, [r0, #8]
   b853e:	b183      	cbz	r3, b8562 <_ZN8particle12_GLOBAL__N_115syncCallbackAppEPv+0x32>
            instance_(instance) {
   b8540:	9501      	str	r5, [sp, #4]
        if (instance_ && addRef) {
   b8542:	b13d      	cbz	r5, b8554 <_ZN8particle12_GLOBAL__N_115syncCallbackAppEPv+0x24>
            ledger_add_ref(instance_, nullptr);
   b8544:	2100      	movs	r1, #0
   b8546:	4628      	mov	r0, r5
   b8548:	f7ff f842 	bl	b75d0 <ledger_add_ref>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b854c:	68a3      	ldr	r3, [r4, #8]
   b854e:	b90b      	cbnz	r3, b8554 <_ZN8particle12_GLOBAL__N_115syncCallbackAppEPv+0x24>
	__throw_bad_function_call();
   b8550:	f003 f9e9 	bl	bb926 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8554:	4620      	mov	r0, r4
   b8556:	68e3      	ldr	r3, [r4, #12]
   b8558:	a901      	add	r1, sp, #4
   b855a:	4798      	blx	r3
        appData->onSync(Ledger(ledger));
   b855c:	a801      	add	r0, sp, #4
   b855e:	f7fd f813 	bl	b5588 <_ZN8particle6LedgerD1Ev>
    SCOPE_GUARD({
   b8562:	2100      	movs	r1, #0
   b8564:	4628      	mov	r0, r5
}
   b8566:	b003      	add	sp, #12
   b8568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SCOPE_GUARD({
   b856c:	f7ff b838 	b.w	b75e0 <ledger_release>

000b8570 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE>:

int getLedgerData(ledger_instance* ledger, LedgerData& data) {
   b8570:	b570      	push	{r4, r5, r6, lr}
   b8572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8576:	b09e      	sub	sp, #120	; 0x78
   b8578:	2500      	movs	r5, #0
   b857a:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
            bytesWritten_(0) {
   b857e:	e9cd 0512 	strd	r0, r5, [sp, #72]	; 0x48
   b8582:	4b31      	ldr	r3, [pc, #196]	; (b8648 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xd8>)
   b8584:	930e      	str	r3, [sp, #56]	; 0x38
int getLedgerData(ledger_instance* ledger, LedgerData& data) {
   b8586:	460e      	mov	r6, r1
    LedgerStream stream(ledger);
    CHECK(stream.open(LEDGER_STREAM_MODE_READ));
   b8588:	a80e      	add	r0, sp, #56	; 0x38
   b858a:	2101      	movs	r1, #1
            bytesWritten_(0) {
   b858c:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
    CHECK(stream.open(LEDGER_STREAM_MODE_READ));
   b8590:	f7ff ff22 	bl	b83d8 <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi>
   b8594:	1e04      	subs	r4, r0, #0
   b8596:	db2e      	blt.n	b85f6 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x86>
    Variant v;
   b8598:	2218      	movs	r2, #24
   b859a:	4629      	mov	r1, r5
   b859c:	a802      	add	r0, sp, #8
   b859e:	f003 fadb 	bl	bbb58 <memset>
    int r = decodeFromCBOR(v, stream);
   b85a2:	a90e      	add	r1, sp, #56	; 0x38
   b85a4:	a802      	add	r0, sp, #8
   b85a6:	f003 f8af 	bl	bb708 <_ZN8particle14decodeFromCBORERNS_7VariantER6Stream>
    if (r < 0) {
   b85aa:	1e04      	subs	r4, r0, #0
   b85ac:	da29      	bge.n	b8602 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x92>
   b85ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        // decodeFromCBOR() can't forward stream errors
        int err = stream.error();
        if (err < 0) {
   b85b0:	42ab      	cmp	r3, r5
   b85b2:	bfb8      	it	lt
   b85b4:	461c      	movlt	r4, r3
            r = err;
        }
        if (r == Error::END_OF_STREAM && !stream.bytesRead()) {
   b85b6:	f114 0fc9 	cmn.w	r4, #201	; 0xc9
   b85ba:	d10d      	bne.n	b85d8 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x68>
   b85bc:	9d14      	ldr	r5, [sp, #80]	; 0x50
   b85be:	b95d      	cbnz	r5, b85d8 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x68>
            // Treat empty data as an empty map
            data = LedgerData();
   b85c0:	a816      	add	r0, sp, #88	; 0x58
   b85c2:	f7fd fb20 	bl	b5c06 <_ZN8particle10LedgerDataC1Ev>
    { __lhs.swap(__rhs); }
   b85c6:	4630      	mov	r0, r6
   b85c8:	a916      	add	r1, sp, #88	; 0x58
   b85ca:	f7fd ff11 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   b85ce:	a816      	add	r0, sp, #88	; 0x58
   b85d0:	f7fd faea 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    if (!v.isMap()) {
        LOG(ERROR, "Unexpected type of ledger data");
        return Error::BAD_DATA;
    }
    data = std::move(v);
    return 0;
   b85d4:	462c      	mov	r4, r5
   b85d6:	e00b      	b.n	b85f0 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x80>
        LOG(ERROR, "Failed to decode ledger data: %d", r);
   b85d8:	2220      	movs	r2, #32
   b85da:	2300      	movs	r3, #0
   b85dc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   b85e0:	4a1a      	ldr	r2, [pc, #104]	; (b864c <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xdc>)
   b85e2:	9200      	str	r2, [sp, #0]
   b85e4:	491a      	ldr	r1, [pc, #104]	; (b8650 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xe0>)
   b85e6:	9401      	str	r4, [sp, #4]
   b85e8:	aa16      	add	r2, sp, #88	; 0x58
   b85ea:	2032      	movs	r0, #50	; 0x32
   b85ec:	f7fe ff60 	bl	b74b0 <log_message>
   b85f0:	a802      	add	r0, sp, #8
   b85f2:	f7fd fad9 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    LedgerStream stream(ledger);
   b85f6:	a80e      	add	r0, sp, #56	; 0x38
   b85f8:	f7ff fed8 	bl	b83ac <_ZN8particle12_GLOBAL__N_112LedgerStreamD1Ev>
}
   b85fc:	4620      	mov	r0, r4
   b85fe:	b01e      	add	sp, #120	; 0x78
   b8600:	bd70      	pop	{r4, r5, r6, pc}
    if (!v.isMap()) {
   b8602:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b8606:	2b0a      	cmp	r3, #10
   b8608:	d00c      	beq.n	b8624 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xb4>
        LOG(ERROR, "Unexpected type of ledger data");
   b860a:	2320      	movs	r3, #32
   b860c:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
   b8610:	4b10      	ldr	r3, [pc, #64]	; (b8654 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xe4>)
   b8612:	9300      	str	r3, [sp, #0]
   b8614:	490e      	ldr	r1, [pc, #56]	; (b8650 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xe0>)
        return Error::BAD_DATA;
   b8616:	4c10      	ldr	r4, [pc, #64]	; (b8658 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xe8>)
        LOG(ERROR, "Unexpected type of ledger data");
   b8618:	462b      	mov	r3, r5
   b861a:	aa16      	add	r2, sp, #88	; 0x58
   b861c:	2032      	movs	r0, #50	; 0x32
   b861e:	f7fe ff47 	bl	b74b0 <log_message>
        return Error::BAD_DATA;
   b8622:	e7e5      	b.n	b85f0 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x80>
    data = std::move(v);
   b8624:	a902      	add	r1, sp, #8
   b8626:	a808      	add	r0, sp, #32
   b8628:	f7fd ff80 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   b862c:	a908      	add	r1, sp, #32
   b862e:	a816      	add	r0, sp, #88	; 0x58
   b8630:	f7fd ff84 	bl	b653c <_ZN8particle10LedgerDataC1ENS_7VariantE>
    { __lhs.swap(__rhs); }
   b8634:	a916      	add	r1, sp, #88	; 0x58
   b8636:	4630      	mov	r0, r6
   b8638:	f7fd feda 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   b863c:	a816      	add	r0, sp, #88	; 0x58
   b863e:	f7fd fab3 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b8642:	a808      	add	r0, sp, #32
   b8644:	e7c4      	b.n	b85d0 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x60>
   b8646:	bf00      	nop
   b8648:	000be35c 	.word	0x000be35c
   b864c:	000be313 	.word	0x000be313
   b8650:	000be1c8 	.word	0x000be1c8
   b8654:	000be334 	.word	0x000be334
   b8658:	fffffee8 	.word	0xfffffee8

000b865c <_ZNK8particle6Ledger3getEv>:
        CHECK(setLedgerData(instance_, d));
    }
    return 0;
}

LedgerData Ledger::get() const {
   b865c:	b530      	push	{r4, r5, lr}
    if (!isValid()) {
   b865e:	680b      	ldr	r3, [r1, #0]
LedgerData Ledger::get() const {
   b8660:	b087      	sub	sp, #28
   b8662:	4604      	mov	r4, r0
   b8664:	460d      	mov	r5, r1
    if (!isValid()) {
   b8666:	b923      	cbnz	r3, b8672 <_ZNK8particle6Ledger3getEv+0x16>
        return LedgerData();
   b8668:	f7fd facd 	bl	b5c06 <_ZN8particle10LedgerDataC1Ev>
    LedgerData data;
    if (getLedgerData(instance_, data) < 0) {
        return LedgerData();
    }
    return data;
}
   b866c:	4620      	mov	r0, r4
   b866e:	b007      	add	sp, #28
   b8670:	bd30      	pop	{r4, r5, pc}
    LedgerData data;
   b8672:	4668      	mov	r0, sp
   b8674:	f7fd fac7 	bl	b5c06 <_ZN8particle10LedgerDataC1Ev>
    if (getLedgerData(instance_, data) < 0) {
   b8678:	6828      	ldr	r0, [r5, #0]
   b867a:	4669      	mov	r1, sp
   b867c:	f7ff ff78 	bl	b8570 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE>
   b8680:	2800      	cmp	r0, #0
        return LedgerData();
   b8682:	4620      	mov	r0, r4
    if (getLedgerData(instance_, data) < 0) {
   b8684:	da05      	bge.n	b8692 <_ZNK8particle6Ledger3getEv+0x36>
        return LedgerData();
   b8686:	f7fd fabe 	bl	b5c06 <_ZN8particle10LedgerDataC1Ev>
   b868a:	4668      	mov	r0, sp
   b868c:	f7fd fa8c 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
/**
 * Ledger data.
 *
 * This class provides a subset of methods of the `Variant` class that are relevant to map operations.
 */
class LedgerData {
   b8690:	e7ec      	b.n	b866c <_ZNK8particle6Ledger3getEv+0x10>
     * Move constructor.
     *
     * @param data Ledger data to move from.
     */
    LedgerData(LedgerData&& data) :
            LedgerData() {
   b8692:	f7fd fab8 	bl	b5c06 <_ZN8particle10LedgerDataC1Ev>
    { __lhs.swap(__rhs); }
   b8696:	4669      	mov	r1, sp
   b8698:	4620      	mov	r0, r4
   b869a:	f7fd fea9 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
        swap(*this, data);
    }
   b869e:	e7f4      	b.n	b868a <_ZNK8particle6Ledger3getEv+0x2e>

000b86a0 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE>:
int Ledger::set(const LedgerData& data, SetMode mode) {
   b86a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b86a2:	4605      	mov	r5, r0
        return instance_;
   b86a4:	6800      	ldr	r0, [r0, #0]
   b86a6:	b093      	sub	sp, #76	; 0x4c
   b86a8:	460e      	mov	r6, r1
    if (!isValid()) {
   b86aa:	2800      	cmp	r0, #0
   b86ac:	d048      	beq.n	b8740 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0xa0>
    if (mode == Ledger::REPLACE) {
   b86ae:	b932      	cbnz	r2, b86be <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x1e>
        CHECK(setLedgerData(instance_, data));
   b86b0:	f7ff fef4 	bl	b849c <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE>
   b86b4:	ea00 74e0 	and.w	r4, r0, r0, asr #31
}
   b86b8:	4620      	mov	r0, r4
   b86ba:	b013      	add	sp, #76	; 0x4c
   b86bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LedgerData d;
   b86be:	4668      	mov	r0, sp
   b86c0:	f7fd faa1 	bl	b5c06 <_ZN8particle10LedgerDataC1Ev>
        CHECK(getLedgerData(instance_, d));
   b86c4:	6828      	ldr	r0, [r5, #0]
   b86c6:	4669      	mov	r1, sp
   b86c8:	f7ff ff52 	bl	b8570 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE>
   b86cc:	1e04      	subs	r4, r0, #0
   b86ce:	db28      	blt.n	b8722 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x82>
	  return make_signed_t<__index_type>(this->_M_index);
   b86d0:	7c30      	ldrb	r0, [r6, #16]
      if (__v.index() != _Np)
   b86d2:	280a      	cmp	r0, #10
   b86d4:	d005      	beq.n	b86e2 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x42>
	__throw_bad_variant_access(__v.valueless_by_exception());
   b86d6:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
   b86da:	4258      	negs	r0, r3
   b86dc:	4158      	adcs	r0, r3
   b86de:	f7fc ff3f 	bl	b5560 <_ZSt26__throw_bad_variant_accessb>
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b86e2:	e9d6 4700 	ldrd	r4, r7, [r6]
   b86e6:	2328      	movs	r3, #40	; 0x28
   b86e8:	fb03 4707 	mla	r7, r3, r7, r4
        for (auto& e: data.variantMap()) {
   b86ec:	42a7      	cmp	r7, r4
   b86ee:	d01c      	beq.n	b872a <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x8a>
      _Move_ctor_base(const _Move_ctor_base&) = default;
   b86f0:	f104 0110 	add.w	r1, r4, #16
   b86f4:	a806      	add	r0, sp, #24
   b86f6:	f7fd f88f 	bl	b5818 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
    bool set(const char* name, Variant val) {
        return v_.set(name, std::move(val));
    }

    bool set(const String& name, Variant val) {
        return v_.set(name, std::move(val));
   b86fa:	a906      	add	r1, sp, #24
   b86fc:	a80c      	add	r0, sp, #48	; 0x30
   b86fe:	f7fd ff15 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   b8702:	4621      	mov	r1, r4
   b8704:	aa0c      	add	r2, sp, #48	; 0x30
   b8706:	4668      	mov	r0, sp
   b8708:	f002 fa4e 	bl	baba8 <_ZN8particle7Variant3setERK6StringS0_>
   b870c:	4606      	mov	r6, r0
      { _M_reset(); }
   b870e:	a80c      	add	r0, sp, #48	; 0x30
   b8710:	f7fd fa4a 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b8714:	a806      	add	r0, sp, #24
   b8716:	f7fd fa47 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            if (!d.set(e.first, e.second)) {
   b871a:	3428      	adds	r4, #40	; 0x28
   b871c:	2e00      	cmp	r6, #0
   b871e:	d1e5      	bne.n	b86ec <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x4c>
                return Error::NO_MEMORY;
   b8720:	4c09      	ldr	r4, [pc, #36]	; (b8748 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0xa8>)
   b8722:	4668      	mov	r0, sp
   b8724:	f7fd fa40 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   b8728:	e7c6      	b.n	b86b8 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x18>
        CHECK(setLedgerData(instance_, d));
   b872a:	6828      	ldr	r0, [r5, #0]
   b872c:	4669      	mov	r1, sp
   b872e:	f7ff feb5 	bl	b849c <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE>
   b8732:	1e04      	subs	r4, r0, #0
   b8734:	dbf5      	blt.n	b8722 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x82>
   b8736:	4668      	mov	r0, sp
   b8738:	f7fd fa36 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    return 0;
   b873c:	2400      	movs	r4, #0
   b873e:	e7bb      	b.n	b86b8 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x18>
        return Error::INVALID_STATE;
   b8740:	f06f 04d1 	mvn.w	r4, #209	; 0xd1
   b8744:	e7b8      	b.n	b86b8 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x18>
   b8746:	bf00      	nop
   b8748:	fffffefc 	.word	0xfffffefc

000b874c <_ZNSt8functionIFvN8particle6LedgerEEE4swapERS3_>:
      void swap(function& __x) noexcept
   b874c:	b513      	push	{r0, r1, r4, lr}
   b874e:	460b      	mov	r3, r1
   b8750:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8752:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8756:	466c      	mov	r4, sp
   b8758:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b875c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8760:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8764:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8768:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b876c:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b876e:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8770:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8772:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8774:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8776:	68d8      	ldr	r0, [r3, #12]
   b8778:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b877a:	60d9      	str	r1, [r3, #12]
      }
   b877c:	b002      	add	sp, #8
   b877e:	bd10      	pop	{r4, pc}

000b8780 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE>:
    return onSync([callback, arg](Ledger ledger) {
        callback(std::move(ledger), arg);
    });
}

int Ledger::onSync(OnSyncFunction callback) {
   b8780:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8782:	4603      	mov	r3, r0
   b8784:	b089      	sub	sp, #36	; 0x24
        return instance_;
   b8786:	681d      	ldr	r5, [r3, #0]
   b8788:	4608      	mov	r0, r1
    if (!isValid()) {
   b878a:	2d00      	cmp	r5, #0
   b878c:	d046      	beq.n	b881c <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x9c>
    _Function_base() : _M_manager(nullptr) { }
   b878e:	2700      	movs	r7, #0
	__x.swap(*this);
   b8790:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   b8792:	9702      	str	r7, [sp, #8]
	__x.swap(*this);
   b8794:	f7ff ffda 	bl	b874c <_ZNSt8functionIFvN8particle6LedgerEEE4swapERS3_>
    ledger_lock(ledger, nullptr);
   b8798:	4639      	mov	r1, r7
   b879a:	4628      	mov	r0, r5
   b879c:	f7fe ff28 	bl	b75f0 <ledger_lock>
    auto appData = getLedgerAppData(ledger);
   b87a0:	4628      	mov	r0, r5
   b87a2:	f7ff fe53 	bl	b844c <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance>
    if (!appData) {
   b87a6:	4606      	mov	r6, r0
   b87a8:	2800      	cmp	r0, #0
   b87aa:	d033      	beq.n	b8814 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x94>
    bool _M_empty() const { return !_M_manager; }
   b87ac:	6884      	ldr	r4, [r0, #8]
    _Function_base() : _M_manager(nullptr) { }
   b87ae:	9706      	str	r7, [sp, #24]
	__x.swap(*this);
   b87b0:	a904      	add	r1, sp, #16
   b87b2:	4668      	mov	r0, sp
   b87b4:	f7ff ffca 	bl	b874c <_ZNSt8functionIFvN8particle6LedgerEEE4swapERS3_>
	function(std::move(__x)).swap(*this);
   b87b8:	4631      	mov	r1, r6
   b87ba:	a804      	add	r0, sp, #16
   b87bc:	f7ff ffc6 	bl	b874c <_ZNSt8functionIFvN8particle6LedgerEEE4swapERS3_>
    class function<_Res(_ArgTypes...)>
   b87c0:	a804      	add	r0, sp, #16
   b87c2:	f7fc fe69 	bl	b5498 <_ZNSt14_Function_baseD1Ev>
    if (appData->onSync) {
   b87c6:	68b6      	ldr	r6, [r6, #8]
   b87c8:	b1be      	cbz	r6, b87fa <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x7a>
        if (!hadCallback) {
   b87ca:	bb2c      	cbnz	r4, b8818 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x98>
            callbacks.version = LEDGER_API_VERSION;
   b87cc:	2301      	movs	r3, #1
   b87ce:	9304      	str	r3, [sp, #16]
            ledger_set_callbacks(ledger, &callbacks, nullptr);
   b87d0:	a904      	add	r1, sp, #16
            callbacks.sync = syncCallbackSystem;
   b87d2:	4b14      	ldr	r3, [pc, #80]	; (b8824 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0xa4>)
   b87d4:	9305      	str	r3, [sp, #20]
            ledger_set_callbacks(ledger, &callbacks, nullptr);
   b87d6:	4628      	mov	r0, r5
   b87d8:	4622      	mov	r2, r4
   b87da:	f7fe ff19 	bl	b7610 <ledger_set_callbacks>
            ledger_add_ref(ledger, nullptr);
   b87de:	4621      	mov	r1, r4
   b87e0:	4628      	mov	r0, r5
   b87e2:	f7fe fef5 	bl	b75d0 <ledger_add_ref>
    SCOPE_GUARD({
   b87e6:	4628      	mov	r0, r5
   b87e8:	2100      	movs	r1, #0
   b87ea:	f7fe ff09 	bl	b7600 <ledger_unlock>
   b87ee:	4668      	mov	r0, sp
   b87f0:	f7fc fe52 	bl	b5498 <_ZNSt14_Function_baseD1Ev>
        return Error::INVALID_STATE;
    }
    return setSyncCallback(instance_, std::move(callback));
}
   b87f4:	4620      	mov	r0, r4
   b87f6:	b009      	add	sp, #36	; 0x24
   b87f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (hadCallback) {
   b87fa:	2c00      	cmp	r4, #0
   b87fc:	d0f3      	beq.n	b87e6 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x66>
        ledger_set_callbacks(ledger, nullptr, nullptr); // Clear the callback
   b87fe:	4632      	mov	r2, r6
   b8800:	4631      	mov	r1, r6
   b8802:	4628      	mov	r0, r5
   b8804:	f7fe ff04 	bl	b7610 <ledger_set_callbacks>
        ledger_release(ledger, nullptr);
   b8808:	4631      	mov	r1, r6
   b880a:	4628      	mov	r0, r5
   b880c:	f7fe fee8 	bl	b75e0 <ledger_release>
    return 0;
   b8810:	4634      	mov	r4, r6
   b8812:	e7e8      	b.n	b87e6 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x66>
        return Error::NO_MEMORY;
   b8814:	4c04      	ldr	r4, [pc, #16]	; (b8828 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0xa8>)
   b8816:	e7e6      	b.n	b87e6 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x66>
    return 0;
   b8818:	463c      	mov	r4, r7
   b881a:	e7e4      	b.n	b87e6 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x66>
        return Error::INVALID_STATE;
   b881c:	f06f 04d1 	mvn.w	r4, #209	; 0xd1
   b8820:	e7e8      	b.n	b87f4 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x74>
   b8822:	bf00      	nop
   b8824:	000b8425 	.word	0x000b8425
   b8828:	fffffefc 	.word	0xfffffefc

000b882c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b882c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b882e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8830:	4604      	mov	r4, r0
   b8832:	460d      	mov	r5, r1
   b8834:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8836:	d914      	bls.n	b8862 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b8838:	4290      	cmp	r0, r2
   b883a:	d213      	bcs.n	b8864 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b883c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b8840:	1a75      	subs	r5, r6, r1
   b8842:	f1a1 0710 	sub.w	r7, r1, #16
   b8846:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8848:	42b7      	cmp	r7, r6
   b884a:	d018      	beq.n	b887e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b884c:	b11c      	cbz	r4, b8856 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b884e:	4631      	mov	r1, r6
   b8850:	4620      	mov	r0, r4
   b8852:	f001 f978 	bl	b9b46 <_ZN6StringC1EOS_>
                end->~T();
   b8856:	4630      	mov	r0, r6
   b8858:	f001 f8ec 	bl	b9a34 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b885c:	3e10      	subs	r6, #16
   b885e:	3c10      	subs	r4, #16
   b8860:	e7f2      	b.n	b8848 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b8862:	d00c      	beq.n	b887e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b8864:	42b5      	cmp	r5, r6
   b8866:	d00a      	beq.n	b887e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b8868:	b11c      	cbz	r4, b8872 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b886a:	4629      	mov	r1, r5
   b886c:	4620      	mov	r0, r4
   b886e:	f001 f96a 	bl	b9b46 <_ZN6StringC1EOS_>
                p->~T();
   b8872:	4628      	mov	r0, r5
   b8874:	f001 f8de 	bl	b9a34 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b8878:	3510      	adds	r5, #16
   b887a:	3410      	adds	r4, #16
   b887c:	e7f2      	b.n	b8864 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b887e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8880 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b8880:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8882:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8884:	4605      	mov	r5, r0
        if (n > 0) {
   b8886:	dd11      	ble.n	b88ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8888:	0130      	lsls	r0, r6, #4
   b888a:	f7fe ff69 	bl	b7760 <malloc>
            if (!d) {
   b888e:	4604      	mov	r4, r0
   b8890:	b158      	cbz	r0, b88aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8892:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8896:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b889a:	f7ff ffc7 	bl	b882c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b889e:	6828      	ldr	r0, [r5, #0]
   b88a0:	f7fe ff66 	bl	b7770 <free>
        data_ = d;
   b88a4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b88a6:	60ae      	str	r6, [r5, #8]
        return true;
   b88a8:	2001      	movs	r0, #1
    }
   b88aa:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b88ac:	2400      	movs	r4, #0
   b88ae:	e7f6      	b.n	b889e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b88b0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
   b88b0:	b510      	push	{r4, lr}
   b88b2:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
   b88b4:	6880      	ldr	r0, [r0, #8]
   b88b6:	6803      	ldr	r3, [r0, #0]
   b88b8:	68db      	ldr	r3, [r3, #12]
   b88ba:	4798      	blx	r3
   b88bc:	68e3      	ldr	r3, [r4, #12]
   b88be:	4418      	add	r0, r3
   b88c0:	60e0      	str	r0, [r4, #12]
}
   b88c2:	bd10      	pop	{r4, pc}

000b88c4 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b88c4:	4770      	bx	lr

000b88c6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b88c6:	4608      	mov	r0, r1
   b88c8:	b111      	cbz	r1, b88d0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b88ca:	680b      	ldr	r3, [r1, #0]
   b88cc:	685b      	ldr	r3, [r3, #4]
   b88ce:	4718      	bx	r3
}
   b88d0:	4770      	bx	lr

000b88d2 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b88d2:	4770      	bx	lr

000b88d4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b88d4:	4770      	bx	lr

000b88d6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b88d6:	4770      	bx	lr

000b88d8 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b88d8:	4770      	bx	lr

000b88da <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b88da:	b538      	push	{r3, r4, r5, lr}
   b88dc:	4604      	mov	r4, r0
   b88de:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b88e0:	6800      	ldr	r0, [r0, #0]
   b88e2:	212e      	movs	r1, #46	; 0x2e
   b88e4:	f003 f97b 	bl	bbbde <strchrnul>
    size = s - category;
   b88e8:	6823      	ldr	r3, [r4, #0]
   b88ea:	1ac3      	subs	r3, r0, r3
   b88ec:	602b      	str	r3, [r5, #0]
    if (size) {
   b88ee:	b123      	cbz	r3, b88fa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b88f0:	7803      	ldrb	r3, [r0, #0]
   b88f2:	b103      	cbz	r3, b88f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b88f4:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b88f6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b88f8:	6020      	str	r0, [r4, #0]
}
   b88fa:	4618      	mov	r0, r3
   b88fc:	bd38      	pop	{r3, r4, r5, pc}

000b88fe <_ZN5spark16JSONStreamWriterD0Ev>:
   b88fe:	b510      	push	{r4, lr}
   b8900:	2110      	movs	r1, #16
   b8902:	4604      	mov	r4, r0
   b8904:	f7fc fa85 	bl	b4e12 <_ZdlPvj>
   b8908:	4620      	mov	r0, r4
   b890a:	bd10      	pop	{r4, pc}

000b890c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b890c:	b510      	push	{r4, lr}
   b890e:	2104      	movs	r1, #4
   b8910:	4604      	mov	r4, r0
   b8912:	f7fc fa7e 	bl	b4e12 <_ZdlPvj>
   b8916:	4620      	mov	r0, r4
   b8918:	bd10      	pop	{r4, pc}

000b891a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b891a:	b510      	push	{r4, lr}
   b891c:	2104      	movs	r1, #4
   b891e:	4604      	mov	r4, r0
   b8920:	f7fc fa77 	bl	b4e12 <_ZdlPvj>
   b8924:	4620      	mov	r0, r4
   b8926:	bd10      	pop	{r4, pc}

000b8928 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b8928:	f7fe bcd2 	b.w	b72d0 <os_mutex_recursive_lock>

000b892c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b892c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b892e:	f7fc fa05 	bl	b4d3c <strcmp>
}
   b8932:	fab0 f080 	clz	r0, r0
   b8936:	0940      	lsrs	r0, r0, #5
   b8938:	bd08      	pop	{r3, pc}

000b893a <__tcf_1>:
   b893a:	4770      	bx	lr

000b893c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b893c:	b510      	push	{r4, lr}
   b893e:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b8940:	f001 faa6 	bl	b9e90 <_Z16_fetch_usbserialv>
   b8944:	4284      	cmp	r4, r0
   b8946:	d010      	beq.n	b896a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b8948:	f002 ffc2 	bl	bb8d0 <_Z22__fetch_global_Serial1v>
   b894c:	4284      	cmp	r4, r0
   b894e:	d105      	bne.n	b895c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b8950:	f002 ffbe 	bl	bb8d0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b8954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b8958:	f001 ba33 	b.w	b9dc2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b895c:	b12c      	cbz	r4, b896a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b895e:	6823      	ldr	r3, [r4, #0]
   b8960:	4620      	mov	r0, r4
   b8962:	685b      	ldr	r3, [r3, #4]
}
   b8964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8968:	4718      	bx	r3
   b896a:	bd10      	pop	{r4, pc}

000b896c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b896c:	680b      	ldr	r3, [r1, #0]
   b896e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b8970:	684b      	ldr	r3, [r1, #4]
   b8972:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8974:	b113      	cbz	r3, b897c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b8976:	685a      	ldr	r2, [r3, #4]
   b8978:	3201      	adds	r2, #1
   b897a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b897c:	4770      	bx	lr

000b897e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b897e:	b513      	push	{r0, r1, r4, lr}
   b8980:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b8982:	4608      	mov	r0, r1
   b8984:	9101      	str	r1, [sp, #4]
   b8986:	f7fc f9e3 	bl	b4d50 <strlen>
   b898a:	9901      	ldr	r1, [sp, #4]
   b898c:	4602      	mov	r2, r0
   b898e:	4620      	mov	r0, r4
}
   b8990:	b002      	add	sp, #8
   b8992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b8996:	f7ff bbf7 	b.w	b8188 <_ZN5spark10JSONWriter5valueEPKcj>

000b899a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b899a:	b513      	push	{r0, r1, r4, lr}
   b899c:	4604      	mov	r4, r0
    write(str, strlen(str));
   b899e:	4608      	mov	r0, r1
   b89a0:	9101      	str	r1, [sp, #4]
   b89a2:	f7fc f9d5 	bl	b4d50 <strlen>
   b89a6:	6823      	ldr	r3, [r4, #0]
   b89a8:	9901      	ldr	r1, [sp, #4]
   b89aa:	68db      	ldr	r3, [r3, #12]
   b89ac:	4602      	mov	r2, r0
   b89ae:	4620      	mov	r0, r4
}
   b89b0:	b002      	add	sp, #8
   b89b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b89b6:	4718      	bx	r3

000b89b8 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b89b8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b89ba:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b89bc:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b89c0:	68db      	ldr	r3, [r3, #12]
   b89c2:	2201      	movs	r2, #1
   b89c4:	f10d 0107 	add.w	r1, sp, #7
   b89c8:	4798      	blx	r3
}
   b89ca:	b003      	add	sp, #12
   b89cc:	f85d fb04 	ldr.w	pc, [sp], #4

000b89d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b89d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
   b89d4:	e9d0 8400 	ldrd	r8, r4, [r0]
   b89d8:	f04f 0a14 	mov.w	sl, #20
   b89dc:	9300      	str	r3, [sp, #0]
   b89de:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b89e2:	4b18      	ldr	r3, [pc, #96]	; (b8a44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b89e4:	10a4      	asrs	r4, r4, #2
   b89e6:	4617      	mov	r7, r2
   b89e8:	435c      	muls	r4, r3
   b89ea:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b89ec:	2c00      	cmp	r4, #0
   b89ee:	dd21      	ble.n	b8a34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b89f0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b89f2:	fb0a f006 	mul.w	r0, sl, r6
   b89f6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b89fa:	463a      	mov	r2, r7
   b89fc:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b8a00:	5828      	ldr	r0, [r5, r0]
   b8a02:	9101      	str	r1, [sp, #4]
   b8a04:	455f      	cmp	r7, fp
   b8a06:	bf28      	it	cs
   b8a08:	465a      	movcs	r2, fp
   b8a0a:	f003 f8fa 	bl	bbc02 <strncmp>
                if (cmp == 0) {
   b8a0e:	2800      	cmp	r0, #0
   b8a10:	9901      	ldr	r1, [sp, #4]
   b8a12:	f04f 0301 	mov.w	r3, #1
   b8a16:	d10b      	bne.n	b8a30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b8a18:	455f      	cmp	r7, fp
   b8a1a:	d103      	bne.n	b8a24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b8a1c:	9a00      	ldr	r2, [sp, #0]
   b8a1e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b8a20:	4634      	mov	r4, r6
   b8a22:	e7e3      	b.n	b89ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b8a24:	d9fc      	bls.n	b8a20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b8a26:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b8a28:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b8a2c:	3e01      	subs	r6, #1
   b8a2e:	e7f7      	b.n	b8a20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b8a30:	dbf9      	blt.n	b8a26 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b8a32:	e7f5      	b.n	b8a20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b8a34:	eba5 0508 	sub.w	r5, r5, r8
}
   b8a38:	4802      	ldr	r0, [pc, #8]	; (b8a44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b8a3a:	10ad      	asrs	r5, r5, #2
   b8a3c:	4368      	muls	r0, r5
   b8a3e:	b003      	add	sp, #12
   b8a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8a44:	cccccccd 	.word	0xcccccccd

000b8a48 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b8a48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b8a4a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b8a4c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b8a4e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b8a50:	b303      	cbz	r3, b8a94 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b8a52:	b1f9      	cbz	r1, b8a94 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b8a54:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b8a56:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b8a5a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b8a5c:	a903      	add	r1, sp, #12
   b8a5e:	a801      	add	r0, sp, #4
   b8a60:	f7ff ff3b 	bl	b88da <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b8a64:	4601      	mov	r1, r0
   b8a66:	b1a8      	cbz	r0, b8a94 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b8a68:	f10d 030b 	add.w	r3, sp, #11
   b8a6c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b8a6e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8a72:	4620      	mov	r0, r4
   b8a74:	f7ff ffac 	bl	b89d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b8a78:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b8a7c:	b153      	cbz	r3, b8a94 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b8a7e:	6823      	ldr	r3, [r4, #0]
   b8a80:	2414      	movs	r4, #20
   b8a82:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b8a86:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b8a88:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b8a8c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b8a8e:	bfa8      	it	ge
   b8a90:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b8a92:	e7e3      	b.n	b8a5c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b8a94:	4628      	mov	r0, r5
   b8a96:	b004      	add	sp, #16
   b8a98:	bd70      	pop	{r4, r5, r6, pc}

000b8a9a <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b8a9a:	b40e      	push	{r1, r2, r3}
   b8a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8a9e:	b08c      	sub	sp, #48	; 0x30
   b8aa0:	af00      	add	r7, sp, #0
   b8aa2:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b8aa6:	4604      	mov	r4, r0
   b8aa8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8aac:	607a      	str	r2, [r7, #4]
   b8aae:	462b      	mov	r3, r5
   b8ab0:	2120      	movs	r1, #32
   b8ab2:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b8ab6:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8ab8:	f7fe fe72 	bl	b77a0 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b8abc:	281f      	cmp	r0, #31
   b8abe:	687a      	ldr	r2, [r7, #4]
   b8ac0:	d91a      	bls.n	b8af8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b8ac2:	f100 0308 	add.w	r3, r0, #8
   b8ac6:	f023 0307 	bic.w	r3, r3, #7
        }
   b8aca:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b8acc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8ad0:	1c41      	adds	r1, r0, #1
   b8ad2:	462b      	mov	r3, r5
   b8ad4:	4668      	mov	r0, sp
        va_start(args, fmt);
   b8ad6:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8ad8:	f7fe fe62 	bl	b77a0 <vsnprintf>
        if (n > 0) {
   b8adc:	1e02      	subs	r2, r0, #0
   b8ade:	dd04      	ble.n	b8aea <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b8ae0:	6823      	ldr	r3, [r4, #0]
   b8ae2:	4669      	mov	r1, sp
   b8ae4:	68db      	ldr	r3, [r3, #12]
   b8ae6:	4620      	mov	r0, r4
   b8ae8:	4798      	blx	r3
   b8aea:	46b5      	mov	sp, r6
}
   b8aec:	3730      	adds	r7, #48	; 0x30
   b8aee:	46bd      	mov	sp, r7
   b8af0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8af4:	b003      	add	sp, #12
   b8af6:	4770      	bx	lr
    } else if (n > 0) {
   b8af8:	2800      	cmp	r0, #0
   b8afa:	d0f7      	beq.n	b8aec <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b8afc:	6823      	ldr	r3, [r4, #0]
   b8afe:	4602      	mov	r2, r0
   b8b00:	68db      	ldr	r3, [r3, #12]
   b8b02:	f107 0110 	add.w	r1, r7, #16
   b8b06:	4620      	mov	r0, r4
   b8b08:	4798      	blx	r3
}
   b8b0a:	e7ef      	b.n	b8aec <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b8b0c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b8b0c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b8b0e:	4c09      	ldr	r4, [pc, #36]	; (b8b34 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b8b10:	7823      	ldrb	r3, [r4, #0]
   b8b12:	f3bf 8f5b 	dmb	ish
   b8b16:	07db      	lsls	r3, r3, #31
   b8b18:	d409      	bmi.n	b8b2e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b8b1a:	4620      	mov	r0, r4
   b8b1c:	f7fc f988 	bl	b4e30 <__cxa_guard_acquire>
   b8b20:	b128      	cbz	r0, b8b2e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b8b22:	4620      	mov	r0, r4
   b8b24:	f7fc f989 	bl	b4e3a <__cxa_guard_release>
   b8b28:	4803      	ldr	r0, [pc, #12]	; (b8b38 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b8b2a:	f002 ffd7 	bl	bbadc <atexit>
}
   b8b2e:	4803      	ldr	r0, [pc, #12]	; (b8b3c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b8b30:	bd10      	pop	{r4, pc}
   b8b32:	bf00      	nop
   b8b34:	2003e6c4 	.word	0x2003e6c4
   b8b38:	000b88d3 	.word	0x000b88d3
   b8b3c:	2003e450 	.word	0x2003e450

000b8b40 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b8b40:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b8b42:	4c09      	ldr	r4, [pc, #36]	; (b8b68 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b8b44:	7823      	ldrb	r3, [r4, #0]
   b8b46:	f3bf 8f5b 	dmb	ish
   b8b4a:	07db      	lsls	r3, r3, #31
   b8b4c:	d409      	bmi.n	b8b62 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b8b4e:	4620      	mov	r0, r4
   b8b50:	f7fc f96e 	bl	b4e30 <__cxa_guard_acquire>
   b8b54:	b128      	cbz	r0, b8b62 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b8b56:	4620      	mov	r0, r4
   b8b58:	f7fc f96f 	bl	b4e3a <__cxa_guard_release>
   b8b5c:	4803      	ldr	r0, [pc, #12]	; (b8b6c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b8b5e:	f002 ffbd 	bl	bbadc <atexit>
    return &factory;
}
   b8b62:	4803      	ldr	r0, [pc, #12]	; (b8b70 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b8b64:	bd10      	pop	{r4, pc}
   b8b66:	bf00      	nop
   b8b68:	2003e6c8 	.word	0x2003e6c8
   b8b6c:	000b893b 	.word	0x000b893b
   b8b70:	2003e454 	.word	0x2003e454

000b8b74 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b8b74:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b8b76:	2500      	movs	r5, #0
   b8b78:	4604      	mov	r4, r0
   b8b7a:	e9c0 5500 	strd	r5, r5, [r0]
   b8b7e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b8b82:	6085      	str	r5, [r0, #8]
   b8b84:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b8b86:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b8b8a:	f7fe fb91 	bl	b72b0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b8b8e:	f7ff ffbd 	bl	b8b0c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b8b92:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b8b94:	f7ff ffd4 	bl	b8b40 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b8b98:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b8b9a:	6220      	str	r0, [r4, #32]
}
   b8b9c:	4620      	mov	r0, r4
   b8b9e:	bd38      	pop	{r3, r4, r5, pc}

000b8ba0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b8ba0:	b510      	push	{r4, lr}
    static LogManager mgr;
   b8ba2:	4c0a      	ldr	r4, [pc, #40]	; (b8bcc <_ZN5spark10LogManager8instanceEv+0x2c>)
   b8ba4:	7823      	ldrb	r3, [r4, #0]
   b8ba6:	f3bf 8f5b 	dmb	ish
   b8baa:	07db      	lsls	r3, r3, #31
   b8bac:	d40c      	bmi.n	b8bc8 <_ZN5spark10LogManager8instanceEv+0x28>
   b8bae:	4620      	mov	r0, r4
   b8bb0:	f7fc f93e 	bl	b4e30 <__cxa_guard_acquire>
   b8bb4:	b140      	cbz	r0, b8bc8 <_ZN5spark10LogManager8instanceEv+0x28>
   b8bb6:	4806      	ldr	r0, [pc, #24]	; (b8bd0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b8bb8:	f7ff ffdc 	bl	b8b74 <_ZN5spark10LogManagerC1Ev>
   b8bbc:	4620      	mov	r0, r4
   b8bbe:	f7fc f93c 	bl	b4e3a <__cxa_guard_release>
   b8bc2:	4804      	ldr	r0, [pc, #16]	; (b8bd4 <_ZN5spark10LogManager8instanceEv+0x34>)
   b8bc4:	f002 ff8a 	bl	bbadc <atexit>
    return &mgr;
}
   b8bc8:	4801      	ldr	r0, [pc, #4]	; (b8bd0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b8bca:	bd10      	pop	{r4, pc}
   b8bcc:	2003e6c0 	.word	0x2003e6c0
   b8bd0:	2003e6d0 	.word	0x2003e6d0
   b8bd4:	000b9119 	.word	0x000b9119

000b8bd8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b8bd8:	4a02      	ldr	r2, [pc, #8]	; (b8be4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b8bda:	4903      	ldr	r1, [pc, #12]	; (b8be8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b8bdc:	4803      	ldr	r0, [pc, #12]	; (b8bec <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b8bde:	2300      	movs	r3, #0
   b8be0:	f7fe bc7e 	b.w	b74e0 <log_set_callbacks>
   b8be4:	000b8efd 	.word	0x000b8efd
   b8be8:	000b8e89 	.word	0x000b8e89
   b8bec:	000b8e09 	.word	0x000b8e09

000b8bf0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b8bf0:	2300      	movs	r3, #0
   b8bf2:	461a      	mov	r2, r3
   b8bf4:	4619      	mov	r1, r3
   b8bf6:	4618      	mov	r0, r3
   b8bf8:	f7fe bc72 	b.w	b74e0 <log_set_callbacks>

000b8bfc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b8bfe:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8c00:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8c02:	4668      	mov	r0, sp
   b8c04:	f7ff feb2 	bl	b896c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b8c08:	466a      	mov	r2, sp
   b8c0a:	4629      	mov	r1, r5
   b8c0c:	4620      	mov	r0, r4
   b8c0e:	f7ff f9b5 	bl	b7f7c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b8c12:	a801      	add	r0, sp, #4
   b8c14:	f7fe fdfb 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c18:	4620      	mov	r0, r4
   b8c1a:	b003      	add	sp, #12
   b8c1c:	bd30      	pop	{r4, r5, pc}

000b8c1e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8c1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b8c20:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8c22:	4604      	mov	r4, r0
   b8c24:	4668      	mov	r0, sp
   b8c26:	f7ff fea1 	bl	b896c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b8c2a:	466a      	mov	r2, sp
   b8c2c:	4629      	mov	r1, r5
   b8c2e:	4620      	mov	r0, r4
   b8c30:	f7ff f980 	bl	b7f34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8c34:	a801      	add	r0, sp, #4
   b8c36:	f7fe fdea 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c3a:	4620      	mov	r0, r4
   b8c3c:	b003      	add	sp, #12
   b8c3e:	bd30      	pop	{r4, r5, pc}

000b8c40 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b8c42:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8c44:	4604      	mov	r4, r0
   b8c46:	4668      	mov	r0, sp
   b8c48:	f7ff fe90 	bl	b896c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b8c4c:	466a      	mov	r2, sp
   b8c4e:	4629      	mov	r1, r5
   b8c50:	4620      	mov	r0, r4
   b8c52:	f7fe fff2 	bl	b7c3a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8c56:	a801      	add	r0, sp, #4
   b8c58:	f7fe fdd9 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c5c:	4620      	mov	r0, r4
   b8c5e:	b003      	add	sp, #12
   b8c60:	bd30      	pop	{r4, r5, pc}
	...

000b8c64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b8c64:	b570      	push	{r4, r5, r6, lr}
   b8c66:	b08a      	sub	sp, #40	; 0x28
   b8c68:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b8c6a:	4601      	mov	r1, r0
   b8c6c:	a804      	add	r0, sp, #16
   b8c6e:	f7ff ffc5 	bl	b8bfc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b8c72:	4e14      	ldr	r6, [pc, #80]	; (b8cc4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b8c74:	a804      	add	r0, sp, #16
   b8c76:	f7ff f999 	bl	b7fac <_ZN5spark18JSONObjectIterator4nextEv>
   b8c7a:	b1e8      	cbz	r0, b8cb8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b8c7c:	a904      	add	r1, sp, #16
   b8c7e:	4668      	mov	r0, sp
   b8c80:	f7ff ffcd 	bl	b8c1e <_ZNK5spark18JSONObjectIterator4nameEv>
   b8c84:	9802      	ldr	r0, [sp, #8]
   b8c86:	4631      	mov	r1, r6
   b8c88:	f7ff fe50 	bl	b892c <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b8c8c:	4604      	mov	r4, r0
   b8c8e:	b110      	cbz	r0, b8c96 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b8c90:	1e2c      	subs	r4, r5, #0
   b8c92:	bf18      	it	ne
   b8c94:	2401      	movne	r4, #1
   b8c96:	a801      	add	r0, sp, #4
   b8c98:	f7fe fdb9 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8c9c:	2c00      	cmp	r4, #0
   b8c9e:	d0e9      	beq.n	b8c74 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b8ca0:	a904      	add	r1, sp, #16
   b8ca2:	4668      	mov	r0, sp
   b8ca4:	f7ff ffcc 	bl	b8c40 <_ZNK5spark18JSONObjectIterator5valueEv>
   b8ca8:	4668      	mov	r0, sp
   b8caa:	f7ff f83b 	bl	b7d24 <_ZNK5spark9JSONValue5toIntEv>
   b8cae:	6028      	str	r0, [r5, #0]
   b8cb0:	a801      	add	r0, sp, #4
   b8cb2:	f7fe fdac 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8cb6:	e7dd      	b.n	b8c74 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b8cb8:	a805      	add	r0, sp, #20
   b8cba:	f7fe fda8 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8cbe:	b00a      	add	sp, #40	; 0x28
   b8cc0:	bd70      	pop	{r4, r5, r6, pc}
   b8cc2:	bf00      	nop
   b8cc4:	000be380 	.word	0x000be380

000b8cc8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b8cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8cca:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b8ccc:	4620      	mov	r0, r4
   b8cce:	4913      	ldr	r1, [pc, #76]	; (b8d1c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b8cd0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b8cd2:	f7fc f833 	bl	b4d3c <strcmp>
   b8cd6:	b950      	cbnz	r0, b8cee <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b8cd8:	f001 f8da 	bl	b9e90 <_Z16_fetch_usbserialv>
   b8cdc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b8ce0:	f001 f8c4 	bl	b9e6c <_ZN9USBSerial5beginEl>
}
   b8ce4:	b003      	add	sp, #12
   b8ce6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b8cea:	f001 b8d1 	b.w	b9e90 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b8cee:	490c      	ldr	r1, [pc, #48]	; (b8d20 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b8cf0:	4620      	mov	r0, r4
   b8cf2:	f7fc f823 	bl	b4d3c <strcmp>
   b8cf6:	b978      	cbnz	r0, b8d18 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b8cf8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b8cfc:	a901      	add	r1, sp, #4
   b8cfe:	4628      	mov	r0, r5
        int baud = 9600;
   b8d00:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b8d02:	f7ff ffaf 	bl	b8c64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b8d06:	f002 fde3 	bl	bb8d0 <_Z22__fetch_global_Serial1v>
   b8d0a:	9901      	ldr	r1, [sp, #4]
   b8d0c:	f001 f856 	bl	b9dbc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b8d10:	f002 fdde 	bl	bb8d0 <_Z22__fetch_global_Serial1v>
}
   b8d14:	b003      	add	sp, #12
   b8d16:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b8d18:	2000      	movs	r0, #0
   b8d1a:	e7fb      	b.n	b8d14 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b8d1c:	000be385 	.word	0x000be385
   b8d20:	000be38c 	.word	0x000be38c

000b8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8d24:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8d26:	e9d0 5300 	ldrd	r5, r3, [r0]
   b8d2a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8d2c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8d2e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8d32:	42ae      	cmp	r6, r5
   b8d34:	d005      	beq.n	b8d42 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b8d36:	f105 0008 	add.w	r0, r5, #8
   b8d3a:	f7ff fff3 	bl	b8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8d3e:	3514      	adds	r5, #20
   b8d40:	e7f7      	b.n	b8d32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b8d42:	6820      	ldr	r0, [r4, #0]
   b8d44:	f7fe fd14 	bl	b7770 <free>
}
   b8d48:	4620      	mov	r0, r4
   b8d4a:	bd70      	pop	{r4, r5, r6, pc}

000b8d4c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b8d4c:	b510      	push	{r4, lr}
   b8d4e:	4604      	mov	r4, r0
   b8d50:	300c      	adds	r0, #12
   b8d52:	f7ff ffe7 	bl	b8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8d56:	4620      	mov	r0, r4
   b8d58:	f7fe fd93 	bl	b7882 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b8d5c:	4620      	mov	r0, r4
   b8d5e:	bd10      	pop	{r4, pc}

000b8d60 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b8d60:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b8d62:	4b04      	ldr	r3, [pc, #16]	; (b8d74 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b8d64:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b8d66:	f840 3b04 	str.w	r3, [r0], #4
   b8d6a:	f7ff ffef 	bl	b8d4c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b8d6e:	4620      	mov	r0, r4
   b8d70:	bd10      	pop	{r4, pc}
   b8d72:	bf00      	nop
   b8d74:	000bdbe4 	.word	0x000bdbe4

000b8d78 <_ZN5spark16StreamLogHandlerD0Ev>:
   b8d78:	b510      	push	{r4, lr}
   b8d7a:	4604      	mov	r4, r0
   b8d7c:	f7ff fff0 	bl	b8d60 <_ZN5spark16StreamLogHandlerD1Ev>
   b8d80:	4620      	mov	r0, r4
   b8d82:	2124      	movs	r1, #36	; 0x24
   b8d84:	f7fc f845 	bl	b4e12 <_ZdlPvj>
   b8d88:	4620      	mov	r0, r4
   b8d8a:	bd10      	pop	{r4, pc}

000b8d8c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b8d8c:	b510      	push	{r4, lr}
   b8d8e:	4b03      	ldr	r3, [pc, #12]	; (b8d9c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b8d90:	6003      	str	r3, [r0, #0]
   b8d92:	4604      	mov	r4, r0
   b8d94:	f7ff ffe4 	bl	b8d60 <_ZN5spark16StreamLogHandlerD1Ev>
   b8d98:	4620      	mov	r0, r4
   b8d9a:	bd10      	pop	{r4, pc}
   b8d9c:	000be428 	.word	0x000be428

000b8da0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b8da0:	b510      	push	{r4, lr}
   b8da2:	4604      	mov	r4, r0
   b8da4:	f7ff fff2 	bl	b8d8c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b8da8:	4620      	mov	r0, r4
   b8daa:	2124      	movs	r1, #36	; 0x24
   b8dac:	f7fc f831 	bl	b4e12 <_ZdlPvj>
   b8db0:	4620      	mov	r0, r4
   b8db2:	bd10      	pop	{r4, pc}

000b8db4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b8db4:	680a      	ldr	r2, [r1, #0]
   b8db6:	6002      	str	r2, [r0, #0]
   b8db8:	684a      	ldr	r2, [r1, #4]
   b8dba:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b8dbc:	2200      	movs	r2, #0
   b8dbe:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b8dc2:	b510      	push	{r4, lr}
   b8dc4:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8dc6:	688c      	ldr	r4, [r1, #8]
   b8dc8:	6084      	str	r4, [r0, #8]
   b8dca:	68cc      	ldr	r4, [r1, #12]
   b8dcc:	60c4      	str	r4, [r0, #12]
   b8dce:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b8dd0:	608a      	str	r2, [r1, #8]
   b8dd2:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8dd4:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b8dd6:	610a      	str	r2, [r1, #16]
   b8dd8:	bd10      	pop	{r4, pc}

000b8dda <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
   b8dda:	2200      	movs	r2, #0
   b8ddc:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b8de0:	b510      	push	{r4, lr}
        capacity_(0) {
   b8de2:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8de4:	680c      	ldr	r4, [r1, #0]
   b8de6:	6004      	str	r4, [r0, #0]
   b8de8:	684c      	ldr	r4, [r1, #4]
   b8dea:	6044      	str	r4, [r0, #4]
   b8dec:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8dee:	600a      	str	r2, [r1, #0]
   b8df0:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8df2:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8df4:	608a      	str	r2, [r1, #8]
}
   b8df6:	bd10      	pop	{r4, pc}

000b8df8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b8df8:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b8dfa:	6803      	ldr	r3, [r0, #0]
   b8dfc:	4604      	mov	r4, r0
   b8dfe:	6818      	ldr	r0, [r3, #0]
   b8e00:	f7fe fa6e 	bl	b72e0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b8e04:	4620      	mov	r0, r4
   b8e06:	bd10      	pop	{r4, pc}

000b8e08 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b8e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e0c:	b087      	sub	sp, #28
   b8e0e:	4680      	mov	r8, r0
   b8e10:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b8e12:	4b1c      	ldr	r3, [pc, #112]	; (b8e84 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b8e14:	685b      	ldr	r3, [r3, #4]
   b8e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8e1a:	4689      	mov	r9, r1
   b8e1c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b8e1e:	b96b      	cbnz	r3, b8e3c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b8e20:	f7ff febe 	bl	b8ba0 <_ZN5spark10LogManager8instanceEv>
   b8e24:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8e26:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b8e2a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8e2c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b8e2e:	f7ff fd7b 	bl	b8928 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b8e32:	7b23      	ldrb	r3, [r4, #12]
   b8e34:	b12b      	cbz	r3, b8e42 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b8e36:	a805      	add	r0, sp, #20
   b8e38:	f7ff ffde 	bl	b8df8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b8e3c:	b007      	add	sp, #28
   b8e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b8e42:	2301      	movs	r3, #1
   b8e44:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b8e46:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b8e4a:	fa5f f989 	uxtb.w	r9, r9
   b8e4e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8e52:	45aa      	cmp	sl, r5
   b8e54:	d012      	beq.n	b8e7c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b8e56:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b8e5a:	4631      	mov	r1, r6
   b8e5c:	1d38      	adds	r0, r7, #4
   b8e5e:	f7ff fdf3 	bl	b8a48 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b8e62:	4581      	cmp	r9, r0
   b8e64:	d3f5      	bcc.n	b8e52 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b8e66:	683b      	ldr	r3, [r7, #0]
   b8e68:	9a03      	ldr	r2, [sp, #12]
   b8e6a:	9200      	str	r2, [sp, #0]
   b8e6c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b8e70:	464a      	mov	r2, r9
   b8e72:	4633      	mov	r3, r6
   b8e74:	4641      	mov	r1, r8
   b8e76:	4638      	mov	r0, r7
   b8e78:	47d8      	blx	fp
   b8e7a:	e7ea      	b.n	b8e52 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b8e7c:	2300      	movs	r3, #0
   b8e7e:	7323      	strb	r3, [r4, #12]
   b8e80:	e7d9      	b.n	b8e36 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b8e82:	bf00      	nop
   b8e84:	e000ed00 	.word	0xe000ed00

000b8e88 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b8e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e8c:	469b      	mov	fp, r3
   b8e8e:	4b1a      	ldr	r3, [pc, #104]	; (b8ef8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b8e90:	685b      	ldr	r3, [r3, #4]
   b8e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8e96:	4680      	mov	r8, r0
   b8e98:	4689      	mov	r9, r1
   b8e9a:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b8e9c:	b96b      	cbnz	r3, b8eba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b8e9e:	f7ff fe7f 	bl	b8ba0 <_ZN5spark10LogManager8instanceEv>
   b8ea2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8ea4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b8ea8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8eaa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8eac:	f7ff fd3c 	bl	b8928 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b8eb0:	7b23      	ldrb	r3, [r4, #12]
   b8eb2:	b12b      	cbz	r3, b8ec0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b8eb4:	a801      	add	r0, sp, #4
   b8eb6:	f7ff ff9f 	bl	b8df8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b8eba:	b003      	add	sp, #12
   b8ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b8ec0:	2301      	movs	r3, #1
   b8ec2:	7323      	strb	r3, [r4, #12]
   b8ec4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b8ec8:	b2f6      	uxtb	r6, r6
   b8eca:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8ece:	4555      	cmp	r5, sl
   b8ed0:	d00e      	beq.n	b8ef0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b8ed2:	f855 7b04 	ldr.w	r7, [r5], #4
   b8ed6:	4659      	mov	r1, fp
   b8ed8:	1d38      	adds	r0, r7, #4
   b8eda:	f7ff fdb5 	bl	b8a48 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b8ede:	4286      	cmp	r6, r0
   b8ee0:	d3f5      	bcc.n	b8ece <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b8ee2:	683b      	ldr	r3, [r7, #0]
   b8ee4:	464a      	mov	r2, r9
   b8ee6:	68db      	ldr	r3, [r3, #12]
   b8ee8:	4641      	mov	r1, r8
   b8eea:	4638      	mov	r0, r7
   b8eec:	4798      	blx	r3
   b8eee:	e7ee      	b.n	b8ece <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b8ef0:	2300      	movs	r3, #0
   b8ef2:	7323      	strb	r3, [r4, #12]
   b8ef4:	e7de      	b.n	b8eb4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b8ef6:	bf00      	nop
   b8ef8:	e000ed00 	.word	0xe000ed00

000b8efc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b8efc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8f00:	4b16      	ldr	r3, [pc, #88]	; (b8f5c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b8f02:	685b      	ldr	r3, [r3, #4]
   b8f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8f08:	4605      	mov	r5, r0
   b8f0a:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b8f0c:	bb1b      	cbnz	r3, b8f56 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b8f0e:	f7ff fe47 	bl	b8ba0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b8f12:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b8f16:	4604      	mov	r4, r0
   b8f18:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8f1a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8f1c:	f7ff fd04 	bl	b8928 <_ZN14RecursiveMutex4lockEv.isra.0>
   b8f20:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b8f24:	2446      	movs	r4, #70	; 0x46
   b8f26:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8f2a:	45b0      	cmp	r8, r6
   b8f2c:	d109      	bne.n	b8f42 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b8f2e:	a801      	add	r0, sp, #4
   b8f30:	f7ff ff62 	bl	b8df8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b8f34:	42a5      	cmp	r5, r4
   b8f36:	bfb4      	ite	lt
   b8f38:	2000      	movlt	r0, #0
   b8f3a:	2001      	movge	r0, #1
}
   b8f3c:	b002      	add	sp, #8
   b8f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b8f42:	f856 0b04 	ldr.w	r0, [r6], #4
   b8f46:	4639      	mov	r1, r7
   b8f48:	3004      	adds	r0, #4
   b8f4a:	f7ff fd7d 	bl	b8a48 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b8f4e:	4284      	cmp	r4, r0
   b8f50:	bfa8      	it	ge
   b8f52:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b8f54:	e7e9      	b.n	b8f2a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b8f56:	2000      	movs	r0, #0
   b8f58:	e7f0      	b.n	b8f3c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b8f5a:	bf00      	nop
   b8f5c:	e000ed00 	.word	0xe000ed00

000b8f60 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8f62:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b8f66:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8f68:	4604      	mov	r4, r0
   b8f6a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8f6c:	db0d      	blt.n	b8f8a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b8f6e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b8f70:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8f72:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8f74:	dd04      	ble.n	b8f80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b8f76:	00b9      	lsls	r1, r7, #2
   b8f78:	f7fe fc02 	bl	b7780 <realloc>
            if (!d) {
   b8f7c:	b918      	cbnz	r0, b8f86 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b8f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b8f80:	f7fe fbf6 	bl	b7770 <free>
        T* d = nullptr;
   b8f84:	2000      	movs	r0, #0
        data_ = d;
   b8f86:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8f88:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8f8a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8f8c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8f8e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b8f92:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8f94:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b8f98:	1d08      	adds	r0, r1, #4
   b8f9a:	f002 fdc3 	bl	bbb24 <memmove>
    new(p) T(std::move(value));
   b8f9e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b8fa2:	6863      	ldr	r3, [r4, #4]
   b8fa4:	3301      	adds	r3, #1
   b8fa6:	6063      	str	r3, [r4, #4]
    return true;
   b8fa8:	2001      	movs	r0, #1
   b8faa:	e7e8      	b.n	b8f7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b8fac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b8fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b8fae:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b8fb2:	4604      	mov	r4, r0
   b8fb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8fb6:	9301      	str	r3, [sp, #4]
   b8fb8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b8fba:	f7ff fcb5 	bl	b8928 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b8fbe:	e9d4 3200 	ldrd	r3, r2, [r4]
   b8fc2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b8fc6:	4293      	cmp	r3, r2
   b8fc8:	4619      	mov	r1, r3
   b8fca:	d00b      	beq.n	b8fe4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b8fcc:	6809      	ldr	r1, [r1, #0]
   b8fce:	42a9      	cmp	r1, r5
   b8fd0:	f103 0304 	add.w	r3, r3, #4
   b8fd4:	d1f7      	bne.n	b8fc6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b8fd6:	a801      	add	r0, sp, #4
   b8fd8:	f7ff ff0e 	bl	b8df8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b8fdc:	2500      	movs	r5, #0
}
   b8fde:	4628      	mov	r0, r5
   b8fe0:	b003      	add	sp, #12
   b8fe2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b8fe4:	4629      	mov	r1, r5
   b8fe6:	4620      	mov	r0, r4
   b8fe8:	f7ff ffba 	bl	b8f60 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b8fec:	4605      	mov	r5, r0
   b8fee:	2800      	cmp	r0, #0
   b8ff0:	d0f1      	beq.n	b8fd6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b8ff2:	6863      	ldr	r3, [r4, #4]
   b8ff4:	2b01      	cmp	r3, #1
   b8ff6:	d101      	bne.n	b8ffc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b8ff8:	f7ff fdee 	bl	b8bd8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8ffc:	a801      	add	r0, sp, #4
   b8ffe:	f7ff fefb 	bl	b8df8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9002:	e7ec      	b.n	b8fde <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b9004 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9004:	b570      	push	{r4, r5, r6, lr}
   b9006:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b9008:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b900c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b900e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b9012:	4282      	cmp	r2, r0
   b9014:	d00f      	beq.n	b9036 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b9016:	4601      	mov	r1, r0
            if (*p == value) {
   b9018:	681d      	ldr	r5, [r3, #0]
   b901a:	f851 6b04 	ldr.w	r6, [r1], #4
   b901e:	42ae      	cmp	r6, r5
   b9020:	d107      	bne.n	b9032 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9022:	1a52      	subs	r2, r2, r1
   b9024:	f002 fd7e 	bl	bbb24 <memmove>
    --size_;
   b9028:	6863      	ldr	r3, [r4, #4]
   b902a:	3b01      	subs	r3, #1
   b902c:	6063      	str	r3, [r4, #4]
    return true;
   b902e:	2001      	movs	r0, #1
}
   b9030:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b9032:	4608      	mov	r0, r1
   b9034:	e7ed      	b.n	b9012 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b9036:	2000      	movs	r0, #0
   b9038:	e7fa      	b.n	b9030 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b903a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b903a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b903c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9040:	4604      	mov	r4, r0
   b9042:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b9044:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9046:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b9048:	f7ff fc6e 	bl	b8928 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b904c:	a901      	add	r1, sp, #4
   b904e:	4620      	mov	r0, r4
   b9050:	f7ff ffd8 	bl	b9004 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b9054:	b118      	cbz	r0, b905e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b9056:	6863      	ldr	r3, [r4, #4]
   b9058:	b90b      	cbnz	r3, b905e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b905a:	f7ff fdc9 	bl	b8bf0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b905e:	a803      	add	r0, sp, #12
   b9060:	f7ff feca 	bl	b8df8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9064:	b004      	add	sp, #16
   b9066:	bd10      	pop	{r4, pc}

000b9068 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b9068:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b906a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b906e:	2318      	movs	r3, #24
   b9070:	4604      	mov	r4, r0
   b9072:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b9076:	42ae      	cmp	r6, r5
   b9078:	d015      	beq.n	b90a6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b907a:	f105 0110 	add.w	r1, r5, #16
   b907e:	4620      	mov	r0, r4
   b9080:	f7ff ffc0 	bl	b9004 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b9084:	6863      	ldr	r3, [r4, #4]
   b9086:	b90b      	cbnz	r3, b908c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b9088:	f7ff fdb2 	bl	b8bf0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b908c:	69e0      	ldr	r0, [r4, #28]
   b908e:	6929      	ldr	r1, [r5, #16]
   b9090:	6803      	ldr	r3, [r0, #0]
   b9092:	68db      	ldr	r3, [r3, #12]
   b9094:	4798      	blx	r3
        if (h.stream) {
   b9096:	6969      	ldr	r1, [r5, #20]
   b9098:	b119      	cbz	r1, b90a2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b909a:	6a20      	ldr	r0, [r4, #32]
   b909c:	6803      	ldr	r3, [r0, #0]
   b909e:	68db      	ldr	r3, [r3, #12]
   b90a0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b90a2:	3518      	adds	r5, #24
   b90a4:	e7e7      	b.n	b9076 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b90a6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b90aa:	2618      	movs	r6, #24
   b90ac:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b90b0:	42ae      	cmp	r6, r5
   b90b2:	d004      	beq.n	b90be <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b90b4:	4628      	mov	r0, r5
   b90b6:	f000 fcbd 	bl	b9a34 <_ZN6StringD1Ev>
   b90ba:	3518      	adds	r5, #24
   b90bc:	e7f8      	b.n	b90b0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b90be:	2300      	movs	r3, #0
   b90c0:	6163      	str	r3, [r4, #20]
}
   b90c2:	bd70      	pop	{r4, r5, r6, pc}

000b90c4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b90c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b90c6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b90c8:	f7ff fd92 	bl	b8bf0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b90cc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b90d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b90d2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b90d4:	f7ff fc28 	bl	b8928 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b90d8:	4620      	mov	r0, r4
   b90da:	f7ff ffc5 	bl	b9068 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b90de:	a801      	add	r0, sp, #4
   b90e0:	f7ff fe8a 	bl	b8df8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b90e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b90e6:	b108      	cbz	r0, b90ec <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b90e8:	f7fe f8ea 	bl	b72c0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b90ec:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b90f0:	2618      	movs	r6, #24
   b90f2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b90f6:	42ae      	cmp	r6, r5
   b90f8:	d004      	beq.n	b9104 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b90fa:	4628      	mov	r0, r5
   b90fc:	f000 fc9a 	bl	b9a34 <_ZN6StringD1Ev>
   b9100:	3518      	adds	r5, #24
   b9102:	e7f8      	b.n	b90f6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b9104:	6920      	ldr	r0, [r4, #16]
   b9106:	f7fe fb33 	bl	b7770 <free>
   b910a:	6820      	ldr	r0, [r4, #0]
   b910c:	f7fe fb30 	bl	b7770 <free>
}
   b9110:	4620      	mov	r0, r4
   b9112:	b002      	add	sp, #8
   b9114:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9118 <__tcf_2>:
    static LogManager mgr;
   b9118:	4801      	ldr	r0, [pc, #4]	; (b9120 <__tcf_2+0x8>)
   b911a:	f7ff bfd3 	b.w	b90c4 <_ZN5spark10LogManagerD1Ev>
   b911e:	bf00      	nop
   b9120:	2003e6d0 	.word	0x2003e6d0

000b9124 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b9124:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9128:	4604      	mov	r4, r0
   b912a:	460d      	mov	r5, r1
   b912c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b912e:	d915      	bls.n	b915c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b9130:	4290      	cmp	r0, r2
   b9132:	d214      	bcs.n	b915e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b9134:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b9138:	1a75      	subs	r5, r6, r1
   b913a:	f1a1 0714 	sub.w	r7, r1, #20
   b913e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9140:	42b7      	cmp	r7, r6
   b9142:	d01a      	beq.n	b917a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b9144:	b11c      	cbz	r4, b914e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b9146:	4631      	mov	r1, r6
   b9148:	4620      	mov	r0, r4
   b914a:	f7ff fe33 	bl	b8db4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b914e:	f106 0008 	add.w	r0, r6, #8
   b9152:	f7ff fde7 	bl	b8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b9156:	3e14      	subs	r6, #20
   b9158:	3c14      	subs	r4, #20
   b915a:	e7f1      	b.n	b9140 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b915c:	d00d      	beq.n	b917a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b915e:	42b5      	cmp	r5, r6
   b9160:	d00b      	beq.n	b917a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b9162:	b11c      	cbz	r4, b916c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b9164:	4629      	mov	r1, r5
   b9166:	4620      	mov	r0, r4
   b9168:	f7ff fe24 	bl	b8db4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b916c:	f105 0008 	add.w	r0, r5, #8
   b9170:	f7ff fdd8 	bl	b8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b9174:	3514      	adds	r5, #20
   b9176:	3414      	adds	r4, #20
   b9178:	e7f1      	b.n	b915e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b917a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b917c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b917c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9180:	4690      	mov	r8, r2
   b9182:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b9184:	2300      	movs	r3, #0
   b9186:	9103      	str	r1, [sp, #12]
    return size_;
   b9188:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b918c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b918e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b9190:	4299      	cmp	r1, r3
        capacity_(0) {
   b9192:	e9c0 3300 	strd	r3, r3, [r0]
   b9196:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b919a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b919e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b91a2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b91a4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b91a6:	dc23      	bgt.n	b91f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b91a8:	e9d8 5700 	ldrd	r5, r7, [r8]
   b91ac:	2314      	movs	r3, #20
   b91ae:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b91b2:	42af      	cmp	r7, r5
   b91b4:	d03b      	beq.n	b922e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b91b6:	4629      	mov	r1, r5
   b91b8:	a80b      	add	r0, sp, #44	; 0x2c
   b91ba:	f000 fcc4 	bl	b9b46 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b91be:	a90b      	add	r1, sp, #44	; 0x2c
   b91c0:	a80f      	add	r0, sp, #60	; 0x3c
   b91c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b91c4:	f000 fcbf 	bl	b9b46 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b91c8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b91cc:	4299      	cmp	r1, r3
   b91ce:	da1b      	bge.n	b9208 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b91d0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b91d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b91d4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b91d8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b91dc:	4631      	mov	r1, r6
   b91de:	f106 0010 	add.w	r0, r6, #16
   b91e2:	f7ff fb23 	bl	b882c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b91e6:	b9ee      	cbnz	r6, b9224 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b91e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b91ea:	3301      	adds	r3, #1
   b91ec:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b91ee:	e011      	b.n	b9214 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b91f0:	a808      	add	r0, sp, #32
   b91f2:	f7ff fb45 	bl	b8880 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b91f6:	2800      	cmp	r0, #0
   b91f8:	d1d6      	bne.n	b91a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b91fa:	a808      	add	r0, sp, #32
   b91fc:	f7fe fb41 	bl	b7882 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9200:	4620      	mov	r0, r4
   b9202:	b015      	add	sp, #84	; 0x54
   b9204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9208:	3101      	adds	r1, #1
   b920a:	a808      	add	r0, sp, #32
   b920c:	f7ff fb38 	bl	b8880 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9210:	2800      	cmp	r0, #0
   b9212:	d1dd      	bne.n	b91d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b9214:	a80f      	add	r0, sp, #60	; 0x3c
   b9216:	f000 fc0d 	bl	b9a34 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b921a:	a80b      	add	r0, sp, #44	; 0x2c
   b921c:	f000 fc0a 	bl	b9a34 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b9220:	3514      	adds	r5, #20
   b9222:	e7c6      	b.n	b91b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b9224:	a90f      	add	r1, sp, #60	; 0x3c
   b9226:	4630      	mov	r0, r6
   b9228:	f000 fc8d 	bl	b9b46 <_ZN6StringC1EOS_>
   b922c:	e7dc      	b.n	b91e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b922e:	2600      	movs	r6, #0
   b9230:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b9234:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b9236:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b923a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b923e:	429e      	cmp	r6, r3
   b9240:	da7c      	bge.n	b933c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b9242:	0133      	lsls	r3, r6, #4
   b9244:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b9246:	9306      	str	r3, [sp, #24]
        if (!category) {
   b9248:	b90b      	cbnz	r3, b924e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b924a:	3601      	adds	r6, #1
   b924c:	e7f5      	b.n	b923a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b924e:	2300      	movs	r3, #0
   b9250:	9307      	str	r3, [sp, #28]
   b9252:	fb09 f306 	mul.w	r3, r9, r6
   b9256:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b9258:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b925a:	a907      	add	r1, sp, #28
   b925c:	a806      	add	r0, sp, #24
   b925e:	f7ff fb3c 	bl	b88da <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9262:	4682      	mov	sl, r0
   b9264:	2800      	cmp	r0, #0
   b9266:	d0f0      	beq.n	b924a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b9268:	f04f 0300 	mov.w	r3, #0
   b926c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9270:	4601      	mov	r1, r0
   b9272:	9a07      	ldr	r2, [sp, #28]
   b9274:	f10d 0317 	add.w	r3, sp, #23
   b9278:	4628      	mov	r0, r5
   b927a:	f7ff fba9 	bl	b89d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b927e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9282:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9284:	2f00      	cmp	r7, #0
   b9286:	d14a      	bne.n	b931e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b9288:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b928c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b9290:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b9294:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9298:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b929c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b92a0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b92a2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b92a6:	4293      	cmp	r3, r2
   b92a8:	db17      	blt.n	b92da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b92aa:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b92ae:	f1ba 0f00 	cmp.w	sl, #0
   b92b2:	dd30      	ble.n	b9316 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b92b4:	fb09 f00a 	mul.w	r0, r9, sl
   b92b8:	f7fe fa52 	bl	b7760 <malloc>
            if (!d) {
   b92bc:	4683      	mov	fp, r0
   b92be:	b360      	cbz	r0, b931a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b92c0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b92c4:	fb09 1202 	mla	r2, r9, r2, r1
   b92c8:	f7ff ff2c 	bl	b9124 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b92cc:	6828      	ldr	r0, [r5, #0]
   b92ce:	f7fe fa4f 	bl	b7770 <free>
        data_ = d;
   b92d2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b92d6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b92da:	682b      	ldr	r3, [r5, #0]
   b92dc:	9a01      	ldr	r2, [sp, #4]
   b92de:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b92e2:	686a      	ldr	r2, [r5, #4]
   b92e4:	4651      	mov	r1, sl
   b92e6:	fb09 3202 	mla	r2, r9, r2, r3
   b92ea:	f10a 0014 	add.w	r0, sl, #20
   b92ee:	f7ff ff19 	bl	b9124 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b92f2:	f1ba 0f00 	cmp.w	sl, #0
   b92f6:	d003      	beq.n	b9300 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b92f8:	a90f      	add	r1, sp, #60	; 0x3c
   b92fa:	4650      	mov	r0, sl
   b92fc:	f7ff fd5a 	bl	b8db4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b9300:	686b      	ldr	r3, [r5, #4]
   b9302:	3301      	adds	r3, #1
   b9304:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b9306:	a811      	add	r0, sp, #68	; 0x44
   b9308:	f7ff fd0c 	bl	b8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b930c:	b13f      	cbz	r7, b931e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b930e:	a80b      	add	r0, sp, #44	; 0x2c
   b9310:	f7ff fd08 	bl	b8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9314:	e771      	b.n	b91fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b9316:	46bb      	mov	fp, r7
   b9318:	e7d8      	b.n	b92cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b931a:	2701      	movs	r7, #1
   b931c:	e7f3      	b.n	b9306 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b931e:	9b01      	ldr	r3, [sp, #4]
   b9320:	682d      	ldr	r5, [r5, #0]
   b9322:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b9326:	9b06      	ldr	r3, [sp, #24]
   b9328:	781b      	ldrb	r3, [r3, #0]
   b932a:	b92b      	cbnz	r3, b9338 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b932c:	f8d8 3000 	ldr.w	r3, [r8]
   b9330:	9a02      	ldr	r2, [sp, #8]
   b9332:	4413      	add	r3, r2
   b9334:	7c1b      	ldrb	r3, [r3, #16]
   b9336:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b9338:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b933a:	e78e      	b.n	b925a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b933c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b933e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9340:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9342:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9344:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9346:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b9348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b934a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b934c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b934e:	60a2      	str	r2, [r4, #8]
   b9350:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b9352:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9354:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9356:	60e2      	str	r2, [r4, #12]
   b9358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b935a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b935c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b935e:	6122      	str	r2, [r4, #16]
   b9360:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b9362:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b9364:	9b03      	ldr	r3, [sp, #12]
   b9366:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b9368:	6162      	str	r2, [r4, #20]
   b936a:	7623      	strb	r3, [r4, #24]
   b936c:	e7cf      	b.n	b930e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b9370 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b9370:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9372:	4604      	mov	r4, r0
   b9374:	b087      	sub	sp, #28
   b9376:	460d      	mov	r5, r1
        filter_(level, filters) {
   b9378:	4626      	mov	r6, r4
        stream_(&stream) {
   b937a:	4619      	mov	r1, r3
   b937c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b937e:	4617      	mov	r7, r2
        stream_(&stream) {
   b9380:	f7fb fe10 	bl	b4fa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b9384:	4b0b      	ldr	r3, [pc, #44]	; (b93b4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b9386:	f846 3b04 	str.w	r3, [r6], #4
   b938a:	4669      	mov	r1, sp
   b938c:	a803      	add	r0, sp, #12
   b938e:	f7fb fe09 	bl	b4fa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b9392:	aa03      	add	r2, sp, #12
   b9394:	4639      	mov	r1, r7
   b9396:	4630      	mov	r0, r6
   b9398:	f7ff fef0 	bl	b917c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b939c:	a803      	add	r0, sp, #12
   b939e:	f7fb fdc0 	bl	b4f22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b93a2:	4668      	mov	r0, sp
   b93a4:	f7fb fdbd 	bl	b4f22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b93a8:	4b03      	ldr	r3, [pc, #12]	; (b93b8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b93aa:	6023      	str	r3, [r4, #0]
}
   b93ac:	4620      	mov	r0, r4
        stream_(&stream) {
   b93ae:	6225      	str	r5, [r4, #32]
}
   b93b0:	b007      	add	sp, #28
   b93b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b93b4:	000bdbe4 	.word	0x000bdbe4
   b93b8:	000be410 	.word	0x000be410

000b93bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b93bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b93be:	460f      	mov	r7, r1
   b93c0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b93c2:	491d      	ldr	r1, [pc, #116]	; (b9438 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b93c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b93c6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b93c8:	4616      	mov	r6, r2
   b93ca:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b93cc:	f7fb fcb6 	bl	b4d3c <strcmp>
   b93d0:	b9c0      	cbnz	r0, b9404 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b93d2:	b1a4      	cbz	r4, b93fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b93d4:	4629      	mov	r1, r5
   b93d6:	a801      	add	r0, sp, #4
   b93d8:	f7ff fcff 	bl	b8dda <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b93dc:	4917      	ldr	r1, [pc, #92]	; (b943c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b93de:	2024      	movs	r0, #36	; 0x24
   b93e0:	f002 fa9a 	bl	bb918 <_ZnwjRKSt9nothrow_t>
   b93e4:	4605      	mov	r5, r0
   b93e6:	b130      	cbz	r0, b93f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b93e8:	ab01      	add	r3, sp, #4
   b93ea:	4632      	mov	r2, r6
   b93ec:	4621      	mov	r1, r4
   b93ee:	f7ff ffbf 	bl	b9370 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b93f2:	4b13      	ldr	r3, [pc, #76]	; (b9440 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b93f4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b93f6:	a801      	add	r0, sp, #4
   b93f8:	f7fb fd93 	bl	b4f22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b93fc:	462c      	mov	r4, r5
}
   b93fe:	4620      	mov	r0, r4
   b9400:	b005      	add	sp, #20
   b9402:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b9404:	490f      	ldr	r1, [pc, #60]	; (b9444 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b9406:	4638      	mov	r0, r7
   b9408:	f7fb fc98 	bl	b4d3c <strcmp>
   b940c:	b990      	cbnz	r0, b9434 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b940e:	2c00      	cmp	r4, #0
   b9410:	d0f5      	beq.n	b93fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b9412:	4629      	mov	r1, r5
   b9414:	a801      	add	r0, sp, #4
   b9416:	f7ff fce0 	bl	b8dda <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b941a:	4908      	ldr	r1, [pc, #32]	; (b943c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b941c:	2024      	movs	r0, #36	; 0x24
   b941e:	f002 fa7b 	bl	bb918 <_ZnwjRKSt9nothrow_t>
   b9422:	4605      	mov	r5, r0
   b9424:	2800      	cmp	r0, #0
   b9426:	d0e6      	beq.n	b93f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b9428:	ab01      	add	r3, sp, #4
   b942a:	4632      	mov	r2, r6
   b942c:	4621      	mov	r1, r4
   b942e:	f7ff ff9f 	bl	b9370 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9432:	e7e0      	b.n	b93f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b9434:	2400      	movs	r4, #0
   b9436:	e7e2      	b.n	b93fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b9438:	000be394 	.word	0x000be394
   b943c:	000be5b4 	.word	0x000be5b4
   b9440:	000be428 	.word	0x000be428
   b9444:	000be398 	.word	0x000be398

000b9448 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b9448:	4b01      	ldr	r3, [pc, #4]	; (b9450 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b944a:	4a02      	ldr	r2, [pc, #8]	; (b9454 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b944c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b944e:	4770      	bx	lr
   b9450:	2003e6cc 	.word	0x2003e6cc
   b9454:	000be3a9 	.word	0x000be3a9

000b9458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b945c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b945e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9462:	4604      	mov	r4, r0
   b9464:	460e      	mov	r6, r1
   b9466:	4617      	mov	r7, r2
   b9468:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b946a:	f000 fd11 	bl	b9e90 <_Z16_fetch_usbserialv>
   b946e:	4581      	cmp	r9, r0
   b9470:	d04c      	beq.n	b950c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b9472:	792b      	ldrb	r3, [r5, #4]
   b9474:	0719      	lsls	r1, r3, #28
   b9476:	d504      	bpl.n	b9482 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b9478:	696a      	ldr	r2, [r5, #20]
   b947a:	4954      	ldr	r1, [pc, #336]	; (b95cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b947c:	4620      	mov	r0, r4
   b947e:	f7ff fb0c 	bl	b8a9a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b9482:	f1b8 0f00 	cmp.w	r8, #0
   b9486:	d00d      	beq.n	b94a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b9488:	215b      	movs	r1, #91	; 0x5b
   b948a:	4620      	mov	r0, r4
   b948c:	f7ff fa94 	bl	b89b8 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b9490:	4641      	mov	r1, r8
   b9492:	4620      	mov	r0, r4
   b9494:	f7ff fa81 	bl	b899a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b9498:	6823      	ldr	r3, [r4, #0]
   b949a:	494d      	ldr	r1, [pc, #308]	; (b95d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b949c:	68db      	ldr	r3, [r3, #12]
   b949e:	2202      	movs	r2, #2
   b94a0:	4620      	mov	r0, r4
   b94a2:	4798      	blx	r3
    if (attr.has_file) {
   b94a4:	792b      	ldrb	r3, [r5, #4]
   b94a6:	07da      	lsls	r2, r3, #31
   b94a8:	d523      	bpl.n	b94f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b94aa:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b94ae:	212f      	movs	r1, #47	; 0x2f
   b94b0:	4640      	mov	r0, r8
   b94b2:	f002 fbba 	bl	bbc2a <strrchr>
    if (s1) {
   b94b6:	b108      	cbz	r0, b94bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b94b8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b94bc:	4641      	mov	r1, r8
   b94be:	4620      	mov	r0, r4
   b94c0:	f7ff fa6b 	bl	b899a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b94c4:	792b      	ldrb	r3, [r5, #4]
   b94c6:	079b      	lsls	r3, r3, #30
   b94c8:	d508      	bpl.n	b94dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b94ca:	213a      	movs	r1, #58	; 0x3a
   b94cc:	4620      	mov	r0, r4
   b94ce:	f7ff fa73 	bl	b89b8 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b94d2:	68ea      	ldr	r2, [r5, #12]
   b94d4:	493f      	ldr	r1, [pc, #252]	; (b95d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b94d6:	4620      	mov	r0, r4
   b94d8:	f7ff fadf 	bl	b8a9a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b94dc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b94de:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b94e0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b94e4:	68db      	ldr	r3, [r3, #12]
   b94e6:	bf14      	ite	ne
   b94e8:	493b      	ldrne	r1, [pc, #236]	; (b95d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b94ea:	493c      	ldreq	r1, [pc, #240]	; (b95dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b94ec:	2202      	movs	r2, #2
            write(": ", 2);
   b94ee:	4620      	mov	r0, r4
   b94f0:	4798      	blx	r3
    if (attr.has_function) {
   b94f2:	792b      	ldrb	r3, [r5, #4]
   b94f4:	0758      	lsls	r0, r3, #29
   b94f6:	d51d      	bpl.n	b9534 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b94f8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b94fa:	460b      	mov	r3, r1
   b94fc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b94fe:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9502:	b160      	cbz	r0, b951e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b9504:	2820      	cmp	r0, #32
   b9506:	d108      	bne.n	b951a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b9508:	4619      	mov	r1, r3
   b950a:	e7f7      	b.n	b94fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b950c:	4834      	ldr	r0, [pc, #208]	; (b95e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b950e:	f000 f982 	bl	b9816 <_ZN5spark12NetworkClass9listeningEv>
   b9512:	2800      	cmp	r0, #0
   b9514:	d0ad      	beq.n	b9472 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b9516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b951a:	2828      	cmp	r0, #40	; 0x28
   b951c:	d1ee      	bne.n	b94fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b951e:	6823      	ldr	r3, [r4, #0]
   b9520:	1a52      	subs	r2, r2, r1
   b9522:	68db      	ldr	r3, [r3, #12]
   b9524:	4620      	mov	r0, r4
   b9526:	4798      	blx	r3
        write("(): ", 4);
   b9528:	6823      	ldr	r3, [r4, #0]
   b952a:	492e      	ldr	r1, [pc, #184]	; (b95e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b952c:	68db      	ldr	r3, [r3, #12]
   b952e:	2204      	movs	r2, #4
   b9530:	4620      	mov	r0, r4
   b9532:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b9534:	2100      	movs	r1, #0
   b9536:	4638      	mov	r0, r7
   b9538:	f7fd ffca 	bl	b74d0 <log_level_name>
   b953c:	4601      	mov	r1, r0
    write(s);
   b953e:	4620      	mov	r0, r4
   b9540:	f7ff fa2b 	bl	b899a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b9544:	6823      	ldr	r3, [r4, #0]
   b9546:	4925      	ldr	r1, [pc, #148]	; (b95dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b9548:	68db      	ldr	r3, [r3, #12]
   b954a:	2202      	movs	r2, #2
   b954c:	4620      	mov	r0, r4
   b954e:	4798      	blx	r3
    if (msg) {
   b9550:	b11e      	cbz	r6, b955a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b9552:	4631      	mov	r1, r6
   b9554:	4620      	mov	r0, r4
   b9556:	f7ff fa20 	bl	b899a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b955a:	792b      	ldrb	r3, [r5, #4]
   b955c:	f013 0f30 	tst.w	r3, #48	; 0x30
   b9560:	d02c      	beq.n	b95bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b9562:	6823      	ldr	r3, [r4, #0]
   b9564:	4920      	ldr	r1, [pc, #128]	; (b95e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b9566:	68db      	ldr	r3, [r3, #12]
   b9568:	2202      	movs	r2, #2
   b956a:	4620      	mov	r0, r4
   b956c:	4798      	blx	r3
        if (attr.has_code) {
   b956e:	792b      	ldrb	r3, [r5, #4]
   b9570:	06d9      	lsls	r1, r3, #27
   b9572:	d50a      	bpl.n	b958a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b9574:	6823      	ldr	r3, [r4, #0]
   b9576:	491d      	ldr	r1, [pc, #116]	; (b95ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b9578:	68db      	ldr	r3, [r3, #12]
   b957a:	2207      	movs	r2, #7
   b957c:	4620      	mov	r0, r4
   b957e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b9580:	69aa      	ldr	r2, [r5, #24]
   b9582:	491b      	ldr	r1, [pc, #108]	; (b95f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b9584:	4620      	mov	r0, r4
   b9586:	f7ff fa88 	bl	b8a9a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b958a:	792b      	ldrb	r3, [r5, #4]
   b958c:	069a      	lsls	r2, r3, #26
   b958e:	d511      	bpl.n	b95b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b9590:	06db      	lsls	r3, r3, #27
   b9592:	d505      	bpl.n	b95a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b9594:	6823      	ldr	r3, [r4, #0]
   b9596:	4910      	ldr	r1, [pc, #64]	; (b95d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b9598:	68db      	ldr	r3, [r3, #12]
   b959a:	2202      	movs	r2, #2
   b959c:	4620      	mov	r0, r4
   b959e:	4798      	blx	r3
            write("details = ", 10);
   b95a0:	6823      	ldr	r3, [r4, #0]
   b95a2:	4914      	ldr	r1, [pc, #80]	; (b95f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b95a4:	68db      	ldr	r3, [r3, #12]
   b95a6:	4620      	mov	r0, r4
   b95a8:	220a      	movs	r2, #10
   b95aa:	4798      	blx	r3
            write(attr.details);
   b95ac:	69e9      	ldr	r1, [r5, #28]
   b95ae:	4620      	mov	r0, r4
   b95b0:	f7ff f9f3 	bl	b899a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b95b4:	215d      	movs	r1, #93	; 0x5d
   b95b6:	4620      	mov	r0, r4
   b95b8:	f7ff f9fe 	bl	b89b8 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b95bc:	6823      	ldr	r3, [r4, #0]
   b95be:	490e      	ldr	r1, [pc, #56]	; (b95f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b95c0:	68db      	ldr	r3, [r3, #12]
   b95c2:	4620      	mov	r0, r4
   b95c4:	2202      	movs	r2, #2
}
   b95c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b95ca:	4718      	bx	r3
   b95cc:	000be3ad 	.word	0x000be3ad
   b95d0:	000be3b4 	.word	0x000be3b4
   b95d4:	000be1e5 	.word	0x000be1e5
   b95d8:	000be3b7 	.word	0x000be3b7
   b95dc:	000be3bc 	.word	0x000be3bc
   b95e0:	2003e6f8 	.word	0x2003e6f8
   b95e4:	000be3ba 	.word	0x000be3ba
   b95e8:	000be3bf 	.word	0x000be3bf
   b95ec:	000be3c2 	.word	0x000be3c2
   b95f0:	000be3ca 	.word	0x000be3ca
   b95f4:	000be3cd 	.word	0x000be3cd
   b95f8:	000be3d8 	.word	0x000be3d8

000b95fc <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b95fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9600:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b9602:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b9604:	460d      	mov	r5, r1
   b9606:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b9608:	f000 fc42 	bl	b9e90 <_Z16_fetch_usbserialv>
   b960c:	4287      	cmp	r7, r0
   b960e:	d007      	beq.n	b9620 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b9610:	6a20      	ldr	r0, [r4, #32]
   b9612:	6803      	ldr	r3, [r0, #0]
   b9614:	4632      	mov	r2, r6
   b9616:	4629      	mov	r1, r5
   b9618:	68db      	ldr	r3, [r3, #12]
}
   b961a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b961e:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b9620:	4803      	ldr	r0, [pc, #12]	; (b9630 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b9622:	f000 f8f8 	bl	b9816 <_ZN5spark12NetworkClass9listeningEv>
   b9626:	2800      	cmp	r0, #0
   b9628:	d0f2      	beq.n	b9610 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b962a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b962e:	bf00      	nop
   b9630:	2003e6f8 	.word	0x2003e6f8

000b9634 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9638:	b085      	sub	sp, #20
    return stream_;
   b963a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b963e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b9640:	4605      	mov	r5, r0
   b9642:	460f      	mov	r7, r1
   b9644:	4690      	mov	r8, r2
   b9646:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b9648:	f000 fc22 	bl	b9e90 <_Z16_fetch_usbserialv>
   b964c:	4581      	cmp	r9, r0
   b964e:	d105      	bne.n	b965c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b9650:	4849      	ldr	r0, [pc, #292]	; (b9778 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b9652:	f000 f8e0 	bl	b9816 <_ZN5spark12NetworkClass9listeningEv>
   b9656:	2800      	cmp	r0, #0
   b9658:	f040 808a 	bne.w	b9770 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b965c:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
   b965e:	4a47      	ldr	r2, [pc, #284]	; (b977c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b9660:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
   b9662:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b9666:	4668      	mov	r0, sp
        bytesWritten_(0) {
   b9668:	e9cd 3902 	strd	r3, r9, [sp, #8]
        state_(BEGIN) {
   b966c:	f88d 9004 	strb.w	r9, [sp, #4]
   b9670:	f7fe fcec 	bl	b804c <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b9674:	4649      	mov	r1, r9
   b9676:	4640      	mov	r0, r8
   b9678:	f7fd ff2a 	bl	b74d0 <log_level_name>
    json.name("l", 1).value(s);
   b967c:	4940      	ldr	r1, [pc, #256]	; (b9780 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b967e:	4680      	mov	r8, r0
   b9680:	2201      	movs	r2, #1
   b9682:	4668      	mov	r0, sp
   b9684:	f7fe fd70 	bl	b8168 <_ZN5spark10JSONWriter4nameEPKcj>
   b9688:	4641      	mov	r1, r8
   b968a:	f7ff f978 	bl	b897e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b968e:	b13f      	cbz	r7, b96a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
   b9690:	493c      	ldr	r1, [pc, #240]	; (b9784 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b9692:	2201      	movs	r2, #1
   b9694:	4668      	mov	r0, sp
   b9696:	f7fe fd67 	bl	b8168 <_ZN5spark10JSONWriter4nameEPKcj>
   b969a:	4639      	mov	r1, r7
   b969c:	f7ff f96f 	bl	b897e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b96a0:	b13e      	cbz	r6, b96b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
   b96a2:	4939      	ldr	r1, [pc, #228]	; (b9788 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b96a4:	2201      	movs	r2, #1
   b96a6:	4668      	mov	r0, sp
   b96a8:	f7fe fd5e 	bl	b8168 <_ZN5spark10JSONWriter4nameEPKcj>
   b96ac:	4631      	mov	r1, r6
   b96ae:	f7ff f966 	bl	b897e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b96b2:	7923      	ldrb	r3, [r4, #4]
   b96b4:	07df      	lsls	r7, r3, #31
   b96b6:	d50e      	bpl.n	b96d6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
   b96b8:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b96ba:	212f      	movs	r1, #47	; 0x2f
   b96bc:	4630      	mov	r0, r6
   b96be:	f002 fab4 	bl	bbc2a <strrchr>
    if (s1) {
   b96c2:	b100      	cbz	r0, b96c6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
   b96c4:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b96c6:	4931      	ldr	r1, [pc, #196]	; (b978c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b96c8:	2201      	movs	r2, #1
   b96ca:	4668      	mov	r0, sp
   b96cc:	f7fe fd4c 	bl	b8168 <_ZN5spark10JSONWriter4nameEPKcj>
   b96d0:	4631      	mov	r1, r6
   b96d2:	f7ff f954 	bl	b897e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b96d6:	7923      	ldrb	r3, [r4, #4]
   b96d8:	079e      	lsls	r6, r3, #30
   b96da:	d507      	bpl.n	b96ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
   b96dc:	492c      	ldr	r1, [pc, #176]	; (b9790 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b96de:	2202      	movs	r2, #2
   b96e0:	4668      	mov	r0, sp
   b96e2:	f7fe fd41 	bl	b8168 <_ZN5spark10JSONWriter4nameEPKcj>
   b96e6:	68e1      	ldr	r1, [r4, #12]
   b96e8:	f7fe fcbc 	bl	b8064 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b96ec:	7923      	ldrb	r3, [r4, #4]
   b96ee:	0758      	lsls	r0, r3, #29
   b96f0:	d514      	bpl.n	b971c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b96f2:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b96f4:	4633      	mov	r3, r6
   b96f6:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b96f8:	f813 2b01 	ldrb.w	r2, [r3], #1
   b96fc:	b12a      	cbz	r2, b970a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
   b96fe:	2a20      	cmp	r2, #32
   b9700:	d101      	bne.n	b9706 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
   b9702:	461e      	mov	r6, r3
   b9704:	e7f7      	b.n	b96f6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
   b9706:	2a28      	cmp	r2, #40	; 0x28
   b9708:	d1f5      	bne.n	b96f6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
   b970a:	4922      	ldr	r1, [pc, #136]	; (b9794 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b970c:	2202      	movs	r2, #2
   b970e:	4668      	mov	r0, sp
   b9710:	f7fe fd2a 	bl	b8168 <_ZN5spark10JSONWriter4nameEPKcj>
   b9714:	1bba      	subs	r2, r7, r6
   b9716:	4631      	mov	r1, r6
   b9718:	f7fe fd36 	bl	b8188 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b971c:	7923      	ldrb	r3, [r4, #4]
   b971e:	0719      	lsls	r1, r3, #28
   b9720:	d507      	bpl.n	b9732 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
   b9722:	491d      	ldr	r1, [pc, #116]	; (b9798 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b9724:	2201      	movs	r2, #1
   b9726:	4668      	mov	r0, sp
   b9728:	f7fe fd1e 	bl	b8168 <_ZN5spark10JSONWriter4nameEPKcj>
   b972c:	6961      	ldr	r1, [r4, #20]
   b972e:	f7fe fcab 	bl	b8088 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b9732:	7923      	ldrb	r3, [r4, #4]
   b9734:	06da      	lsls	r2, r3, #27
   b9736:	d507      	bpl.n	b9748 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b9738:	4918      	ldr	r1, [pc, #96]	; (b979c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b973a:	2204      	movs	r2, #4
   b973c:	4668      	mov	r0, sp
   b973e:	f7fe fd13 	bl	b8168 <_ZN5spark10JSONWriter4nameEPKcj>
   b9742:	69a1      	ldr	r1, [r4, #24]
   b9744:	f7fe fc8e 	bl	b8064 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b9748:	7923      	ldrb	r3, [r4, #4]
   b974a:	069b      	lsls	r3, r3, #26
   b974c:	d507      	bpl.n	b975e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b974e:	4914      	ldr	r1, [pc, #80]	; (b97a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b9750:	2206      	movs	r2, #6
   b9752:	4668      	mov	r0, sp
   b9754:	f7fe fd08 	bl	b8168 <_ZN5spark10JSONWriter4nameEPKcj>
   b9758:	69e1      	ldr	r1, [r4, #28]
   b975a:	f7ff f910 	bl	b897e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b975e:	4668      	mov	r0, sp
   b9760:	f7fe fc5e 	bl	b8020 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b9764:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b9766:	490f      	ldr	r1, [pc, #60]	; (b97a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b9768:	6803      	ldr	r3, [r0, #0]
   b976a:	2202      	movs	r2, #2
   b976c:	68db      	ldr	r3, [r3, #12]
   b976e:	4798      	blx	r3
}
   b9770:	b005      	add	sp, #20
   b9772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9776:	bf00      	nop
   b9778:	2003e6f8 	.word	0x2003e6f8
   b977c:	000be3f8 	.word	0x000be3f8
   b9780:	000be38a 	.word	0x000be38a
   b9784:	000be3db 	.word	0x000be3db
   b9788:	000be86a 	.word	0x000be86a
   b978c:	000be626 	.word	0x000be626
   b9790:	000be3dd 	.word	0x000be3dd
   b9794:	000be3e0 	.word	0x000be3e0
   b9798:	000bdcc1 	.word	0x000bdcc1
   b979c:	000be3e3 	.word	0x000be3e3
   b97a0:	000be3e8 	.word	0x000be3e8
   b97a4:	000be3d8 	.word	0x000be3d8

000b97a8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b97a8:	2300      	movs	r3, #0
   b97aa:	6840      	ldr	r0, [r0, #4]
   b97ac:	461a      	mov	r2, r3
   b97ae:	f7fd bf67 	b.w	b7680 <network_connect>

000b97b2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b97b2:	6840      	ldr	r0, [r0, #4]
   b97b4:	2200      	movs	r2, #0
   b97b6:	2102      	movs	r1, #2
   b97b8:	f7fd bf72 	b.w	b76a0 <network_disconnect>

000b97bc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b97bc:	2200      	movs	r2, #0
   b97be:	6840      	ldr	r0, [r0, #4]
   b97c0:	4611      	mov	r1, r2
   b97c2:	f7fd bf65 	b.w	b7690 <network_connecting>

000b97c6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b97c6:	2200      	movs	r2, #0
   b97c8:	6840      	ldr	r0, [r0, #4]
   b97ca:	4611      	mov	r1, r2
   b97cc:	f7fd bf70 	b.w	b76b0 <network_ready>

000b97d0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b97d0:	2300      	movs	r3, #0
   b97d2:	6840      	ldr	r0, [r0, #4]
   b97d4:	461a      	mov	r2, r3
   b97d6:	4619      	mov	r1, r3
   b97d8:	f7fd bf72 	b.w	b76c0 <network_on>

000b97dc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b97dc:	2300      	movs	r3, #0
   b97de:	6840      	ldr	r0, [r0, #4]
   b97e0:	461a      	mov	r2, r3
   b97e2:	4619      	mov	r1, r3
   b97e4:	f7fd bf74 	b.w	b76d0 <network_off>

000b97e8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b97e8:	6840      	ldr	r0, [r0, #4]
   b97ea:	2100      	movs	r1, #0
   b97ec:	f7fd bf98 	b.w	b7720 <network_is_on>

000b97f0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b97f0:	6840      	ldr	r0, [r0, #4]
   b97f2:	2100      	movs	r1, #0
   b97f4:	f7fd bf9c 	b.w	b7730 <network_is_off>

000b97f8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b97f8:	6840      	ldr	r0, [r0, #4]
   b97fa:	2200      	movs	r2, #0
   b97fc:	f081 0101 	eor.w	r1, r1, #1
   b9800:	f7fd bf6e 	b.w	b76e0 <network_listen>

000b9804 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9804:	6840      	ldr	r0, [r0, #4]
   b9806:	2200      	movs	r2, #0
   b9808:	f7fd bf7a 	b.w	b7700 <network_set_listen_timeout>

000b980c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b980c:	2200      	movs	r2, #0
   b980e:	6840      	ldr	r0, [r0, #4]
   b9810:	4611      	mov	r1, r2
   b9812:	f7fd bf7d 	b.w	b7710 <network_get_listen_timeout>

000b9816 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9816:	2200      	movs	r2, #0
   b9818:	6840      	ldr	r0, [r0, #4]
   b981a:	4611      	mov	r1, r2
   b981c:	f7fd bf68 	b.w	b76f0 <network_listening>

000b9820 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b9820:	6840      	ldr	r0, [r0, #4]
   b9822:	2100      	movs	r1, #0
   b9824:	f7fd bf94 	b.w	b7750 <network_is_preferred>

000b9828 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b982c:	b095      	sub	sp, #84	; 0x54
   b982e:	4614      	mov	r4, r2
   b9830:	460d      	mov	r5, r1
   b9832:	4607      	mov	r7, r0
    IPAddress addr;
   b9834:	f7fe f934 	bl	b7aa0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9838:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b983a:	221c      	movs	r2, #28
   b983c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b983e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9840:	f002 f98a 	bl	bbb58 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9844:	2340      	movs	r3, #64	; 0x40
   b9846:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9848:	4620      	mov	r0, r4
   b984a:	466b      	mov	r3, sp
   b984c:	aa0c      	add	r2, sp, #48	; 0x30
   b984e:	2100      	movs	r1, #0
   b9850:	f7fd fd86 	bl	b7360 <netdb_getaddrinfo>
    if (!r) {
   b9854:	4604      	mov	r4, r0
   b9856:	2800      	cmp	r0, #0
   b9858:	d14b      	bne.n	b98f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b985a:	4602      	mov	r2, r0
   b985c:	2101      	movs	r1, #1
   b985e:	6868      	ldr	r0, [r5, #4]
   b9860:	f7fd ff26 	bl	b76b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9864:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9866:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9868:	4622      	mov	r2, r4
   b986a:	6868      	ldr	r0, [r5, #4]
   b986c:	f7fd ff20 	bl	b76b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9870:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9872:	4681      	mov	r9, r0
        bool ok = false;
   b9874:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9876:	2e00      	cmp	r6, #0
   b9878:	d03b      	beq.n	b98f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b987a:	2900      	cmp	r1, #0
   b987c:	d139      	bne.n	b98f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b987e:	6873      	ldr	r3, [r6, #4]
   b9880:	2b02      	cmp	r3, #2
   b9882:	d003      	beq.n	b988c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9884:	2b0a      	cmp	r3, #10
   b9886:	d011      	beq.n	b98ac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9888:	69f6      	ldr	r6, [r6, #28]
   b988a:	e7f4      	b.n	b9876 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b988c:	f1b8 0f00 	cmp.w	r8, #0
   b9890:	d0fa      	beq.n	b9888 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9892:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9894:	a806      	add	r0, sp, #24
   b9896:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9898:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b989a:	f7fe f92f 	bl	b7afc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b989e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b98a0:	1d3c      	adds	r4, r7, #4
   b98a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b98a4:	682b      	ldr	r3, [r5, #0]
   b98a6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b98a8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b98aa:	e7ed      	b.n	b9888 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b98ac:	f1b9 0f00 	cmp.w	r9, #0
   b98b0:	d0ea      	beq.n	b9888 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b98b2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b98b4:	2210      	movs	r2, #16
   b98b6:	a801      	add	r0, sp, #4
   b98b8:	f002 f94e 	bl	bbb58 <memset>
                    a.v = 6;
   b98bc:	2306      	movs	r3, #6
   b98be:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b98c2:	ad01      	add	r5, sp, #4
   b98c4:	f104 0308 	add.w	r3, r4, #8
   b98c8:	3418      	adds	r4, #24
   b98ca:	6818      	ldr	r0, [r3, #0]
   b98cc:	6859      	ldr	r1, [r3, #4]
   b98ce:	462a      	mov	r2, r5
   b98d0:	c203      	stmia	r2!, {r0, r1}
   b98d2:	3308      	adds	r3, #8
   b98d4:	42a3      	cmp	r3, r4
   b98d6:	4615      	mov	r5, r2
   b98d8:	d1f7      	bne.n	b98ca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b98da:	a901      	add	r1, sp, #4
   b98dc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b98de:	ad07      	add	r5, sp, #28
   b98e0:	f7fe f8ec 	bl	b7abc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b98e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b98e6:	1d3c      	adds	r4, r7, #4
   b98e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b98ea:	682b      	ldr	r3, [r5, #0]
   b98ec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b98ee:	4649      	mov	r1, r9
   b98f0:	e7ca      	b.n	b9888 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b98f2:	9800      	ldr	r0, [sp, #0]
   b98f4:	f7fd fd2c 	bl	b7350 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b98f8:	4638      	mov	r0, r7
   b98fa:	b015      	add	sp, #84	; 0x54
   b98fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9900 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b9900:	3803      	subs	r0, #3
   b9902:	2803      	cmp	r0, #3
   b9904:	bf9a      	itte	ls
   b9906:	4b02      	ldrls	r3, [pc, #8]	; (b9910 <_ZN5spark12NetworkClass4fromEm+0x10>)
   b9908:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b990c:	4801      	ldrhi	r0, [pc, #4]	; (b9914 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b990e:	4770      	bx	lr
   b9910:	000be468 	.word	0x000be468
   b9914:	2003e6f8 	.word	0x2003e6f8

000b9918 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b9918:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b991a:	2200      	movs	r2, #0
   b991c:	6840      	ldr	r0, [r0, #4]
   b991e:	f7fd ff0f 	bl	b7740 <network_prefer>
}
   b9922:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b9926:	f7ff bfeb 	b.w	b9900 <_ZN5spark12NetworkClass4fromEm>
	...

000b992c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b992c:	4b02      	ldr	r3, [pc, #8]	; (b9938 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b992e:	4a03      	ldr	r2, [pc, #12]	; (b993c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9930:	601a      	str	r2, [r3, #0]
   b9932:	2200      	movs	r2, #0
   b9934:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b9936:	4770      	bx	lr
   b9938:	2003e6f8 	.word	0x2003e6f8
   b993c:	000be480 	.word	0x000be480

000b9940 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9942:	4606      	mov	r6, r0
   b9944:	460d      	mov	r5, r1
  size_t n = 0;
   b9946:	188f      	adds	r7, r1, r2
   b9948:	2400      	movs	r4, #0
  while (size--) {
   b994a:	42bd      	cmp	r5, r7
   b994c:	d00c      	beq.n	b9968 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b994e:	6833      	ldr	r3, [r6, #0]
   b9950:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9954:	689b      	ldr	r3, [r3, #8]
   b9956:	4630      	mov	r0, r6
   b9958:	4798      	blx	r3
     if (chunk>=0)
   b995a:	1e03      	subs	r3, r0, #0
   b995c:	db01      	blt.n	b9962 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b995e:	441c      	add	r4, r3
  while (size--) {
   b9960:	e7f3      	b.n	b994a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b9962:	2c00      	cmp	r4, #0
   b9964:	bf08      	it	eq
   b9966:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b9968:	4620      	mov	r0, r4
   b996a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b996c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b996c:	b513      	push	{r0, r1, r4, lr}
   b996e:	4604      	mov	r4, r0
    }
   b9970:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b9972:	b159      	cbz	r1, b998c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b9974:	9101      	str	r1, [sp, #4]
   b9976:	f7fb f9eb 	bl	b4d50 <strlen>
   b997a:	6823      	ldr	r3, [r4, #0]
   b997c:	9901      	ldr	r1, [sp, #4]
   b997e:	68db      	ldr	r3, [r3, #12]
   b9980:	4602      	mov	r2, r0
   b9982:	4620      	mov	r0, r4
    }
   b9984:	b002      	add	sp, #8
   b9986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b998a:	4718      	bx	r3
    }
   b998c:	b002      	add	sp, #8
   b998e:	bd10      	pop	{r4, pc}

000b9990 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b9990:	6803      	ldr	r3, [r0, #0]
   b9992:	689b      	ldr	r3, [r3, #8]
   b9994:	4718      	bx	r3

000b9996 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9996:	b530      	push	{r4, r5, lr}
   b9998:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b999a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b999c:	2a01      	cmp	r2, #1
  *str = '\0';
   b999e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b99a2:	bf98      	it	ls
   b99a4:	220a      	movls	r2, #10
   b99a6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b99a8:	460d      	mov	r5, r1
   b99aa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b99ae:	fb01 5312 	mls	r3, r1, r2, r5
   b99b2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b99b6:	2b09      	cmp	r3, #9
   b99b8:	bf94      	ite	ls
   b99ba:	3330      	addls	r3, #48	; 0x30
   b99bc:	3337      	addhi	r3, #55	; 0x37
   b99be:	b2db      	uxtb	r3, r3
  } while(n);
   b99c0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b99c2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b99c6:	d9ef      	bls.n	b99a8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b99c8:	4621      	mov	r1, r4
   b99ca:	f7ff ffcf 	bl	b996c <_ZN5Print5writeEPKc>
}
   b99ce:	b00b      	add	sp, #44	; 0x2c
   b99d0:	bd30      	pop	{r4, r5, pc}
	...

000b99d4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b99d4:	4b01      	ldr	r3, [pc, #4]	; (b99dc <_GLOBAL__sub_I_RGB+0x8>)
   b99d6:	2200      	movs	r2, #0
   b99d8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b99da:	4770      	bx	lr
   b99dc:	2003e700 	.word	0x2003e700

000b99e0 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b99e0:	b510      	push	{r4, lr}
   b99e2:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b99e4:	f7fd fc9c 	bl	b7320 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b99e8:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b99ea:	6823      	ldr	r3, [r4, #0]
   b99ec:	4620      	mov	r0, r4
   b99ee:	695b      	ldr	r3, [r3, #20]
   b99f0:	4798      	blx	r3
    if (c >= 0) return c;
   b99f2:	2800      	cmp	r0, #0
   b99f4:	da08      	bge.n	b9a08 <_ZN6Stream9timedReadEv+0x28>
   b99f6:	f7fd fc93 	bl	b7320 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b99fa:	68e3      	ldr	r3, [r4, #12]
   b99fc:	1ac0      	subs	r0, r0, r3
   b99fe:	68a3      	ldr	r3, [r4, #8]
   b9a00:	4298      	cmp	r0, r3
   b9a02:	d3f2      	bcc.n	b99ea <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b9a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b9a08:	bd10      	pop	{r4, pc}

000b9a0a <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b9a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9a0e:	4607      	mov	r7, r0
   b9a10:	460c      	mov	r4, r1
   b9a12:	188e      	adds	r6, r1, r2
   b9a14:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b9a16:	42b5      	cmp	r5, r6
   b9a18:	eba5 0804 	sub.w	r8, r5, r4
   b9a1c:	d007      	beq.n	b9a2e <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b9a1e:	4638      	mov	r0, r7
   b9a20:	f7ff ffde 	bl	b99e0 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b9a24:	1e03      	subs	r3, r0, #0
   b9a26:	db02      	blt.n	b9a2e <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b9a28:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b9a2c:	e7f3      	b.n	b9a16 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b9a2e:	4640      	mov	r0, r8
   b9a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9a34 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b9a34:	b510      	push	{r4, lr}
   b9a36:	4604      	mov	r4, r0
{
    free(buffer);
   b9a38:	6800      	ldr	r0, [r0, #0]
   b9a3a:	f7fd fe99 	bl	b7770 <free>
}
   b9a3e:	4620      	mov	r0, r4
   b9a40:	bd10      	pop	{r4, pc}

000b9a42 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b9a42:	b510      	push	{r4, lr}
   b9a44:	4604      	mov	r4, r0
    if (buffer) {
   b9a46:	6800      	ldr	r0, [r0, #0]
   b9a48:	b108      	cbz	r0, b9a4e <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b9a4a:	f7fd fe91 	bl	b7770 <free>
    }
    buffer = nullptr;
   b9a4e:	2300      	movs	r3, #0
    capacity_ = len = 0;
   b9a50:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b9a54:	6023      	str	r3, [r4, #0]
}
   b9a56:	bd10      	pop	{r4, pc}

000b9a58 <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b9a58:	b538      	push	{r3, r4, r5, lr}
   b9a5a:	4604      	mov	r4, r0
   b9a5c:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b9a5e:	6800      	ldr	r0, [r0, #0]
   b9a60:	3101      	adds	r1, #1
   b9a62:	f7fd fe8d 	bl	b7780 <realloc>
    if (newbuffer) {
   b9a66:	b110      	cbz	r0, b9a6e <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
   b9a68:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b9a6c:	2001      	movs	r0, #1
    }
    return 0;
}
   b9a6e:	bd38      	pop	{r3, r4, r5, pc}

000b9a70 <_ZN6String7reserveEj>:
{
   b9a70:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
   b9a72:	6803      	ldr	r3, [r0, #0]
{
   b9a74:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
   b9a76:	b123      	cbz	r3, b9a82 <_ZN6String7reserveEj+0x12>
   b9a78:	6843      	ldr	r3, [r0, #4]
   b9a7a:	428b      	cmp	r3, r1
   b9a7c:	d301      	bcc.n	b9a82 <_ZN6String7reserveEj+0x12>
   b9a7e:	2001      	movs	r0, #1
}
   b9a80:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b9a82:	4620      	mov	r0, r4
   b9a84:	f7ff ffe8 	bl	b9a58 <_ZN6String12changeBufferEj>
   b9a88:	2800      	cmp	r0, #0
   b9a8a:	d0f9      	beq.n	b9a80 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b9a8c:	68a3      	ldr	r3, [r4, #8]
   b9a8e:	2b00      	cmp	r3, #0
   b9a90:	d1f5      	bne.n	b9a7e <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b9a92:	6822      	ldr	r2, [r4, #0]
   b9a94:	7013      	strb	r3, [r2, #0]
   b9a96:	e7f2      	b.n	b9a7e <_ZN6String7reserveEj+0xe>

000b9a98 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b9a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9a9a:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b9a9c:	4611      	mov	r1, r2
   b9a9e:	9201      	str	r2, [sp, #4]
{
   b9aa0:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b9aa2:	f7ff ffe5 	bl	b9a70 <_ZN6String7reserveEj>
   b9aa6:	9a01      	ldr	r2, [sp, #4]
   b9aa8:	b928      	cbnz	r0, b9ab6 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b9aaa:	4620      	mov	r0, r4
   b9aac:	f7ff ffc9 	bl	b9a42 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b9ab0:	4620      	mov	r0, r4
   b9ab2:	b003      	add	sp, #12
   b9ab4:	bd30      	pop	{r4, r5, pc}
    len = length;
   b9ab6:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b9ab8:	4629      	mov	r1, r5
   b9aba:	6820      	ldr	r0, [r4, #0]
   b9abc:	f002 f824 	bl	bbb08 <memcpy>
    buffer[len] = 0;
   b9ac0:	6822      	ldr	r2, [r4, #0]
   b9ac2:	68a3      	ldr	r3, [r4, #8]
   b9ac4:	2100      	movs	r1, #0
   b9ac6:	54d1      	strb	r1, [r2, r3]
    return *this;
   b9ac8:	e7f2      	b.n	b9ab0 <_ZN6String4copyEPKcj+0x18>

000b9aca <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   b9aca:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b9acc:	b513      	push	{r0, r1, r4, lr}
    capacity_ = 0;
   b9ace:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b9ad2:	4604      	mov	r4, r0
    len = 0;
   b9ad4:	6083      	str	r3, [r0, #8]
    flags = 0;
   b9ad6:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   b9ad8:	b141      	cbz	r1, b9aec <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   b9ada:	4608      	mov	r0, r1
   b9adc:	9101      	str	r1, [sp, #4]
   b9ade:	f7fb f937 	bl	b4d50 <strlen>
   b9ae2:	9901      	ldr	r1, [sp, #4]
   b9ae4:	4602      	mov	r2, r0
   b9ae6:	4620      	mov	r0, r4
   b9ae8:	f7ff ffd6 	bl	b9a98 <_ZN6String4copyEPKcj>
}
   b9aec:	4620      	mov	r0, r4
   b9aee:	b002      	add	sp, #8
   b9af0:	bd10      	pop	{r4, pc}

000b9af2 <_ZN6StringC1EPKcj>:
    buffer = nullptr;
   b9af2:	2300      	movs	r3, #0
String::String(const char *cstr, unsigned int length)
   b9af4:	b510      	push	{r4, lr}
    capacity_ = 0;
   b9af6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr, unsigned int length)
   b9afa:	4604      	mov	r4, r0
    len = 0;
   b9afc:	6083      	str	r3, [r0, #8]
    flags = 0;
   b9afe:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   b9b00:	b109      	cbz	r1, b9b06 <_ZN6StringC1EPKcj+0x14>
        copy(cstr, length);
   b9b02:	f7ff ffc9 	bl	b9a98 <_ZN6String4copyEPKcj>
}
   b9b06:	4620      	mov	r0, r4
   b9b08:	bd10      	pop	{r4, pc}

000b9b0a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b9b0a:	b538      	push	{r3, r4, r5, lr}
   b9b0c:	4605      	mov	r5, r0
    if (buffer) {
   b9b0e:	6800      	ldr	r0, [r0, #0]
{
   b9b10:	460c      	mov	r4, r1
    if (buffer) {
   b9b12:	b170      	cbz	r0, b9b32 <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
   b9b14:	686a      	ldr	r2, [r5, #4]
   b9b16:	688b      	ldr	r3, [r1, #8]
   b9b18:	429a      	cmp	r2, r3
   b9b1a:	d308      	bcc.n	b9b2e <_ZN6String4moveERS_+0x24>
   b9b1c:	6809      	ldr	r1, [r1, #0]
   b9b1e:	b131      	cbz	r1, b9b2e <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b9b20:	f002 f867 	bl	bbbf2 <strcpy>
            len = rhs.len;
   b9b24:	68a3      	ldr	r3, [r4, #8]
   b9b26:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b9b28:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
   b9b2a:	60a3      	str	r3, [r4, #8]
}
   b9b2c:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b9b2e:	f7fd fe1f 	bl	b7770 <free>
    buffer = rhs.buffer;
   b9b32:	6823      	ldr	r3, [r4, #0]
   b9b34:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
   b9b36:	6863      	ldr	r3, [r4, #4]
   b9b38:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b9b3a:	68a3      	ldr	r3, [r4, #8]
   b9b3c:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b9b3e:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
   b9b40:	e9c4 3300 	strd	r3, r3, [r4]
   b9b44:	e7f1      	b.n	b9b2a <_ZN6String4moveERS_+0x20>

000b9b46 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b9b46:	b510      	push	{r4, lr}
    buffer = nullptr;
   b9b48:	2300      	movs	r3, #0
    capacity_ = 0;
   b9b4a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b9b4e:	4604      	mov	r4, r0
    len = 0;
   b9b50:	6083      	str	r3, [r0, #8]
    flags = 0;
   b9b52:	7303      	strb	r3, [r0, #12]
    move(rval);
   b9b54:	f7ff ffd9 	bl	b9b0a <_ZN6String4moveERS_>
}
   b9b58:	4620      	mov	r0, r4
   b9b5a:	bd10      	pop	{r4, pc}

000b9b5c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b9b5c:	4288      	cmp	r0, r1
{
   b9b5e:	b510      	push	{r4, lr}
   b9b60:	4604      	mov	r4, r0
    if (this == &rhs) {
   b9b62:	d005      	beq.n	b9b70 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b9b64:	680b      	ldr	r3, [r1, #0]
   b9b66:	b12b      	cbz	r3, b9b74 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b9b68:	688a      	ldr	r2, [r1, #8]
   b9b6a:	4619      	mov	r1, r3
   b9b6c:	f7ff ff94 	bl	b9a98 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b9b70:	4620      	mov	r0, r4
   b9b72:	bd10      	pop	{r4, pc}
        invalidate();
   b9b74:	f7ff ff65 	bl	b9a42 <_ZN6String10invalidateEv>
   b9b78:	e7fa      	b.n	b9b70 <_ZN6StringaSERKS_+0x14>

000b9b7a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b9b7a:	b510      	push	{r4, lr}
    buffer = nullptr;
   b9b7c:	2300      	movs	r3, #0
String::String(const String &value)
   b9b7e:	4604      	mov	r4, r0
    capacity_ = 0;
   b9b80:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b9b84:	6083      	str	r3, [r0, #8]
    flags = 0;
   b9b86:	7303      	strb	r3, [r0, #12]
    *this = value;
   b9b88:	f7ff ffe8 	bl	b9b5c <_ZN6StringaSERKS_>
}
   b9b8c:	4620      	mov	r0, r4
   b9b8e:	bd10      	pop	{r4, pc}

000b9b90 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
    if (this != &rval) {
   b9b90:	4288      	cmp	r0, r1
{
   b9b92:	b510      	push	{r4, lr}
   b9b94:	4604      	mov	r4, r0
    if (this != &rval) {
   b9b96:	d001      	beq.n	b9b9c <_ZN6StringaSEOS_+0xc>
        move(rval);
   b9b98:	f7ff ffb7 	bl	b9b0a <_ZN6String4moveERS_>
    }
    return *this;
}
   b9b9c:	4620      	mov	r0, r4
   b9b9e:	bd10      	pop	{r4, pc}

000b9ba0 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b9ba0:	b513      	push	{r0, r1, r4, lr}
   b9ba2:	4604      	mov	r4, r0
    if (cstr) {
   b9ba4:	b159      	cbz	r1, b9bbe <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
   b9ba6:	4608      	mov	r0, r1
   b9ba8:	9101      	str	r1, [sp, #4]
   b9baa:	f7fb f8d1 	bl	b4d50 <strlen>
   b9bae:	9901      	ldr	r1, [sp, #4]
   b9bb0:	4602      	mov	r2, r0
   b9bb2:	4620      	mov	r0, r4
   b9bb4:	f7ff ff70 	bl	b9a98 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b9bb8:	4620      	mov	r0, r4
   b9bba:	b002      	add	sp, #8
   b9bbc:	bd10      	pop	{r4, pc}
        invalidate();
   b9bbe:	f7ff ff40 	bl	b9a42 <_ZN6String10invalidateEv>
   b9bc2:	e7f9      	b.n	b9bb8 <_ZN6StringaSEPKc+0x18>

000b9bc4 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b9bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9bc6:	4604      	mov	r4, r0
   b9bc8:	4616      	mov	r6, r2
    unsigned int newlen = len + length;
    if (!cstr) {
   b9bca:	460f      	mov	r7, r1
   b9bcc:	b909      	cbnz	r1, b9bd2 <_ZN6String6concatEPKcj+0xe>
        return 0;
   b9bce:	2000      	movs	r0, #0
    }
    memcpy(buffer + len, cstr, length);
    buffer[newlen] = 0;
    len = newlen;
    return 1;
}
   b9bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (length == 0) {
   b9bd2:	b18a      	cbz	r2, b9bf8 <_ZN6String6concatEPKcj+0x34>
    unsigned int newlen = len + length;
   b9bd4:	6885      	ldr	r5, [r0, #8]
   b9bd6:	4415      	add	r5, r2
    if (!reserve(newlen)) {
   b9bd8:	4629      	mov	r1, r5
   b9bda:	f7ff ff49 	bl	b9a70 <_ZN6String7reserveEj>
   b9bde:	2800      	cmp	r0, #0
   b9be0:	d0f5      	beq.n	b9bce <_ZN6String6concatEPKcj+0xa>
    memcpy(buffer + len, cstr, length);
   b9be2:	68a3      	ldr	r3, [r4, #8]
   b9be4:	6820      	ldr	r0, [r4, #0]
   b9be6:	4632      	mov	r2, r6
   b9be8:	4418      	add	r0, r3
   b9bea:	4639      	mov	r1, r7
   b9bec:	f001 ff8c 	bl	bbb08 <memcpy>
    buffer[newlen] = 0;
   b9bf0:	6823      	ldr	r3, [r4, #0]
   b9bf2:	2200      	movs	r2, #0
   b9bf4:	555a      	strb	r2, [r3, r5]
    len = newlen;
   b9bf6:	60a5      	str	r5, [r4, #8]
        return 1;
   b9bf8:	2001      	movs	r0, #1
   b9bfa:	e7e9      	b.n	b9bd0 <_ZN6String6concatEPKcj+0xc>

000b9bfc <_ZN6String6concatERKS_>:
    return concat(s.buffer, s.len);
   b9bfc:	688a      	ldr	r2, [r1, #8]
   b9bfe:	6809      	ldr	r1, [r1, #0]
   b9c00:	f7ff bfe0 	b.w	b9bc4 <_ZN6String6concatEPKcj>

000b9c04 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    if (!buffer || !s.buffer) {
   b9c04:	6802      	ldr	r2, [r0, #0]
{
   b9c06:	460b      	mov	r3, r1
    if (!buffer || !s.buffer) {
   b9c08:	6809      	ldr	r1, [r1, #0]
   b9c0a:	b162      	cbz	r2, b9c26 <_ZNK6String9compareToERKS_+0x22>
   b9c0c:	b941      	cbnz	r1, b9c20 <_ZNK6String9compareToERKS_+0x1c>
        if (s.buffer && s.len > 0) {
            return 0 - *(unsigned char *)s.buffer;
        }
        if (buffer && len > 0) {
   b9c0e:	6880      	ldr	r0, [r0, #8]
   b9c10:	b160      	cbz	r0, b9c2c <_ZNK6String9compareToERKS_+0x28>
            return *(unsigned char *)buffer;
   b9c12:	7810      	ldrb	r0, [r2, #0]
   b9c14:	4770      	bx	lr
        if (s.buffer && s.len > 0) {
   b9c16:	6898      	ldr	r0, [r3, #8]
   b9c18:	b140      	cbz	r0, b9c2c <_ZNK6String9compareToERKS_+0x28>
            return 0 - *(unsigned char *)s.buffer;
   b9c1a:	7809      	ldrb	r1, [r1, #0]
   b9c1c:	4248      	negs	r0, r1
   b9c1e:	4770      	bx	lr
        }
        return 0;
    }
    return strcmp(buffer, s.buffer);
   b9c20:	4610      	mov	r0, r2
   b9c22:	f7fb b88b 	b.w	b4d3c <strcmp>
        if (s.buffer && s.len > 0) {
   b9c26:	2900      	cmp	r1, #0
   b9c28:	d1f5      	bne.n	b9c16 <_ZNK6String9compareToERKS_+0x12>
        return 0;
   b9c2a:	4608      	mov	r0, r1
}
   b9c2c:	4770      	bx	lr

000b9c2e <_ZNK6String6equalsEPKc>:
{
    return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b9c2e:	b508      	push	{r3, lr}
    if (len == 0) {
   b9c30:	6882      	ldr	r2, [r0, #8]
   b9c32:	b93a      	cbnz	r2, b9c44 <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
   b9c34:	b121      	cbz	r1, b9c40 <_ZNK6String6equalsEPKc+0x12>
   b9c36:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
   b9c38:	fab0 f080 	clz	r0, r0
   b9c3c:	0940      	lsrs	r0, r0, #5
   b9c3e:	e000      	b.n	b9c42 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
   b9c40:	2001      	movs	r0, #1
}
   b9c42:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
   b9c44:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
   b9c46:	b909      	cbnz	r1, b9c4c <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
   b9c48:	7800      	ldrb	r0, [r0, #0]
   b9c4a:	e7f5      	b.n	b9c38 <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
   b9c4c:	f7fb f876 	bl	b4d3c <strcmp>
   b9c50:	e7f2      	b.n	b9c38 <_ZNK6String6equalsEPKc+0xa>

000b9c52 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
   b9c52:	b508      	push	{r3, lr}
    return compareTo(rhs) < 0;
   b9c54:	f7ff ffd6 	bl	b9c04 <_ZNK6String9compareToERKS_>
}
   b9c58:	0fc0      	lsrs	r0, r0, #31
   b9c5a:	bd08      	pop	{r3, pc}

000b9c5c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b9c5c:	4b05      	ldr	r3, [pc, #20]	; (b9c74 <_GLOBAL__sub_I_System+0x18>)
   b9c5e:	2202      	movs	r2, #2
   b9c60:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b9c62:	4b05      	ldr	r3, [pc, #20]	; (b9c78 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b9c64:	4a05      	ldr	r2, [pc, #20]	; (b9c7c <_GLOBAL__sub_I_System+0x20>)
   b9c66:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b9c68:	2000      	movs	r0, #0
   b9c6a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b9c6e:	f7fd bc49 	b.w	b7504 <set_system_mode>
   b9c72:	bf00      	nop
   b9c74:	2003e71c 	.word	0x2003e71c
   b9c78:	2003e710 	.word	0x2003e710
   b9c7c:	ffff0000 	.word	0xffff0000

000b9c80 <_ZN8particle11TetherClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9c80:	2200      	movs	r2, #0
   b9c82:	6840      	ldr	r0, [r0, #4]
   b9c84:	4611      	mov	r1, r2
   b9c86:	f7fd bd33 	b.w	b76f0 <network_listening>

000b9c8a <_ZN8particle11TetherClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9c8a:	2200      	movs	r2, #0
   b9c8c:	6840      	ldr	r0, [r0, #4]
   b9c8e:	4611      	mov	r1, r2
   b9c90:	f7fd bd3e 	b.w	b7710 <network_get_listen_timeout>

000b9c94 <_ZN8particle11TetherClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9c94:	6840      	ldr	r0, [r0, #4]
   b9c96:	2200      	movs	r2, #0
   b9c98:	f7fd bd32 	b.w	b7700 <network_set_listen_timeout>

000b9c9c <_ZN8particle11TetherClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9c9c:	6840      	ldr	r0, [r0, #4]
   b9c9e:	2200      	movs	r2, #0
   b9ca0:	f081 0101 	eor.w	r1, r1, #1
   b9ca4:	f7fd bd1c 	b.w	b76e0 <network_listen>

000b9ca8 <_ZN8particle11TetherClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9ca8:	2300      	movs	r3, #0
   b9caa:	6840      	ldr	r0, [r0, #4]
   b9cac:	461a      	mov	r2, r3
   b9cae:	4619      	mov	r1, r3
   b9cb0:	f7fd bd0e 	b.w	b76d0 <network_off>

000b9cb4 <_ZN8particle11TetherClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9cb4:	2300      	movs	r3, #0
   b9cb6:	6840      	ldr	r0, [r0, #4]
   b9cb8:	461a      	mov	r2, r3
   b9cba:	4619      	mov	r1, r3
   b9cbc:	f7fd bd00 	b.w	b76c0 <network_on>

000b9cc0 <_ZN8particle11TetherClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9cc0:	2200      	movs	r2, #0
   b9cc2:	6840      	ldr	r0, [r0, #4]
   b9cc4:	4611      	mov	r1, r2
   b9cc6:	f7fd bcf3 	b.w	b76b0 <network_ready>

000b9cca <_ZN8particle11TetherClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9cca:	2200      	movs	r2, #0
   b9ccc:	6840      	ldr	r0, [r0, #4]
   b9cce:	4611      	mov	r1, r2
   b9cd0:	f7fd bcde 	b.w	b7690 <network_connecting>

000b9cd4 <_ZN8particle11TetherClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9cd4:	6840      	ldr	r0, [r0, #4]
   b9cd6:	2200      	movs	r2, #0
   b9cd8:	2102      	movs	r1, #2
   b9cda:	f7fd bce1 	b.w	b76a0 <network_disconnect>

000b9cde <_ZN8particle11TetherClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9cde:	2300      	movs	r3, #0
   b9ce0:	6840      	ldr	r0, [r0, #4]
   b9ce2:	461a      	mov	r2, r3
   b9ce4:	f7fd bccc 	b.w	b7680 <network_connect>

000b9ce8 <_GLOBAL__sub_I__ZN8particle6TetherE>:
   b9ce8:	4b02      	ldr	r3, [pc, #8]	; (b9cf4 <_GLOBAL__sub_I__ZN8particle6TetherE+0xc>)
   b9cea:	2206      	movs	r2, #6
   b9cec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_PPP_SERVER) {
   b9cee:	4a02      	ldr	r2, [pc, #8]	; (b9cf8 <_GLOBAL__sub_I__ZN8particle6TetherE+0x10>)
   b9cf0:	601a      	str	r2, [r3, #0]
        return if_request(iface, IF_REQ_DRIVER_SPECIFIC, &settings, sizeof(settings), nullptr);
    }
    return SYSTEM_ERROR_NOT_FOUND;
}

} // spark
   b9cf2:	4770      	bx	lr
   b9cf4:	2003e720 	.word	0x2003e720
   b9cf8:	000be4c4 	.word	0x000be4c4

000b9cfc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9cfc:	4b02      	ldr	r3, [pc, #8]	; (b9d08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9cfe:	681a      	ldr	r2, [r3, #0]
   b9d00:	4b02      	ldr	r3, [pc, #8]	; (b9d0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9d02:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9d04:	4770      	bx	lr
   b9d06:	bf00      	nop
   b9d08:	2003e458 	.word	0x2003e458
   b9d0c:	2003e728 	.word	0x2003e728

000b9d10 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9d10:	4770      	bx	lr

000b9d12 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9d12:	7441      	strb	r1, [r0, #17]
}
   b9d14:	4770      	bx	lr

000b9d16 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9d16:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9d18:	7c00      	ldrb	r0, [r0, #16]
   b9d1a:	f7fd fb59 	bl	b73d0 <hal_usart_available_data_for_write>
}
   b9d1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9d22:	bd08      	pop	{r3, pc}

000b9d24 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9d24:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9d26:	7c00      	ldrb	r0, [r0, #16]
   b9d28:	f7fd fb32 	bl	b7390 <hal_usart_available>
}
   b9d2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9d30:	bd08      	pop	{r3, pc}

000b9d32 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9d32:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9d34:	7c00      	ldrb	r0, [r0, #16]
   b9d36:	f7fd fb3b 	bl	b73b0 <hal_usart_peek>
}
   b9d3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9d3e:	bd08      	pop	{r3, pc}

000b9d40 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9d40:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9d42:	7c00      	ldrb	r0, [r0, #16]
   b9d44:	f7fd fb2c 	bl	b73a0 <hal_usart_read>
}
   b9d48:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9d4c:	bd08      	pop	{r3, pc}

000b9d4e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9d4e:	7c00      	ldrb	r0, [r0, #16]
   b9d50:	f7fd bb36 	b.w	b73c0 <hal_usart_flush>

000b9d54 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9d56:	7c45      	ldrb	r5, [r0, #17]
{
   b9d58:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9d5a:	b12d      	cbz	r5, b9d68 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9d5c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9d5e:	b003      	add	sp, #12
   b9d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9d64:	f7fd bb0c 	b.w	b7380 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9d68:	7c00      	ldrb	r0, [r0, #16]
   b9d6a:	9101      	str	r1, [sp, #4]
   b9d6c:	f7fd fb30 	bl	b73d0 <hal_usart_available_data_for_write>
   b9d70:	2800      	cmp	r0, #0
   b9d72:	9901      	ldr	r1, [sp, #4]
   b9d74:	dcf2      	bgt.n	b9d5c <_ZN11USARTSerial5writeEh+0x8>
}
   b9d76:	4628      	mov	r0, r5
   b9d78:	b003      	add	sp, #12
   b9d7a:	bd30      	pop	{r4, r5, pc}

000b9d7c <_ZN11USARTSerialD0Ev>:
   b9d7c:	b510      	push	{r4, lr}
   b9d7e:	2114      	movs	r1, #20
   b9d80:	4604      	mov	r4, r0
   b9d82:	f7fb f846 	bl	b4e12 <_ZdlPvj>
   b9d86:	4620      	mov	r0, r4
   b9d88:	bd10      	pop	{r4, pc}
	...

000b9d8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9d8c:	b510      	push	{r4, lr}
   b9d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9d92:	4604      	mov	r4, r0
   b9d94:	4608      	mov	r0, r1
   b9d96:	4611      	mov	r1, r2
   b9d98:	2200      	movs	r2, #0
   b9d9a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9d9e:	4b04      	ldr	r3, [pc, #16]	; (b9db0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9da0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9da2:	2301      	movs	r3, #1
  _serial = serial;
   b9da4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9da6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9da8:	f7fd fb22 	bl	b73f0 <hal_usart_init_ex>
}
   b9dac:	4620      	mov	r0, r4
   b9dae:	bd10      	pop	{r4, pc}
   b9db0:	000be524 	.word	0x000be524

000b9db4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b9db4:	7c00      	ldrb	r0, [r0, #16]
   b9db6:	2300      	movs	r3, #0
   b9db8:	f7fd bb12 	b.w	b73e0 <hal_usart_begin_config>

000b9dbc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b9dbc:	2200      	movs	r2, #0
   b9dbe:	f7ff bff9 	b.w	b9db4 <_ZN11USARTSerial5beginEmm>

000b9dc2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b9dc2:	7c00      	ldrb	r0, [r0, #16]
   b9dc4:	f7fd bad4 	b.w	b7370 <hal_usart_end>

000b9dc8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9dc8:	7441      	strb	r1, [r0, #17]
}
   b9dca:	4770      	bx	lr

000b9dcc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9dcc:	4770      	bx	lr

000b9dce <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9dce:	4770      	bx	lr

000b9dd0 <_ZN9USBSerial4readEv>:
{
   b9dd0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9dd2:	2100      	movs	r1, #0
   b9dd4:	7c00      	ldrb	r0, [r0, #16]
   b9dd6:	f7fd fb3b 	bl	b7450 <HAL_USB_USART_Receive_Data>
}
   b9dda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9dde:	bd08      	pop	{r3, pc}

000b9de0 <_ZN9USBSerial4peekEv>:
{
   b9de0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9de2:	2101      	movs	r1, #1
   b9de4:	7c00      	ldrb	r0, [r0, #16]
   b9de6:	f7fd fb33 	bl	b7450 <HAL_USB_USART_Receive_Data>
}
   b9dea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9dee:	bd08      	pop	{r3, pc}

000b9df0 <_ZN9USBSerial17availableForWriteEv>:
{
   b9df0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9df2:	7c00      	ldrb	r0, [r0, #16]
   b9df4:	f7fd fb24 	bl	b7440 <HAL_USB_USART_Available_Data_For_Write>
}
   b9df8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9dfc:	bd08      	pop	{r3, pc}

000b9dfe <_ZN9USBSerial9availableEv>:
{
   b9dfe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9e00:	7c00      	ldrb	r0, [r0, #16]
   b9e02:	f7fd fb15 	bl	b7430 <HAL_USB_USART_Available_Data>
}
   b9e06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9e0a:	bd08      	pop	{r3, pc}

000b9e0c <_ZN9USBSerial5writeEh>:
{
   b9e0c:	b513      	push	{r0, r1, r4, lr}
   b9e0e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9e10:	7c00      	ldrb	r0, [r0, #16]
{
   b9e12:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9e14:	f7fd fb14 	bl	b7440 <HAL_USB_USART_Available_Data_For_Write>
   b9e18:	2800      	cmp	r0, #0
   b9e1a:	9901      	ldr	r1, [sp, #4]
   b9e1c:	dc01      	bgt.n	b9e22 <_ZN9USBSerial5writeEh+0x16>
   b9e1e:	7c60      	ldrb	r0, [r4, #17]
   b9e20:	b120      	cbz	r0, b9e2c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9e22:	7c20      	ldrb	r0, [r4, #16]
   b9e24:	f7fd fb1c 	bl	b7460 <HAL_USB_USART_Send_Data>
   b9e28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9e2c:	b002      	add	sp, #8
   b9e2e:	bd10      	pop	{r4, pc}

000b9e30 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9e30:	7c00      	ldrb	r0, [r0, #16]
   b9e32:	f7fd bb1d 	b.w	b7470 <HAL_USB_USART_Flush_Data>

000b9e36 <_ZN9USBSerialD0Ev>:
   b9e36:	b510      	push	{r4, lr}
   b9e38:	2114      	movs	r1, #20
   b9e3a:	4604      	mov	r4, r0
   b9e3c:	f7fa ffe9 	bl	b4e12 <_ZdlPvj>
   b9e40:	4620      	mov	r0, r4
   b9e42:	bd10      	pop	{r4, pc}

000b9e44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9e44:	b510      	push	{r4, lr}
   b9e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9e4a:	4604      	mov	r4, r0
   b9e4c:	4608      	mov	r0, r1
   b9e4e:	2100      	movs	r1, #0
   b9e50:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9e54:	4b04      	ldr	r3, [pc, #16]	; (b9e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9e56:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9e58:	2301      	movs	r3, #1
  _serial = serial;
   b9e5a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9e5c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9e5e:	4611      	mov	r1, r2
   b9e60:	f7fd face 	bl	b7400 <HAL_USB_USART_Init>
}
   b9e64:	4620      	mov	r0, r4
   b9e66:	bd10      	pop	{r4, pc}
   b9e68:	000be558 	.word	0x000be558

000b9e6c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9e6c:	7c00      	ldrb	r0, [r0, #16]
   b9e6e:	2200      	movs	r2, #0
   b9e70:	f7fd bace 	b.w	b7410 <HAL_USB_USART_Begin>

000b9e74 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b9e74:	7c00      	ldrb	r0, [r0, #16]
   b9e76:	f7fd bad3 	b.w	b7420 <HAL_USB_USART_End>

000b9e7a <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b9e7a:	7c00      	ldrb	r0, [r0, #16]
   b9e7c:	f7fd bb00 	b.w	b7480 <HAL_USB_USART_Is_Connected>

000b9e80 <_Z19acquireSerialBufferv>:
{
   b9e80:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9e82:	2214      	movs	r2, #20
{
   b9e84:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9e86:	2100      	movs	r1, #0
   b9e88:	f001 fe66 	bl	bbb58 <memset>
}
   b9e8c:	4620      	mov	r0, r4
   b9e8e:	bd10      	pop	{r4, pc}

000b9e90 <_Z16_fetch_usbserialv>:
{
   b9e90:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9e92:	4c0f      	ldr	r4, [pc, #60]	; (b9ed0 <_Z16_fetch_usbserialv+0x40>)
{
   b9e94:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b9e96:	a803      	add	r0, sp, #12
   b9e98:	f7ff fff2 	bl	b9e80 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9e9c:	7821      	ldrb	r1, [r4, #0]
   b9e9e:	f3bf 8f5b 	dmb	ish
   b9ea2:	f011 0101 	ands.w	r1, r1, #1
   b9ea6:	d10f      	bne.n	b9ec8 <_Z16_fetch_usbserialv+0x38>
   b9ea8:	4620      	mov	r0, r4
   b9eaa:	9101      	str	r1, [sp, #4]
   b9eac:	f7fa ffc0 	bl	b4e30 <__cxa_guard_acquire>
   b9eb0:	9901      	ldr	r1, [sp, #4]
   b9eb2:	b148      	cbz	r0, b9ec8 <_Z16_fetch_usbserialv+0x38>
   b9eb4:	aa03      	add	r2, sp, #12
   b9eb6:	4807      	ldr	r0, [pc, #28]	; (b9ed4 <_Z16_fetch_usbserialv+0x44>)
   b9eb8:	f7ff ffc4 	bl	b9e44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9ebc:	4620      	mov	r0, r4
   b9ebe:	f7fa ffbc 	bl	b4e3a <__cxa_guard_release>
   b9ec2:	4805      	ldr	r0, [pc, #20]	; (b9ed8 <_Z16_fetch_usbserialv+0x48>)
   b9ec4:	f001 fe0a 	bl	bbadc <atexit>
	return _usbserial;
}
   b9ec8:	4802      	ldr	r0, [pc, #8]	; (b9ed4 <_Z16_fetch_usbserialv+0x44>)
   b9eca:	b008      	add	sp, #32
   b9ecc:	bd10      	pop	{r4, pc}
   b9ece:	bf00      	nop
   b9ed0:	2003e72c 	.word	0x2003e72c
   b9ed4:	2003e730 	.word	0x2003e730
   b9ed8:	000b9dcd 	.word	0x000b9dcd

000b9edc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESD_SO_>:
        capacity_(0) {
   b9edc:	2200      	movs	r2, #0
   b9ede:	e9c0 2200 	strd	r2, r2, [r0]
   b9ee2:	6082      	str	r2, [r0, #8]
      }
   b9ee4:	4770      	bx	lr

000b9ee6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESD_SO_>:
   b9ee6:	2200      	movs	r2, #0
   b9ee8:	e9c0 2200 	strd	r2, r2, [r0]
   b9eec:	6082      	str	r2, [r0, #8]
   b9eee:	4770      	bx	lr

000b9ef0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESD_SO_>:
   b9ef0:	2200      	movs	r2, #0
   b9ef2:	e9c0 2200 	strd	r2, r2, [r0]
   b9ef6:	6082      	str	r2, [r0, #8]
   b9ef8:	4770      	bx	lr

000b9efa <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESD_SO_>:
   b9efa:	2200      	movs	r2, #0
   b9efc:	e9c0 2200 	strd	r2, r2, [r0]
   b9f00:	6082      	str	r2, [r0, #8]
   b9f02:	4770      	bx	lr

000b9f04 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESD_SO_>:
   b9f04:	2200      	movs	r2, #0
   b9f06:	e9c0 2200 	strd	r2, r2, [r0]
   b9f0a:	6082      	str	r2, [r0, #8]
   b9f0c:	4770      	bx	lr

000b9f0e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESD_SO_>:
   b9f0e:	2200      	movs	r2, #0
   b9f10:	e9c0 2200 	strd	r2, r2, [r0]
   b9f14:	6082      	str	r2, [r0, #8]
   b9f16:	4770      	bx	lr

000b9f18 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESD_SO_>:
   b9f18:	2200      	movs	r2, #0
   b9f1a:	e9c0 2200 	strd	r2, r2, [r0]
   b9f1e:	6082      	str	r2, [r0, #8]
   b9f20:	4770      	bx	lr

000b9f22 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESD_SO_>:
   b9f22:	2200      	movs	r2, #0
   b9f24:	e9c0 2200 	strd	r2, r2, [r0]
   b9f28:	6082      	str	r2, [r0, #8]
   b9f2a:	4770      	bx	lr

000b9f2c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESD_SO_>:
   b9f2c:	2200      	movs	r2, #0
   b9f2e:	e9c0 2200 	strd	r2, r2, [r0]
   b9f32:	6082      	str	r2, [r0, #8]
   b9f34:	4770      	bx	lr

000b9f36 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESD_SO_>:
   b9f36:	2200      	movs	r2, #0
   b9f38:	e9c0 2200 	strd	r2, r2, [r0]
   b9f3c:	6082      	str	r2, [r0, #8]
   b9f3e:	4770      	bx	lr

000b9f40 <_ZSt9__advanceIPKSt4pairIK6StringN8particle7VariantEEiEvRT_T0_St26random_access_iterator_tag.isra.0>:
	__i += __n;
   b9f40:	6803      	ldr	r3, [r0, #0]
   b9f42:	2228      	movs	r2, #40	; 0x28
   b9f44:	fb02 3101 	mla	r1, r2, r1, r3
   b9f48:	6001      	str	r1, [r0, #0]
    }
   b9f4a:	4770      	bx	lr

000b9f4c <_ZSt9__advanceIPSt4pairIK6StringN8particle7VariantEEiEvRT_T0_St26random_access_iterator_tag.isra.0>:
	__i += __n;
   b9f4c:	6803      	ldr	r3, [r0, #0]
   b9f4e:	2228      	movs	r2, #40	; 0x28
   b9f50:	fb02 3101 	mla	r1, r2, r1, r3
   b9f54:	6001      	str	r1, [r0, #0]
    }
   b9f56:	4770      	bx	lr

000b9f58 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>:
        v = nativeToBigEndian(v);
        CHECK(write((const char*)&v, sizeof(v)));
        return 0;
    }

    int write(const char* data, size_t size) {
   b9f58:	b538      	push	{r3, r4, r5, lr}
        size_t n = stream_.write((const uint8_t*)data, size);
   b9f5a:	6803      	ldr	r3, [r0, #0]
   b9f5c:	68db      	ldr	r3, [r3, #12]
    int write(const char* data, size_t size) {
   b9f5e:	4615      	mov	r5, r2
   b9f60:	4604      	mov	r4, r0
        size_t n = stream_.write((const uint8_t*)data, size);
   b9f62:	4798      	blx	r3
        if (n != size) {
   b9f64:	4285      	cmp	r5, r0
   b9f66:	d005      	beq.n	b9f74 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0+0x1c>
    int getWriteError() const { return write_error; }
   b9f68:	6860      	ldr	r0, [r4, #4]
            int err = stream_.getWriteError();
            return (err < 0) ? err : Error::IO;
   b9f6a:	2800      	cmp	r0, #0
   b9f6c:	bfa8      	it	ge
   b9f6e:	f06f 00db 	mvnge.w	r0, #219	; 0xdb
        }
        return 0;
    }
   b9f72:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   b9f74:	2000      	movs	r0, #0
   b9f76:	e7fc      	b.n	b9f72 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0+0x1a>

000b9f78 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>:
    int writeUint8(uint8_t val) {
   b9f78:	b507      	push	{r0, r1, r2, lr}
   b9f7a:	2201      	movs	r2, #1
   b9f7c:	f88d 1007 	strb.w	r1, [sp, #7]
   b9f80:	f10d 0107 	add.w	r1, sp, #7
   b9f84:	f7ff ffe8 	bl	b9f58 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>
    }
   b9f88:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b9f8c:	b003      	add	sp, #12
   b9f8e:	f85d fb04 	ldr.w	pc, [sp], #4

000b9f92 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>:
        }
    }
    return 0;
}

int writeCborHead(EncodingStream& stream, int type, uint64_t arg) {
   b9f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
    type <<= 5;
    if (arg < 24) {
   b9f94:	2a18      	cmp	r2, #24
int writeCborHead(EncodingStream& stream, int type, uint64_t arg) {
   b9f96:	461e      	mov	r6, r3
    if (arg < 24) {
   b9f98:	f176 0300 	sbcs.w	r3, r6, #0
int writeCborHead(EncodingStream& stream, int type, uint64_t arg) {
   b9f9c:	4604      	mov	r4, r0
   b9f9e:	4615      	mov	r5, r2
   b9fa0:	6800      	ldr	r0, [r0, #0]
    type <<= 5;
   b9fa2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    if (arg < 24) {
   b9fa6:	d207      	bcs.n	b9fb8 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x26>
        CHECK(stream.writeUint8(arg | type));
   b9fa8:	4311      	orrs	r1, r2
   b9faa:	b2c9      	uxtb	r1, r1
    } else if (arg <= 0xff) {
        CHECK(stream.writeUint8(24 /* 1-byte argument */ | type));
        CHECK(stream.writeUint8(arg));
   b9fac:	f7ff ffe4 	bl	b9f78 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
        CHECK(write((const char*)&val, sizeof(val)));
   b9fb0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    } else {
        CHECK(stream.writeUint8(27 /* 8-byte argument */ | type));
        CHECK(stream.writeUint64Be(arg));
    }
    return 0;
}
   b9fb4:	b002      	add	sp, #8
   b9fb6:	bd70      	pop	{r4, r5, r6, pc}
    } else if (arg <= 0xff) {
   b9fb8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   b9fbc:	f176 0300 	sbcs.w	r3, r6, #0
        CHECK(stream.writeUint8(24 /* 1-byte argument */ | type));
   b9fc0:	b249      	sxtb	r1, r1
    } else if (arg <= 0xff) {
   b9fc2:	d20a      	bcs.n	b9fda <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x48>
        CHECK(stream.writeUint8(24 /* 1-byte argument */ | type));
   b9fc4:	f041 0118 	orr.w	r1, r1, #24
   b9fc8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
   b9fcc:	f7ff ffd4 	bl	b9f78 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
   b9fd0:	2800      	cmp	r0, #0
   b9fd2:	dbef      	blt.n	b9fb4 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x22>
        CHECK(stream.writeUint8(arg));
   b9fd4:	6820      	ldr	r0, [r4, #0]
   b9fd6:	b2e9      	uxtb	r1, r5
   b9fd8:	e7e8      	b.n	b9fac <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x1a>
    } else if (arg <= 0xffff) {
   b9fda:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   b9fde:	f176 0300 	sbcs.w	r3, r6, #0
   b9fe2:	d210      	bcs.n	ba006 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x74>
        CHECK(stream.writeUint8(25 /* 2-byte argument */ | type));
   b9fe4:	f041 0119 	orr.w	r1, r1, #25
   b9fe8:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
   b9fec:	f7ff ffc4 	bl	b9f78 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
   b9ff0:	2800      	cmp	r0, #0
   b9ff2:	dbdf      	blt.n	b9fb4 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x22>
inline int16_t reverseByteOrder(int16_t val) {
    return __builtin_bswap16(val);
}

inline uint16_t reverseByteOrder(uint16_t val) {
    return __builtin_bswap16(val);
   b9ff4:	ba6d      	rev16	r5, r5
        val = nativeToBigEndian(val);
   b9ff6:	f8ad 5000 	strh.w	r5, [sp]
        CHECK(write((const char*)&val, sizeof(val)));
   b9ffa:	2202      	movs	r2, #2
        CHECK(write((const char*)&val, sizeof(val)));
   b9ffc:	6820      	ldr	r0, [r4, #0]
   b9ffe:	4669      	mov	r1, sp
   ba000:	f7ff ffaa 	bl	b9f58 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>
   ba004:	e7d4      	b.n	b9fb0 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x1e>
    } else if (arg <= 0xffffffffu) {
   ba006:	b95e      	cbnz	r6, ba020 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x8e>
        CHECK(stream.writeUint8(26 /* 4-byte argument */ | type));
   ba008:	f041 011a 	orr.w	r1, r1, #26
   ba00c:	f001 01fa 	and.w	r1, r1, #250	; 0xfa
   ba010:	f7ff ffb2 	bl	b9f78 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
   ba014:	2800      	cmp	r0, #0
   ba016:	dbcd      	blt.n	b9fb4 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x22>
inline int32_t reverseByteOrder(int32_t val) {
    return __builtin_bswap32(val);
}

inline uint32_t reverseByteOrder(uint32_t val) {
    return __builtin_bswap32(val);
   ba018:	ba2d      	rev	r5, r5
        val = nativeToBigEndian(val);
   ba01a:	9500      	str	r5, [sp, #0]
        CHECK(write((const char*)&val, sizeof(val)));
   ba01c:	2204      	movs	r2, #4
   ba01e:	e7ed      	b.n	b9ffc <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x6a>
        CHECK(stream.writeUint8(27 /* 8-byte argument */ | type));
   ba020:	f041 011b 	orr.w	r1, r1, #27
   ba024:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
   ba028:	f7ff ffa6 	bl	b9f78 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
   ba02c:	2800      	cmp	r0, #0
   ba02e:	dbc1      	blt.n	b9fb4 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x22>
inline int64_t reverseByteOrder(int64_t val) {
    return __builtin_bswap64(val);
}

inline uint64_t reverseByteOrder(uint64_t val) {
    return __builtin_bswap64(val);
   ba030:	ba2d      	rev	r5, r5
   ba032:	ba36      	rev	r6, r6
        val = nativeToBigEndian(val);
   ba034:	e9cd 6500 	strd	r6, r5, [sp]
        CHECK(write((const char*)&val, sizeof(val)));
   ba038:	2208      	movs	r2, #8
   ba03a:	e7df      	b.n	b9ffc <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x6a>

000ba03c <_ZN8particle12_GLOBAL__N_122writeCborSignedIntegerERNS0_14EncodingStreamEx>:
    CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
    return 0;
}

int writeCborSignedInteger(EncodingStream& stream, int64_t val) {
    if (val < 0) {
   ba03c:	1e19      	subs	r1, r3, #0
int writeCborSignedInteger(EncodingStream& stream, int64_t val) {
   ba03e:	b510      	push	{r4, lr}
        val = -(val + 1);
        CHECK(writeCborHead(stream, 1 /* Negative integer */, val));
   ba040:	bfbd      	ittte	lt
   ba042:	43cb      	mvnlt	r3, r1
   ba044:	43d2      	mvnlt	r2, r2
   ba046:	2101      	movlt	r1, #1
    } else {
        CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
   ba048:	2100      	movge	r1, #0
   ba04a:	f7ff ffa2 	bl	b9f92 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
   ba04e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    }
    return 0;
}
   ba052:	bd10      	pop	{r4, pc}

000ba054 <_ZN8particle12_GLOBAL__N_119writeCborTextStringERNS0_14EncodingStreamERK6String>:
int readCborTextString(DecodingStream& stream, const CborHead& head, String& str) {
    CHECK(readCborString(stream, head, str, readAndAppendToString));
    return 0;
}

int writeCborTextString(EncodingStream& stream, const String& str) {
   ba054:	b538      	push	{r3, r4, r5, lr}
   ba056:	460c      	mov	r4, r1
    CHECK(writeCborHead(stream, 3 /* Text string */, str.length()));
   ba058:	688a      	ldr	r2, [r1, #8]
   ba05a:	2300      	movs	r3, #0
   ba05c:	2103      	movs	r1, #3
int writeCborTextString(EncodingStream& stream, const String& str) {
   ba05e:	4605      	mov	r5, r0
    CHECK(writeCborHead(stream, 3 /* Text string */, str.length()));
   ba060:	f7ff ff97 	bl	b9f92 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
   ba064:	2800      	cmp	r0, #0
   ba066:	db06      	blt.n	ba076 <_ZN8particle12_GLOBAL__N_119writeCborTextStringERNS0_14EncodingStreamERK6String+0x22>
    CHECK(stream.write(str.c_str(), str.length()));
   ba068:	68a2      	ldr	r2, [r4, #8]
   ba06a:	6821      	ldr	r1, [r4, #0]
   ba06c:	6828      	ldr	r0, [r5, #0]
   ba06e:	f7ff ff73 	bl	b9f58 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>
   ba072:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    return 0;
}
   ba076:	bd38      	pop	{r3, r4, r5, pc}

000ba078 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>:
    int read(char* data, size_t size) {
   ba078:	b510      	push	{r4, lr}
        size_t n = stream_.readBytes(data, size);
   ba07a:	6803      	ldr	r3, [r0, #0]
   ba07c:	6a1b      	ldr	r3, [r3, #32]
    int read(char* data, size_t size) {
   ba07e:	4614      	mov	r4, r2
        size_t n = stream_.readBytes(data, size);
   ba080:	4798      	blx	r3
            return Error::END_OF_STREAM;
   ba082:	4284      	cmp	r4, r0
    }
   ba084:	bf14      	ite	ne
   ba086:	f06f 00c8 	mvnne.w	r0, #200	; 0xc8
   ba08a:	2000      	moveq	r0, #0
   ba08c:	bd10      	pop	{r4, pc}
	...

000ba090 <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String>:
int readAndAppendToString(DecodingStream& stream, size_t size, String& str) {
   ba090:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba092:	460c      	mov	r4, r1
    if (!str.reserve(str.length() + size)) {
   ba094:	6891      	ldr	r1, [r2, #8]
int readAndAppendToString(DecodingStream& stream, size_t size, String& str) {
   ba096:	b0a1      	sub	sp, #132	; 0x84
   ba098:	4607      	mov	r7, r0
    if (!str.reserve(str.length() + size)) {
   ba09a:	4421      	add	r1, r4
   ba09c:	4610      	mov	r0, r2
int readAndAppendToString(DecodingStream& stream, size_t size, String& str) {
   ba09e:	4615      	mov	r5, r2
    if (!str.reserve(str.length() + size)) {
   ba0a0:	f7ff fce6 	bl	b9a70 <_ZN6String7reserveEj>
   ba0a4:	b190      	cbz	r0, ba0cc <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String+0x3c>
    while (size > 0) {
   ba0a6:	b1a4      	cbz	r4, ba0d2 <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String+0x42>
        size_t n = std::min(size, sizeof(buf));
   ba0a8:	2c80      	cmp	r4, #128	; 0x80
   ba0aa:	4626      	mov	r6, r4
   ba0ac:	bf28      	it	cs
   ba0ae:	2680      	movcs	r6, #128	; 0x80
        CHECK(stream.read(buf, n));
   ba0b0:	6838      	ldr	r0, [r7, #0]
   ba0b2:	4632      	mov	r2, r6
   ba0b4:	4669      	mov	r1, sp
   ba0b6:	f7ff ffdf 	bl	ba078 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
   ba0ba:	2800      	cmp	r0, #0
   ba0bc:	db07      	blt.n	ba0ce <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String+0x3e>
        str.concat(buf, n);
   ba0be:	4632      	mov	r2, r6
   ba0c0:	4669      	mov	r1, sp
   ba0c2:	4628      	mov	r0, r5
   ba0c4:	f7ff fd7e 	bl	b9bc4 <_ZN6String6concatEPKcj>
        size -= n;
   ba0c8:	1ba4      	subs	r4, r4, r6
    while (size > 0) {
   ba0ca:	e7ec      	b.n	ba0a6 <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String+0x16>
        return Error::NO_MEMORY;
   ba0cc:	4802      	ldr	r0, [pc, #8]	; (ba0d8 <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String+0x48>)
}
   ba0ce:	b021      	add	sp, #132	; 0x84
   ba0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
   ba0d2:	4620      	mov	r0, r4
   ba0d4:	e7fb      	b.n	ba0ce <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String+0x3e>
   ba0d6:	bf00      	nop
   ba0d8:	fffffefc 	.word	0xfffffefc

000ba0dc <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>:
int readCborHead(DecodingStream& stream, CborHead& head) {
   ba0dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba0de:	4605      	mov	r5, r0
   ba0e0:	460c      	mov	r4, r1
   ba0e2:	6800      	ldr	r0, [r0, #0]
   ba0e4:	2201      	movs	r2, #1
   ba0e6:	f10d 0103 	add.w	r1, sp, #3
   ba0ea:	f7ff ffc5 	bl	ba078 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
    CHECK(stream.readUint8(b));
   ba0ee:	2800      	cmp	r0, #0
   ba0f0:	db0b      	blt.n	ba10a <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
    head.type = b >> 5;
   ba0f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   ba0f6:	095a      	lsrs	r2, r3, #5
   ba0f8:	f003 031f 	and.w	r3, r3, #31
    if (head.detail < 24) {
   ba0fc:	2b17      	cmp	r3, #23
    head.type = b >> 5;
   ba0fe:	60a2      	str	r2, [r4, #8]
    head.detail = b & 0x1f;
   ba100:	60e3      	str	r3, [r4, #12]
    if (head.detail < 24) {
   ba102:	d804      	bhi.n	ba10e <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x32>
            head.arg = v;
   ba104:	2000      	movs	r0, #0
   ba106:	e9c4 3000 	strd	r3, r0, [r4]
}
   ba10a:	b003      	add	sp, #12
   ba10c:	bd30      	pop	{r4, r5, pc}
        switch (head.detail) {
   ba10e:	3b18      	subs	r3, #24
   ba110:	2b07      	cmp	r3, #7
   ba112:	d83e      	bhi.n	ba192 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0xb6>
   ba114:	e8df f003 	tbb	[pc, r3]
   ba118:	251a0e04 	.word	0x251a0e04
   ba11c:	343d3d3d 	.word	0x343d3d3d
        CHECK(read((char*)&val, sizeof(val)));
   ba120:	6828      	ldr	r0, [r5, #0]
   ba122:	2201      	movs	r2, #1
   ba124:	a901      	add	r1, sp, #4
   ba126:	f7ff ffa7 	bl	ba078 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
            CHECK(stream.readUint8(v));
   ba12a:	2800      	cmp	r0, #0
   ba12c:	dbed      	blt.n	ba10a <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
            head.arg = v;
   ba12e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba132:	e7e7      	b.n	ba104 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x28>
        CHECK(read((char*)&val, sizeof(val)));
   ba134:	6828      	ldr	r0, [r5, #0]
   ba136:	2202      	movs	r2, #2
   ba138:	a901      	add	r1, sp, #4
   ba13a:	f7ff ff9d 	bl	ba078 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
   ba13e:	2800      	cmp	r0, #0
   ba140:	dbe3      	blt.n	ba10a <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
    return __builtin_bswap16(val);
   ba142:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   ba146:	ba5b      	rev16	r3, r3
   ba148:	b29b      	uxth	r3, r3
            head.arg = v;
   ba14a:	e7db      	b.n	ba104 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x28>
        CHECK(read((char*)&val, sizeof(val)));
   ba14c:	2204      	movs	r2, #4
   ba14e:	6828      	ldr	r0, [r5, #0]
   ba150:	eb0d 0102 	add.w	r1, sp, r2
   ba154:	f7ff ff90 	bl	ba078 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
   ba158:	2800      	cmp	r0, #0
   ba15a:	dbd6      	blt.n	ba10a <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
    return __builtin_bswap32(val);
   ba15c:	9b01      	ldr	r3, [sp, #4]
   ba15e:	ba1b      	rev	r3, r3
            head.arg = v;
   ba160:	e7d0      	b.n	ba104 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x28>
        CHECK(read((char*)&val, sizeof(val)));
   ba162:	6828      	ldr	r0, [r5, #0]
   ba164:	2208      	movs	r2, #8
   ba166:	4621      	mov	r1, r4
   ba168:	f7ff ff86 	bl	ba078 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
   ba16c:	2800      	cmp	r0, #0
   ba16e:	dbcc      	blt.n	ba10a <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
    return __builtin_bswap64(val);
   ba170:	6823      	ldr	r3, [r4, #0]
   ba172:	6862      	ldr	r2, [r4, #4]
   ba174:	ba1b      	rev	r3, r3
   ba176:	ba12      	rev	r2, r2
        val = bigEndianToNative(val);
   ba178:	e9c4 2300 	strd	r2, r3, [r4]
    return 0;
   ba17c:	2000      	movs	r0, #0
            break;
   ba17e:	e7c4      	b.n	ba10a <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
            if (head.type == 0 /* Unsigned integer */ || head.type == 1 /* Negative integer */ || head.type == 6 /* Tagged item */) {
   ba180:	2a01      	cmp	r2, #1
   ba182:	d906      	bls.n	ba192 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0xb6>
   ba184:	2a06      	cmp	r2, #6
   ba186:	d004      	beq.n	ba192 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0xb6>
            head.arg = 0;
   ba188:	2200      	movs	r2, #0
   ba18a:	2300      	movs	r3, #0
   ba18c:	e9c4 2300 	strd	r2, r3, [r4]
   ba190:	e7f4      	b.n	ba17c <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0xa0>
                return Error::BAD_DATA;
   ba192:	4801      	ldr	r0, [pc, #4]	; (ba198 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0xbc>)
   ba194:	e7b9      	b.n	ba10a <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
   ba196:	bf00      	nop
   ba198:	fffffee8 	.word	0xfffffee8

000ba19c <_ZN8particle6detail8to_charsEPcS1_d>:

namespace detail {

#if !defined(__cpp_lib_to_chars) || defined(UNIT_TEST)

std::to_chars_result to_chars(char* first, char* last, double value) {
   ba19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba19e:	460d      	mov	r5, r1
    std::to_chars_result res;
    int n = std::snprintf(first, last - first, "%g", value);
   ba1a0:	1a57      	subs	r7, r2, r1
   ba1a2:	ed8d 0b00 	vstr	d0, [sp]
std::to_chars_result to_chars(char* first, char* last, double value) {
   ba1a6:	4604      	mov	r4, r0
   ba1a8:	4616      	mov	r6, r2
    int n = std::snprintf(first, last - first, "%g", value);
   ba1aa:	4639      	mov	r1, r7
   ba1ac:	4a09      	ldr	r2, [pc, #36]	; (ba1d4 <_ZN8particle6detail8to_charsEPcS1_d+0x38>)
   ba1ae:	4628      	mov	r0, r5
   ba1b0:	f7fd faee 	bl	b7790 <snprintf>
    if (n < 0 || n >= last - first) {
   ba1b4:	2800      	cmp	r0, #0
   ba1b6:	db01      	blt.n	ba1bc <_ZN8particle6detail8to_charsEPcS1_d+0x20>
   ba1b8:	4287      	cmp	r7, r0
   ba1ba:	dc05      	bgt.n	ba1c8 <_ZN8particle6detail8to_charsEPcS1_d+0x2c>
        res.ec = std::errc::value_too_large;
   ba1bc:	238b      	movs	r3, #139	; 0x8b
        res.ptr = last;
   ba1be:	e9c4 6300 	strd	r6, r3, [r4]
    } else {
        res.ec = std::errc();
        res.ptr = first + n;
    }
    return res;
}
   ba1c2:	4620      	mov	r0, r4
   ba1c4:	b003      	add	sp, #12
   ba1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res.ec = std::errc();
   ba1c8:	2300      	movs	r3, #0
        res.ptr = first + n;
   ba1ca:	4405      	add	r5, r0
        res.ec = std::errc();
   ba1cc:	6063      	str	r3, [r4, #4]
        res.ptr = first + n;
   ba1ce:	6025      	str	r5, [r4, #0]
    return res;
   ba1d0:	e7f7      	b.n	ba1c2 <_ZN8particle6detail8to_charsEPcS1_d+0x26>
   ba1d2:	bf00      	nop
   ba1d4:	000be584 	.word	0x000be584

000ba1d8 <_ZN8particle6detail10from_charsEPKcS2_Rd>:

std::from_chars_result from_chars(const char* first, const char* last, double& value) {
   ba1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba1da:	ed2d 8b02 	vpush	{d8}
    std::from_chars_result res;
    if (last > first) {
   ba1de:	4291      	cmp	r1, r2
std::from_chars_result from_chars(const char* first, const char* last, double& value) {
   ba1e0:	b083      	sub	sp, #12
   ba1e2:	4604      	mov	r4, r0
   ba1e4:	460d      	mov	r5, r1
   ba1e6:	461e      	mov	r6, r3
    if (last > first) {
   ba1e8:	d21f      	bcs.n	ba22a <_ZN8particle6detail10from_charsEPKcS2_Rd+0x52>
        char* end = nullptr;
   ba1ea:	2700      	movs	r7, #0
   ba1ec:	9701      	str	r7, [sp, #4]
        errno = 0;
   ba1ee:	f7fd faef 	bl	b77d0 <__errno>
        double v = strtod(first, &end);
   ba1f2:	a901      	add	r1, sp, #4
        errno = 0;
   ba1f4:	6007      	str	r7, [r0, #0]
        double v = strtod(first, &end);
   ba1f6:	4628      	mov	r0, r5
   ba1f8:	f002 fb64 	bl	bc8c4 <strtod>
   ba1fc:	eeb0 8a40 	vmov.f32	s16, s0
   ba200:	eef0 8a60 	vmov.f32	s17, s1
        if (errno == ERANGE) {
   ba204:	f7fd fae4 	bl	b77d0 <__errno>
   ba208:	6803      	ldr	r3, [r0, #0]
   ba20a:	9f01      	ldr	r7, [sp, #4]
   ba20c:	2b22      	cmp	r3, #34	; 0x22
   ba20e:	d106      	bne.n	ba21e <_ZN8particle6detail10from_charsEPKcS2_Rd+0x46>
            res.ec = std::errc::result_out_of_range;
            res.ptr = end;
   ba210:	e9c4 7300 	strd	r7, r3, [r4]
    } else {
        res.ec = std::errc::invalid_argument;
        res.ptr = first;
    }
    return res;
}
   ba214:	4620      	mov	r0, r4
   ba216:	b003      	add	sp, #12
   ba218:	ecbd 8b02 	vpop	{d8}
   ba21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (end == first || std::isspace((unsigned char)*first)) {
   ba21e:	42bd      	cmp	r5, r7
   ba220:	d003      	beq.n	ba22a <_ZN8particle6detail10from_charsEPKcS2_Rd+0x52>
   ba222:	7828      	ldrb	r0, [r5, #0]
   ba224:	f001 fc68 	bl	bbaf8 <isspace>
   ba228:	b118      	cbz	r0, ba232 <_ZN8particle6detail10from_charsEPKcS2_Rd+0x5a>
        res.ec = std::errc::invalid_argument;
   ba22a:	2316      	movs	r3, #22
        res.ptr = first;
   ba22c:	e9c4 5300 	strd	r5, r3, [r4]
    return res;
   ba230:	e7f0      	b.n	ba214 <_ZN8particle6detail10from_charsEPKcS2_Rd+0x3c>
            res.ptr = end;
   ba232:	e9c4 7000 	strd	r7, r0, [r4]
            value = v;
   ba236:	ed86 8b00 	vstr	d8, [r6]
    return res;
   ba23a:	e7eb      	b.n	ba214 <_ZN8particle6detail10from_charsEPKcS2_Rd+0x3c>

000ba23c <_ZN8particle6BufferaSEOS0_.isra.0>:
namespace particle {

/**
 * A dynamically allocated buffer.
 */
class Buffer {
   ba23c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba23e:	4604      	mov	r4, r0
   ba240:	a801      	add	r0, sp, #4
   ba242:	f7fb faa7 	bl	b5794 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
   ba246:	9a01      	ldr	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba248:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba24a:	6022      	str	r2, [r4, #0]
   ba24c:	9a02      	ldr	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba24e:	9301      	str	r3, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba250:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba252:	6062      	str	r2, [r4, #4]
   ba254:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba256:	9302      	str	r3, [sp, #8]
   ba258:	a801      	add	r0, sp, #4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba25a:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba25c:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba25e:	9303      	str	r3, [sp, #12]
   ba260:	f7fd face 	bl	b7800 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
   ba264:	b004      	add	sp, #16
   ba266:	bd10      	pop	{r4, pc}

000ba268 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE>:
int readAndAppendToBuffer(DecodingStream& stream, size_t size, Buffer& buf) {
   ba268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return size_;
   ba26c:	f8d2 8004 	ldr.w	r8, [r2, #4]
    if (!buf.resize(oldSize + size)) {
   ba270:	eb01 0508 	add.w	r5, r1, r8
    if (n > size_) {
   ba274:	4545      	cmp	r5, r8
int readAndAppendToBuffer(DecodingStream& stream, size_t size, Buffer& buf) {
   ba276:	4607      	mov	r7, r0
   ba278:	460e      	mov	r6, r1
   ba27a:	4614      	mov	r4, r2
   ba27c:	dd17      	ble.n	ba2ae <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x46>
        if (n > capacity_ && !realloc(n)) {
   ba27e:	6893      	ldr	r3, [r2, #8]
   ba280:	429d      	cmp	r5, r3
   ba282:	dc0a      	bgt.n	ba29a <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x32>
        construct(data_ + size_, data_ + n);
   ba284:	e9d4 2300 	ldrd	r2, r3, [r4]
            new(p) T(std::forward<ArgsT>(args)...);
   ba288:	2100      	movs	r1, #0
        construct(data_ + size_, data_ + n);
   ba28a:	4413      	add	r3, r2
   ba28c:	442a      	add	r2, r5
        for (; p != end; ++p) {
   ba28e:	429a      	cmp	r2, r3
   ba290:	d00f      	beq.n	ba2b2 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x4a>
            new(p) T(std::forward<ArgsT>(args)...);
   ba292:	b103      	cbz	r3, ba296 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x2e>
   ba294:	7019      	strb	r1, [r3, #0]
        for (; p != end; ++p) {
   ba296:	3301      	adds	r3, #1
   ba298:	e7f9      	b.n	ba28e <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x26>
        if (n > capacity_ && !realloc(n)) {
   ba29a:	4629      	mov	r1, r5
   ba29c:	4610      	mov	r0, r2
   ba29e:	f7fd facc 	bl	b783a <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>
   ba2a2:	2800      	cmp	r0, #0
   ba2a4:	d1ee      	bne.n	ba284 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x1c>
        return Error::NO_MEMORY;
   ba2a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
}
   ba2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (n >= 0) {
   ba2ae:	2d00      	cmp	r5, #0
   ba2b0:	db00      	blt.n	ba2b4 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x4c>
        size_ = n;
   ba2b2:	6065      	str	r5, [r4, #4]
    CHECK(stream.read(buf.data() + oldSize, size));
   ba2b4:	6821      	ldr	r1, [r4, #0]
   ba2b6:	6838      	ldr	r0, [r7, #0]
   ba2b8:	4632      	mov	r2, r6
   ba2ba:	4441      	add	r1, r8
   ba2bc:	f7ff fedc 	bl	ba078 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
   ba2c0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   ba2c4:	e7f1      	b.n	ba2aa <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x42>

000ba2c6 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>:
    get(variant<_Types...>& __v)
   ba2c6:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
   ba2c8:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
   ba2ca:	2b07      	cmp	r3, #7
   ba2cc:	d004      	beq.n	ba2d8 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
   ba2ce:	3bff      	subs	r3, #255	; 0xff
   ba2d0:	4258      	negs	r0, r3
   ba2d2:	4158      	adcs	r0, r3
   ba2d4:	f7fb f944 	bl	b5560 <_ZSt26__throw_bad_variant_accessb>
    }
   ba2d8:	bd08      	pop	{r3, pc}
	...

000ba2dc <_ZN8particle7Variant2asI6StringEERT_v>:
     *
     * @tparam T Target type.
     * @return Reference to the stored value.
     */
    template<typename T>
    T& as() {
   ba2dc:	b510      	push	{r4, lr}
	  return make_signed_t<__index_type>(this->_M_index);
   ba2de:	7c03      	ldrb	r3, [r0, #16]
        static_assert(IsAlternativeType<T>::value, "The type specified is not one of the alternative types of Variant");
        if (!is<T>()) {
   ba2e0:	2b07      	cmp	r3, #7
    T& as() {
   ba2e2:	b086      	sub	sp, #24
   ba2e4:	4604      	mov	r4, r0
        if (!is<T>()) {
   ba2e6:	d01a      	beq.n	ba31e <_ZN8particle7Variant2asI6StringEERT_v+0x42>
        return std::visit(ConvertToVisitor<T>(), v_);
   ba2e8:	2200      	movs	r2, #0
      if ((__variants.valueless_by_exception() || ...))
   ba2ea:	2bff      	cmp	r3, #255	; 0xff
   ba2ec:	f88d 2004 	strb.w	r2, [sp, #4]
   ba2f0:	d101      	bne.n	ba2f6 <_ZN8particle7Variant2asI6StringEERT_v+0x1a>
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
   ba2f2:	f7fd fa5d 	bl	b77b0 <abort>
			   std::forward<_Variants>(__variants)...);
   ba2f6:	4a12      	ldr	r2, [pc, #72]	; (ba340 <_ZN8particle7Variant2asI6StringEERT_v+0x64>)
	  return make_signed_t<__index_type>(this->_M_index);
   ba2f8:	b25b      	sxtb	r3, r3
			   std::forward<_Variants>(__variants)...);
   ba2fa:	a901      	add	r1, sp, #4
   ba2fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   ba300:	4602      	mov	r2, r0
   ba302:	a802      	add	r0, sp, #8
   ba304:	4798      	blx	r3
	  if (index() == __index)
   ba306:	7c23      	ldrb	r3, [r4, #16]
   ba308:	2b07      	cmp	r3, #7
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
   ba30a:	4620      	mov	r0, r4
	  if (index() == __index)
   ba30c:	d10c      	bne.n	ba328 <_ZN8particle7Variant2asI6StringEERT_v+0x4c>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
   ba30e:	f7ff ffda 	bl	ba2c6 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
   ba312:	a902      	add	r1, sp, #8
   ba314:	f7ff fc3c 	bl	b9b90 <_ZN6StringaSEOS_>
            v_ = to<T>();
   ba318:	a802      	add	r0, sp, #8
   ba31a:	f7ff fb8b 	bl	b9a34 <_ZN6StringD1Ev>
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
   ba31e:	4620      	mov	r0, r4
   ba320:	f7ff ffd1 	bl	ba2c6 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
        }
        return value<T>();
    }
   ba324:	b006      	add	sp, #24
   ba326:	bd10      	pop	{r4, pc}
	      this->_M_reset();
   ba328:	f7fb fc3e 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   ba32c:	2307      	movs	r3, #7
   ba32e:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
   ba330:	a902      	add	r1, sp, #8
   ba332:	4620      	mov	r0, r4
   ba334:	f7ff fc07 	bl	b9b46 <_ZN6StringC1EOS_>
	  return std::get<_Np>(*this);
   ba338:	4620      	mov	r0, r4
   ba33a:	f7ff ffc4 	bl	ba2c6 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
   ba33e:	e7eb      	b.n	ba318 <_ZN8particle7Variant2asI6StringEERT_v+0x3c>
   ba340:	000bdf14 	.word	0x000bdf14

000ba344 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>:
    get(variant<_Types...>& __v)
   ba344:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
   ba346:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
   ba348:	2b09      	cmp	r3, #9
   ba34a:	d004      	beq.n	ba356 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
   ba34c:	3bff      	subs	r3, #255	; 0xff
   ba34e:	4258      	negs	r0, r3
   ba350:	4158      	adcs	r0, r3
   ba352:	f7fb f905 	bl	b5560 <_ZSt26__throw_bad_variant_accessb>
    }
   ba356:	bd08      	pop	{r3, pc}

000ba358 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v>:
    T& as() {
   ba358:	b510      	push	{r4, lr}
	  return make_signed_t<__index_type>(this->_M_index);
   ba35a:	7c03      	ldrb	r3, [r0, #16]
        if (!is<T>()) {
   ba35c:	2b09      	cmp	r3, #9
    T& as() {
   ba35e:	b086      	sub	sp, #24
   ba360:	4604      	mov	r4, r0
        if (!is<T>()) {
   ba362:	d02a      	beq.n	ba3ba <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v+0x62>
        return std::visit(ConvertToVisitor<T>(), v_);
   ba364:	2200      	movs	r2, #0
      if ((__variants.valueless_by_exception() || ...))
   ba366:	2bff      	cmp	r3, #255	; 0xff
   ba368:	f88d 200c 	strb.w	r2, [sp, #12]
   ba36c:	d101      	bne.n	ba372 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v+0x1a>
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
   ba36e:	f7fd fa1f 	bl	b77b0 <abort>
			   std::forward<_Variants>(__variants)...);
   ba372:	4a1b      	ldr	r2, [pc, #108]	; (ba3e0 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v+0x88>)
	  return make_signed_t<__index_type>(this->_M_index);
   ba374:	b25b      	sxtb	r3, r3
			   std::forward<_Variants>(__variants)...);
   ba376:	a903      	add	r1, sp, #12
   ba378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   ba37c:	4602      	mov	r2, r0
   ba37e:	4668      	mov	r0, sp
   ba380:	4798      	blx	r3
	  if (index() == __index)
   ba382:	7c23      	ldrb	r3, [r4, #16]
   ba384:	2b09      	cmp	r3, #9
   ba386:	d11d      	bne.n	ba3c4 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v+0x6c>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
   ba388:	4669      	mov	r1, sp
   ba38a:	a803      	add	r0, sp, #12
   ba38c:	f7fb fa26 	bl	b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
   ba390:	4620      	mov	r0, r4
   ba392:	f7ff ffd7 	bl	ba344 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
      __a = _GLIBCXX_MOVE(__b);
   ba396:	9a03      	ldr	r2, [sp, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba398:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba39a:	6002      	str	r2, [r0, #0]
   ba39c:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   ba39e:	9303      	str	r3, [sp, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba3a0:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba3a2:	6042      	str	r2, [r0, #4]
   ba3a4:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   ba3a6:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba3a8:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba3aa:	6082      	str	r2, [r0, #8]
   ba3ac:	a803      	add	r0, sp, #12
      __b = _GLIBCXX_MOVE(__tmp);
   ba3ae:	9305      	str	r3, [sp, #20]
   ba3b0:	f7fb fc79 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
            v_ = to<T>();
   ba3b4:	4668      	mov	r0, sp
   ba3b6:	f7fb fc76 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
   ba3ba:	4620      	mov	r0, r4
   ba3bc:	f7ff ffc2 	bl	ba344 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
    }
   ba3c0:	b006      	add	sp, #24
   ba3c2:	bd10      	pop	{r4, pc}
	      this->_M_reset();
   ba3c4:	4620      	mov	r0, r4
   ba3c6:	f7fb fbef 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
   ba3ca:	2309      	movs	r3, #9
   ba3cc:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
   ba3ce:	4669      	mov	r1, sp
   ba3d0:	4620      	mov	r0, r4
   ba3d2:	f7fb fa03 	bl	b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  return std::get<_Np>(*this);
   ba3d6:	4620      	mov	r0, r4
   ba3d8:	f7ff ffb4 	bl	ba344 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
   ba3dc:	e7ea      	b.n	ba3b4 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v+0x5c>
   ba3de:	bf00      	nop
   ba3e0:	000be588 	.word	0x000be588

000ba3e4 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>:
    get(const variant<_Types...>& __v)
   ba3e4:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
   ba3e6:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
   ba3e8:	2b09      	cmp	r3, #9
   ba3ea:	d004      	beq.n	ba3f6 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
   ba3ec:	3bff      	subs	r3, #255	; 0xff
   ba3ee:	4258      	negs	r0, r3
   ba3f0:	4158      	adcs	r0, r3
   ba3f2:	f7fb f8b5 	bl	b5560 <_ZSt26__throw_bad_variant_accessb>
    }
   ba3f6:	bd08      	pop	{r3, pc}

000ba3f8 <_ZNK8particle7Variant2atEi>:
        return;
    }
    arr.removeAt(index);
}

Variant Variant::at(int index) const {
   ba3f8:	b538      	push	{r3, r4, r5, lr}
    if (!isArray()) {
   ba3fa:	7c0b      	ldrb	r3, [r1, #16]
   ba3fc:	2b09      	cmp	r3, #9
Variant Variant::at(int index) const {
   ba3fe:	4604      	mov	r4, r0
   ba400:	4615      	mov	r5, r2
   ba402:	4608      	mov	r0, r1
    if (!isArray()) {
   ba404:	d006      	beq.n	ba414 <_ZNK8particle7Variant2atEi+0x1c>
        return Variant();
   ba406:	2218      	movs	r2, #24
   ba408:	2100      	movs	r1, #0
   ba40a:	4620      	mov	r0, r4
   ba40c:	f001 fba4 	bl	bbb58 <memset>
    auto& arr = value<VariantArray>();
    if (index < 0 || index >= arr.size()) {
        return Variant();
    }
    return arr.at(index);
}
   ba410:	4620      	mov	r0, r4
   ba412:	bd38      	pop	{r3, r4, r5, pc}
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
   ba414:	f7ff ffe6 	bl	ba3e4 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
    if (index < 0 || index >= arr.size()) {
   ba418:	2d00      	cmp	r5, #0
   ba41a:	dbf4      	blt.n	ba406 <_ZNK8particle7Variant2atEi+0xe>
   ba41c:	6843      	ldr	r3, [r0, #4]
   ba41e:	429d      	cmp	r5, r3
   ba420:	daf1      	bge.n	ba406 <_ZNK8particle7Variant2atEi+0xe>
    return data_[i];
   ba422:	6803      	ldr	r3, [r0, #0]
      _Move_ctor_base(const _Move_ctor_base&) = default;
   ba424:	2118      	movs	r1, #24
   ba426:	fb01 3105 	mla	r1, r1, r5, r3
   ba42a:	4620      	mov	r0, r4
   ba42c:	f7fb f9f4 	bl	b5818 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
    }
   ba430:	e7ee      	b.n	ba410 <_ZNK8particle7Variant2atEi+0x18>
	...

000ba434 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_>:
     *
     * @param key Key.
     * @return Iterator.
     */
    template<typename T>
    Iterator lowerBound(const T& key) {
   ba434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return data_ + size_;
   ba438:	e9d0 6400 	ldrd	r6, r4, [r0]
   ba43c:	2328      	movs	r3, #40	; 0x28
   ba43e:	435c      	muls	r4, r3
      return __last - __first;
   ba440:	4b13      	ldr	r3, [pc, #76]	; (ba490 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_+0x5c>)
   ba442:	10e4      	asrs	r4, r4, #3
   ba444:	b086      	sub	sp, #24
   ba446:	460f      	mov	r7, r1
   ba448:	435c      	muls	r4, r3
      while (__len > 0)
   ba44a:	2c00      	cmp	r4, #0
   ba44c:	dd1c      	ble.n	ba488 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_+0x54>
	  _DistanceType __half = __len >> 1;
   ba44e:	1065      	asrs	r5, r4, #1
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
   ba450:	4629      	mov	r1, r5
   ba452:	a801      	add	r0, sp, #4
	  _ForwardIterator __middle = __first;
   ba454:	9601      	str	r6, [sp, #4]
   ba456:	f7ff fd79 	bl	b9f4c <_ZSt9__advanceIPSt4pairIK6StringN8particle7VariantEEiEvRT_T0_St26random_access_iterator_tag.isra.0>
        return std::lower_bound(entries_.begin(), entries_.end(), key, [this](const Entry& entry, const T& key) {
            return this->cmp_(entry.first, key);
   ba45a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   ba45e:	6839      	ldr	r1, [r7, #0]
   ba460:	a802      	add	r0, sp, #8
   ba462:	f7ff fb32 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   ba466:	4640      	mov	r0, r8
   ba468:	a902      	add	r1, sp, #8
   ba46a:	f7ff fbf2 	bl	b9c52 <_ZNK6StringltERKS_>
   ba46e:	4680      	mov	r8, r0
   ba470:	a802      	add	r0, sp, #8
   ba472:	f7ff fadf 	bl	b9a34 <_ZN6StringD1Ev>
	  if (__comp(__middle, __val))
   ba476:	f1b8 0f00 	cmp.w	r8, #0
   ba47a:	d003      	beq.n	ba484 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_+0x50>
	      __first = __middle;
   ba47c:	9e01      	ldr	r6, [sp, #4]
	      __len = __len - __half - 1;
   ba47e:	1b65      	subs	r5, r4, r5
	      ++__first;
   ba480:	3628      	adds	r6, #40	; 0x28
	      __len = __len - __half - 1;
   ba482:	3d01      	subs	r5, #1
      while (__len > 0)
   ba484:	462c      	mov	r4, r5
   ba486:	e7e0      	b.n	ba44a <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_+0x16>
        });
    }
   ba488:	4630      	mov	r0, r6
   ba48a:	b006      	add	sp, #24
   ba48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba490:	cccccccd 	.word	0xcccccccd

000ba494 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_>:
    Iterator lowerBound(const T& key) {
   ba494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba496:	e9d0 6400 	ldrd	r6, r4, [r0]
   ba49a:	2328      	movs	r3, #40	; 0x28
   ba49c:	435c      	muls	r4, r3
      return __last - __first;
   ba49e:	4b0d      	ldr	r3, [pc, #52]	; (ba4d4 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_+0x40>)
   ba4a0:	10e4      	asrs	r4, r4, #3
   ba4a2:	460f      	mov	r7, r1
   ba4a4:	435c      	muls	r4, r3
   ba4a6:	2c00      	cmp	r4, #0
   ba4a8:	dd10      	ble.n	ba4cc <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_+0x38>
	  _DistanceType __half = __len >> 1;
   ba4aa:	1065      	asrs	r5, r4, #1
      std::__advance(__i, __d, std::__iterator_category(__i));
   ba4ac:	4629      	mov	r1, r5
   ba4ae:	a801      	add	r0, sp, #4
	  _ForwardIterator __middle = __first;
   ba4b0:	9601      	str	r6, [sp, #4]
   ba4b2:	f7ff fd4b 	bl	b9f4c <_ZSt9__advanceIPSt4pairIK6StringN8particle7VariantEEiEvRT_T0_St26random_access_iterator_tag.isra.0>
   ba4b6:	9801      	ldr	r0, [sp, #4]
   ba4b8:	4639      	mov	r1, r7
   ba4ba:	f7ff fbca 	bl	b9c52 <_ZNK6StringltERKS_>
	  if (__comp(__middle, __val))
   ba4be:	b118      	cbz	r0, ba4c8 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_+0x34>
	      __first = __middle;
   ba4c0:	9e01      	ldr	r6, [sp, #4]
	      __len = __len - __half - 1;
   ba4c2:	1b65      	subs	r5, r4, r5
	      ++__first;
   ba4c4:	3628      	adds	r6, #40	; 0x28
	      __len = __len - __half - 1;
   ba4c6:	3d01      	subs	r5, #1
      while (__len > 0)
   ba4c8:	462c      	mov	r4, r5
   ba4ca:	e7ec      	b.n	ba4a6 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_+0x12>
    }
   ba4cc:	4630      	mov	r0, r6
   ba4ce:	b003      	add	sp, #12
   ba4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba4d2:	bf00      	nop
   ba4d4:	cccccccd 	.word	0xcccccccd

000ba4d8 <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>:
   ba4d8:	b538      	push	{r3, r4, r5, lr}
   ba4da:	4604      	mov	r4, r0
   ba4dc:	460d      	mov	r5, r1
   ba4de:	f7ff fb4c 	bl	b9b7a <_ZN6StringC1ERKS_>
   ba4e2:	f105 0110 	add.w	r1, r5, #16
   ba4e6:	f104 0010 	add.w	r0, r4, #16
   ba4ea:	f7fc f81f 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   ba4ee:	4620      	mov	r0, r4
   ba4f0:	bd38      	pop	{r3, r4, r5, pc}

000ba4f2 <_ZNSt4pairIK6StringN8particle7VariantEEC1IS0_S3_Lb1EEEOS_IT_T0_E>:
	       enable_if<_PCCFP<_U1, _U2>::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
   ba4f2:	b538      	push	{r3, r4, r5, lr}
   ba4f4:	4604      	mov	r4, r0
   ba4f6:	460d      	mov	r5, r1
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   ba4f8:	f7ff fb25 	bl	b9b46 <_ZN6StringC1EOS_>
   ba4fc:	f105 0110 	add.w	r1, r5, #16
   ba500:	f104 0010 	add.w	r0, r4, #16
   ba504:	f7fc f812 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   ba508:	4620      	mov	r0, r4
   ba50a:	bd38      	pop	{r3, r4, r5, pc}

000ba50c <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>:
    get(const variant<_Types...>& __v)
   ba50c:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
   ba50e:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
   ba510:	2b07      	cmp	r3, #7
   ba512:	d004      	beq.n	ba51e <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
   ba514:	3bff      	subs	r3, #255	; 0xff
   ba516:	4258      	negs	r0, r3
   ba518:	4158      	adcs	r0, r3
   ba51a:	f7fb f821 	bl	b5560 <_ZSt26__throw_bad_variant_accessb>
    }
   ba51e:	bd08      	pop	{r3, pc}

000ba520 <_ZSt3getILj8EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>:
    get(const variant<_Types...>& __v)
   ba520:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
   ba522:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
   ba524:	2b08      	cmp	r3, #8
   ba526:	d004      	beq.n	ba532 <_ZSt3getILj8EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
   ba528:	3bff      	subs	r3, #255	; 0xff
   ba52a:	4258      	negs	r0, r3
   ba52c:	4158      	adcs	r0, r3
   ba52e:	f7fb f817 	bl	b5560 <_ZSt26__throw_bad_variant_accessb>
    }
   ba532:	bd08      	pop	{r3, pc}

000ba534 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>:
    get(const variant<_Types...>& __v)
   ba534:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
   ba536:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
   ba538:	2b0a      	cmp	r3, #10
   ba53a:	d004      	beq.n	ba546 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
   ba53c:	3bff      	subs	r3, #255	; 0xff
   ba53e:	4258      	negs	r0, r3
   ba540:	4158      	adcs	r0, r3
   ba542:	f7fb f80d 	bl	b5560 <_ZSt26__throw_bad_variant_accessb>
    }
   ba546:	bd08      	pop	{r3, pc}

000ba548 <_ZNK8particle7Variant4sizeEv>:
        return false;
    }
    return value<VariantMap>().has(key);
}

int Variant::size() const {
   ba548:	b508      	push	{r3, lr}
   ba54a:	7c03      	ldrb	r3, [r0, #16]
   ba54c:	3b07      	subs	r3, #7
   ba54e:	2b03      	cmp	r3, #3
   ba550:	d811      	bhi.n	ba576 <_ZNK8particle7Variant4sizeEv+0x2e>
   ba552:	e8df f003 	tbb	[pc, r3]
   ba556:	0602      	.short	0x0602
   ba558:	0d0a      	.short	0x0d0a
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
   ba55a:	f7ff ffd7 	bl	ba50c <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
    switch (type()) {
    case Type::STRING:
        return value<String>().length();
   ba55e:	6880      	ldr	r0, [r0, #8]
    case Type::MAP:
        return value<VariantMap>().size();
    default:
        return 0;
    }
}
   ba560:	bd08      	pop	{r3, pc}
   ba562:	f7ff ffdd 	bl	ba520 <_ZSt3getILj8EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
    return size_;
   ba566:	6840      	ldr	r0, [r0, #4]
        return value<VariantMap>().size();
   ba568:	e7fa      	b.n	ba560 <_ZNK8particle7Variant4sizeEv+0x18>
   ba56a:	f7ff ff3b 	bl	ba3e4 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
   ba56e:	e7fa      	b.n	ba566 <_ZNK8particle7Variant4sizeEv+0x1e>
   ba570:	f7ff ffe0 	bl	ba534 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
   ba574:	e7f7      	b.n	ba566 <_ZNK8particle7Variant4sizeEv+0x1e>
	  return make_signed_t<__index_type>(this->_M_index);
   ba576:	2000      	movs	r0, #0
   ba578:	e7f2      	b.n	ba560 <_ZNK8particle7Variant4sizeEv+0x18>

000ba57a <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE>:
int encodeToCbor(EncodingStream& stream, const Variant& var) {
   ba57a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ba57e:	7c0b      	ldrb	r3, [r1, #16]
   ba580:	4604      	mov	r4, r0
   ba582:	4608      	mov	r0, r1
   ba584:	2b0a      	cmp	r3, #10
   ba586:	f200 80bb 	bhi.w	ba700 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x186>
   ba58a:	e8df f003 	tbb	[pc, r3]
   ba58e:	0f06      	.short	0x0f06
   ba590:	322d241c 	.word	0x322d241c
   ba594:	786a6337 	.word	0x786a6337
   ba598:	95          	.byte	0x95
   ba599:	00          	.byte	0x00
        CHECK(stream.writeUint8(0xf6 /* null */)); // See RFC 8949, Appendix B
   ba59a:	21f6      	movs	r1, #246	; 0xf6
        CHECK(stream.writeUint8(v ? 0xf5 /* true */ : 0xf4 /* false */));
   ba59c:	6820      	ldr	r0, [r4, #0]
   ba59e:	f7ff fceb 	bl	b9f78 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
   ba5a2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
   ba5a6:	b002      	add	sp, #8
   ba5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__v.index() != _Np)
   ba5ac:	2b01      	cmp	r3, #1
   ba5ae:	d004      	beq.n	ba5ba <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x40>
	__throw_bad_variant_access(__v.valueless_by_exception());
   ba5b0:	3bff      	subs	r3, #255	; 0xff
   ba5b2:	4258      	negs	r0, r3
   ba5b4:	4158      	adcs	r0, r3
   ba5b6:	f7fa ffd3 	bl	b5560 <_ZSt26__throw_bad_variant_accessb>
        CHECK(stream.writeUint8(v ? 0xf5 /* true */ : 0xf4 /* false */));
   ba5ba:	7803      	ldrb	r3, [r0, #0]
   ba5bc:	2b00      	cmp	r3, #0
   ba5be:	bf14      	ite	ne
   ba5c0:	21f5      	movne	r1, #245	; 0xf5
   ba5c2:	21f4      	moveq	r1, #244	; 0xf4
   ba5c4:	e7ea      	b.n	ba59c <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x22>
      if (__v.index() != _Np)
   ba5c6:	2b02      	cmp	r3, #2
   ba5c8:	d1f2      	bne.n	ba5b0 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
        CHECK(writeCborSignedInteger(stream, var.value<int>()));
   ba5ca:	6802      	ldr	r2, [r0, #0]
   ba5cc:	17d3      	asrs	r3, r2, #31
        CHECK(writeCborSignedInteger(stream, var.value<int64_t>()));
   ba5ce:	4620      	mov	r0, r4
   ba5d0:	f7ff fd34 	bl	ba03c <_ZN8particle12_GLOBAL__N_122writeCborSignedIntegerERNS0_14EncodingStreamEx>
   ba5d4:	e7e5      	b.n	ba5a2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x28>
   ba5d6:	2b03      	cmp	r3, #3
   ba5d8:	d1ea      	bne.n	ba5b0 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
    CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
   ba5da:	6802      	ldr	r2, [r0, #0]
   ba5dc:	2300      	movs	r3, #0
   ba5de:	2100      	movs	r1, #0
   ba5e0:	4620      	mov	r0, r4
   ba5e2:	f7ff fcd6 	bl	b9f92 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
   ba5e6:	e7dc      	b.n	ba5a2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x28>
   ba5e8:	2b04      	cmp	r3, #4
   ba5ea:	d1e1      	bne.n	ba5b0 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
        CHECK(writeCborSignedInteger(stream, var.value<int64_t>()));
   ba5ec:	e9d0 2300 	ldrd	r2, r3, [r0]
   ba5f0:	e7ed      	b.n	ba5ce <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x54>
   ba5f2:	2b05      	cmp	r3, #5
   ba5f4:	d1dc      	bne.n	ba5b0 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
    CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
   ba5f6:	e9d0 2300 	ldrd	r2, r3, [r0]
   ba5fa:	e7f0      	b.n	ba5de <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x64>
   ba5fc:	2b06      	cmp	r3, #6
   ba5fe:	d1d7      	bne.n	ba5b0 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
        double d = var.value<double>();
   ba600:	e9d0 6700 	ldrd	r6, r7, [r0]
        float f = d;
   ba604:	4639      	mov	r1, r7
   ba606:	4630      	mov	r0, r6
   ba608:	f7fa f9a8 	bl	b495c <__aeabi_d2f>
   ba60c:	4605      	mov	r5, r0
        if (f == d) {
   ba60e:	f7f9 fe6b 	bl	b42e8 <__aeabi_f2d>
   ba612:	4632      	mov	r2, r6
   ba614:	463b      	mov	r3, r7
   ba616:	f8d4 8000 	ldr.w	r8, [r4]
   ba61a:	f7fa f925 	bl	b4868 <__aeabi_dcmpeq>
   ba61e:	b168      	cbz	r0, ba63c <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0xc2>
            CHECK(stream.writeUint8(0xfa /* Single-precision */));
   ba620:	21fa      	movs	r1, #250	; 0xfa
   ba622:	4640      	mov	r0, r8
   ba624:	f7ff fca8 	bl	b9f78 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
   ba628:	2800      	cmp	r0, #0
   ba62a:	dbbc      	blt.n	ba5a6 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
    return __builtin_bswap32(val);
   ba62c:	ba2d      	rev	r5, r5
        v = nativeToBigEndian(v);
   ba62e:	9500      	str	r5, [sp, #0]
        CHECK(write((const char*)&v, sizeof(v)));
   ba630:	2204      	movs	r2, #4
        CHECK(write((const char*)&v, sizeof(v)));
   ba632:	4669      	mov	r1, sp
    CHECK(stream.write(buf.data(), buf.size()));
   ba634:	6820      	ldr	r0, [r4, #0]
   ba636:	f7ff fc8f 	bl	b9f58 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>
   ba63a:	e7b2      	b.n	ba5a2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x28>
            CHECK(stream.writeUint8(0xfb /* Double-precision */));
   ba63c:	21fb      	movs	r1, #251	; 0xfb
   ba63e:	4640      	mov	r0, r8
   ba640:	f7ff fc9a 	bl	b9f78 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
   ba644:	2800      	cmp	r0, #0
   ba646:	dbae      	blt.n	ba5a6 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
    return __builtin_bswap64(val);
   ba648:	ba3a      	rev	r2, r7
   ba64a:	ba33      	rev	r3, r6
        v = nativeToBigEndian(v);
   ba64c:	e9cd 2300 	strd	r2, r3, [sp]
        CHECK(write((const char*)&v, sizeof(v)));
   ba650:	2208      	movs	r2, #8
   ba652:	e7ee      	b.n	ba632 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0xb8>
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
   ba654:	f7ff ff5a 	bl	ba50c <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
   ba658:	4601      	mov	r1, r0
        CHECK(writeCborTextString(stream, var.value<String>()));
   ba65a:	4620      	mov	r0, r4
   ba65c:	f7ff fcfa 	bl	ba054 <_ZN8particle12_GLOBAL__N_119writeCborTextStringERNS0_14EncodingStreamERK6String>
   ba660:	e79f      	b.n	ba5a2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x28>
   ba662:	f7ff ff5d 	bl	ba520 <_ZSt3getILj8EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
    CHECK(writeCborHead(stream, 2 /* Byte string */, buf.size()));
   ba666:	2300      	movs	r3, #0
   ba668:	6842      	ldr	r2, [r0, #4]
   ba66a:	4605      	mov	r5, r0
   ba66c:	2102      	movs	r1, #2
   ba66e:	4620      	mov	r0, r4
   ba670:	f7ff fc8f 	bl	b9f92 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
   ba674:	2800      	cmp	r0, #0
   ba676:	db96      	blt.n	ba5a6 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
    CHECK(stream.write(buf.data(), buf.size()));
   ba678:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba67c:	e7da      	b.n	ba634 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0xba>
   ba67e:	f7ff feb1 	bl	ba3e4 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
        CHECK(writeCborHead(stream, 4 /* Array */, arr.size()));
   ba682:	6842      	ldr	r2, [r0, #4]
   ba684:	4606      	mov	r6, r0
   ba686:	17d3      	asrs	r3, r2, #31
   ba688:	2104      	movs	r1, #4
   ba68a:	4620      	mov	r0, r4
   ba68c:	f7ff fc81 	bl	b9f92 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
   ba690:	2800      	cmp	r0, #0
   ba692:	db88      	blt.n	ba5a6 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
    return data_ + size_;
   ba694:	e9d6 5600 	ldrd	r5, r6, [r6]
   ba698:	2318      	movs	r3, #24
   ba69a:	fb03 5606 	mla	r6, r3, r6, r5
        for (auto& v: arr) {
   ba69e:	42b5      	cmp	r5, r6
   ba6a0:	d101      	bne.n	ba6a6 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x12c>
    return 0;
   ba6a2:	2000      	movs	r0, #0
   ba6a4:	e77f      	b.n	ba5a6 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
            CHECK(encodeToCbor(stream, v));
   ba6a6:	4629      	mov	r1, r5
   ba6a8:	4620      	mov	r0, r4
   ba6aa:	f7ff ff66 	bl	ba57a <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE>
   ba6ae:	2800      	cmp	r0, #0
   ba6b0:	f105 0518 	add.w	r5, r5, #24
   ba6b4:	daf3      	bge.n	ba69e <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x124>
   ba6b6:	e776      	b.n	ba5a6 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
   ba6b8:	f7ff ff3c 	bl	ba534 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
        CHECK(writeCborHead(stream, 5 /* Map */, entries.size()));
   ba6bc:	6842      	ldr	r2, [r0, #4]
   ba6be:	4606      	mov	r6, r0
   ba6c0:	17d3      	asrs	r3, r2, #31
   ba6c2:	2105      	movs	r1, #5
   ba6c4:	4620      	mov	r0, r4
   ba6c6:	f7ff fc64 	bl	b9f92 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
   ba6ca:	2800      	cmp	r0, #0
   ba6cc:	f6ff af6b 	blt.w	ba5a6 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
   ba6d0:	e9d6 5600 	ldrd	r5, r6, [r6]
   ba6d4:	2328      	movs	r3, #40	; 0x28
   ba6d6:	fb03 5606 	mla	r6, r3, r6, r5
        for (auto& e: entries) {
   ba6da:	42b5      	cmp	r5, r6
   ba6dc:	d0e1      	beq.n	ba6a2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x128>
            CHECK(writeCborTextString(stream, e.first));
   ba6de:	4629      	mov	r1, r5
   ba6e0:	4620      	mov	r0, r4
   ba6e2:	f7ff fcb7 	bl	ba054 <_ZN8particle12_GLOBAL__N_119writeCborTextStringERNS0_14EncodingStreamERK6String>
   ba6e6:	2800      	cmp	r0, #0
   ba6e8:	f6ff af5d 	blt.w	ba5a6 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
            CHECK(encodeToCbor(stream, e.second));
   ba6ec:	f105 0110 	add.w	r1, r5, #16
   ba6f0:	4620      	mov	r0, r4
   ba6f2:	f7ff ff42 	bl	ba57a <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE>
   ba6f6:	2800      	cmp	r0, #0
   ba6f8:	f105 0528 	add.w	r5, r5, #40	; 0x28
   ba6fc:	daed      	bge.n	ba6da <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x160>
   ba6fe:	e752      	b.n	ba5a6 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
	  return make_signed_t<__index_type>(this->_M_index);
   ba700:	f06f 00f9 	mvn.w	r0, #249	; 0xf9
   ba704:	e74f      	b.n	ba5a6 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>

000ba706 <_ZN8particle12encodeToCBORERKNS_7VariantER5Print>:
        return Variant();
    }
    return v;
}

int encodeToCBOR(const Variant& var, Print& stream) {
   ba706:	b507      	push	{r0, r1, r2, lr}
            stream_(stream) {
   ba708:	9101      	str	r1, [sp, #4]
    EncodingStream s(stream);
    CHECK(encodeToCbor(s, var));
   ba70a:	4601      	mov	r1, r0
   ba70c:	a801      	add	r0, sp, #4
   ba70e:	f7ff ff34 	bl	ba57a <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE>
    return 0;
}
   ba712:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   ba716:	b003      	add	sp, #12
   ba718:	f85d fb04 	ldr.w	pc, [sp], #4

000ba71c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   ba71c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   ba71e:	6883      	ldr	r3, [r0, #8]
   ba720:	428b      	cmp	r3, r1
   ba722:	da02      	bge.n	ba72a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi+0xe>
   ba724:	f7fc f870 	bl	b6808 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
}
   ba728:	bd08      	pop	{r3, pc}
    return true;
   ba72a:	2001      	movs	r0, #1
   ba72c:	e7fc      	b.n	ba728 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi+0xc>

000ba72e <_ZN8particle7Variant14ensureCapacityIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEEbRT_i>:
            return false;
        }
    }

    template<typename ContainerT>
    static bool ensureCapacity(ContainerT& cont, int count) {
   ba72e:	b508      	push	{r3, lr}
        int newSize = cont.size() + count;
   ba730:	6842      	ldr	r2, [r0, #4]
    return capacity_;
   ba732:	6883      	ldr	r3, [r0, #8]
   ba734:	4411      	add	r1, r2
        if (cont.capacity() >= newSize) {
   ba736:	4299      	cmp	r1, r3
   ba738:	dd0a      	ble.n	ba750 <_ZN8particle7Variant14ensureCapacityIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEEbRT_i+0x22>
            return true;
        }
        return cont.reserve(std::max(newSize, cont.capacity() * 3 / 2));
   ba73a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   ba73e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   ba742:	105b      	asrs	r3, r3, #1
   ba744:	4299      	cmp	r1, r3
   ba746:	bfb8      	it	lt
   ba748:	4619      	movlt	r1, r3
   ba74a:	f7ff ffe7 	bl	ba71c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi>
    }
   ba74e:	bd08      	pop	{r3, pc}
            return true;
   ba750:	2001      	movs	r0, #1
   ba752:	e7fc      	b.n	ba74e <_ZN8particle7Variant14ensureCapacityIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEEbRT_i+0x20>

000ba754 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESD_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
   ba754:	b510      	push	{r4, lr}
template<>
struct Variant::ConvertToVisitor<VariantArray> {
    bool ok = false;

    VariantArray operator()(const VariantArray& val) {
        ok = true;
   ba756:	2301      	movs	r3, #1
   ba758:	4604      	mov	r4, r0
   ba75a:	700b      	strb	r3, [r1, #0]
        return val;
   ba75c:	4611      	mov	r1, r2
   ba75e:	f7fc f86d 	bl	b683c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_>
      }
   ba762:	4620      	mov	r0, r4
   ba764:	bd10      	pop	{r4, pc}

000ba766 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba766:	b570      	push	{r4, r5, r6, lr}
   ba768:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba76a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   ba76e:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba770:	4604      	mov	r4, r0
   ba772:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba774:	da11      	bge.n	ba79a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_+0x34>
    T* const p = data_ + i;
   ba776:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba778:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   ba77a:	2218      	movs	r2, #24
   ba77c:	fb02 3505 	mla	r5, r2, r5, r3
    move(p + 1, p, data_ + size_);
   ba780:	f105 0018 	add.w	r0, r5, #24
   ba784:	fb02 3201 	mla	r2, r2, r1, r3
   ba788:	4629      	mov	r1, r5
   ba78a:	f7fc f813 	bl	b67b4 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba78e:	b955      	cbnz	r5, ba7a6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_+0x40>
    ++size_;
   ba790:	6863      	ldr	r3, [r4, #4]
   ba792:	3301      	adds	r3, #1
   ba794:	6063      	str	r3, [r4, #4]
    return true;
   ba796:	2001      	movs	r0, #1
   ba798:	e004      	b.n	ba7a4 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_+0x3e>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba79a:	3101      	adds	r1, #1
   ba79c:	f7fc f834 	bl	b6808 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba7a0:	2800      	cmp	r0, #0
   ba7a2:	d1e8      	bne.n	ba776 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_+0x10>
}
   ba7a4:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   ba7a6:	4631      	mov	r1, r6
   ba7a8:	4628      	mov	r0, r5
   ba7aa:	f7fb febf 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   ba7ae:	e7ef      	b.n	ba790 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_+0x2a>

000ba7b0 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba7b0:	b530      	push	{r4, r5, lr}
   ba7b2:	b087      	sub	sp, #28
    return insert(size_, std::move(value));
   ba7b4:	6845      	ldr	r5, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba7b6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   ba7b8:	4668      	mov	r0, sp
   ba7ba:	f7fb feb7 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   ba7be:	466a      	mov	r2, sp
   ba7c0:	4629      	mov	r1, r5
   ba7c2:	4620      	mov	r0, r4
   ba7c4:	f7ff ffcf 	bl	ba766 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_>
   ba7c8:	4604      	mov	r4, r0
      { _M_reset(); }
   ba7ca:	4668      	mov	r0, sp
   ba7cc:	f7fb f9ec 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
   ba7d0:	4620      	mov	r0, r4
   ba7d2:	b007      	add	sp, #28
   ba7d4:	bd30      	pop	{r4, r5, pc}
	...

000ba7d8 <_ZN8particle12_GLOBAL__N_119appendKeyValueArrayERN5spark6VectorINS_7VariantENS1_16DefaultAllocatorEEES3_S3_>:
int appendKeyValueArray(VariantArray& arr, Variant key, Variant val) {
   ba7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba7da:	b08d      	sub	sp, #52	; 0x34
        capacity_(0) {
   ba7dc:	2400      	movs	r4, #0
   ba7de:	4605      	mov	r5, r0
   ba7e0:	460f      	mov	r7, r1
    if (n > capacity_ && !realloc(n)) {
   ba7e2:	4668      	mov	r0, sp
   ba7e4:	2102      	movs	r1, #2
        capacity_(0) {
   ba7e6:	e9cd 4400 	strd	r4, r4, [sp]
   ba7ea:	4616      	mov	r6, r2
   ba7ec:	9402      	str	r4, [sp, #8]
    if (n > capacity_ && !realloc(n)) {
   ba7ee:	f7fc f80b 	bl	b6808 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba7f2:	b360      	cbz	r0, ba84e <_ZN8particle12_GLOBAL__N_119appendKeyValueArrayERN5spark6VectorINS_7VariantENS1_16DefaultAllocatorEEES3_S3_+0x76>
    arr2.append(std::move(key));
   ba7f4:	4639      	mov	r1, r7
   ba7f6:	a806      	add	r0, sp, #24
   ba7f8:	f7fb fe98 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   ba7fc:	a906      	add	r1, sp, #24
   ba7fe:	4668      	mov	r0, sp
   ba800:	f7ff ffd6 	bl	ba7b0 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>
   ba804:	a806      	add	r0, sp, #24
   ba806:	f7fb f9cf 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    arr2.append(std::move(val));
   ba80a:	4631      	mov	r1, r6
   ba80c:	a806      	add	r0, sp, #24
   ba80e:	f7fb fe8d 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   ba812:	a906      	add	r1, sp, #24
   ba814:	4668      	mov	r0, sp
   ba816:	f7ff ffcb 	bl	ba7b0 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>
   ba81a:	a806      	add	r0, sp, #24
   ba81c:	f7fb f9c4 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    if (!arr.append(Variant(std::move(arr2)))) {
   ba820:	4669      	mov	r1, sp
   ba822:	a803      	add	r0, sp, #12
   ba824:	f7fa ffda 	bl	b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  ::new ((void*)std::addressof(_M_storage))
   ba828:	a903      	add	r1, sp, #12
   ba82a:	a806      	add	r0, sp, #24
   ba82c:	f7fa ffd6 	bl	b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	_M_index{_Np}
   ba830:	2309      	movs	r3, #9
   ba832:	a906      	add	r1, sp, #24
   ba834:	4628      	mov	r0, r5
   ba836:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   ba83a:	f7ff ffb9 	bl	ba7b0 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>
   ba83e:	4605      	mov	r5, r0
      { _M_reset(); }
   ba840:	a806      	add	r0, sp, #24
   ba842:	f7fb f9b1 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   ba846:	a803      	add	r0, sp, #12
   ba848:	f7fb fa2d 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
   ba84c:	b905      	cbnz	r5, ba850 <_ZN8particle12_GLOBAL__N_119appendKeyValueArrayERN5spark6VectorINS_7VariantENS1_16DefaultAllocatorEEES3_S3_+0x78>
        return Error::NO_MEMORY;
   ba84e:	4c03      	ldr	r4, [pc, #12]	; (ba85c <_ZN8particle12_GLOBAL__N_119appendKeyValueArrayERN5spark6VectorINS_7VariantENS1_16DefaultAllocatorEEES3_S3_+0x84>)
    VariantArray arr2;
   ba850:	4668      	mov	r0, sp
   ba852:	f7fb fa28 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
}
   ba856:	4620      	mov	r0, r4
   ba858:	b00d      	add	sp, #52	; 0x34
   ba85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba85c:	fffffefc 	.word	0xfffffefc

000ba860 <_ZN8particle7Variant6appendES0_>:
bool Variant::append(Variant val) {
   ba860:	b570      	push	{r4, r5, r6, lr}
   ba862:	b086      	sub	sp, #24
   ba864:	460e      	mov	r6, r1
        return as<VariantArray>();
   ba866:	f7ff fd77 	bl	ba358 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v>
    if (!ensureCapacity(arr, 1)) {
   ba86a:	2101      	movs	r1, #1
   ba86c:	4605      	mov	r5, r0
   ba86e:	f7ff ff5e 	bl	ba72e <_ZN8particle7Variant14ensureCapacityIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEEbRT_i>
   ba872:	4604      	mov	r4, r0
   ba874:	b158      	cbz	r0, ba88e <_ZN8particle7Variant6appendES0_+0x2e>
    return arr.append(std::move(val));
   ba876:	4631      	mov	r1, r6
   ba878:	4668      	mov	r0, sp
   ba87a:	f7fb fe57 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   ba87e:	4669      	mov	r1, sp
   ba880:	4628      	mov	r0, r5
   ba882:	f7ff ff95 	bl	ba7b0 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>
   ba886:	4604      	mov	r4, r0
   ba888:	4668      	mov	r0, sp
   ba88a:	f7fb f98d 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
   ba88e:	4620      	mov	r0, r4
   ba890:	b006      	add	sp, #24
   ba892:	bd70      	pop	{r4, r5, r6, pc}

000ba894 <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_>:
    ConstIterator find(const T& key) const {
   ba894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return data_ + size_;
   ba898:	e9d0 4500 	ldrd	r4, r5, [r0]
   ba89c:	2328      	movs	r3, #40	; 0x28
   ba89e:	435d      	muls	r5, r3
      return __last - __first;
   ba8a0:	4b21      	ldr	r3, [pc, #132]	; (ba928 <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_+0x94>)
   ba8a2:	10ed      	asrs	r5, r5, #3
   ba8a4:	b087      	sub	sp, #28
   ba8a6:	4606      	mov	r6, r0
   ba8a8:	4688      	mov	r8, r1
   ba8aa:	435d      	muls	r5, r3
   ba8ac:	2d00      	cmp	r5, #0
   ba8ae:	dd1d      	ble.n	ba8ec <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_+0x58>
	  _DistanceType __half = __len >> 1;
   ba8b0:	106f      	asrs	r7, r5, #1
      std::__advance(__i, __d, std::__iterator_category(__i));
   ba8b2:	4639      	mov	r1, r7
   ba8b4:	a801      	add	r0, sp, #4
	  _ForwardIterator __middle = __first;
   ba8b6:	9401      	str	r4, [sp, #4]
   ba8b8:	f7ff fb42 	bl	b9f40 <_ZSt9__advanceIPKSt4pairIK6StringN8particle7VariantEEiEvRT_T0_St26random_access_iterator_tag.isra.0>

    template<typename T>
    ConstIterator lowerBound(const T& key) const {
        return std::lower_bound(entries_.begin(), entries_.end(), key, [this](const Entry& entry, const T& key) {
            return this->cmp_(entry.first, key);
   ba8bc:	f8dd 9004 	ldr.w	r9, [sp, #4]
   ba8c0:	f8d8 1000 	ldr.w	r1, [r8]
   ba8c4:	a802      	add	r0, sp, #8
   ba8c6:	f7ff f900 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
   ba8ca:	4648      	mov	r0, r9
   ba8cc:	a902      	add	r1, sp, #8
   ba8ce:	f7ff f9c0 	bl	b9c52 <_ZNK6StringltERKS_>
   ba8d2:	4681      	mov	r9, r0
   ba8d4:	a802      	add	r0, sp, #8
   ba8d6:	f7ff f8ad 	bl	b9a34 <_ZN6StringD1Ev>
	  if (__comp(__middle, __val))
   ba8da:	f1b9 0f00 	cmp.w	r9, #0
   ba8de:	d003      	beq.n	ba8e8 <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_+0x54>
	      __first = __middle;
   ba8e0:	9c01      	ldr	r4, [sp, #4]
	      __len = __len - __half - 1;
   ba8e2:	1bef      	subs	r7, r5, r7
	      ++__first;
   ba8e4:	3428      	adds	r4, #40	; 0x28
	      __len = __len - __half - 1;
   ba8e6:	3f01      	subs	r7, #1
      while (__len > 0)
   ba8e8:	463d      	mov	r5, r7
   ba8ea:	e7df      	b.n	ba8ac <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_+0x18>
   ba8ec:	6872      	ldr	r2, [r6, #4]
   ba8ee:	6833      	ldr	r3, [r6, #0]
   ba8f0:	2728      	movs	r7, #40	; 0x28
   ba8f2:	fb07 3302 	mla	r3, r7, r2, r3
        if (it != entries_.end() && cmp_(key, it->first)) {
   ba8f6:	429c      	cmp	r4, r3
   ba8f8:	d011      	beq.n	ba91e <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_+0x8a>
   ba8fa:	f8d8 1000 	ldr.w	r1, [r8]
   ba8fe:	a802      	add	r0, sp, #8
   ba900:	f7ff f8e3 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
   ba904:	4621      	mov	r1, r4
   ba906:	a802      	add	r0, sp, #8
   ba908:	f7ff f9a3 	bl	b9c52 <_ZNK6StringltERKS_>
   ba90c:	4605      	mov	r5, r0
   ba90e:	a802      	add	r0, sp, #8
   ba910:	f7ff f890 	bl	b9a34 <_ZN6StringD1Ev>
   ba914:	b11d      	cbz	r5, ba91e <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_+0x8a>
    return data_ + size_;
   ba916:	e9d6 4300 	ldrd	r4, r3, [r6]
   ba91a:	fb07 4403 	mla	r4, r7, r3, r4
    }
   ba91e:	4620      	mov	r0, r4
   ba920:	b007      	add	sp, #28
   ba922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba926:	bf00      	nop
   ba928:	cccccccd 	.word	0xcccccccd

000ba92c <_ZNK8particle7Variant3hasEPKc>:
bool Variant::has(const char* key) const {
   ba92c:	b513      	push	{r0, r1, r4, lr}
    if (!isMap()) {
   ba92e:	7c03      	ldrb	r3, [r0, #16]
bool Variant::has(const char* key) const {
   ba930:	9101      	str	r1, [sp, #4]
    if (!isMap()) {
   ba932:	2b0a      	cmp	r3, #10
   ba934:	d10f      	bne.n	ba956 <_ZNK8particle7Variant3hasEPKc+0x2a>
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
   ba936:	f7ff fdfd 	bl	ba534 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
        auto it = find(key);
   ba93a:	a901      	add	r1, sp, #4
   ba93c:	4604      	mov	r4, r0
   ba93e:	f7ff ffa9 	bl	ba894 <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_>
    return data_ + size_;
   ba942:	e9d4 3200 	ldrd	r3, r2, [r4]
   ba946:	2128      	movs	r1, #40	; 0x28
   ba948:	fb01 3302 	mla	r3, r1, r2, r3
        if (it == entries_.end()) {
   ba94c:	1ac0      	subs	r0, r0, r3
   ba94e:	bf18      	it	ne
   ba950:	2001      	movne	r0, #1
}
   ba952:	b002      	add	sp, #8
   ba954:	bd10      	pop	{r4, pc}
        return false;
   ba956:	2000      	movs	r0, #0
   ba958:	e7fb      	b.n	ba952 <_ZNK8particle7Variant3hasEPKc+0x26>

000ba95a <_ZNK8particle7Variant3getEPKc>:
Variant Variant::get(const char* key) const {
   ba95a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!isMap()) {
   ba95c:	7c0b      	ldrb	r3, [r1, #16]
Variant Variant::get(const char* key) const {
   ba95e:	9201      	str	r2, [sp, #4]
    if (!isMap()) {
   ba960:	2b0a      	cmp	r3, #10
Variant Variant::get(const char* key) const {
   ba962:	4604      	mov	r4, r0
   ba964:	4608      	mov	r0, r1
    if (!isMap()) {
   ba966:	d007      	beq.n	ba978 <_ZNK8particle7Variant3getEPKc+0x1e>
        return Variant();
   ba968:	2218      	movs	r2, #24
   ba96a:	2100      	movs	r1, #0
   ba96c:	4620      	mov	r0, r4
   ba96e:	f001 f8f3 	bl	bbb58 <memset>
}
   ba972:	4620      	mov	r0, r4
   ba974:	b003      	add	sp, #12
   ba976:	bd30      	pop	{r4, r5, pc}
   ba978:	f7ff fddc 	bl	ba534 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
        auto it = find(key);
   ba97c:	a901      	add	r1, sp, #4
   ba97e:	4605      	mov	r5, r0
   ba980:	f7ff ff88 	bl	ba894 <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_>
   ba984:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba988:	2128      	movs	r1, #40	; 0x28
   ba98a:	fb01 3302 	mla	r3, r1, r2, r3
        if (it == entries_.end()) {
   ba98e:	4298      	cmp	r0, r3
   ba990:	d0ea      	beq.n	ba968 <_ZNK8particle7Variant3getEPKc+0xe>
      _Move_ctor_base(const _Move_ctor_base&) = default;
   ba992:	f100 0110 	add.w	r1, r0, #16
   ba996:	4620      	mov	r0, r4
   ba998:	f7fa ff3e 	bl	b5818 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
    }
   ba99c:	e7e9      	b.n	ba972 <_ZNK8particle7Variant3getEPKc+0x18>

000ba99e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_>:
        if (dest > p && dest < end) {
   ba99e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba9a2:	4604      	mov	r4, r0
   ba9a4:	460d      	mov	r5, r1
   ba9a6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba9a8:	d914      	bls.n	ba9d4 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x36>
   ba9aa:	4290      	cmp	r0, r2
   ba9ac:	d213      	bcs.n	ba9d6 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x38>
            --end;
   ba9ae:	f1a2 0628 	sub.w	r6, r2, #40	; 0x28
            dest += end - p - 1;
   ba9b2:	1a75      	subs	r5, r6, r1
   ba9b4:	f1a1 0728 	sub.w	r7, r1, #40	; 0x28
   ba9b8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba9ba:	42b7      	cmp	r7, r6
   ba9bc:	d018      	beq.n	ba9f0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x52>
                new(dest) T(std::move(*end));
   ba9be:	b11c      	cbz	r4, ba9c8 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x2a>
   ba9c0:	4631      	mov	r1, r6
   ba9c2:	4620      	mov	r0, r4
   ba9c4:	f7ff fd88 	bl	ba4d8 <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>
                end->~T();
   ba9c8:	4630      	mov	r0, r6
   ba9ca:	f7fb f8ff 	bl	b5bcc <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
            for (; end != p; --end, --dest) {
   ba9ce:	3e28      	subs	r6, #40	; 0x28
   ba9d0:	3c28      	subs	r4, #40	; 0x28
   ba9d2:	e7f2      	b.n	ba9ba <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x1c>
        } else if (dest != p) {
   ba9d4:	d00c      	beq.n	ba9f0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x52>
            for (; p != end; ++p, ++dest) {
   ba9d6:	42b5      	cmp	r5, r6
   ba9d8:	d00a      	beq.n	ba9f0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x52>
                new(dest) T(std::move(*p));
   ba9da:	b11c      	cbz	r4, ba9e4 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x46>
   ba9dc:	4629      	mov	r1, r5
   ba9de:	4620      	mov	r0, r4
   ba9e0:	f7ff fd7a 	bl	ba4d8 <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>
                p->~T();
   ba9e4:	4628      	mov	r0, r5
   ba9e6:	f7fb f8f1 	bl	b5bcc <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
            for (; p != end; ++p, ++dest) {
   ba9ea:	3528      	adds	r5, #40	; 0x28
   ba9ec:	3428      	adds	r4, #40	; 0x28
   ba9ee:	e7f2      	b.n	ba9d6 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x38>
    }
   ba9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba9f2 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi>:
    bool realloc(int n) {
   ba9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   ba9f4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba9f6:	4605      	mov	r5, r0
        if (n > 0) {
   ba9f8:	dd13      	ble.n	baa22 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   ba9fa:	2728      	movs	r7, #40	; 0x28
    return ::malloc(size);
   ba9fc:	fb07 f006 	mul.w	r0, r7, r6
   baa00:	f7fc feae 	bl	b7760 <malloc>
            if (!d) {
   baa04:	4604      	mov	r4, r0
   baa06:	b158      	cbz	r0, baa20 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   baa08:	e9d5 1200 	ldrd	r1, r2, [r5]
   baa0c:	fb07 1202 	mla	r2, r7, r2, r1
   baa10:	f7ff ffc5 	bl	ba99e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_>
    ::free(ptr);
   baa14:	6828      	ldr	r0, [r5, #0]
   baa16:	f7fc feab 	bl	b7770 <free>
        data_ = d;
   baa1a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   baa1c:	60ae      	str	r6, [r5, #8]
        return true;
   baa1e:	2001      	movs	r0, #1
    }
   baa20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   baa22:	2400      	movs	r4, #0
   baa24:	e7f6      	b.n	baa14 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi+0x22>

000baa26 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   baa26:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   baa28:	6883      	ldr	r3, [r0, #8]
   baa2a:	428b      	cmp	r3, r1
   baa2c:	da02      	bge.n	baa34 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi+0xe>
   baa2e:	f7ff ffe0 	bl	ba9f2 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi>
}
   baa32:	bd08      	pop	{r3, pc}
    return true;
   baa34:	2001      	movs	r0, #1
   baa36:	e7fc      	b.n	baa32 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi+0xc>

000baa38 <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i>:
    static bool ensureCapacity(ContainerT& cont, int count) {
   baa38:	b508      	push	{r3, lr}
        int newSize = cont.size() + count;
   baa3a:	6842      	ldr	r2, [r0, #4]
    return capacity_;
   baa3c:	6883      	ldr	r3, [r0, #8]
   baa3e:	4411      	add	r1, r2
        if (cont.capacity() >= newSize) {
   baa40:	4299      	cmp	r1, r3
   baa42:	dd0a      	ble.n	baa5a <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i+0x22>
        return cont.reserve(std::max(newSize, cont.capacity() * 3 / 2));
   baa44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   baa48:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   baa4c:	105b      	asrs	r3, r3, #1
        return entries_.reserve(count);
   baa4e:	4299      	cmp	r1, r3
   baa50:	bfb8      	it	lt
   baa52:	4619      	movlt	r1, r3
   baa54:	f7ff ffe7 	bl	baa26 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi>
    }
   baa58:	bd08      	pop	{r3, pc}
            return true;
   baa5a:	2001      	movs	r0, #1
   baa5c:	e7fc      	b.n	baa58 <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i+0x20>

000baa5e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_>:
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::Iterator spark::Vector<T, AllocatorT>::insert(ConstIterator pos, T value) {
   baa5e:	b570      	push	{r4, r5, r6, lr}
    int i = pos - data_;
   baa60:	6803      	ldr	r3, [r0, #0]
inline typename spark::Vector<T, AllocatorT>::Iterator spark::Vector<T, AllocatorT>::insert(ConstIterator pos, T value) {
   baa62:	b08a      	sub	sp, #40	; 0x28
    int i = pos - data_;
   baa64:	1ace      	subs	r6, r1, r3
inline typename spark::Vector<T, AllocatorT>::Iterator spark::Vector<T, AllocatorT>::insert(ConstIterator pos, T value) {
   baa66:	4604      	mov	r4, r0
    if (!insert(i, std::move(value))) {
   baa68:	4611      	mov	r1, r2
   baa6a:	4668      	mov	r0, sp
   baa6c:	f7ff fd34 	bl	ba4d8 <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   baa70:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   baa74:	4299      	cmp	r1, r3
   baa76:	da10      	bge.n	baa9a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x3c>
    T* const p = data_ + i;
   baa78:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   baa7a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   baa7c:	199d      	adds	r5, r3, r6
    move(p + 1, p, data_ + size_);
   baa7e:	2128      	movs	r1, #40	; 0x28
   baa80:	fb01 3202 	mla	r2, r1, r2, r3
   baa84:	f105 0028 	add.w	r0, r5, #40	; 0x28
   baa88:	4629      	mov	r1, r5
   baa8a:	f7ff ff88 	bl	ba99e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_>
    new(p) T(std::move(value));
   baa8e:	b9b5      	cbnz	r5, baabe <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x60>
    ++size_;
   baa90:	6863      	ldr	r3, [r4, #4]
   baa92:	3301      	adds	r3, #1
   baa94:	6063      	str	r3, [r4, #4]
    return true;
   baa96:	2501      	movs	r5, #1
   baa98:	e006      	b.n	baaa8 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x4a>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   baa9a:	3101      	adds	r1, #1
   baa9c:	4620      	mov	r0, r4
   baa9e:	f7ff ffa8 	bl	ba9f2 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi>
   baaa2:	4605      	mov	r5, r0
   baaa4:	2800      	cmp	r0, #0
   baaa6:	d1e7      	bne.n	baa78 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x1a>
    if (!insert(i, std::move(value))) {
   baaa8:	4668      	mov	r0, sp
   baaaa:	f7fb f88f 	bl	b5bcc <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
   baaae:	6823      	ldr	r3, [r4, #0]
   baab0:	b955      	cbnz	r5, baac8 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x6a>
        return data_ + size_;
   baab2:	6860      	ldr	r0, [r4, #4]
   baab4:	2128      	movs	r1, #40	; 0x28
   baab6:	fb01 3000 	mla	r0, r1, r0, r3
    }
    return data_ + i;
}
   baaba:	b00a      	add	sp, #40	; 0x28
   baabc:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   baabe:	4669      	mov	r1, sp
   baac0:	4628      	mov	r0, r5
   baac2:	f7ff fd09 	bl	ba4d8 <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>
   baac6:	e7e3      	b.n	baa90 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x32>
    return data_ + i;
   baac8:	1998      	adds	r0, r3, r6
   baaca:	e7f6      	b.n	baaba <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x5c>

000baacc <_ZN8particle7Variant3setEPKcS0_>:
bool Variant::set(const char* key, Variant val) {
   baacc:	b570      	push	{r4, r5, r6, lr}
   baace:	b0a6      	sub	sp, #152	; 0x98
   baad0:	4616      	mov	r6, r2
   baad2:	9101      	str	r1, [sp, #4]
        return as<VariantMap>();
   baad4:	f7fb fc53 	bl	b637e <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
    if (!ensureCapacity(map, 1)) {
   baad8:	2101      	movs	r1, #1
   baada:	4605      	mov	r5, r0
   baadc:	f7ff ffac 	bl	baa38 <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i>
   baae0:	4604      	mov	r4, r0
   baae2:	2800      	cmp	r0, #0
   baae4:	d03a      	beq.n	bab5c <_ZN8particle7Variant3setEPKcS0_+0x90>
    return map.set(key, std::move(val));
   baae6:	4631      	mov	r1, r6
   baae8:	a806      	add	r0, sp, #24
   baaea:	f7fb fd1f 	bl	b652c <_ZN8particle7VariantC1EOS0_>
        auto r = insert(key, std::move(val));
   baaee:	a906      	add	r1, sp, #24
   baaf0:	a80c      	add	r0, sp, #48	; 0x30
   baaf2:	f7fb fd1b 	bl	b652c <_ZN8particle7VariantC1EOS0_>
        auto it = lowerBound(key);
   baaf6:	a901      	add	r1, sp, #4
   baaf8:	4628      	mov	r0, r5
   baafa:	f7ff fc9b 	bl	ba434 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_>
    return data_ + size_;
   baafe:	e9d5 3200 	ldrd	r3, r2, [r5]
   bab02:	2128      	movs	r1, #40	; 0x28
   bab04:	fb01 3302 	mla	r3, r1, r2, r3
        if (it != entries_.end() && !cmp_(key, it->first)) {
   bab08:	4298      	cmp	r0, r3
        auto it = lowerBound(key);
   bab0a:	4604      	mov	r4, r0
        if (it != entries_.end() && !cmp_(key, it->first)) {
   bab0c:	d029      	beq.n	bab62 <_ZN8particle7Variant3setEPKcS0_+0x96>
   bab0e:	9901      	ldr	r1, [sp, #4]
   bab10:	a81c      	add	r0, sp, #112	; 0x70
   bab12:	f7fe ffda 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
   bab16:	4621      	mov	r1, r4
   bab18:	a81c      	add	r0, sp, #112	; 0x70
   bab1a:	f7ff f89a 	bl	b9c52 <_ZNK6StringltERKS_>
   bab1e:	4606      	mov	r6, r0
   bab20:	a81c      	add	r0, sp, #112	; 0x70
   bab22:	f7fe ff87 	bl	b9a34 <_ZN6StringD1Ev>
   bab26:	b9e6      	cbnz	r6, bab62 <_ZN8particle7Variant3setEPKcS0_+0x96>
            it->second = std::move(val);
   bab28:	a90c      	add	r1, sp, #48	; 0x30
   bab2a:	a81c      	add	r0, sp, #112	; 0x70
   bab2c:	f7fb fcfe 	bl	b652c <_ZN8particle7VariantC1EOS0_>
    { __lhs.swap(__rhs); }
   bab30:	f104 0010 	add.w	r0, r4, #16
   bab34:	a91c      	add	r1, sp, #112	; 0x70
   bab36:	f7fb fc5b 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bab3a:	a81c      	add	r0, sp, #112	; 0x70
   bab3c:	f7fb f834 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bab40:	a80c      	add	r0, sp, #48	; 0x30
   bab42:	f7fb f831 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bab46:	e9d5 0300 	ldrd	r0, r3, [r5]
   bab4a:	2228      	movs	r2, #40	; 0x28
   bab4c:	fb02 0003 	mla	r0, r2, r3, r0
        if (r.first == entries_.end()) {
   bab50:	1a24      	subs	r4, r4, r0
   bab52:	a806      	add	r0, sp, #24
   bab54:	bf18      	it	ne
   bab56:	2401      	movne	r4, #1
   bab58:	f7fb f826 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
   bab5c:	4620      	mov	r0, r4
   bab5e:	b026      	add	sp, #152	; 0x98
   bab60:	bd70      	pop	{r4, r5, r6, pc}
        it = entries_.insert(it, std::make_pair(KeyT(key), std::move(val)));
   bab62:	9901      	ldr	r1, [sp, #4]
   bab64:	a802      	add	r0, sp, #8
   bab66:	f7fe ffb0 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   bab6a:	a902      	add	r1, sp, #8
   bab6c:	a812      	add	r0, sp, #72	; 0x48
   bab6e:	f7fe ffea 	bl	b9b46 <_ZN6StringC1EOS_>
   bab72:	a90c      	add	r1, sp, #48	; 0x30
   bab74:	a816      	add	r0, sp, #88	; 0x58
   bab76:	f7fb fcd9 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   bab7a:	a912      	add	r1, sp, #72	; 0x48
   bab7c:	a81c      	add	r0, sp, #112	; 0x70
   bab7e:	f7ff fcb8 	bl	ba4f2 <_ZNSt4pairIK6StringN8particle7VariantEEC1IS0_S3_Lb1EEEOS_IT_T0_E>
   bab82:	4621      	mov	r1, r4
   bab84:	aa1c      	add	r2, sp, #112	; 0x70
   bab86:	4628      	mov	r0, r5
   bab88:	f7ff ff69 	bl	baa5e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_>
   bab8c:	4604      	mov	r4, r0
   bab8e:	a81c      	add	r0, sp, #112	; 0x70
   bab90:	f7fb f81c 	bl	b5bcc <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
   bab94:	a816      	add	r0, sp, #88	; 0x58
   bab96:	f7fb f807 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    struct pair
   bab9a:	a812      	add	r0, sp, #72	; 0x48
   bab9c:	f7fe ff4a 	bl	b9a34 <_ZN6StringD1Ev>
   baba0:	a802      	add	r0, sp, #8
   baba2:	f7fe ff47 	bl	b9a34 <_ZN6StringD1Ev>
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   baba6:	e7cb      	b.n	bab40 <_ZN8particle7Variant3setEPKcS0_+0x74>

000baba8 <_ZN8particle7Variant3setERK6StringS0_>:
bool Variant::set(const String& key, Variant val) {
   baba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   babaa:	b0a5      	sub	sp, #148	; 0x94
   babac:	460e      	mov	r6, r1
   babae:	4617      	mov	r7, r2
   babb0:	f7fb fbe5 	bl	b637e <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
    if (!ensureCapacity(map, 1)) {
   babb4:	2101      	movs	r1, #1
   babb6:	4605      	mov	r5, r0
   babb8:	f7ff ff3e 	bl	baa38 <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i>
   babbc:	4604      	mov	r4, r0
   babbe:	b390      	cbz	r0, bac26 <_ZN8particle7Variant3setERK6StringS0_+0x7e>
    return map.set(key, std::move(val));
   babc0:	4639      	mov	r1, r7
   babc2:	a804      	add	r0, sp, #16
   babc4:	f7fb fcb2 	bl	b652c <_ZN8particle7VariantC1EOS0_>
        auto r = insert(key, std::move(val));
   babc8:	a904      	add	r1, sp, #16
   babca:	a80a      	add	r0, sp, #40	; 0x28
   babcc:	f7fb fcae 	bl	b652c <_ZN8particle7VariantC1EOS0_>
        auto it = lowerBound(key);
   babd0:	4631      	mov	r1, r6
   babd2:	4628      	mov	r0, r5
   babd4:	f7ff fc5e 	bl	ba494 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_>
   babd8:	e9d5 3200 	ldrd	r3, r2, [r5]
   babdc:	2128      	movs	r1, #40	; 0x28
   babde:	fb01 3302 	mla	r3, r1, r2, r3
        if (it != entries_.end() && !cmp_(key, it->first)) {
   babe2:	4298      	cmp	r0, r3
        auto it = lowerBound(key);
   babe4:	4604      	mov	r4, r0
        if (it != entries_.end() && !cmp_(key, it->first)) {
   babe6:	d021      	beq.n	bac2c <_ZN8particle7Variant3setERK6StringS0_+0x84>
   babe8:	4601      	mov	r1, r0
   babea:	4630      	mov	r0, r6
   babec:	f7ff f831 	bl	b9c52 <_ZNK6StringltERKS_>
   babf0:	b9e0      	cbnz	r0, bac2c <_ZN8particle7Variant3setERK6StringS0_+0x84>
            it->second = std::move(val);
   babf2:	a90a      	add	r1, sp, #40	; 0x28
   babf4:	a81a      	add	r0, sp, #104	; 0x68
   babf6:	f7fb fc99 	bl	b652c <_ZN8particle7VariantC1EOS0_>
    { __lhs.swap(__rhs); }
   babfa:	f104 0010 	add.w	r0, r4, #16
   babfe:	a91a      	add	r1, sp, #104	; 0x68
   bac00:	f7fb fbf6 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bac04:	a81a      	add	r0, sp, #104	; 0x68
   bac06:	f7fa ffcf 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bac0a:	a80a      	add	r0, sp, #40	; 0x28
   bac0c:	f7fa ffcc 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bac10:	e9d5 0300 	ldrd	r0, r3, [r5]
   bac14:	2228      	movs	r2, #40	; 0x28
   bac16:	fb02 0003 	mla	r0, r2, r3, r0
        if (r.first == entries_.end()) {
   bac1a:	1a24      	subs	r4, r4, r0
   bac1c:	a804      	add	r0, sp, #16
   bac1e:	bf18      	it	ne
   bac20:	2401      	movne	r4, #1
   bac22:	f7fa ffc1 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
   bac26:	4620      	mov	r0, r4
   bac28:	b025      	add	sp, #148	; 0x94
   bac2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        it = entries_.insert(it, std::make_pair(KeyT(key), std::move(val)));
   bac2c:	4631      	mov	r1, r6
   bac2e:	4668      	mov	r0, sp
   bac30:	f7fe ffa3 	bl	b9b7a <_ZN6StringC1ERKS_>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   bac34:	4669      	mov	r1, sp
   bac36:	a810      	add	r0, sp, #64	; 0x40
   bac38:	f7fe ff85 	bl	b9b46 <_ZN6StringC1EOS_>
   bac3c:	a90a      	add	r1, sp, #40	; 0x28
   bac3e:	a814      	add	r0, sp, #80	; 0x50
   bac40:	f7fb fc74 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   bac44:	a910      	add	r1, sp, #64	; 0x40
   bac46:	a81a      	add	r0, sp, #104	; 0x68
   bac48:	f7ff fc53 	bl	ba4f2 <_ZNSt4pairIK6StringN8particle7VariantEEC1IS0_S3_Lb1EEEOS_IT_T0_E>
   bac4c:	4621      	mov	r1, r4
   bac4e:	aa1a      	add	r2, sp, #104	; 0x68
   bac50:	4628      	mov	r0, r5
   bac52:	f7ff ff04 	bl	baa5e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_>
   bac56:	4604      	mov	r4, r0
   bac58:	a81a      	add	r0, sp, #104	; 0x68
   bac5a:	f7fa ffb7 	bl	b5bcc <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
   bac5e:	a814      	add	r0, sp, #80	; 0x50
   bac60:	f7fa ffa2 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    struct pair
   bac64:	a810      	add	r0, sp, #64	; 0x40
   bac66:	f7fe fee5 	bl	b9a34 <_ZN6StringD1Ev>
   bac6a:	4668      	mov	r0, sp
   bac6c:	f7fe fee2 	bl	b9a34 <_ZN6StringD1Ev>
   bac70:	e7cb      	b.n	bac0a <_ZN8particle7Variant3setERK6StringS0_+0x62>

000bac72 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE3setEOS1_S2_>:
    bool set(KeyT&& key, ValueT val) {
   bac72:	b570      	push	{r4, r5, r6, lr}
   bac74:	b09a      	sub	sp, #104	; 0x68
   bac76:	4605      	mov	r5, r0
   bac78:	460e      	mov	r6, r1
        auto r = insert(std::move(key), std::move(val));
   bac7a:	4668      	mov	r0, sp
   bac7c:	4611      	mov	r1, r2
   bac7e:	f7fb fc55 	bl	b652c <_ZN8particle7VariantC1EOS0_>
        auto it = lowerBound(key);
   bac82:	4631      	mov	r1, r6
   bac84:	4628      	mov	r0, r5
   bac86:	f7ff fc05 	bl	ba494 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_>
   bac8a:	e9d5 3200 	ldrd	r3, r2, [r5]
   bac8e:	2128      	movs	r1, #40	; 0x28
   bac90:	fb01 3302 	mla	r3, r1, r2, r3
        if (it != entries_.end() && !cmp_(key, it->first)) {
   bac94:	4298      	cmp	r0, r3
        auto it = lowerBound(key);
   bac96:	4604      	mov	r4, r0
        if (it != entries_.end() && !cmp_(key, it->first)) {
   bac98:	d01d      	beq.n	bacd6 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE3setEOS1_S2_+0x64>
   bac9a:	4601      	mov	r1, r0
   bac9c:	4630      	mov	r0, r6
   bac9e:	f7fe ffd8 	bl	b9c52 <_ZNK6StringltERKS_>
   baca2:	b9c0      	cbnz	r0, bacd6 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE3setEOS1_S2_+0x64>
            it->second = std::move(val);
   baca4:	4669      	mov	r1, sp
   baca6:	a810      	add	r0, sp, #64	; 0x40
   baca8:	f7fb fc40 	bl	b652c <_ZN8particle7VariantC1EOS0_>
    { __lhs.swap(__rhs); }
   bacac:	f104 0010 	add.w	r0, r4, #16
   bacb0:	a910      	add	r1, sp, #64	; 0x40
   bacb2:	f7fb fb9d 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bacb6:	a810      	add	r0, sp, #64	; 0x40
   bacb8:	f7fa ff76 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bacbc:	4668      	mov	r0, sp
   bacbe:	f7fa ff73 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bacc2:	e9d5 0300 	ldrd	r0, r3, [r5]
   bacc6:	2228      	movs	r2, #40	; 0x28
   bacc8:	fb02 0003 	mla	r0, r2, r3, r0
    }
   baccc:	1a20      	subs	r0, r4, r0
   bacce:	bf18      	it	ne
   bacd0:	2001      	movne	r0, #1
   bacd2:	b01a      	add	sp, #104	; 0x68
   bacd4:	bd70      	pop	{r4, r5, r6, pc}
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   bacd6:	4631      	mov	r1, r6
   bacd8:	a806      	add	r0, sp, #24
   bacda:	f7fe ff34 	bl	b9b46 <_ZN6StringC1EOS_>
   bacde:	4669      	mov	r1, sp
   bace0:	a80a      	add	r0, sp, #40	; 0x28
   bace2:	f7fb fc23 	bl	b652c <_ZN8particle7VariantC1EOS0_>
        it = entries_.insert(it, std::make_pair(std::move(key), std::move(val)));
   bace6:	a906      	add	r1, sp, #24
   bace8:	a810      	add	r0, sp, #64	; 0x40
   bacea:	f7ff fc02 	bl	ba4f2 <_ZNSt4pairIK6StringN8particle7VariantEEC1IS0_S3_Lb1EEEOS_IT_T0_E>
   bacee:	4621      	mov	r1, r4
   bacf0:	aa10      	add	r2, sp, #64	; 0x40
   bacf2:	4628      	mov	r0, r5
   bacf4:	f7ff feb3 	bl	baa5e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_>
   bacf8:	4604      	mov	r4, r0
   bacfa:	a810      	add	r0, sp, #64	; 0x40
   bacfc:	f7fa ff66 	bl	b5bcc <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
   bad00:	a80a      	add	r0, sp, #40	; 0x28
   bad02:	f7fa ff51 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    struct pair
   bad06:	a806      	add	r0, sp, #24
   bad08:	f7fe fe94 	bl	b9a34 <_ZN6StringD1Ev>
   bad0c:	e7d6      	b.n	bacbc <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE3setEOS1_S2_+0x4a>
	...

000bad10 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE>:
int decodeFromJson(const JSONValue& val, Variant& var) {
   bad10:	b5f0      	push	{r4, r5, r6, r7, lr}
   bad12:	b09d      	sub	sp, #116	; 0x74
   bad14:	4604      	mov	r4, r0
   bad16:	460d      	mov	r5, r1
    switch (val.type()) {
   bad18:	f7fc ff9d 	bl	b7c56 <_ZNK5spark9JSONValue4typeEv>
   bad1c:	2806      	cmp	r0, #6
   bad1e:	d808      	bhi.n	bad32 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x22>
   bad20:	e8df f010 	tbh	[pc, r0, lsl #1]
   bad24:	000c0176 	.word	0x000c0176
   bad28:	002a0019 	.word	0x002a0019
   bad2c:	00b4007c 	.word	0x00b4007c
   bad30:	0103      	.short	0x0103
   bad32:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
}
   bad36:	4620      	mov	r0, r4
   bad38:	b01d      	add	sp, #116	; 0x74
   bad3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        var = Variant();
   bad3c:	2400      	movs	r4, #0
    { __lhs.swap(__rhs); }
   bad3e:	4628      	mov	r0, r5
   bad40:	a916      	add	r1, sp, #88	; 0x58
   bad42:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
	_M_index{_Np}
   bad46:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    { __lhs.swap(__rhs); }
   bad4a:	f7fb fb51 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bad4e:	a816      	add	r0, sp, #88	; 0x58
   bad50:	f7fa ff2a 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        break;
   bad54:	e7ef      	b.n	bad36 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x26>
        var = val.toBool();
   bad56:	4620      	mov	r0, r4
   bad58:	f7fc ffa6 	bl	b7ca8 <_ZNK5spark9JSONValue6toBoolEv>
	_M_index{_Np}
   bad5c:	2301      	movs	r3, #1
	: _M_storage(std::forward<_Args>(__args)...)
   bad5e:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
    { __lhs.swap(__rhs); }
   bad62:	a916      	add	r1, sp, #88	; 0x58
   bad64:	4628      	mov	r0, r5
	_M_index{_Np}
   bad66:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    { __lhs.swap(__rhs); }
   bad6a:	f7fb fb41 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bad6e:	a816      	add	r0, sp, #88	; 0x58
   bad70:	f7fa ff1a 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
                return false;
   bad74:	2400      	movs	r4, #0
   bad76:	e7de      	b.n	bad36 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x26>
    return JSONString(t_, d_);
   bad78:	68a6      	ldr	r6, [r4, #8]
   bad7a:	4621      	mov	r1, r4
   bad7c:	a816      	add	r0, sp, #88	; 0x58
   bad7e:	f7fd fdf5 	bl	b896c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
   bad82:	aa16      	add	r2, sp, #88	; 0x58
   bad84:	4631      	mov	r1, r6
   bad86:	a810      	add	r0, sp, #64	; 0x40
   bad88:	f7fd f8d4 	bl	b7f34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bad8c:	a817      	add	r0, sp, #92	; 0x5c
   bad8e:	f7fc fd3e 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto r = detail::from_chars(s.data(), s.data() + s.size(), num);
   bad92:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
   bad96:	440a      	add	r2, r1
	if (__first != __last && *__first == '-')
   bad98:	428a      	cmp	r2, r1
   bad9a:	d02b      	beq.n	badf4 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xe4>
   bad9c:	780b      	ldrb	r3, [r1, #0]
   bad9e:	2b2d      	cmp	r3, #45	; 0x2d
   bada0:	d12b      	bne.n	badfa <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xea>
	    ++__first;
   bada2:	1c4c      	adds	r4, r1, #1
	    __sign = -1;
   bada4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    __from_chars_digit(const char*& __first, const char* __last, _Tp& __val,
   bada8:	4627      	mov	r7, r4
      _Up __val = 0;
   badaa:	2300      	movs	r3, #0
      if (__builtin_mul_overflow(__val, __base, &__val)
   badac:	f04f 0e0a 	mov.w	lr, #10
      while (__first != __last)
   badb0:	42ba      	cmp	r2, r7
   badb2:	46bc      	mov	ip, r7
   badb4:	f000 812e 	beq.w	bb014 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x304>
	  return '0' <= __c && __c <= ('0' + (__base - 1));
   badb8:	f89c 0000 	ldrb.w	r0, [ip]
   badbc:	3830      	subs	r0, #48	; 0x30
   badbe:	b2c0      	uxtb	r0, r0
   badc0:	2809      	cmp	r0, #9
   badc2:	f107 0701 	add.w	r7, r7, #1
   badc6:	f200 8148 	bhi.w	bb05a <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x34a>
      if (__builtin_mul_overflow(__val, __base, &__val)
   badca:	fba3 3c0e 	umull	r3, ip, r3, lr
   badce:	f1bc 0f00 	cmp.w	ip, #0
   badd2:	d101      	bne.n	badd8 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xc8>
	  || __builtin_add_overflow(__val, __c, &__val))
   badd4:	181b      	adds	r3, r3, r0
   badd6:	d3eb      	bcc.n	badb0 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xa0>
            r = detail::from_chars(s.data(), s.data() + s.size(), num);
   badd8:	ab06      	add	r3, sp, #24
            double num = 0;
   badda:	2600      	movs	r6, #0
   baddc:	2700      	movs	r7, #0
            r = detail::from_chars(s.data(), s.data() + s.size(), num);
   badde:	a80a      	add	r0, sp, #40	; 0x28
            double num = 0;
   bade0:	e9cd 6706 	strd	r6, r7, [sp, #24]
            r = detail::from_chars(s.data(), s.data() + s.size(), num);
   bade4:	f7ff f9f8 	bl	ba1d8 <_ZN8particle6detail10from_charsEPKcS2_Rd>
            if (r.ec != std::errc() || r.ptr != s.data() + s.size()) {
   bade8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   badea:	b15b      	cbz	r3, bae04 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xf4>
   badec:	a811      	add	r0, sp, #68	; 0x44
   badee:	f7fc fd0e 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   badf2:	e7bf      	b.n	bad74 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x64>
   badf4:	4614      	mov	r4, r2
      int __sign = 1;
   badf6:	2601      	movs	r6, #1
   badf8:	e7d6      	b.n	bada8 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x98>
   badfa:	460c      	mov	r4, r1
   badfc:	e7fb      	b.n	badf6 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xe6>
		  if (__builtin_mul_overflow(__val, __sign, &__tmp))
   badfe:	2c00      	cmp	r4, #0
   bae00:	d1ea      	bne.n	badd8 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xc8>
   bae02:	e11b      	b.n	bb03c <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x32c>
   bae04:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
   bae08:	4413      	add	r3, r2
   bae0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bae0c:	429a      	cmp	r2, r3
   bae0e:	d1ed      	bne.n	badec <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xdc>
            var = num;
   bae10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	: _M_storage(std::forward<_Args>(__args)...)
   bae14:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	_M_index{_Np}
   bae18:	2306      	movs	r3, #6
   bae1a:	e114      	b.n	bb046 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x336>
   bae1c:	68a6      	ldr	r6, [r4, #8]
   bae1e:	4621      	mov	r1, r4
   bae20:	a816      	add	r0, sp, #88	; 0x58
   bae22:	f7fd fda3 	bl	b896c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
   bae26:	aa16      	add	r2, sp, #88	; 0x58
   bae28:	4631      	mov	r1, r6
   bae2a:	a806      	add	r0, sp, #24
   bae2c:	f7fd f882 	bl	b7f34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bae30:	a817      	add	r0, sp, #92	; 0x5c
   bae32:	f7fc fcec 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return String(s_, n_);
   bae36:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   bae3a:	a80a      	add	r0, sp, #40	; 0x28
   bae3c:	f7fe fe59 	bl	b9af2 <_ZN6StringC1EPKcj>
        if (s.length() != jsonStr.size()) {
   bae40:	9a09      	ldr	r2, [sp, #36]	; 0x24
   bae42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bae44:	429a      	cmp	r2, r3
   bae46:	d007      	beq.n	bae58 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x148>
            return Error::NO_MEMORY;
   bae48:	a80a      	add	r0, sp, #40	; 0x28
   bae4a:	f7fe fdf3 	bl	b9a34 <_ZN6StringD1Ev>
   bae4e:	a807      	add	r0, sp, #28
   bae50:	f7fc fcdd 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bae54:	4c82      	ldr	r4, [pc, #520]	; (bb060 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x350>)
   bae56:	e76e      	b.n	bad36 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x26>
        var = std::move(s);
   bae58:	a90a      	add	r1, sp, #40	; 0x28
   bae5a:	a810      	add	r0, sp, #64	; 0x40
   bae5c:	f7fe fe73 	bl	b9b46 <_ZN6StringC1EOS_>
	  ::new ((void*)std::addressof(_M_storage))
   bae60:	a910      	add	r1, sp, #64	; 0x40
   bae62:	a816      	add	r0, sp, #88	; 0x58
   bae64:	f7fe fe6f 	bl	b9b46 <_ZN6StringC1EOS_>
	_M_index{_Np}
   bae68:	2307      	movs	r3, #7
    { __lhs.swap(__rhs); }
   bae6a:	a916      	add	r1, sp, #88	; 0x58
   bae6c:	4628      	mov	r0, r5
	_M_index{_Np}
   bae6e:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    { __lhs.swap(__rhs); }
   bae72:	f7fb fabd 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bae76:	a816      	add	r0, sp, #88	; 0x58
   bae78:	f7fa fe96 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bae7c:	a810      	add	r0, sp, #64	; 0x40
   bae7e:	f7fe fdd9 	bl	b9a34 <_ZN6StringD1Ev>
        break;
   bae82:	a80a      	add	r0, sp, #40	; 0x28
   bae84:	f7fe fdd6 	bl	b9a34 <_ZN6StringD1Ev>
   bae88:	a807      	add	r0, sp, #28
   bae8a:	e7b0      	b.n	badee <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xde>
        JSONArrayIterator(value.t_, value.d_) {
   bae8c:	68a6      	ldr	r6, [r4, #8]
   bae8e:	4621      	mov	r1, r4
   bae90:	a816      	add	r0, sp, #88	; 0x58
   bae92:	f7fd fd6b 	bl	b896c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
   bae96:	4631      	mov	r1, r6
   bae98:	aa16      	add	r2, sp, #88	; 0x58
   bae9a:	a80a      	add	r0, sp, #40	; 0x28
   bae9c:	f7fd f899 	bl	b7fd2 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   baea0:	a817      	add	r0, sp, #92	; 0x5c
   baea2:	f7fc fcb4 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return as<VariantArray>();
   baea6:	4628      	mov	r0, r5
   baea8:	f7ff fa56 	bl	ba358 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v>
        if (!arr.reserve(it.count())) {
   baeac:	990e      	ldr	r1, [sp, #56]	; 0x38
   baeae:	4605      	mov	r5, r0
   baeb0:	f7ff fc34 	bl	ba71c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi>
   baeb4:	2800      	cmp	r0, #0
   baeb6:	d036      	beq.n	baf26 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x216>
        while (it.next()) {
   baeb8:	a80a      	add	r0, sp, #40	; 0x28
   baeba:	f7fd f8a1 	bl	b8000 <_ZN5spark17JSONArrayIterator4nextEv>
   baebe:	4604      	mov	r4, r0
   baec0:	b1f0      	cbz	r0, baf00 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x1f0>
            Variant v;
   baec2:	2218      	movs	r2, #24
   baec4:	2100      	movs	r1, #0
   baec6:	a810      	add	r0, sp, #64	; 0x40
   baec8:	f000 fe46 	bl	bbb58 <memset>
    return JSONValue(v_, d_);
   baecc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   baece:	a90a      	add	r1, sp, #40	; 0x28
   baed0:	a806      	add	r0, sp, #24
   baed2:	f7fd fd4b 	bl	b896c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
   baed6:	aa06      	add	r2, sp, #24
   baed8:	4621      	mov	r1, r4
   baeda:	a816      	add	r0, sp, #88	; 0x58
   baedc:	f7fc fead 	bl	b7c3a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   baee0:	a807      	add	r0, sp, #28
   baee2:	f7fc fc94 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            CHECK(decodeFromJson(it.value(), v));
   baee6:	a910      	add	r1, sp, #64	; 0x40
   baee8:	a816      	add	r0, sp, #88	; 0x58
   baeea:	f7ff ff11 	bl	bad10 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE>
   baeee:	4604      	mov	r4, r0
   baef0:	a817      	add	r0, sp, #92	; 0x5c
   baef2:	f7fc fc8c 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   baef6:	2c00      	cmp	r4, #0
   baef8:	da06      	bge.n	baf08 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x1f8>
   baefa:	a810      	add	r0, sp, #64	; 0x40
   baefc:	f7fa fe54 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   baf00:	a80b      	add	r0, sp, #44	; 0x2c
   baf02:	f7fc fc84 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   baf06:	e716      	b.n	bad36 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x26>
            arr.append(std::move(v));
   baf08:	a910      	add	r1, sp, #64	; 0x40
   baf0a:	a816      	add	r0, sp, #88	; 0x58
   baf0c:	f7fb fb0e 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   baf10:	a916      	add	r1, sp, #88	; 0x58
   baf12:	4628      	mov	r0, r5
   baf14:	f7ff fc4c 	bl	ba7b0 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>
   baf18:	a816      	add	r0, sp, #88	; 0x58
   baf1a:	f7fa fe45 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   baf1e:	a810      	add	r0, sp, #64	; 0x40
   baf20:	f7fa fe42 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   baf24:	e7c8      	b.n	baeb8 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x1a8>
            return Error::NO_MEMORY;
   baf26:	4c4e      	ldr	r4, [pc, #312]	; (bb060 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x350>)
   baf28:	e7ea      	b.n	baf00 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x1f0>
        JSONObjectIterator(value.t_, value.d_) {
   baf2a:	68a6      	ldr	r6, [r4, #8]
   baf2c:	4621      	mov	r1, r4
   baf2e:	a810      	add	r0, sp, #64	; 0x40
   baf30:	f7fd fd1c 	bl	b896c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
   baf34:	4631      	mov	r1, r6
   baf36:	aa10      	add	r2, sp, #64	; 0x40
   baf38:	a816      	add	r0, sp, #88	; 0x58
   baf3a:	f7fd f81f 	bl	b7f7c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   baf3e:	a811      	add	r0, sp, #68	; 0x44
   baf40:	f7fc fc65 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return as<VariantMap>();
   baf44:	4628      	mov	r0, r5
   baf46:	f7fb fa1a 	bl	b637e <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
        return entries_.reserve(count);
   baf4a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   baf4c:	4605      	mov	r5, r0
   baf4e:	f7ff fd6a 	bl	baa26 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi>
        if (!map.reserve(it.count())) {
   baf52:	2800      	cmp	r0, #0
   baf54:	d05a      	beq.n	bb00c <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x2fc>
        while (it.next()) {
   baf56:	a816      	add	r0, sp, #88	; 0x58
   baf58:	f7fd f828 	bl	b7fac <_ZN5spark18JSONObjectIterator4nextEv>
   baf5c:	4604      	mov	r4, r0
   baf5e:	2800      	cmp	r0, #0
   baf60:	d03a      	beq.n	bafd8 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x2c8>
    return JSONString(k_, d_);
   baf62:	9c19      	ldr	r4, [sp, #100]	; 0x64
   baf64:	a916      	add	r1, sp, #88	; 0x58
   baf66:	a810      	add	r0, sp, #64	; 0x40
   baf68:	f7fd fd00 	bl	b896c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
   baf6c:	aa10      	add	r2, sp, #64	; 0x40
   baf6e:	4621      	mov	r1, r4
   baf70:	a802      	add	r0, sp, #8
   baf72:	f7fc ffdf 	bl	b7f34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   baf76:	a811      	add	r0, sp, #68	; 0x44
   baf78:	f7fc fc49 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return String(s_, n_);
   baf7c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   baf80:	a806      	add	r0, sp, #24
   baf82:	f7fe fdb6 	bl	b9af2 <_ZN6StringC1EPKcj>
            if (k.length() != jsonKey.size()) {
   baf86:	9a05      	ldr	r2, [sp, #20]
   baf88:	9b08      	ldr	r3, [sp, #32]
   baf8a:	429a      	cmp	r2, r3
   baf8c:	d13c      	bne.n	bb008 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x2f8>
            Variant v;
   baf8e:	2218      	movs	r2, #24
   baf90:	2100      	movs	r1, #0
   baf92:	a80a      	add	r0, sp, #40	; 0x28
   baf94:	f000 fde0 	bl	bbb58 <memset>
    return JSONValue(v_, d_);
   baf98:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   baf9a:	a916      	add	r1, sp, #88	; 0x58
   baf9c:	4668      	mov	r0, sp
   baf9e:	f7fd fce5 	bl	b896c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
   bafa2:	466a      	mov	r2, sp
   bafa4:	4621      	mov	r1, r4
   bafa6:	a810      	add	r0, sp, #64	; 0x40
   bafa8:	f7fc fe47 	bl	b7c3a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bafac:	a801      	add	r0, sp, #4
   bafae:	f7fc fc2e 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            CHECK(decodeFromJson(it.value(), v));
   bafb2:	a90a      	add	r1, sp, #40	; 0x28
   bafb4:	a810      	add	r0, sp, #64	; 0x40
   bafb6:	f7ff feab 	bl	bad10 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE>
   bafba:	4604      	mov	r4, r0
   bafbc:	a811      	add	r0, sp, #68	; 0x44
   bafbe:	f7fc fc26 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bafc2:	2c00      	cmp	r4, #0
   bafc4:	da0a      	bge.n	bafdc <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x2cc>
   bafc6:	a80a      	add	r0, sp, #40	; 0x28
   bafc8:	f7fa fdee 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
                return Error::NO_MEMORY;
   bafcc:	a806      	add	r0, sp, #24
   bafce:	f7fe fd31 	bl	b9a34 <_ZN6StringD1Ev>
   bafd2:	a803      	add	r0, sp, #12
   bafd4:	f7fc fc1b 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bafd8:	a817      	add	r0, sp, #92	; 0x5c
   bafda:	e792      	b.n	baf02 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x1f2>
            map.set(std::move(k), std::move(v));
   bafdc:	a90a      	add	r1, sp, #40	; 0x28
   bafde:	a810      	add	r0, sp, #64	; 0x40
   bafe0:	f7fb faa4 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   bafe4:	aa10      	add	r2, sp, #64	; 0x40
   bafe6:	a906      	add	r1, sp, #24
   bafe8:	4628      	mov	r0, r5
   bafea:	f7ff fe42 	bl	bac72 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE3setEOS1_S2_>
   bafee:	a810      	add	r0, sp, #64	; 0x40
   baff0:	f7fa fdda 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   baff4:	a80a      	add	r0, sp, #40	; 0x28
   baff6:	f7fa fdd7 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            String k(jsonKey);
   baffa:	a806      	add	r0, sp, #24
   baffc:	f7fe fd1a 	bl	b9a34 <_ZN6StringD1Ev>
   bb000:	a803      	add	r0, sp, #12
   bb002:	f7fc fc04 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb006:	e7a6      	b.n	baf56 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x246>
                return Error::NO_MEMORY;
   bb008:	4c15      	ldr	r4, [pc, #84]	; (bb060 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x350>)
   bb00a:	e7df      	b.n	bafcc <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x2bc>
            return Error::NO_MEMORY;
   bb00c:	4c14      	ldr	r4, [pc, #80]	; (bb060 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x350>)
   bb00e:	e7e3      	b.n	bafd8 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x2c8>
        return Error::INVALID_ARGUMENT;
   bb010:	4c14      	ldr	r4, [pc, #80]	; (bb064 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x354>)
   bb012:	e690      	b.n	bad36 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x26>
      if (__builtin_expect(__first == __start, 0))
   bb014:	4294      	cmp	r4, r2
   bb016:	f43f aedf 	beq.w	badd8 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xc8>
		  if (__builtin_mul_overflow(__val, __sign, &__tmp))
   bb01a:	fb86 0403 	smull	r0, r4, r6, r3
   bb01e:	ebb4 7fe0 	cmp.w	r4, r0, asr #31
   bb022:	bf14      	ite	ne
   bb024:	2401      	movne	r4, #1
   bb026:	2400      	moveq	r4, #0
   bb028:	2b00      	cmp	r3, #0
   bb02a:	f6bf aee8 	bge.w	badfe <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xee>
   bb02e:	b12e      	cbz	r6, bb03c <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x32c>
   bb030:	3601      	adds	r6, #1
   bb032:	f47f aed1 	bne.w	badd8 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xc8>
   bb036:	4283      	cmp	r3, r0
   bb038:	f47f aece 	bne.w	badd8 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xc8>
        if (r.ec != std::errc() || r.ptr != s.data() + s.size()) {
   bb03c:	4562      	cmp	r2, ip
   bb03e:	f47f aecb 	bne.w	badd8 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xc8>
	: _M_storage(std::forward<_Args>(__args)...)
   bb042:	9016      	str	r0, [sp, #88]	; 0x58
	_M_index{_Np}
   bb044:	2302      	movs	r3, #2
    { __lhs.swap(__rhs); }
   bb046:	4628      	mov	r0, r5
   bb048:	a916      	add	r1, sp, #88	; 0x58
	_M_index{_Np}
   bb04a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    { __lhs.swap(__rhs); }
   bb04e:	f7fb f9cf 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bb052:	a816      	add	r0, sp, #88	; 0x58
   bb054:	f7fa fda8 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb058:	e6c8      	b.n	badec <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xdc>
      if (__builtin_expect(__first == __start, 0))
   bb05a:	4564      	cmp	r4, ip
   bb05c:	e7db      	b.n	bb016 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x306>
   bb05e:	bf00      	nop
   bb060:	fffffefc 	.word	0xfffffefc
   bb064:	fffffef2 	.word	0xfffffef2

000bb068 <_ZN8particle7Variant8fromJSONERKN5spark9JSONValueE>:
Variant Variant::fromJSON(const JSONValue& val) {
   bb068:	b530      	push	{r4, r5, lr}
   bb06a:	b087      	sub	sp, #28
   bb06c:	460d      	mov	r5, r1
    Variant v;
   bb06e:	2218      	movs	r2, #24
   bb070:	2100      	movs	r1, #0
Variant Variant::fromJSON(const JSONValue& val) {
   bb072:	4604      	mov	r4, r0
    Variant v;
   bb074:	4668      	mov	r0, sp
   bb076:	f000 fd6f 	bl	bbb58 <memset>
    int r = decodeFromJson(val, v);
   bb07a:	4669      	mov	r1, sp
   bb07c:	4628      	mov	r0, r5
   bb07e:	f7ff fe47 	bl	bad10 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE>
    if (r < 0) {
   bb082:	2800      	cmp	r0, #0
   bb084:	da0a      	bge.n	bb09c <_ZN8particle7Variant8fromJSONERKN5spark9JSONValueE+0x34>
        return Variant();
   bb086:	2218      	movs	r2, #24
   bb088:	2100      	movs	r1, #0
   bb08a:	4620      	mov	r0, r4
   bb08c:	f000 fd64 	bl	bbb58 <memset>
   bb090:	4668      	mov	r0, sp
   bb092:	f7fa fd89 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
   bb096:	4620      	mov	r0, r4
   bb098:	b007      	add	sp, #28
   bb09a:	bd30      	pop	{r4, r5, pc}
    return v;
   bb09c:	4669      	mov	r1, sp
   bb09e:	4620      	mov	r0, r4
   bb0a0:	f7fb fa44 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   bb0a4:	e7f4      	b.n	bb090 <_ZN8particle7Variant8fromJSONERKN5spark9JSONValueE+0x28>

000bb0a6 <_ZN8particle7Variant8fromJSONEPKc>:
Variant Variant::fromJSON(const char* json) {
   bb0a6:	b510      	push	{r4, lr}
   bb0a8:	b086      	sub	sp, #24
   bb0aa:	4604      	mov	r4, r0
    return parseCopy(json, strlen(json));
   bb0ac:	4608      	mov	r0, r1
   bb0ae:	9101      	str	r1, [sp, #4]
   bb0b0:	f7f9 fe4e 	bl	b4d50 <strlen>
   bb0b4:	9901      	ldr	r1, [sp, #4]
   bb0b6:	4602      	mov	r2, r0
   bb0b8:	a803      	add	r0, sp, #12
   bb0ba:	f7fd f889 	bl	b81d0 <_ZN5spark9JSONValue9parseCopyEPKcj>
    return fromJSON(JSONValue::parseCopy(json));
   bb0be:	a903      	add	r1, sp, #12
   bb0c0:	4620      	mov	r0, r4
   bb0c2:	f7ff ffd1 	bl	bb068 <_ZN8particle7Variant8fromJSONERKN5spark9JSONValueE>
   bb0c6:	a804      	add	r0, sp, #16
   bb0c8:	f7fc fba1 	bl	b780e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb0cc:	4620      	mov	r0, r4
   bb0ce:	b006      	add	sp, #24
   bb0d0:	bd10      	pop	{r4, pc}
	...

000bb0d4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE>:
int decodeFromCbor(DecodingStream& stream, const CborHead& head, Variant& var) {
   bb0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch (head.type) {
   bb0d8:	688c      	ldr	r4, [r1, #8]
int decodeFromCbor(DecodingStream& stream, const CborHead& head, Variant& var) {
   bb0da:	b0aa      	sub	sp, #168	; 0xa8
   bb0dc:	4607      	mov	r7, r0
   bb0de:	4689      	mov	r9, r1
   bb0e0:	4615      	mov	r5, r2
   bb0e2:	2c07      	cmp	r4, #7
   bb0e4:	f200 82fe 	bhi.w	bb6e4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x610>
   bb0e8:	e8df f014 	tbh	[pc, r4, lsl #1]
   bb0ec:	00180008 	.word	0x00180008
   bb0f0:	00940031 	.word	0x00940031
   bb0f4:	016100f4 	.word	0x016100f4
   bb0f8:	029c028a 	.word	0x029c028a
        if (head.arg <= std::numeric_limits<unsigned>::max()) {
   bb0fc:	e9d1 2300 	ldrd	r2, r3, [r1]
            var = (unsigned)head.arg; // 32-bit
   bb100:	9224      	str	r2, [sp, #144]	; 0x90
        if (head.arg <= std::numeric_limits<unsigned>::max()) {
   bb102:	b943      	cbnz	r3, bb116 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x42>
	_M_index{_Np}
   bb104:	2303      	movs	r3, #3
   bb106:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    { __lhs.swap(__rhs); }
   bb10a:	4628      	mov	r0, r5
   bb10c:	a924      	add	r1, sp, #144	; 0x90
   bb10e:	f7fb f96f 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bb112:	a824      	add	r0, sp, #144	; 0x90
   bb114:	e211      	b.n	bb53a <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x466>
	: _M_storage(std::forward<_Args>(__args)...)
   bb116:	9325      	str	r3, [sp, #148]	; 0x94
	_M_index{_Np}
   bb118:	2305      	movs	r3, #5
   bb11a:	e7f4      	b.n	bb106 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x32>
        if (head.arg > (uint64_t)std::numeric_limits<int64_t>::max()) {
   bb11c:	e9d1 2300 	ldrd	r2, r3, [r1]
   bb120:	2b00      	cmp	r3, #0
   bb122:	f2c0 82e2 	blt.w	bb6ea <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x616>
        int64_t v = -(int64_t)head.arg - 1;
   bb126:	43d2      	mvns	r2, r2
   bb128:	43db      	mvns	r3, r3
        if (v >= std::numeric_limits<int>::min()) {
   bb12a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb12e:	f173 31ff 	sbcs.w	r1, r3, #4294967295	; 0xffffffff
	: _M_storage(std::forward<_Args>(__args)...)
   bb132:	bfb8      	it	lt
   bb134:	9325      	strlt	r3, [sp, #148]	; 0x94
            var = (int)v; // 32-bit
   bb136:	9224      	str	r2, [sp, #144]	; 0x90
	_M_index{_Np}
   bb138:	bfac      	ite	ge
   bb13a:	2302      	movge	r3, #2
   bb13c:	2304      	movlt	r3, #4
    { __lhs.swap(__rhs); }
   bb13e:	4628      	mov	r0, r5
   bb140:	a924      	add	r1, sp, #144	; 0x90
	_M_index{_Np}
   bb142:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    { __lhs.swap(__rhs); }
   bb146:	f7fb f953 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bb14a:	a824      	add	r0, sp, #144	; 0x90
   bb14c:	e17a      	b.n	bb444 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x370>
    if (head.detail == 31 /* Indefinite length */) {
   bb14e:	68cb      	ldr	r3, [r1, #12]
        capacity_(0) {
   bb150:	2600      	movs	r6, #0
   bb152:	2b1f      	cmp	r3, #31
   bb154:	e9cd 6618 	strd	r6, r6, [sp, #96]	; 0x60
   bb158:	e9cd 661e 	strd	r6, r6, [sp, #120]	; 0x78
   bb15c:	961a      	str	r6, [sp, #104]	; 0x68
   bb15e:	9620      	str	r6, [sp, #128]	; 0x80
   bb160:	d12d      	bne.n	bb1be <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xea>
            if (h.arg > std::numeric_limits<unsigned>::max()) {
   bb162:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
            CHECK(readCborHead(stream, h));
   bb166:	a924      	add	r1, sp, #144	; 0x90
   bb168:	4638      	mov	r0, r7
   bb16a:	f7fe ffb7 	bl	ba0dc <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
   bb16e:	1e04      	subs	r4, r0, #0
   bb170:	db18      	blt.n	bb1a4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xd0>
            if (h.type == 7 /* Misc. items */ && h.detail == 31 /* Stop code */) {
   bb172:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bb174:	2b07      	cmp	r3, #7
   bb176:	d102      	bne.n	bb17e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xaa>
   bb178:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   bb17a:	2a1f      	cmp	r2, #31
   bb17c:	d02c      	beq.n	bb1d8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x104>
            if (h.type != head.type || h.detail == 31 /* Indefinite length */) { // Chunks of indefinite length are not permitted
   bb17e:	f8d9 2008 	ldr.w	r2, [r9, #8]
   bb182:	4293      	cmp	r3, r2
   bb184:	d119      	bne.n	bb1ba <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xe6>
   bb186:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   bb188:	2b1f      	cmp	r3, #31
   bb18a:	d016      	beq.n	bb1ba <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xe6>
            if (h.arg > std::numeric_limits<unsigned>::max()) {
   bb18c:	9924      	ldr	r1, [sp, #144]	; 0x90
   bb18e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   bb190:	4588      	cmp	r8, r1
   bb192:	eb76 0303 	sbcs.w	r3, r6, r3
   bb196:	d325      	bcc.n	bb1e4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x110>
            CHECK(read(stream, h.arg, out));
   bb198:	aa1e      	add	r2, sp, #120	; 0x78
   bb19a:	4638      	mov	r0, r7
   bb19c:	f7ff f864 	bl	ba268 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE>
   bb1a0:	1e04      	subs	r4, r0, #0
   bb1a2:	dae0      	bge.n	bb166 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x92>
   bb1a4:	a81e      	add	r0, sp, #120	; 0x78
   bb1a6:	f7fc fb2b 	bl	b7800 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
        CHECK(readCborByteString(stream, head, b));
   bb1aa:	b1ec      	cbz	r4, bb1e8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x114>
   bb1ac:	a818      	add	r0, sp, #96	; 0x60
   bb1ae:	f7fc fb27 	bl	b7800 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
}
   bb1b2:	4620      	mov	r0, r4
   bb1b4:	b02a      	add	sp, #168	; 0xa8
   bb1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                return Error::BAD_DATA;
   bb1ba:	4ca4      	ldr	r4, [pc, #656]	; (bb44c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x378>)
   bb1bc:	e7f2      	b.n	bb1a4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xd0>
        if (head.arg > std::numeric_limits<unsigned>::max()) {
   bb1be:	e9d1 1300 	ldrd	r1, r3, [r1]
   bb1c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb1c6:	428a      	cmp	r2, r1
   bb1c8:	eb76 0303 	sbcs.w	r3, r6, r3
   bb1cc:	d30a      	bcc.n	bb1e4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x110>
        CHECK(read(stream, head.arg, out));
   bb1ce:	aa1e      	add	r2, sp, #120	; 0x78
   bb1d0:	f7ff f84a 	bl	ba268 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE>
   bb1d4:	1e04      	subs	r4, r0, #0
   bb1d6:	dbe5      	blt.n	bb1a4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xd0>
    output = std::move(out);
   bb1d8:	a91e      	add	r1, sp, #120	; 0x78
   bb1da:	a818      	add	r0, sp, #96	; 0x60
   bb1dc:	f7ff f82e 	bl	ba23c <_ZN8particle6BufferaSEOS0_.isra.0>
    return 0;
   bb1e0:	2400      	movs	r4, #0
   bb1e2:	e7df      	b.n	bb1a4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xd0>
            return Error::OUT_OF_RANGE;
   bb1e4:	4c9a      	ldr	r4, [pc, #616]	; (bb450 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x37c>)
   bb1e6:	e7dd      	b.n	bb1a4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xd0>
   bb1e8:	a918      	add	r1, sp, #96	; 0x60
   bb1ea:	a81e      	add	r0, sp, #120	; 0x78
   bb1ec:	f7fa fad2 	bl	b5794 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
   bb1f0:	a91e      	add	r1, sp, #120	; 0x78
   bb1f2:	a824      	add	r0, sp, #144	; 0x90
   bb1f4:	f7fa face 	bl	b5794 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
	_M_index{_Np}
   bb1f8:	2308      	movs	r3, #8
    { __lhs.swap(__rhs); }
   bb1fa:	a924      	add	r1, sp, #144	; 0x90
   bb1fc:	4628      	mov	r0, r5
	_M_index{_Np}
   bb1fe:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    { __lhs.swap(__rhs); }
   bb202:	f7fb f8f5 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bb206:	a824      	add	r0, sp, #144	; 0x90
   bb208:	f7fa fcce 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb20c:	a81e      	add	r0, sp, #120	; 0x78
   bb20e:	f7fc faf7 	bl	b7800 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
   bb212:	e7cb      	b.n	bb1ac <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xd8>
        String s;
   bb214:	498f      	ldr	r1, [pc, #572]	; (bb454 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x380>)
   bb216:	a818      	add	r0, sp, #96	; 0x60
   bb218:	f7fe fc57 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
    T out;
   bb21c:	498d      	ldr	r1, [pc, #564]	; (bb454 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x380>)
   bb21e:	a824      	add	r0, sp, #144	; 0x90
   bb220:	f7fe fc53 	bl	b9aca <_ZN6StringC1EPK19__FlashStringHelper>
    if (head.detail == 31 /* Indefinite length */) {
   bb224:	f8d9 300c 	ldr.w	r3, [r9, #12]
   bb228:	2b1f      	cmp	r3, #31
   bb22a:	d12c      	bne.n	bb286 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1b2>
            if (h.arg > std::numeric_limits<unsigned>::max()) {
   bb22c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   bb230:	f04f 0800 	mov.w	r8, #0
            CHECK(readCborHead(stream, h));
   bb234:	a91e      	add	r1, sp, #120	; 0x78
   bb236:	4638      	mov	r0, r7
   bb238:	f7fe ff50 	bl	ba0dc <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
   bb23c:	1e04      	subs	r4, r0, #0
   bb23e:	db18      	blt.n	bb272 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x19e>
            if (h.type == 7 /* Misc. items */ && h.detail == 31 /* Stop code */) {
   bb240:	9b20      	ldr	r3, [sp, #128]	; 0x80
   bb242:	2b07      	cmp	r3, #7
   bb244:	d102      	bne.n	bb24c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x178>
   bb246:	9a21      	ldr	r2, [sp, #132]	; 0x84
   bb248:	2a1f      	cmp	r2, #31
   bb24a:	d025      	beq.n	bb298 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1c4>
            if (h.type != head.type || h.detail == 31 /* Indefinite length */) { // Chunks of indefinite length are not permitted
   bb24c:	f8d9 2008 	ldr.w	r2, [r9, #8]
   bb250:	4293      	cmp	r3, r2
   bb252:	d116      	bne.n	bb282 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1ae>
   bb254:	9b21      	ldr	r3, [sp, #132]	; 0x84
   bb256:	2b1f      	cmp	r3, #31
   bb258:	d013      	beq.n	bb282 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1ae>
            if (h.arg > std::numeric_limits<unsigned>::max()) {
   bb25a:	991e      	ldr	r1, [sp, #120]	; 0x78
   bb25c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   bb25e:	428e      	cmp	r6, r1
   bb260:	eb78 0303 	sbcs.w	r3, r8, r3
   bb264:	d31e      	bcc.n	bb2a4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1d0>
            CHECK(read(stream, h.arg, out));
   bb266:	aa24      	add	r2, sp, #144	; 0x90
   bb268:	4638      	mov	r0, r7
   bb26a:	f7fe ff11 	bl	ba090 <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String>
   bb26e:	1e04      	subs	r4, r0, #0
   bb270:	dae0      	bge.n	bb234 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x160>
    T out;
   bb272:	a824      	add	r0, sp, #144	; 0x90
   bb274:	f7fe fbde 	bl	b9a34 <_ZN6StringD1Ev>
        CHECK(readCborTextString(stream, head, s));
   bb278:	b1b4      	cbz	r4, bb2a8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1d4>
        break;
   bb27a:	a818      	add	r0, sp, #96	; 0x60
   bb27c:	f7fe fbda 	bl	b9a34 <_ZN6StringD1Ev>
   bb280:	e797      	b.n	bb1b2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xde>
                return Error::BAD_DATA;
   bb282:	4c72      	ldr	r4, [pc, #456]	; (bb44c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x378>)
   bb284:	e7f5      	b.n	bb272 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x19e>
        if (head.arg > std::numeric_limits<unsigned>::max()) {
   bb286:	e9d9 1300 	ldrd	r1, r3, [r9]
   bb28a:	b95b      	cbnz	r3, bb2a4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1d0>
        CHECK(read(stream, head.arg, out));
   bb28c:	aa24      	add	r2, sp, #144	; 0x90
   bb28e:	4638      	mov	r0, r7
   bb290:	f7fe fefe 	bl	ba090 <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String>
   bb294:	1e04      	subs	r4, r0, #0
   bb296:	dbec      	blt.n	bb272 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x19e>
    output = std::move(out);
   bb298:	a924      	add	r1, sp, #144	; 0x90
   bb29a:	a818      	add	r0, sp, #96	; 0x60
   bb29c:	f7fe fc78 	bl	b9b90 <_ZN6StringaSEOS_>
    return 0;
   bb2a0:	2400      	movs	r4, #0
   bb2a2:	e7e6      	b.n	bb272 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x19e>
            return Error::OUT_OF_RANGE;
   bb2a4:	4c6a      	ldr	r4, [pc, #424]	; (bb450 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x37c>)
   bb2a6:	e7e4      	b.n	bb272 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x19e>
        var = std::move(s);
   bb2a8:	a918      	add	r1, sp, #96	; 0x60
   bb2aa:	a81e      	add	r0, sp, #120	; 0x78
   bb2ac:	f7fe fc4b 	bl	b9b46 <_ZN6StringC1EOS_>
	  ::new ((void*)std::addressof(_M_storage))
   bb2b0:	a91e      	add	r1, sp, #120	; 0x78
   bb2b2:	a824      	add	r0, sp, #144	; 0x90
   bb2b4:	f7fe fc47 	bl	b9b46 <_ZN6StringC1EOS_>
	_M_index{_Np}
   bb2b8:	2307      	movs	r3, #7
    { __lhs.swap(__rhs); }
   bb2ba:	a924      	add	r1, sp, #144	; 0x90
   bb2bc:	4628      	mov	r0, r5
	_M_index{_Np}
   bb2be:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    { __lhs.swap(__rhs); }
   bb2c2:	f7fb f895 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bb2c6:	a824      	add	r0, sp, #144	; 0x90
   bb2c8:	f7fa fc6e 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb2cc:	a81e      	add	r0, sp, #120	; 0x78
   bb2ce:	f7fe fbb1 	bl	b9a34 <_ZN6StringD1Ev>
   bb2d2:	e7d2      	b.n	bb27a <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1a6>
   bb2d4:	2300      	movs	r3, #0
   bb2d6:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
   bb2da:	9314      	str	r3, [sp, #80]	; 0x50
        if (head.detail != 31 /* Indefinite length */) {
   bb2dc:	68cb      	ldr	r3, [r1, #12]
   bb2de:	2b1f      	cmp	r3, #31
   bb2e0:	d00d      	beq.n	bb2fe <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x22a>
            if (head.arg > (uint64_t)std::numeric_limits<int>::max()) {
   bb2e2:	e9d1 6300 	ldrd	r6, r3, [r1]
   bb2e6:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
   bb2ea:	f173 0300 	sbcs.w	r3, r3, #0
   bb2ee:	d25c      	bcs.n	bb3aa <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2d6>
            if (!arr.reserve(len)) {
   bb2f0:	4631      	mov	r1, r6
   bb2f2:	a812      	add	r0, sp, #72	; 0x48
   bb2f4:	f7ff fa12 	bl	ba71c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi>
   bb2f8:	b918      	cbnz	r0, bb302 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x22e>
                return Error::NO_MEMORY;
   bb2fa:	4c57      	ldr	r4, [pc, #348]	; (bb458 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x384>)
   bb2fc:	e04f      	b.n	bb39e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2ca>
        int len = -1;
   bb2fe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
            if (len >= 0 && arr.size() == len) {
   bb302:	1c70      	adds	r0, r6, #1
   bb304:	d002      	beq.n	bb30c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x238>
   bb306:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb308:	429e      	cmp	r6, r3
   bb30a:	d00d      	beq.n	bb328 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x254>
            CHECK(readCborHead(stream, h));
   bb30c:	a918      	add	r1, sp, #96	; 0x60
   bb30e:	4638      	mov	r0, r7
   bb310:	f7fe fee4 	bl	ba0dc <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
   bb314:	1e04      	subs	r4, r0, #0
   bb316:	db42      	blt.n	bb39e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2ca>
            if (h.type == 7 /* Misc. items */ && h.detail == 31 /* Stop code */) {
   bb318:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   bb31a:	2b07      	cmp	r3, #7
   bb31c:	d11e      	bne.n	bb35c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x288>
   bb31e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bb320:	2b1f      	cmp	r3, #31
   bb322:	d11b      	bne.n	bb35c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x288>
                if (len >= 0) {
   bb324:	3601      	adds	r6, #1
   bb326:	d13e      	bne.n	bb3a6 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2d2>
        var = std::move(arr);
   bb328:	a912      	add	r1, sp, #72	; 0x48
   bb32a:	a81e      	add	r0, sp, #120	; 0x78
   bb32c:	f7fa fa56 	bl	b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  ::new ((void*)std::addressof(_M_storage))
   bb330:	a91e      	add	r1, sp, #120	; 0x78
   bb332:	a824      	add	r0, sp, #144	; 0x90
   bb334:	f7fa fa52 	bl	b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	_M_index{_Np}
   bb338:	2309      	movs	r3, #9
    { __lhs.swap(__rhs); }
   bb33a:	a924      	add	r1, sp, #144	; 0x90
   bb33c:	4628      	mov	r0, r5
	_M_index{_Np}
   bb33e:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    { __lhs.swap(__rhs); }
   bb342:	f7fb f855 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bb346:	a824      	add	r0, sp, #144	; 0x90
   bb348:	f7fa fc2e 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb34c:	a81e      	add	r0, sp, #120	; 0x78
   bb34e:	f7fa fcaa 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
        break;
   bb352:	a812      	add	r0, sp, #72	; 0x48
   bb354:	f7fa fca7 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
    return 0;
   bb358:	2400      	movs	r4, #0
   bb35a:	e72a      	b.n	bb1b2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xde>
            Variant v;
   bb35c:	2218      	movs	r2, #24
   bb35e:	2100      	movs	r1, #0
   bb360:	a81e      	add	r0, sp, #120	; 0x78
   bb362:	f000 fbf9 	bl	bbb58 <memset>
            CHECK(decodeFromCbor(stream, h, v));
   bb366:	aa1e      	add	r2, sp, #120	; 0x78
   bb368:	a918      	add	r1, sp, #96	; 0x60
   bb36a:	4638      	mov	r0, r7
   bb36c:	f7ff feb2 	bl	bb0d4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE>
   bb370:	1e04      	subs	r4, r0, #0
   bb372:	db11      	blt.n	bb398 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2c4>
            if (!arr.append(std::move(v))) {
   bb374:	a91e      	add	r1, sp, #120	; 0x78
   bb376:	a824      	add	r0, sp, #144	; 0x90
   bb378:	f7fb f8d8 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   bb37c:	a924      	add	r1, sp, #144	; 0x90
   bb37e:	a812      	add	r0, sp, #72	; 0x48
   bb380:	f7ff fa16 	bl	ba7b0 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>
   bb384:	4604      	mov	r4, r0
   bb386:	a824      	add	r0, sp, #144	; 0x90
   bb388:	f7fa fc0e 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb38c:	b11c      	cbz	r4, bb396 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2c2>
   bb38e:	a81e      	add	r0, sp, #120	; 0x78
   bb390:	f7fa fc0a 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb394:	e7b5      	b.n	bb302 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x22e>
                return Error::NO_MEMORY;
   bb396:	4c30      	ldr	r4, [pc, #192]	; (bb458 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x384>)
   bb398:	a81e      	add	r0, sp, #120	; 0x78
   bb39a:	f7fa fc05 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
                return Error::OUT_OF_RANGE;
   bb39e:	a812      	add	r0, sp, #72	; 0x48
   bb3a0:	f7fa fc81 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
   bb3a4:	e705      	b.n	bb1b2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xde>
                    return Error::BAD_DATA; // Unexpected stop code
   bb3a6:	4c29      	ldr	r4, [pc, #164]	; (bb44c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x378>)
   bb3a8:	e7f9      	b.n	bb39e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2ca>
                return Error::OUT_OF_RANGE;
   bb3aa:	4c29      	ldr	r4, [pc, #164]	; (bb450 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x37c>)
   bb3ac:	e7f7      	b.n	bb39e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2ca>
   bb3ae:	2300      	movs	r3, #0
	  ::new ((void*)std::addressof(_M_storage))
   bb3b0:	a924      	add	r1, sp, #144	; 0x90
   bb3b2:	a80c      	add	r0, sp, #48	; 0x30
   bb3b4:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
   bb3b8:	9326      	str	r3, [sp, #152]	; 0x98
   bb3ba:	f7fa fa1e 	bl	b57fa <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	_M_index{_Np}
   bb3be:	230a      	movs	r3, #10
class Map {
   bb3c0:	a824      	add	r0, sp, #144	; 0x90
   bb3c2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   bb3c6:	f7fa fc0b 	bl	b5be0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
        if (head.detail != 31 /* Indefinite length */) {
   bb3ca:	f8d9 300c 	ldr.w	r3, [r9, #12]
   bb3ce:	2b1f      	cmp	r3, #31
   bb3d0:	d011      	beq.n	bb3f6 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x322>
            if (head.arg > (uint64_t)std::numeric_limits<int>::max()) {
   bb3d2:	e9d9 3200 	ldrd	r3, r2, [r9]
   bb3d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bb3da:	f172 0200 	sbcs.w	r2, r2, #0
   bb3de:	f080 810d 	bcs.w	bb5fc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x528>
            len = head.arg;
   bb3e2:	4698      	mov	r8, r3
   bb3e4:	a80c      	add	r0, sp, #48	; 0x30
   bb3e6:	f7fa ffca 	bl	b637e <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
        return entries_.reserve(count);
   bb3ea:	4641      	mov	r1, r8
   bb3ec:	f7ff fb1b 	bl	baa26 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi>
            if (!cont.asMap().reserve(len)) {
   bb3f0:	b918      	cbnz	r0, bb3fa <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x326>
                return Error::NO_MEMORY;
   bb3f2:	4c19      	ldr	r4, [pc, #100]	; (bb458 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x384>)
   bb3f4:	e0a0      	b.n	bb538 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x464>
        int len = -1;
   bb3f6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
            if (len >= 0 && cont.size() == len) {
   bb3fa:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   bb3fe:	d004      	beq.n	bb40a <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x336>
   bb400:	a80c      	add	r0, sp, #48	; 0x30
   bb402:	f7ff f8a1 	bl	ba548 <_ZNK8particle7Variant4sizeEv>
   bb406:	4540      	cmp	r0, r8
   bb408:	d010      	beq.n	bb42c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x358>
            CHECK(readCborHead(stream, h));
   bb40a:	a904      	add	r1, sp, #16
   bb40c:	4638      	mov	r0, r7
   bb40e:	f7fe fe65 	bl	ba0dc <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
   bb412:	1e04      	subs	r4, r0, #0
   bb414:	f2c0 8090 	blt.w	bb538 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x464>
            if (h.type == 7 /* Misc. items */ && h.detail == 31 /* Stop code */) {
   bb418:	9b06      	ldr	r3, [sp, #24]
   bb41a:	2b07      	cmp	r3, #7
   bb41c:	d11e      	bne.n	bb45c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x388>
   bb41e:	9b07      	ldr	r3, [sp, #28]
   bb420:	2b1f      	cmp	r3, #31
   bb422:	d11b      	bne.n	bb45c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x388>
                if (len >= 0) {
   bb424:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   bb428:	f040 80e6 	bne.w	bb5f8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x524>
        var = std::move(cont);
   bb42c:	a90c      	add	r1, sp, #48	; 0x30
   bb42e:	a824      	add	r0, sp, #144	; 0x90
   bb430:	f7fb f87c 	bl	b652c <_ZN8particle7VariantC1EOS0_>
    { __lhs.swap(__rhs); }
   bb434:	a924      	add	r1, sp, #144	; 0x90
   bb436:	4628      	mov	r0, r5
   bb438:	f7fa ffda 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bb43c:	a824      	add	r0, sp, #144	; 0x90
   bb43e:	f7fa fbb3 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb442:	a80c      	add	r0, sp, #48	; 0x30
   bb444:	f7fa fbb0 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb448:	e786      	b.n	bb358 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x284>
   bb44a:	bf00      	nop
   bb44c:	fffffee8 	.word	0xfffffee8
   bb450:	fffffede 	.word	0xfffffede
   bb454:	000be3da 	.word	0x000be3da
   bb458:	fffffefc 	.word	0xfffffefc
            Variant k;
   bb45c:	2218      	movs	r2, #24
   bb45e:	2100      	movs	r1, #0
   bb460:	a812      	add	r0, sp, #72	; 0x48
   bb462:	f000 fb79 	bl	bbb58 <memset>
            CHECK(decodeFromCbor(stream, h, k));
   bb466:	aa12      	add	r2, sp, #72	; 0x48
   bb468:	a904      	add	r1, sp, #16
   bb46a:	4638      	mov	r0, r7
   bb46c:	f7ff fe32 	bl	bb0d4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE>
   bb470:	1e04      	subs	r4, r0, #0
   bb472:	db5e      	blt.n	bb532 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x45e>
            Variant v;
   bb474:	2218      	movs	r2, #24
   bb476:	2100      	movs	r1, #0
   bb478:	a818      	add	r0, sp, #96	; 0x60
   bb47a:	f000 fb6d 	bl	bbb58 <memset>
            CHECK(readCborHead(stream, h));
   bb47e:	a904      	add	r1, sp, #16
   bb480:	4638      	mov	r0, r7
   bb482:	f7fe fe2b 	bl	ba0dc <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
   bb486:	1e04      	subs	r4, r0, #0
   bb488:	db50      	blt.n	bb52c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x458>
            CHECK(decodeFromCbor(stream, h, v));
   bb48a:	aa18      	add	r2, sp, #96	; 0x60
   bb48c:	a904      	add	r1, sp, #16
   bb48e:	4638      	mov	r0, r7
   bb490:	f7ff fe20 	bl	bb0d4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE>
   bb494:	1e04      	subs	r4, r0, #0
   bb496:	db49      	blt.n	bb52c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x458>
            if (cont.isMap()) {
   bb498:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   bb49c:	2b0a      	cmp	r3, #10
   bb49e:	d169      	bne.n	bb574 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x4a0>
                if (!k.isString()) {
   bb4a0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   bb4a4:	2b07      	cmp	r3, #7
   bb4a6:	d072      	beq.n	bb58e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x4ba>
   bb4a8:	2300      	movs	r3, #0
                    int capacity = (len < 0) ? (cont.size() + 1) : len;
   bb4aa:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   bb4ae:	e9cd 3301 	strd	r3, r3, [sp, #4]
   bb4b2:	9303      	str	r3, [sp, #12]
   bb4b4:	d144      	bne.n	bb540 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x46c>
   bb4b6:	a80c      	add	r0, sp, #48	; 0x30
   bb4b8:	f7ff f846 	bl	ba548 <_ZNK8particle7Variant4sizeEv>
   bb4bc:	1c41      	adds	r1, r0, #1
                    if (!arr.reserve(capacity)) {
   bb4be:	a801      	add	r0, sp, #4
   bb4c0:	f7ff f92c 	bl	ba71c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi>
   bb4c4:	2800      	cmp	r0, #0
   bb4c6:	d060      	beq.n	bb58a <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x4b6>
   bb4c8:	a80c      	add	r0, sp, #48	; 0x30
   bb4ca:	f7fa ff58 	bl	b637e <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
    return data_ + size_;
   bb4ce:	e9d0 6300 	ldrd	r6, r3, [r0]
   bb4d2:	f04f 0928 	mov.w	r9, #40	; 0x28
   bb4d6:	fb09 6903 	mla	r9, r9, r3, r6
	_M_index{_Np}
   bb4da:	f04f 0a07 	mov.w	sl, #7
                    for (auto& entry: cont.asMap()) {
   bb4de:	454e      	cmp	r6, r9
   bb4e0:	d030      	beq.n	bb544 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x470>
                        CHECK(appendKeyValueArray(arr, entry.first, std::move(entry.second))); // Can't move the key
   bb4e2:	4631      	mov	r1, r6
   bb4e4:	a808      	add	r0, sp, #32
   bb4e6:	f7fe fb48 	bl	b9b7a <_ZN6StringC1ERKS_>
	  ::new ((void*)std::addressof(_M_storage))
   bb4ea:	a908      	add	r1, sp, #32
   bb4ec:	a81e      	add	r0, sp, #120	; 0x78
   bb4ee:	f7fe fb2a 	bl	b9b46 <_ZN6StringC1EOS_>
   bb4f2:	f106 0110 	add.w	r1, r6, #16
   bb4f6:	a824      	add	r0, sp, #144	; 0x90
	_M_index{_Np}
   bb4f8:	f88d a088 	strb.w	sl, [sp, #136]	; 0x88
   bb4fc:	f7fb f816 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   bb500:	aa24      	add	r2, sp, #144	; 0x90
   bb502:	a91e      	add	r1, sp, #120	; 0x78
   bb504:	a801      	add	r0, sp, #4
   bb506:	f7ff f967 	bl	ba7d8 <_ZN8particle12_GLOBAL__N_119appendKeyValueArrayERN5spark6VectorINS_7VariantENS1_16DefaultAllocatorEEES3_S3_>
   bb50a:	4604      	mov	r4, r0
      { _M_reset(); }
   bb50c:	a824      	add	r0, sp, #144	; 0x90
   bb50e:	f7fa fb4b 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb512:	a81e      	add	r0, sp, #120	; 0x78
   bb514:	f7fa fb48 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb518:	a808      	add	r0, sp, #32
   bb51a:	f7fe fa8b 	bl	b9a34 <_ZN6StringD1Ev>
   bb51e:	2c00      	cmp	r4, #0
   bb520:	f106 0628 	add.w	r6, r6, #40	; 0x28
   bb524:	dadb      	bge.n	bb4de <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x40a>
                        return Error::NO_MEMORY;
   bb526:	a801      	add	r0, sp, #4
   bb528:	f7fa fbbd 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
   bb52c:	a818      	add	r0, sp, #96	; 0x60
   bb52e:	f7fa fb3b 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb532:	a812      	add	r0, sp, #72	; 0x48
   bb534:	f7fa fb38 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb538:	a80c      	add	r0, sp, #48	; 0x30
   bb53a:	f7fa fb35 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            break;
   bb53e:	e638      	b.n	bb1b2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xde>
   bb540:	4641      	mov	r1, r8
   bb542:	e7bc      	b.n	bb4be <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x3ea>
                    cont = std::move(arr);
   bb544:	a901      	add	r1, sp, #4
   bb546:	a81e      	add	r0, sp, #120	; 0x78
   bb548:	f7fa f948 	bl	b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  ::new ((void*)std::addressof(_M_storage))
   bb54c:	a91e      	add	r1, sp, #120	; 0x78
   bb54e:	a824      	add	r0, sp, #144	; 0x90
   bb550:	f7fa f944 	bl	b57dc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	_M_index{_Np}
   bb554:	2309      	movs	r3, #9
    { __lhs.swap(__rhs); }
   bb556:	a924      	add	r1, sp, #144	; 0x90
   bb558:	a80c      	add	r0, sp, #48	; 0x30
	_M_index{_Np}
   bb55a:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    { __lhs.swap(__rhs); }
   bb55e:	f7fa ff47 	bl	b63f0 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
   bb562:	a824      	add	r0, sp, #144	; 0x90
   bb564:	f7fa fb20 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb568:	a81e      	add	r0, sp, #120	; 0x78
   bb56a:	f7fa fb9c 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
                    VariantArray arr;
   bb56e:	a801      	add	r0, sp, #4
   bb570:	f7fa fb99 	bl	b5ca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
            if (cont.isArray()) {
   bb574:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   bb578:	2b09      	cmp	r3, #9
   bb57a:	d022      	beq.n	bb5c2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x4ee>
   bb57c:	a818      	add	r0, sp, #96	; 0x60
   bb57e:	f7fa fb13 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb582:	a812      	add	r0, sp, #72	; 0x48
   bb584:	f7fa fb10 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb588:	e737      	b.n	bb3fa <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x326>
                        return Error::NO_MEMORY;
   bb58a:	4c5a      	ldr	r4, [pc, #360]	; (bb6f4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x620>)
   bb58c:	e7cb      	b.n	bb526 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x452>
   bb58e:	a80c      	add	r0, sp, #48	; 0x30
   bb590:	f7fa fef5 	bl	b637e <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
   bb594:	4604      	mov	r4, r0
        return as<String>();
   bb596:	a812      	add	r0, sp, #72	; 0x48
   bb598:	f7fe fea0 	bl	ba2dc <_ZN8particle7Variant2asI6StringEERT_v>
                } else if (!cont.asMap().set(std::move(k.asString()), std::move(v))) {
   bb59c:	a918      	add	r1, sp, #96	; 0x60
   bb59e:	4606      	mov	r6, r0
   bb5a0:	a824      	add	r0, sp, #144	; 0x90
   bb5a2:	f7fa ffc3 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   bb5a6:	4620      	mov	r0, r4
   bb5a8:	aa24      	add	r2, sp, #144	; 0x90
   bb5aa:	4631      	mov	r1, r6
   bb5ac:	f7ff fb61 	bl	bac72 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE3setEOS1_S2_>
   bb5b0:	4604      	mov	r4, r0
   bb5b2:	a824      	add	r0, sp, #144	; 0x90
   bb5b4:	f7fa faf8 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb5b8:	2c00      	cmp	r4, #0
   bb5ba:	d1db      	bne.n	bb574 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x4a0>
                    return Error::NO_MEMORY;
   bb5bc:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
   bb5c0:	e7b4      	b.n	bb52c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x458>
        return as<VariantArray>();
   bb5c2:	a80c      	add	r0, sp, #48	; 0x30
   bb5c4:	f7fe fec8 	bl	ba358 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v>
                CHECK(appendKeyValueArray(cont.asArray(), std::move(k), std::move(v)));
   bb5c8:	a912      	add	r1, sp, #72	; 0x48
   bb5ca:	4604      	mov	r4, r0
   bb5cc:	a81e      	add	r0, sp, #120	; 0x78
   bb5ce:	f7fa ffad 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   bb5d2:	a918      	add	r1, sp, #96	; 0x60
   bb5d4:	a824      	add	r0, sp, #144	; 0x90
   bb5d6:	f7fa ffa9 	bl	b652c <_ZN8particle7VariantC1EOS0_>
   bb5da:	aa24      	add	r2, sp, #144	; 0x90
   bb5dc:	a91e      	add	r1, sp, #120	; 0x78
   bb5de:	4620      	mov	r0, r4
   bb5e0:	f7ff f8fa 	bl	ba7d8 <_ZN8particle12_GLOBAL__N_119appendKeyValueArrayERN5spark6VectorINS_7VariantENS1_16DefaultAllocatorEEES3_S3_>
   bb5e4:	4604      	mov	r4, r0
   bb5e6:	a824      	add	r0, sp, #144	; 0x90
   bb5e8:	f7fa fade 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb5ec:	a81e      	add	r0, sp, #120	; 0x78
   bb5ee:	f7fa fadb 	bl	b5ba8 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   bb5f2:	2c00      	cmp	r4, #0
   bb5f4:	dac2      	bge.n	bb57c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x4a8>
   bb5f6:	e799      	b.n	bb52c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x458>
                    return Error::BAD_DATA; // Unexpected stop code
   bb5f8:	4c3f      	ldr	r4, [pc, #252]	; (bb6f8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x624>)
   bb5fa:	e79d      	b.n	bb538 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x464>
                return Error::OUT_OF_RANGE;
   bb5fc:	4c3f      	ldr	r4, [pc, #252]	; (bb6fc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x628>)
   bb5fe:	e79b      	b.n	bb538 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x464>
            CHECK(readCborHead(stream, h));
   bb600:	a924      	add	r1, sp, #144	; 0x90
   bb602:	4638      	mov	r0, r7
   bb604:	f7fe fd6a 	bl	ba0dc <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
   bb608:	1e04      	subs	r4, r0, #0
   bb60a:	f6ff add2 	blt.w	bb1b2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xde>
        } while (h.type == 6 /* Tagged item */);
   bb60e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   bb610:	2b06      	cmp	r3, #6
   bb612:	d0f5      	beq.n	bb600 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x52c>
        CHECK(decodeFromCbor(stream, h, var));
   bb614:	462a      	mov	r2, r5
   bb616:	a924      	add	r1, sp, #144	; 0x90
   bb618:	4638      	mov	r0, r7
   bb61a:	f7ff fd5b 	bl	bb0d4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE>
    return 0;
   bb61e:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   bb622:	e5c6      	b.n	bb1b2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xde>
        switch (head.detail) {
   bb624:	68cb      	ldr	r3, [r1, #12]
   bb626:	f1a3 0214 	sub.w	r2, r3, #20
   bb62a:	2a07      	cmp	r2, #7
   bb62c:	d84c      	bhi.n	bb6c8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5f4>
   bb62e:	e8df f002 	tbb	[pc, r2]
   bb632:	0904      	.short	0x0904
   bb634:	134b4b0d 	.word	0x134b4b0d
   bb638:	4840      	.short	0x4840
	: _M_storage(std::forward<_Args>(__args)...)
   bb63a:	2400      	movs	r4, #0
   bb63c:	f88d 4090 	strb.w	r4, [sp, #144]	; 0x90
	_M_index{_Np}
   bb640:	2301      	movs	r3, #1
   bb642:	e560      	b.n	bb106 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x32>
	: _M_storage(std::forward<_Args>(__args)...)
   bb644:	2301      	movs	r3, #1
   bb646:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   bb64a:	e578      	b.n	bb13e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x6a>
            var = Variant();
   bb64c:	2400      	movs	r4, #0
   bb64e:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	_M_index{_Np}
   bb652:	f88d 40a0 	strb.w	r4, [sp, #160]	; 0xa0
    swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)
   bb656:	e558      	b.n	bb10a <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x36>
            uint16_t half = head.arg;
   bb658:	f8d9 6000 	ldr.w	r6, [r9]
            if (exp == 0) {
   bb65c:	f416 4ff8 	tst.w	r6, #31744	; 0x7c00
   bb660:	f3c6 2384 	ubfx	r3, r6, #10, #5
            unsigned mant = half & 0x03ff;
   bb664:	f3c6 0009 	ubfx	r0, r6, #0, #10
            if (exp == 0) {
   bb668:	d111      	bne.n	bb68e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5ba>
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }
   bb66a:	f7f8 fe1b 	bl	b42a4 <__aeabi_ui2d>
   bb66e:	ec41 0b10 	vmov	d0, r0, r1
   bb672:	f06f 0017 	mvn.w	r0, #23
   bb676:	f000 f959 	bl	bb92c <ldexp>
   bb67a:	ec53 2b10 	vmov	r2, r3, d0
            if (half & 0x8000) {
   bb67e:	0431      	lsls	r1, r6, #16
   bb680:	d502      	bpl.n	bb688 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5b4>
                val = -val;
   bb682:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   bb686:	460b      	mov	r3, r1
	: _M_storage(std::forward<_Args>(__args)...)
   bb688:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   bb68c:	e017      	b.n	bb6be <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5ea>
            } else if (exp != 31) {
   bb68e:	2b1f      	cmp	r3, #31
   bb690:	d009      	beq.n	bb6a6 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5d2>
   bb692:	f500 6080 	add.w	r0, r0, #1024	; 0x400
                val = std::ldexp(mant + 1024, exp - 25);
   bb696:	f1a3 0419 	sub.w	r4, r3, #25
   bb69a:	f7f8 fe03 	bl	b42a4 <__aeabi_ui2d>
   bb69e:	ec41 0b10 	vmov	d0, r0, r1
   bb6a2:	4620      	mov	r0, r4
   bb6a4:	e7e7      	b.n	bb676 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5a2>
                val = (mant == 0) ? INFINITY : NAN;
   bb6a6:	2200      	movs	r2, #0
   bb6a8:	b108      	cbz	r0, bb6ae <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5da>
   bb6aa:	4b15      	ldr	r3, [pc, #84]	; (bb700 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x62c>)
   bb6ac:	e7e7      	b.n	bb67e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5aa>
   bb6ae:	4b15      	ldr	r3, [pc, #84]	; (bb704 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x630>)
   bb6b0:	e7e5      	b.n	bb67e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5aa>
            var = val;
   bb6b2:	f8d9 0000 	ldr.w	r0, [r9]
   bb6b6:	f7f8 fe17 	bl	b42e8 <__aeabi_f2d>
   bb6ba:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
	_M_index{_Np}
   bb6be:	2306      	movs	r3, #6
   bb6c0:	e53d      	b.n	bb13e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x6a>
            var = val;
   bb6c2:	e9d9 2300 	ldrd	r2, r3, [r9]
   bb6c6:	e7df      	b.n	bb688 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5b4>
            if ((head.detail >= 28 && head.detail <= 31) || // Reserved (28-30) or unexpected stop code (31)
   bb6c8:	f1a3 021c 	sub.w	r2, r3, #28
   bb6cc:	2a03      	cmp	r2, #3
   bb6ce:	d907      	bls.n	bb6e0 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x60c>
   bb6d0:	2b18      	cmp	r3, #24
   bb6d2:	d10c      	bne.n	bb6ee <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x61a>
                    (head.detail == 24 && head.arg < 32)) { // Invalid simple value
   bb6d4:	e9d9 2300 	ldrd	r2, r3, [r9]
   bb6d8:	2a20      	cmp	r2, #32
   bb6da:	f173 0300 	sbcs.w	r3, r3, #0
   bb6de:	d206      	bcs.n	bb6ee <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x61a>
                return Error::BAD_DATA;
   bb6e0:	4c05      	ldr	r4, [pc, #20]	; (bb6f8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x624>)
   bb6e2:	e566      	b.n	bb1b2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xde>
    switch (head.type) {
   bb6e4:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
   bb6e8:	e563      	b.n	bb1b2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xde>
            return Error::OUT_OF_RANGE;
   bb6ea:	4c04      	ldr	r4, [pc, #16]	; (bb6fc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x628>)
   bb6ec:	e561      	b.n	bb1b2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xde>
            return Error::NOT_SUPPORTED; // Unassigned simple value (0-19, 32-255) or undefined (23)
   bb6ee:	f06f 0477 	mvn.w	r4, #119	; 0x77
   bb6f2:	e55e      	b.n	bb1b2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xde>
   bb6f4:	fffffefc 	.word	0xfffffefc
   bb6f8:	fffffee8 	.word	0xfffffee8
   bb6fc:	fffffede 	.word	0xfffffede
   bb700:	7ff80000 	.word	0x7ff80000
   bb704:	7ff00000 	.word	0x7ff00000

000bb708 <_ZN8particle14decodeFromCBORERNS_7VariantER6Stream>:

int decodeFromCBOR(Variant& var, Stream& stream) {
   bb708:	b500      	push	{lr}
   bb70a:	b089      	sub	sp, #36	; 0x24
   bb70c:	9001      	str	r0, [sp, #4]
            stream_(stream) {
   bb70e:	9103      	str	r1, [sp, #12]
    DecodingStream s(stream);
    CborHead h;
    CHECK(readCborHead(s, h));
   bb710:	a803      	add	r0, sp, #12
   bb712:	a904      	add	r1, sp, #16
   bb714:	f7fe fce2 	bl	ba0dc <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
   bb718:	2800      	cmp	r0, #0
   bb71a:	db06      	blt.n	bb72a <_ZN8particle14decodeFromCBORERNS_7VariantER6Stream+0x22>
    CHECK(decodeFromCbor(s, h, var));
   bb71c:	9a01      	ldr	r2, [sp, #4]
   bb71e:	a904      	add	r1, sp, #16
   bb720:	a803      	add	r0, sp, #12
   bb722:	f7ff fcd7 	bl	bb0d4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE>
   bb726:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    return 0;
}
   bb72a:	b009      	add	sp, #36	; 0x24
   bb72c:	f85d fb04 	ldr.w	pc, [sp], #4

000bb730 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb730:	4b01      	ldr	r3, [pc, #4]	; (bb738 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb732:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb734:	4770      	bx	lr
   bb736:	bf00      	nop
   bb738:	2003e45c 	.word	0x2003e45c

000bb73c <serialEventRun>:
{
   bb73c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb73e:	4b0b      	ldr	r3, [pc, #44]	; (bb76c <serialEventRun+0x30>)
   bb740:	b143      	cbz	r3, bb754 <serialEventRun+0x18>
   bb742:	f7fe fba5 	bl	b9e90 <_Z16_fetch_usbserialv>
   bb746:	6803      	ldr	r3, [r0, #0]
   bb748:	691b      	ldr	r3, [r3, #16]
   bb74a:	4798      	blx	r3
   bb74c:	2800      	cmp	r0, #0
   bb74e:	dd01      	ble.n	bb754 <serialEventRun+0x18>
        serialEvent();
   bb750:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb754:	4b06      	ldr	r3, [pc, #24]	; (bb770 <serialEventRun+0x34>)
   bb756:	b143      	cbz	r3, bb76a <serialEventRun+0x2e>
   bb758:	f000 f8ba 	bl	bb8d0 <_Z22__fetch_global_Serial1v>
   bb75c:	6803      	ldr	r3, [r0, #0]
   bb75e:	691b      	ldr	r3, [r3, #16]
   bb760:	4798      	blx	r3
   bb762:	2800      	cmp	r0, #0
   bb764:	dd01      	ble.n	bb76a <serialEventRun+0x2e>
        serialEvent1();
   bb766:	f3af 8000 	nop.w
}
   bb76a:	bd08      	pop	{r3, pc}
	...

000bb774 <_post_loop>:
{
   bb774:	b508      	push	{r3, lr}
	serialEventRun();
   bb776:	f7ff ffe1 	bl	bb73c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb77a:	f7fb fdd1 	bl	b7320 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb77e:	4b01      	ldr	r3, [pc, #4]	; (bb784 <_post_loop+0x10>)
   bb780:	6018      	str	r0, [r3, #0]
}
   bb782:	bd08      	pop	{r3, pc}
   bb784:	2003e74c 	.word	0x2003e74c

000bb788 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb788:	4805      	ldr	r0, [pc, #20]	; (bb7a0 <_Z33system_initialize_user_backup_ramv+0x18>)
   bb78a:	4a06      	ldr	r2, [pc, #24]	; (bb7a4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb78c:	4906      	ldr	r1, [pc, #24]	; (bb7a8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb78e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb790:	1a12      	subs	r2, r2, r0
   bb792:	f000 f9b9 	bl	bbb08 <memcpy>
    __backup_sram_signature = signature;
   bb796:	4b05      	ldr	r3, [pc, #20]	; (bb7ac <_Z33system_initialize_user_backup_ramv+0x24>)
   bb798:	4a05      	ldr	r2, [pc, #20]	; (bb7b0 <_Z33system_initialize_user_backup_ramv+0x28>)
   bb79a:	601a      	str	r2, [r3, #0]
}
   bb79c:	bd08      	pop	{r3, pc}
   bb79e:	bf00      	nop
   bb7a0:	2003f400 	.word	0x2003f400
   bb7a4:	2003fc04 	.word	0x2003fc04
   bb7a8:	000bebac 	.word	0x000bebac
   bb7ac:	2003fc00 	.word	0x2003fc00
   bb7b0:	9a271c1e 	.word	0x9a271c1e

000bb7b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb7b4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb7b6:	2300      	movs	r3, #0
   bb7b8:	9300      	str	r3, [sp, #0]
   bb7ba:	461a      	mov	r2, r3
   bb7bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb7c0:	f7fb fed4 	bl	b756c <system_ctrl_set_result>
}
   bb7c4:	b003      	add	sp, #12
   bb7c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb7cc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb7cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb7ce:	8843      	ldrh	r3, [r0, #2]
   bb7d0:	2b0a      	cmp	r3, #10
   bb7d2:	d008      	beq.n	bb7e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb7d4:	2b50      	cmp	r3, #80	; 0x50
   bb7d6:	d10b      	bne.n	bb7f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb7d8:	4b09      	ldr	r3, [pc, #36]	; (bb800 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb7da:	681b      	ldr	r3, [r3, #0]
   bb7dc:	b14b      	cbz	r3, bb7f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb7de:	b003      	add	sp, #12
   bb7e0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb7e4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb7e6:	f7ff ffe5 	bl	bb7b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb7ea:	b003      	add	sp, #12
   bb7ec:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb7f0:	2300      	movs	r3, #0
   bb7f2:	9300      	str	r3, [sp, #0]
   bb7f4:	461a      	mov	r2, r3
   bb7f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb7fa:	f7fb feb7 	bl	b756c <system_ctrl_set_result>
}
   bb7fe:	e7f4      	b.n	bb7ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb800:	2003e748 	.word	0x2003e748

000bb804 <module_user_init_hook>:
{
   bb804:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb806:	4812      	ldr	r0, [pc, #72]	; (bb850 <module_user_init_hook+0x4c>)
   bb808:	2100      	movs	r1, #0
   bb80a:	f7fb fff1 	bl	b77f0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb80e:	4b11      	ldr	r3, [pc, #68]	; (bb854 <module_user_init_hook+0x50>)
   bb810:	681a      	ldr	r2, [r3, #0]
   bb812:	4b11      	ldr	r3, [pc, #68]	; (bb858 <module_user_init_hook+0x54>)
   bb814:	429a      	cmp	r2, r3
   bb816:	4b11      	ldr	r3, [pc, #68]	; (bb85c <module_user_init_hook+0x58>)
   bb818:	bf0c      	ite	eq
   bb81a:	2201      	moveq	r2, #1
   bb81c:	2200      	movne	r2, #0
   bb81e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb820:	d001      	beq.n	bb826 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb822:	f7ff ffb1 	bl	bb788 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb826:	f7fb fd6b 	bl	b7300 <HAL_RNG_GetRandomNumber>
   bb82a:	4604      	mov	r4, r0
    srand(seed);
   bb82c:	f000 f99c 	bl	bbb68 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb830:	4b0b      	ldr	r3, [pc, #44]	; (bb860 <module_user_init_hook+0x5c>)
   bb832:	b113      	cbz	r3, bb83a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb834:	4620      	mov	r0, r4
   bb836:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb83a:	2100      	movs	r1, #0
   bb83c:	4808      	ldr	r0, [pc, #32]	; (bb860 <module_user_init_hook+0x5c>)
   bb83e:	f7fb feb7 	bl	b75b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb846:	4807      	ldr	r0, [pc, #28]	; (bb864 <module_user_init_hook+0x60>)
   bb848:	2100      	movs	r1, #0
   bb84a:	f7fb be85 	b.w	b7558 <system_ctrl_set_app_request_handler>
   bb84e:	bf00      	nop
   bb850:	000bb731 	.word	0x000bb731
   bb854:	2003fc00 	.word	0x2003fc00
   bb858:	9a271c1e 	.word	0x9a271c1e
   bb85c:	2003e744 	.word	0x2003e744
   bb860:	00000000 	.word	0x00000000
   bb864:	000bb7cd 	.word	0x000bb7cd

000bb868 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bb868:	b508      	push	{r3, lr}
   bb86a:	4b02      	ldr	r3, [pc, #8]	; (bb874 <spark_protocol_instance+0xc>)
   bb86c:	681b      	ldr	r3, [r3, #0]
   bb86e:	681b      	ldr	r3, [r3, #0]
   bb870:	9301      	str	r3, [sp, #4]
   bb872:	bd08      	pop	{r3, pc}
   bb874:	0003025c 	.word	0x0003025c

000bb878 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bb878:	b508      	push	{r3, lr}
   bb87a:	4b02      	ldr	r3, [pc, #8]	; (bb884 <spark_protocol_set_product_id+0xc>)
   bb87c:	681b      	ldr	r3, [r3, #0]
   bb87e:	685b      	ldr	r3, [r3, #4]
   bb880:	9301      	str	r3, [sp, #4]
   bb882:	bd08      	pop	{r3, pc}
   bb884:	0003025c 	.word	0x0003025c

000bb888 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bb888:	b508      	push	{r3, lr}
   bb88a:	4b02      	ldr	r3, [pc, #8]	; (bb894 <spark_protocol_set_product_firmware_version+0xc>)
   bb88c:	681b      	ldr	r3, [r3, #0]
   bb88e:	689b      	ldr	r3, [r3, #8]
   bb890:	9301      	str	r3, [sp, #4]
   bb892:	bd08      	pop	{r3, pc}
   bb894:	0003025c 	.word	0x0003025c

000bb898 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb898:	4770      	bx	lr
	...

000bb89c <_Z20acquireSerial1Bufferv>:
{
   bb89c:	b538      	push	{r3, r4, r5, lr}
   bb89e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb8a0:	2514      	movs	r5, #20
   bb8a2:	462a      	mov	r2, r5
   bb8a4:	2100      	movs	r1, #0
   bb8a6:	f000 f957 	bl	bbb58 <memset>
   bb8aa:	8025      	strh	r5, [r4, #0]
   bb8ac:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb8ae:	4907      	ldr	r1, [pc, #28]	; (bb8cc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb8b0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb8b2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb8b4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb8b6:	f000 f831 	bl	bb91c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb8ba:	4904      	ldr	r1, [pc, #16]	; (bb8cc <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb8bc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb8be:	4628      	mov	r0, r5
   bb8c0:	f000 f82c 	bl	bb91c <_ZnajRKSt9nothrow_t>
    };
   bb8c4:	60e0      	str	r0, [r4, #12]
}
   bb8c6:	4620      	mov	r0, r4
   bb8c8:	bd38      	pop	{r3, r4, r5, pc}
   bb8ca:	bf00      	nop
   bb8cc:	000be5b4 	.word	0x000be5b4

000bb8d0 <_Z22__fetch_global_Serial1v>:
{
   bb8d0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb8d2:	4d0e      	ldr	r5, [pc, #56]	; (bb90c <_Z22__fetch_global_Serial1v+0x3c>)
   bb8d4:	7829      	ldrb	r1, [r5, #0]
   bb8d6:	f3bf 8f5b 	dmb	ish
   bb8da:	f011 0401 	ands.w	r4, r1, #1
{
   bb8de:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb8e0:	d111      	bne.n	bb906 <_Z22__fetch_global_Serial1v+0x36>
   bb8e2:	4628      	mov	r0, r5
   bb8e4:	f7f9 faa4 	bl	b4e30 <__cxa_guard_acquire>
   bb8e8:	b168      	cbz	r0, bb906 <_Z22__fetch_global_Serial1v+0x36>
   bb8ea:	a801      	add	r0, sp, #4
   bb8ec:	f7ff ffd6 	bl	bb89c <_Z20acquireSerial1Bufferv>
   bb8f0:	aa01      	add	r2, sp, #4
   bb8f2:	4621      	mov	r1, r4
   bb8f4:	4806      	ldr	r0, [pc, #24]	; (bb910 <_Z22__fetch_global_Serial1v+0x40>)
   bb8f6:	f7fe fa49 	bl	b9d8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb8fa:	4628      	mov	r0, r5
   bb8fc:	f7f9 fa9d 	bl	b4e3a <__cxa_guard_release>
   bb900:	4804      	ldr	r0, [pc, #16]	; (bb914 <_Z22__fetch_global_Serial1v+0x44>)
   bb902:	f000 f8eb 	bl	bbadc <atexit>
    return serial1;
}
   bb906:	4802      	ldr	r0, [pc, #8]	; (bb910 <_Z22__fetch_global_Serial1v+0x40>)
   bb908:	b007      	add	sp, #28
   bb90a:	bd30      	pop	{r4, r5, pc}
   bb90c:	2003e750 	.word	0x2003e750
   bb910:	2003e754 	.word	0x2003e754
   bb914:	000bb899 	.word	0x000bb899

000bb918 <_ZnwjRKSt9nothrow_t>:
   bb918:	f7f9 ba75 	b.w	b4e06 <_Znwj>

000bb91c <_ZnajRKSt9nothrow_t>:
   bb91c:	f7f9 ba75 	b.w	b4e0a <_Znaj>

000bb920 <_ZSt20__throw_length_errorPKc>:
   bb920:	b508      	push	{r3, lr}
   bb922:	f7fb ff45 	bl	b77b0 <abort>

000bb926 <_ZSt25__throw_bad_function_callv>:
   bb926:	b508      	push	{r3, lr}
   bb928:	f7fb ff42 	bl	b77b0 <abort>

000bb92c <ldexp>:
   bb92c:	b510      	push	{r4, lr}
   bb92e:	ed2d 8b02 	vpush	{d8}
   bb932:	eeb0 8a40 	vmov.f32	s16, s0
   bb936:	eef0 8a60 	vmov.f32	s17, s1
   bb93a:	4604      	mov	r4, r0
   bb93c:	f000 f8c2 	bl	bbac4 <finite>
   bb940:	b130      	cbz	r0, bb950 <ldexp+0x24>
   bb942:	ec51 0b18 	vmov	r0, r1, d8
   bb946:	2200      	movs	r2, #0
   bb948:	2300      	movs	r3, #0
   bb94a:	f7f8 ff8d 	bl	b4868 <__aeabi_dcmpeq>
   bb94e:	b130      	cbz	r0, bb95e <ldexp+0x32>
   bb950:	eeb0 0a48 	vmov.f32	s0, s16
   bb954:	eef0 0a68 	vmov.f32	s1, s17
   bb958:	ecbd 8b02 	vpop	{d8}
   bb95c:	bd10      	pop	{r4, pc}
   bb95e:	eeb0 0a48 	vmov.f32	s0, s16
   bb962:	eef0 0a68 	vmov.f32	s1, s17
   bb966:	4620      	mov	r0, r4
   bb968:	f000 f81a 	bl	bb9a0 <scalbn>
   bb96c:	eeb0 8a40 	vmov.f32	s16, s0
   bb970:	eef0 8a60 	vmov.f32	s17, s1
   bb974:	f000 f8a6 	bl	bbac4 <finite>
   bb978:	b138      	cbz	r0, bb98a <ldexp+0x5e>
   bb97a:	ec51 0b18 	vmov	r0, r1, d8
   bb97e:	2200      	movs	r2, #0
   bb980:	2300      	movs	r3, #0
   bb982:	f7f8 ff71 	bl	b4868 <__aeabi_dcmpeq>
   bb986:	2800      	cmp	r0, #0
   bb988:	d0e2      	beq.n	bb950 <ldexp+0x24>
   bb98a:	f7fb ff21 	bl	b77d0 <__errno>
   bb98e:	eeb0 0a48 	vmov.f32	s0, s16
   bb992:	eef0 0a68 	vmov.f32	s1, s17
   bb996:	ecbd 8b02 	vpop	{d8}
   bb99a:	2322      	movs	r3, #34	; 0x22
   bb99c:	6003      	str	r3, [r0, #0]
   bb99e:	bd10      	pop	{r4, pc}

000bb9a0 <scalbn>:
   bb9a0:	b538      	push	{r3, r4, r5, lr}
   bb9a2:	ec53 2b10 	vmov	r2, r3, d0
   bb9a6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   bb9aa:	4604      	mov	r4, r0
   bb9ac:	469c      	mov	ip, r3
   bb9ae:	bb89      	cbnz	r1, bba14 <scalbn+0x74>
   bb9b0:	ee10 1a10 	vmov	r1, s0
   bb9b4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   bb9b8:	ea5c 0101 	orrs.w	r1, ip, r1
   bb9bc:	d029      	beq.n	bba12 <scalbn+0x72>
   bb9be:	4619      	mov	r1, r3
   bb9c0:	2200      	movs	r2, #0
   bb9c2:	4b3d      	ldr	r3, [pc, #244]	; (bbab8 <scalbn+0x118>)
   bb9c4:	4d3d      	ldr	r5, [pc, #244]	; (bbabc <scalbn+0x11c>)
   bb9c6:	ee10 0a10 	vmov	r0, s0
   bb9ca:	f7f8 fce5 	bl	b4398 <__aeabi_dmul>
   bb9ce:	42ac      	cmp	r4, r5
   bb9d0:	4602      	mov	r2, r0
   bb9d2:	460b      	mov	r3, r1
   bb9d4:	db16      	blt.n	bba04 <scalbn+0x64>
   bb9d6:	468c      	mov	ip, r1
   bb9d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
   bb9dc:	3936      	subs	r1, #54	; 0x36
   bb9de:	4421      	add	r1, r4
   bb9e0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   bb9e4:	4281      	cmp	r1, r0
   bb9e6:	dc21      	bgt.n	bba2c <scalbn+0x8c>
   bb9e8:	2900      	cmp	r1, #0
   bb9ea:	dc47      	bgt.n	bba7c <scalbn+0xdc>
   bb9ec:	f111 0f35 	cmn.w	r1, #53	; 0x35
   bb9f0:	da34      	bge.n	bba5c <scalbn+0xbc>
   bb9f2:	f24c 3150 	movw	r1, #50000	; 0xc350
   bb9f6:	428c      	cmp	r4, r1
   bb9f8:	dc18      	bgt.n	bba2c <scalbn+0x8c>
   bb9fa:	2b00      	cmp	r3, #0
   bb9fc:	a126      	add	r1, pc, #152	; (adr r1, bba98 <scalbn+0xf8>)
   bb9fe:	e9d1 0100 	ldrd	r0, r1, [r1]
   bba02:	db44      	blt.n	bba8e <scalbn+0xee>
   bba04:	a324      	add	r3, pc, #144	; (adr r3, bba98 <scalbn+0xf8>)
   bba06:	e9d3 2300 	ldrd	r2, r3, [r3]
   bba0a:	f7f8 fcc5 	bl	b4398 <__aeabi_dmul>
   bba0e:	ec41 0b10 	vmov	d0, r0, r1
   bba12:	bd38      	pop	{r3, r4, r5, pc}
   bba14:	f240 70ff 	movw	r0, #2047	; 0x7ff
   bba18:	4281      	cmp	r1, r0
   bba1a:	d1e0      	bne.n	bb9de <scalbn+0x3e>
   bba1c:	ee10 0a10 	vmov	r0, s0
   bba20:	4619      	mov	r1, r3
   bba22:	f7f8 fb03 	bl	b402c <__adddf3>
   bba26:	ec41 0b10 	vmov	d0, r0, r1
   bba2a:	bd38      	pop	{r3, r4, r5, pc}
   bba2c:	2b00      	cmp	r3, #0
   bba2e:	a11c      	add	r1, pc, #112	; (adr r1, bbaa0 <scalbn+0x100>)
   bba30:	e9d1 0100 	ldrd	r0, r1, [r1]
   bba34:	db07      	blt.n	bba46 <scalbn+0xa6>
   bba36:	a31a      	add	r3, pc, #104	; (adr r3, bbaa0 <scalbn+0x100>)
   bba38:	e9d3 2300 	ldrd	r2, r3, [r3]
   bba3c:	f7f8 fcac 	bl	b4398 <__aeabi_dmul>
   bba40:	ec41 0b10 	vmov	d0, r0, r1
   bba44:	bd38      	pop	{r3, r4, r5, pc}
   bba46:	a118      	add	r1, pc, #96	; (adr r1, bbaa8 <scalbn+0x108>)
   bba48:	e9d1 0100 	ldrd	r0, r1, [r1]
   bba4c:	a314      	add	r3, pc, #80	; (adr r3, bbaa0 <scalbn+0x100>)
   bba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bba52:	f7f8 fca1 	bl	b4398 <__aeabi_dmul>
   bba56:	ec41 0b10 	vmov	d0, r0, r1
   bba5a:	e7f3      	b.n	bba44 <scalbn+0xa4>
   bba5c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bba60:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bba64:	3136      	adds	r1, #54	; 0x36
   bba66:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bba6a:	4610      	mov	r0, r2
   bba6c:	4619      	mov	r1, r3
   bba6e:	2200      	movs	r2, #0
   bba70:	4b13      	ldr	r3, [pc, #76]	; (bbac0 <scalbn+0x120>)
   bba72:	f7f8 fc91 	bl	b4398 <__aeabi_dmul>
   bba76:	ec41 0b10 	vmov	d0, r0, r1
   bba7a:	bd38      	pop	{r3, r4, r5, pc}
   bba7c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bba80:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bba84:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bba88:	ec43 2b10 	vmov	d0, r2, r3
   bba8c:	bd38      	pop	{r3, r4, r5, pc}
   bba8e:	a108      	add	r1, pc, #32	; (adr r1, bbab0 <scalbn+0x110>)
   bba90:	e9d1 0100 	ldrd	r0, r1, [r1]
   bba94:	e7b6      	b.n	bba04 <scalbn+0x64>
   bba96:	bf00      	nop
   bba98:	c2f8f359 	.word	0xc2f8f359
   bba9c:	01a56e1f 	.word	0x01a56e1f
   bbaa0:	8800759c 	.word	0x8800759c
   bbaa4:	7e37e43c 	.word	0x7e37e43c
   bbaa8:	8800759c 	.word	0x8800759c
   bbaac:	fe37e43c 	.word	0xfe37e43c
   bbab0:	c2f8f359 	.word	0xc2f8f359
   bbab4:	81a56e1f 	.word	0x81a56e1f
   bbab8:	43500000 	.word	0x43500000
   bbabc:	ffff3cb0 	.word	0xffff3cb0
   bbac0:	3c900000 	.word	0x3c900000

000bbac4 <finite>:
   bbac4:	b082      	sub	sp, #8
   bbac6:	ed8d 0b00 	vstr	d0, [sp]
   bbaca:	9801      	ldr	r0, [sp, #4]
   bbacc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   bbad0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   bbad4:	0fc0      	lsrs	r0, r0, #31
   bbad6:	b002      	add	sp, #8
   bbad8:	4770      	bx	lr
   bbada:	bf00      	nop

000bbadc <atexit>:
   bbadc:	2300      	movs	r3, #0
   bbade:	4601      	mov	r1, r0
   bbae0:	461a      	mov	r2, r3
   bbae2:	4618      	mov	r0, r3
   bbae4:	f000 bf86 	b.w	bc9f4 <__register_exitproc>

000bbae8 <isprint>:
   bbae8:	4b02      	ldr	r3, [pc, #8]	; (bbaf4 <isprint+0xc>)
   bbaea:	4418      	add	r0, r3
   bbaec:	7840      	ldrb	r0, [r0, #1]
   bbaee:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bbaf2:	4770      	bx	lr
   bbaf4:	000be688 	.word	0x000be688

000bbaf8 <isspace>:
   bbaf8:	4b02      	ldr	r3, [pc, #8]	; (bbb04 <isspace+0xc>)
   bbafa:	4418      	add	r0, r3
   bbafc:	7840      	ldrb	r0, [r0, #1]
   bbafe:	f000 0008 	and.w	r0, r0, #8
   bbb02:	4770      	bx	lr
   bbb04:	000be688 	.word	0x000be688

000bbb08 <memcpy>:
   bbb08:	440a      	add	r2, r1
   bbb0a:	4291      	cmp	r1, r2
   bbb0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bbb10:	d100      	bne.n	bbb14 <memcpy+0xc>
   bbb12:	4770      	bx	lr
   bbb14:	b510      	push	{r4, lr}
   bbb16:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbb1a:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbb1e:	4291      	cmp	r1, r2
   bbb20:	d1f9      	bne.n	bbb16 <memcpy+0xe>
   bbb22:	bd10      	pop	{r4, pc}

000bbb24 <memmove>:
   bbb24:	4288      	cmp	r0, r1
   bbb26:	b510      	push	{r4, lr}
   bbb28:	eb01 0402 	add.w	r4, r1, r2
   bbb2c:	d902      	bls.n	bbb34 <memmove+0x10>
   bbb2e:	4284      	cmp	r4, r0
   bbb30:	4623      	mov	r3, r4
   bbb32:	d807      	bhi.n	bbb44 <memmove+0x20>
   bbb34:	1e43      	subs	r3, r0, #1
   bbb36:	42a1      	cmp	r1, r4
   bbb38:	d008      	beq.n	bbb4c <memmove+0x28>
   bbb3a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbb3e:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbb42:	e7f8      	b.n	bbb36 <memmove+0x12>
   bbb44:	4402      	add	r2, r0
   bbb46:	4601      	mov	r1, r0
   bbb48:	428a      	cmp	r2, r1
   bbb4a:	d100      	bne.n	bbb4e <memmove+0x2a>
   bbb4c:	bd10      	pop	{r4, pc}
   bbb4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bbb52:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bbb56:	e7f7      	b.n	bbb48 <memmove+0x24>

000bbb58 <memset>:
   bbb58:	4402      	add	r2, r0
   bbb5a:	4603      	mov	r3, r0
   bbb5c:	4293      	cmp	r3, r2
   bbb5e:	d100      	bne.n	bbb62 <memset+0xa>
   bbb60:	4770      	bx	lr
   bbb62:	f803 1b01 	strb.w	r1, [r3], #1
   bbb66:	e7f9      	b.n	bbb5c <memset+0x4>

000bbb68 <srand>:
   bbb68:	b538      	push	{r3, r4, r5, lr}
   bbb6a:	4b10      	ldr	r3, [pc, #64]	; (bbbac <srand+0x44>)
   bbb6c:	681d      	ldr	r5, [r3, #0]
   bbb6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbb70:	4604      	mov	r4, r0
   bbb72:	b9b3      	cbnz	r3, bbba2 <srand+0x3a>
   bbb74:	2018      	movs	r0, #24
   bbb76:	f7fb fdf3 	bl	b7760 <malloc>
   bbb7a:	4602      	mov	r2, r0
   bbb7c:	63a8      	str	r0, [r5, #56]	; 0x38
   bbb7e:	b920      	cbnz	r0, bbb8a <srand+0x22>
   bbb80:	4b0b      	ldr	r3, [pc, #44]	; (bbbb0 <srand+0x48>)
   bbb82:	480c      	ldr	r0, [pc, #48]	; (bbbb4 <srand+0x4c>)
   bbb84:	2142      	movs	r1, #66	; 0x42
   bbb86:	f7fb fe2b 	bl	b77e0 <__assert_func>
   bbb8a:	490b      	ldr	r1, [pc, #44]	; (bbbb8 <srand+0x50>)
   bbb8c:	4b0b      	ldr	r3, [pc, #44]	; (bbbbc <srand+0x54>)
   bbb8e:	e9c0 1300 	strd	r1, r3, [r0]
   bbb92:	4b0b      	ldr	r3, [pc, #44]	; (bbbc0 <srand+0x58>)
   bbb94:	6083      	str	r3, [r0, #8]
   bbb96:	230b      	movs	r3, #11
   bbb98:	8183      	strh	r3, [r0, #12]
   bbb9a:	2100      	movs	r1, #0
   bbb9c:	2001      	movs	r0, #1
   bbb9e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbba2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbba4:	2200      	movs	r2, #0
   bbba6:	611c      	str	r4, [r3, #16]
   bbba8:	615a      	str	r2, [r3, #20]
   bbbaa:	bd38      	pop	{r3, r4, r5, pc}
   bbbac:	2003e45c 	.word	0x2003e45c
   bbbb0:	000be5b5 	.word	0x000be5b5
   bbbb4:	000be5cc 	.word	0x000be5cc
   bbbb8:	abcd330e 	.word	0xabcd330e
   bbbbc:	e66d1234 	.word	0xe66d1234
   bbbc0:	0005deec 	.word	0x0005deec

000bbbc4 <strchr>:
   bbbc4:	b2c9      	uxtb	r1, r1
   bbbc6:	4603      	mov	r3, r0
   bbbc8:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbbcc:	b11a      	cbz	r2, bbbd6 <strchr+0x12>
   bbbce:	428a      	cmp	r2, r1
   bbbd0:	d1f9      	bne.n	bbbc6 <strchr+0x2>
   bbbd2:	4618      	mov	r0, r3
   bbbd4:	4770      	bx	lr
   bbbd6:	2900      	cmp	r1, #0
   bbbd8:	bf18      	it	ne
   bbbda:	2300      	movne	r3, #0
   bbbdc:	e7f9      	b.n	bbbd2 <strchr+0xe>

000bbbde <strchrnul>:
   bbbde:	b510      	push	{r4, lr}
   bbbe0:	4604      	mov	r4, r0
   bbbe2:	f7ff ffef 	bl	bbbc4 <strchr>
   bbbe6:	b918      	cbnz	r0, bbbf0 <strchrnul+0x12>
   bbbe8:	4620      	mov	r0, r4
   bbbea:	f7f9 f8b1 	bl	b4d50 <strlen>
   bbbee:	4420      	add	r0, r4
   bbbf0:	bd10      	pop	{r4, pc}

000bbbf2 <strcpy>:
   bbbf2:	4603      	mov	r3, r0
   bbbf4:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbbf8:	f803 2b01 	strb.w	r2, [r3], #1
   bbbfc:	2a00      	cmp	r2, #0
   bbbfe:	d1f9      	bne.n	bbbf4 <strcpy+0x2>
   bbc00:	4770      	bx	lr

000bbc02 <strncmp>:
   bbc02:	b510      	push	{r4, lr}
   bbc04:	b17a      	cbz	r2, bbc26 <strncmp+0x24>
   bbc06:	4603      	mov	r3, r0
   bbc08:	3901      	subs	r1, #1
   bbc0a:	1884      	adds	r4, r0, r2
   bbc0c:	f813 0b01 	ldrb.w	r0, [r3], #1
   bbc10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bbc14:	4290      	cmp	r0, r2
   bbc16:	d101      	bne.n	bbc1c <strncmp+0x1a>
   bbc18:	42a3      	cmp	r3, r4
   bbc1a:	d101      	bne.n	bbc20 <strncmp+0x1e>
   bbc1c:	1a80      	subs	r0, r0, r2
   bbc1e:	bd10      	pop	{r4, pc}
   bbc20:	2800      	cmp	r0, #0
   bbc22:	d1f3      	bne.n	bbc0c <strncmp+0xa>
   bbc24:	e7fa      	b.n	bbc1c <strncmp+0x1a>
   bbc26:	4610      	mov	r0, r2
   bbc28:	e7f9      	b.n	bbc1e <strncmp+0x1c>

000bbc2a <strrchr>:
   bbc2a:	b538      	push	{r3, r4, r5, lr}
   bbc2c:	4603      	mov	r3, r0
   bbc2e:	460c      	mov	r4, r1
   bbc30:	b969      	cbnz	r1, bbc4e <strrchr+0x24>
   bbc32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bbc36:	f7ff bfc5 	b.w	bbbc4 <strchr>
   bbc3a:	1c43      	adds	r3, r0, #1
   bbc3c:	4605      	mov	r5, r0
   bbc3e:	4621      	mov	r1, r4
   bbc40:	4618      	mov	r0, r3
   bbc42:	f7ff ffbf 	bl	bbbc4 <strchr>
   bbc46:	2800      	cmp	r0, #0
   bbc48:	d1f7      	bne.n	bbc3a <strrchr+0x10>
   bbc4a:	4628      	mov	r0, r5
   bbc4c:	bd38      	pop	{r3, r4, r5, pc}
   bbc4e:	2500      	movs	r5, #0
   bbc50:	e7f5      	b.n	bbc3e <strrchr+0x14>

000bbc52 <strstr>:
   bbc52:	780a      	ldrb	r2, [r1, #0]
   bbc54:	b570      	push	{r4, r5, r6, lr}
   bbc56:	b96a      	cbnz	r2, bbc74 <strstr+0x22>
   bbc58:	bd70      	pop	{r4, r5, r6, pc}
   bbc5a:	429a      	cmp	r2, r3
   bbc5c:	d109      	bne.n	bbc72 <strstr+0x20>
   bbc5e:	460c      	mov	r4, r1
   bbc60:	4605      	mov	r5, r0
   bbc62:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bbc66:	2b00      	cmp	r3, #0
   bbc68:	d0f6      	beq.n	bbc58 <strstr+0x6>
   bbc6a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bbc6e:	429e      	cmp	r6, r3
   bbc70:	d0f7      	beq.n	bbc62 <strstr+0x10>
   bbc72:	3001      	adds	r0, #1
   bbc74:	7803      	ldrb	r3, [r0, #0]
   bbc76:	2b00      	cmp	r3, #0
   bbc78:	d1ef      	bne.n	bbc5a <strstr+0x8>
   bbc7a:	4618      	mov	r0, r3
   bbc7c:	e7ec      	b.n	bbc58 <strstr+0x6>

000bbc7e <sulp>:
   bbc7e:	b570      	push	{r4, r5, r6, lr}
   bbc80:	4604      	mov	r4, r0
   bbc82:	460d      	mov	r5, r1
   bbc84:	ec45 4b10 	vmov	d0, r4, r5
   bbc88:	4616      	mov	r6, r2
   bbc8a:	f001 fe0d 	bl	bd8a8 <__ulp>
   bbc8e:	ec51 0b10 	vmov	r0, r1, d0
   bbc92:	b17e      	cbz	r6, bbcb4 <sulp+0x36>
   bbc94:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bbc98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbc9c:	2b00      	cmp	r3, #0
   bbc9e:	dd09      	ble.n	bbcb4 <sulp+0x36>
   bbca0:	051b      	lsls	r3, r3, #20
   bbca2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bbca6:	2400      	movs	r4, #0
   bbca8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bbcac:	4622      	mov	r2, r4
   bbcae:	462b      	mov	r3, r5
   bbcb0:	f7f8 fb72 	bl	b4398 <__aeabi_dmul>
   bbcb4:	bd70      	pop	{r4, r5, r6, pc}
	...

000bbcb8 <_strtod_l>:
   bbcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbcbc:	ed2d 8b02 	vpush	{d8}
   bbcc0:	b09d      	sub	sp, #116	; 0x74
   bbcc2:	461f      	mov	r7, r3
   bbcc4:	2300      	movs	r3, #0
   bbcc6:	9318      	str	r3, [sp, #96]	; 0x60
   bbcc8:	4ba2      	ldr	r3, [pc, #648]	; (bbf54 <_strtod_l+0x29c>)
   bbcca:	9213      	str	r2, [sp, #76]	; 0x4c
   bbccc:	681b      	ldr	r3, [r3, #0]
   bbcce:	9305      	str	r3, [sp, #20]
   bbcd0:	4604      	mov	r4, r0
   bbcd2:	4618      	mov	r0, r3
   bbcd4:	4688      	mov	r8, r1
   bbcd6:	f7f9 f83b 	bl	b4d50 <strlen>
   bbcda:	f04f 0a00 	mov.w	sl, #0
   bbcde:	4605      	mov	r5, r0
   bbce0:	f04f 0b00 	mov.w	fp, #0
   bbce4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bbce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbcea:	781a      	ldrb	r2, [r3, #0]
   bbcec:	2a2b      	cmp	r2, #43	; 0x2b
   bbcee:	d04e      	beq.n	bbd8e <_strtod_l+0xd6>
   bbcf0:	d83b      	bhi.n	bbd6a <_strtod_l+0xb2>
   bbcf2:	2a0d      	cmp	r2, #13
   bbcf4:	d834      	bhi.n	bbd60 <_strtod_l+0xa8>
   bbcf6:	2a08      	cmp	r2, #8
   bbcf8:	d834      	bhi.n	bbd64 <_strtod_l+0xac>
   bbcfa:	2a00      	cmp	r2, #0
   bbcfc:	d03e      	beq.n	bbd7c <_strtod_l+0xc4>
   bbcfe:	2300      	movs	r3, #0
   bbd00:	930a      	str	r3, [sp, #40]	; 0x28
   bbd02:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bbd04:	7833      	ldrb	r3, [r6, #0]
   bbd06:	2b30      	cmp	r3, #48	; 0x30
   bbd08:	f040 80b0 	bne.w	bbe6c <_strtod_l+0x1b4>
   bbd0c:	7873      	ldrb	r3, [r6, #1]
   bbd0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bbd12:	2b58      	cmp	r3, #88	; 0x58
   bbd14:	d168      	bne.n	bbde8 <_strtod_l+0x130>
   bbd16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bbd18:	9301      	str	r3, [sp, #4]
   bbd1a:	ab18      	add	r3, sp, #96	; 0x60
   bbd1c:	9702      	str	r7, [sp, #8]
   bbd1e:	9300      	str	r3, [sp, #0]
   bbd20:	4a8d      	ldr	r2, [pc, #564]	; (bbf58 <_strtod_l+0x2a0>)
   bbd22:	ab19      	add	r3, sp, #100	; 0x64
   bbd24:	a917      	add	r1, sp, #92	; 0x5c
   bbd26:	4620      	mov	r0, r4
   bbd28:	f000 ff2e 	bl	bcb88 <__gethex>
   bbd2c:	f010 0707 	ands.w	r7, r0, #7
   bbd30:	4605      	mov	r5, r0
   bbd32:	d005      	beq.n	bbd40 <_strtod_l+0x88>
   bbd34:	2f06      	cmp	r7, #6
   bbd36:	d12c      	bne.n	bbd92 <_strtod_l+0xda>
   bbd38:	3601      	adds	r6, #1
   bbd3a:	2300      	movs	r3, #0
   bbd3c:	9617      	str	r6, [sp, #92]	; 0x5c
   bbd3e:	930a      	str	r3, [sp, #40]	; 0x28
   bbd40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bbd42:	2b00      	cmp	r3, #0
   bbd44:	f040 8590 	bne.w	bc868 <_strtod_l+0xbb0>
   bbd48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bbd4a:	b1eb      	cbz	r3, bbd88 <_strtod_l+0xd0>
   bbd4c:	4652      	mov	r2, sl
   bbd4e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bbd52:	ec43 2b10 	vmov	d0, r2, r3
   bbd56:	b01d      	add	sp, #116	; 0x74
   bbd58:	ecbd 8b02 	vpop	{d8}
   bbd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbd60:	2a20      	cmp	r2, #32
   bbd62:	d1cc      	bne.n	bbcfe <_strtod_l+0x46>
   bbd64:	3301      	adds	r3, #1
   bbd66:	9317      	str	r3, [sp, #92]	; 0x5c
   bbd68:	e7be      	b.n	bbce8 <_strtod_l+0x30>
   bbd6a:	2a2d      	cmp	r2, #45	; 0x2d
   bbd6c:	d1c7      	bne.n	bbcfe <_strtod_l+0x46>
   bbd6e:	2201      	movs	r2, #1
   bbd70:	920a      	str	r2, [sp, #40]	; 0x28
   bbd72:	1c5a      	adds	r2, r3, #1
   bbd74:	9217      	str	r2, [sp, #92]	; 0x5c
   bbd76:	785b      	ldrb	r3, [r3, #1]
   bbd78:	2b00      	cmp	r3, #0
   bbd7a:	d1c2      	bne.n	bbd02 <_strtod_l+0x4a>
   bbd7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bbd7e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bbd82:	2b00      	cmp	r3, #0
   bbd84:	f040 856e 	bne.w	bc864 <_strtod_l+0xbac>
   bbd88:	4652      	mov	r2, sl
   bbd8a:	465b      	mov	r3, fp
   bbd8c:	e7e1      	b.n	bbd52 <_strtod_l+0x9a>
   bbd8e:	2200      	movs	r2, #0
   bbd90:	e7ee      	b.n	bbd70 <_strtod_l+0xb8>
   bbd92:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bbd94:	b13a      	cbz	r2, bbda6 <_strtod_l+0xee>
   bbd96:	2135      	movs	r1, #53	; 0x35
   bbd98:	a81a      	add	r0, sp, #104	; 0x68
   bbd9a:	f001 fe90 	bl	bdabe <__copybits>
   bbd9e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbda0:	4620      	mov	r0, r4
   bbda2:	f001 fa4f 	bl	bd244 <_Bfree>
   bbda6:	3f01      	subs	r7, #1
   bbda8:	2f04      	cmp	r7, #4
   bbdaa:	d806      	bhi.n	bbdba <_strtod_l+0x102>
   bbdac:	e8df f007 	tbb	[pc, r7]
   bbdb0:	1714030a 	.word	0x1714030a
   bbdb4:	0a          	.byte	0x0a
   bbdb5:	00          	.byte	0x00
   bbdb6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bbdba:	0728      	lsls	r0, r5, #28
   bbdbc:	d5c0      	bpl.n	bbd40 <_strtod_l+0x88>
   bbdbe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bbdc2:	e7bd      	b.n	bbd40 <_strtod_l+0x88>
   bbdc4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bbdc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bbdca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bbdce:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bbdd2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bbdd6:	e7f0      	b.n	bbdba <_strtod_l+0x102>
   bbdd8:	f8df b180 	ldr.w	fp, [pc, #384]	; bbf5c <_strtod_l+0x2a4>
   bbddc:	e7ed      	b.n	bbdba <_strtod_l+0x102>
   bbdde:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bbde2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbde6:	e7e8      	b.n	bbdba <_strtod_l+0x102>
   bbde8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbdea:	1c5a      	adds	r2, r3, #1
   bbdec:	9217      	str	r2, [sp, #92]	; 0x5c
   bbdee:	785b      	ldrb	r3, [r3, #1]
   bbdf0:	2b30      	cmp	r3, #48	; 0x30
   bbdf2:	d0f9      	beq.n	bbde8 <_strtod_l+0x130>
   bbdf4:	2b00      	cmp	r3, #0
   bbdf6:	d0a3      	beq.n	bbd40 <_strtod_l+0x88>
   bbdf8:	2301      	movs	r3, #1
   bbdfa:	f04f 0900 	mov.w	r9, #0
   bbdfe:	9304      	str	r3, [sp, #16]
   bbe00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbe02:	9308      	str	r3, [sp, #32]
   bbe04:	f8cd 901c 	str.w	r9, [sp, #28]
   bbe08:	464f      	mov	r7, r9
   bbe0a:	220a      	movs	r2, #10
   bbe0c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bbe0e:	7806      	ldrb	r6, [r0, #0]
   bbe10:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bbe14:	b2d9      	uxtb	r1, r3
   bbe16:	2909      	cmp	r1, #9
   bbe18:	d92a      	bls.n	bbe70 <_strtod_l+0x1b8>
   bbe1a:	9905      	ldr	r1, [sp, #20]
   bbe1c:	462a      	mov	r2, r5
   bbe1e:	f7ff fef0 	bl	bbc02 <strncmp>
   bbe22:	b398      	cbz	r0, bbe8c <_strtod_l+0x1d4>
   bbe24:	2000      	movs	r0, #0
   bbe26:	4632      	mov	r2, r6
   bbe28:	463d      	mov	r5, r7
   bbe2a:	9005      	str	r0, [sp, #20]
   bbe2c:	4603      	mov	r3, r0
   bbe2e:	2a65      	cmp	r2, #101	; 0x65
   bbe30:	d001      	beq.n	bbe36 <_strtod_l+0x17e>
   bbe32:	2a45      	cmp	r2, #69	; 0x45
   bbe34:	d118      	bne.n	bbe68 <_strtod_l+0x1b0>
   bbe36:	b91d      	cbnz	r5, bbe40 <_strtod_l+0x188>
   bbe38:	9a04      	ldr	r2, [sp, #16]
   bbe3a:	4302      	orrs	r2, r0
   bbe3c:	d09e      	beq.n	bbd7c <_strtod_l+0xc4>
   bbe3e:	2500      	movs	r5, #0
   bbe40:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bbe44:	f108 0201 	add.w	r2, r8, #1
   bbe48:	9217      	str	r2, [sp, #92]	; 0x5c
   bbe4a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bbe4e:	2a2b      	cmp	r2, #43	; 0x2b
   bbe50:	d075      	beq.n	bbf3e <_strtod_l+0x286>
   bbe52:	2a2d      	cmp	r2, #45	; 0x2d
   bbe54:	d07b      	beq.n	bbf4e <_strtod_l+0x296>
   bbe56:	f04f 0c00 	mov.w	ip, #0
   bbe5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bbe5e:	2909      	cmp	r1, #9
   bbe60:	f240 8082 	bls.w	bbf68 <_strtod_l+0x2b0>
   bbe64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bbe68:	2600      	movs	r6, #0
   bbe6a:	e09d      	b.n	bbfa8 <_strtod_l+0x2f0>
   bbe6c:	2300      	movs	r3, #0
   bbe6e:	e7c4      	b.n	bbdfa <_strtod_l+0x142>
   bbe70:	2f08      	cmp	r7, #8
   bbe72:	bfd8      	it	le
   bbe74:	9907      	ldrle	r1, [sp, #28]
   bbe76:	f100 0001 	add.w	r0, r0, #1
   bbe7a:	bfda      	itte	le
   bbe7c:	fb02 3301 	mlale	r3, r2, r1, r3
   bbe80:	9307      	strle	r3, [sp, #28]
   bbe82:	fb02 3909 	mlagt	r9, r2, r9, r3
   bbe86:	3701      	adds	r7, #1
   bbe88:	9017      	str	r0, [sp, #92]	; 0x5c
   bbe8a:	e7bf      	b.n	bbe0c <_strtod_l+0x154>
   bbe8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbe8e:	195a      	adds	r2, r3, r5
   bbe90:	9217      	str	r2, [sp, #92]	; 0x5c
   bbe92:	5d5a      	ldrb	r2, [r3, r5]
   bbe94:	2f00      	cmp	r7, #0
   bbe96:	d037      	beq.n	bbf08 <_strtod_l+0x250>
   bbe98:	9005      	str	r0, [sp, #20]
   bbe9a:	463d      	mov	r5, r7
   bbe9c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bbea0:	2b09      	cmp	r3, #9
   bbea2:	d912      	bls.n	bbeca <_strtod_l+0x212>
   bbea4:	2301      	movs	r3, #1
   bbea6:	e7c2      	b.n	bbe2e <_strtod_l+0x176>
   bbea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbeaa:	1c5a      	adds	r2, r3, #1
   bbeac:	9217      	str	r2, [sp, #92]	; 0x5c
   bbeae:	785a      	ldrb	r2, [r3, #1]
   bbeb0:	3001      	adds	r0, #1
   bbeb2:	2a30      	cmp	r2, #48	; 0x30
   bbeb4:	d0f8      	beq.n	bbea8 <_strtod_l+0x1f0>
   bbeb6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bbeba:	2b08      	cmp	r3, #8
   bbebc:	f200 84d9 	bhi.w	bc872 <_strtod_l+0xbba>
   bbec0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbec2:	9005      	str	r0, [sp, #20]
   bbec4:	2000      	movs	r0, #0
   bbec6:	9308      	str	r3, [sp, #32]
   bbec8:	4605      	mov	r5, r0
   bbeca:	3a30      	subs	r2, #48	; 0x30
   bbecc:	f100 0301 	add.w	r3, r0, #1
   bbed0:	d014      	beq.n	bbefc <_strtod_l+0x244>
   bbed2:	9905      	ldr	r1, [sp, #20]
   bbed4:	4419      	add	r1, r3
   bbed6:	9105      	str	r1, [sp, #20]
   bbed8:	462b      	mov	r3, r5
   bbeda:	eb00 0e05 	add.w	lr, r0, r5
   bbede:	210a      	movs	r1, #10
   bbee0:	4573      	cmp	r3, lr
   bbee2:	d113      	bne.n	bbf0c <_strtod_l+0x254>
   bbee4:	182b      	adds	r3, r5, r0
   bbee6:	2b08      	cmp	r3, #8
   bbee8:	f105 0501 	add.w	r5, r5, #1
   bbeec:	4405      	add	r5, r0
   bbeee:	dc1c      	bgt.n	bbf2a <_strtod_l+0x272>
   bbef0:	9907      	ldr	r1, [sp, #28]
   bbef2:	230a      	movs	r3, #10
   bbef4:	fb03 2301 	mla	r3, r3, r1, r2
   bbef8:	9307      	str	r3, [sp, #28]
   bbefa:	2300      	movs	r3, #0
   bbefc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bbefe:	1c51      	adds	r1, r2, #1
   bbf00:	9117      	str	r1, [sp, #92]	; 0x5c
   bbf02:	7852      	ldrb	r2, [r2, #1]
   bbf04:	4618      	mov	r0, r3
   bbf06:	e7c9      	b.n	bbe9c <_strtod_l+0x1e4>
   bbf08:	4638      	mov	r0, r7
   bbf0a:	e7d2      	b.n	bbeb2 <_strtod_l+0x1fa>
   bbf0c:	2b08      	cmp	r3, #8
   bbf0e:	dc04      	bgt.n	bbf1a <_strtod_l+0x262>
   bbf10:	9e07      	ldr	r6, [sp, #28]
   bbf12:	434e      	muls	r6, r1
   bbf14:	9607      	str	r6, [sp, #28]
   bbf16:	3301      	adds	r3, #1
   bbf18:	e7e2      	b.n	bbee0 <_strtod_l+0x228>
   bbf1a:	f103 0c01 	add.w	ip, r3, #1
   bbf1e:	f1bc 0f10 	cmp.w	ip, #16
   bbf22:	bfd8      	it	le
   bbf24:	fb01 f909 	mulle.w	r9, r1, r9
   bbf28:	e7f5      	b.n	bbf16 <_strtod_l+0x25e>
   bbf2a:	2d10      	cmp	r5, #16
   bbf2c:	bfdc      	itt	le
   bbf2e:	230a      	movle	r3, #10
   bbf30:	fb03 2909 	mlale	r9, r3, r9, r2
   bbf34:	e7e1      	b.n	bbefa <_strtod_l+0x242>
   bbf36:	2300      	movs	r3, #0
   bbf38:	9305      	str	r3, [sp, #20]
   bbf3a:	2301      	movs	r3, #1
   bbf3c:	e77c      	b.n	bbe38 <_strtod_l+0x180>
   bbf3e:	f04f 0c00 	mov.w	ip, #0
   bbf42:	f108 0202 	add.w	r2, r8, #2
   bbf46:	9217      	str	r2, [sp, #92]	; 0x5c
   bbf48:	f898 2002 	ldrb.w	r2, [r8, #2]
   bbf4c:	e785      	b.n	bbe5a <_strtod_l+0x1a2>
   bbf4e:	f04f 0c01 	mov.w	ip, #1
   bbf52:	e7f6      	b.n	bbf42 <_strtod_l+0x28a>
   bbf54:	000be800 	.word	0x000be800
   bbf58:	000be634 	.word	0x000be634
   bbf5c:	7ff00000 	.word	0x7ff00000
   bbf60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bbf62:	1c51      	adds	r1, r2, #1
   bbf64:	9117      	str	r1, [sp, #92]	; 0x5c
   bbf66:	7852      	ldrb	r2, [r2, #1]
   bbf68:	2a30      	cmp	r2, #48	; 0x30
   bbf6a:	d0f9      	beq.n	bbf60 <_strtod_l+0x2a8>
   bbf6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bbf70:	2908      	cmp	r1, #8
   bbf72:	f63f af79 	bhi.w	bbe68 <_strtod_l+0x1b0>
   bbf76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bbf7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bbf7c:	9206      	str	r2, [sp, #24]
   bbf7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bbf80:	1c51      	adds	r1, r2, #1
   bbf82:	9117      	str	r1, [sp, #92]	; 0x5c
   bbf84:	7852      	ldrb	r2, [r2, #1]
   bbf86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bbf8a:	2e09      	cmp	r6, #9
   bbf8c:	d937      	bls.n	bbffe <_strtod_l+0x346>
   bbf8e:	9e06      	ldr	r6, [sp, #24]
   bbf90:	1b89      	subs	r1, r1, r6
   bbf92:	2908      	cmp	r1, #8
   bbf94:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bbf98:	dc02      	bgt.n	bbfa0 <_strtod_l+0x2e8>
   bbf9a:	4576      	cmp	r6, lr
   bbf9c:	bfa8      	it	ge
   bbf9e:	4676      	movge	r6, lr
   bbfa0:	f1bc 0f00 	cmp.w	ip, #0
   bbfa4:	d000      	beq.n	bbfa8 <_strtod_l+0x2f0>
   bbfa6:	4276      	negs	r6, r6
   bbfa8:	2d00      	cmp	r5, #0
   bbfaa:	d14d      	bne.n	bc048 <_strtod_l+0x390>
   bbfac:	9904      	ldr	r1, [sp, #16]
   bbfae:	4301      	orrs	r1, r0
   bbfb0:	f47f aec6 	bne.w	bbd40 <_strtod_l+0x88>
   bbfb4:	2b00      	cmp	r3, #0
   bbfb6:	f47f aee1 	bne.w	bbd7c <_strtod_l+0xc4>
   bbfba:	2a69      	cmp	r2, #105	; 0x69
   bbfbc:	d027      	beq.n	bc00e <_strtod_l+0x356>
   bbfbe:	dc24      	bgt.n	bc00a <_strtod_l+0x352>
   bbfc0:	2a49      	cmp	r2, #73	; 0x49
   bbfc2:	d024      	beq.n	bc00e <_strtod_l+0x356>
   bbfc4:	2a4e      	cmp	r2, #78	; 0x4e
   bbfc6:	f47f aed9 	bne.w	bbd7c <_strtod_l+0xc4>
   bbfca:	499f      	ldr	r1, [pc, #636]	; (bc248 <_strtod_l+0x590>)
   bbfcc:	a817      	add	r0, sp, #92	; 0x5c
   bbfce:	f001 f833 	bl	bd038 <__match>
   bbfd2:	2800      	cmp	r0, #0
   bbfd4:	f43f aed2 	beq.w	bbd7c <_strtod_l+0xc4>
   bbfd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbfda:	781b      	ldrb	r3, [r3, #0]
   bbfdc:	2b28      	cmp	r3, #40	; 0x28
   bbfde:	d12d      	bne.n	bc03c <_strtod_l+0x384>
   bbfe0:	499a      	ldr	r1, [pc, #616]	; (bc24c <_strtod_l+0x594>)
   bbfe2:	aa1a      	add	r2, sp, #104	; 0x68
   bbfe4:	a817      	add	r0, sp, #92	; 0x5c
   bbfe6:	f001 f83b 	bl	bd060 <__hexnan>
   bbfea:	2805      	cmp	r0, #5
   bbfec:	d126      	bne.n	bc03c <_strtod_l+0x384>
   bbfee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bbff0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bbff4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bbff8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bbffc:	e6a0      	b.n	bbd40 <_strtod_l+0x88>
   bbffe:	210a      	movs	r1, #10
   bc000:	fb01 2e0e 	mla	lr, r1, lr, r2
   bc004:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bc008:	e7b9      	b.n	bbf7e <_strtod_l+0x2c6>
   bc00a:	2a6e      	cmp	r2, #110	; 0x6e
   bc00c:	e7db      	b.n	bbfc6 <_strtod_l+0x30e>
   bc00e:	4990      	ldr	r1, [pc, #576]	; (bc250 <_strtod_l+0x598>)
   bc010:	a817      	add	r0, sp, #92	; 0x5c
   bc012:	f001 f811 	bl	bd038 <__match>
   bc016:	2800      	cmp	r0, #0
   bc018:	f43f aeb0 	beq.w	bbd7c <_strtod_l+0xc4>
   bc01c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc01e:	498d      	ldr	r1, [pc, #564]	; (bc254 <_strtod_l+0x59c>)
   bc020:	3b01      	subs	r3, #1
   bc022:	a817      	add	r0, sp, #92	; 0x5c
   bc024:	9317      	str	r3, [sp, #92]	; 0x5c
   bc026:	f001 f807 	bl	bd038 <__match>
   bc02a:	b910      	cbnz	r0, bc032 <_strtod_l+0x37a>
   bc02c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc02e:	3301      	adds	r3, #1
   bc030:	9317      	str	r3, [sp, #92]	; 0x5c
   bc032:	f8df b230 	ldr.w	fp, [pc, #560]	; bc264 <_strtod_l+0x5ac>
   bc036:	f04f 0a00 	mov.w	sl, #0
   bc03a:	e681      	b.n	bbd40 <_strtod_l+0x88>
   bc03c:	4886      	ldr	r0, [pc, #536]	; (bc258 <_strtod_l+0x5a0>)
   bc03e:	f001 fd93 	bl	bdb68 <nan>
   bc042:	ec5b ab10 	vmov	sl, fp, d0
   bc046:	e67b      	b.n	bbd40 <_strtod_l+0x88>
   bc048:	9b05      	ldr	r3, [sp, #20]
   bc04a:	9807      	ldr	r0, [sp, #28]
   bc04c:	1af3      	subs	r3, r6, r3
   bc04e:	2f00      	cmp	r7, #0
   bc050:	bf08      	it	eq
   bc052:	462f      	moveq	r7, r5
   bc054:	2d10      	cmp	r5, #16
   bc056:	9306      	str	r3, [sp, #24]
   bc058:	46a8      	mov	r8, r5
   bc05a:	bfa8      	it	ge
   bc05c:	f04f 0810 	movge.w	r8, #16
   bc060:	f7f8 f920 	bl	b42a4 <__aeabi_ui2d>
   bc064:	2d09      	cmp	r5, #9
   bc066:	4682      	mov	sl, r0
   bc068:	468b      	mov	fp, r1
   bc06a:	dd13      	ble.n	bc094 <_strtod_l+0x3dc>
   bc06c:	4b7b      	ldr	r3, [pc, #492]	; (bc25c <_strtod_l+0x5a4>)
   bc06e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bc072:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bc076:	f7f8 f98f 	bl	b4398 <__aeabi_dmul>
   bc07a:	4682      	mov	sl, r0
   bc07c:	4648      	mov	r0, r9
   bc07e:	468b      	mov	fp, r1
   bc080:	f7f8 f910 	bl	b42a4 <__aeabi_ui2d>
   bc084:	4602      	mov	r2, r0
   bc086:	460b      	mov	r3, r1
   bc088:	4650      	mov	r0, sl
   bc08a:	4659      	mov	r1, fp
   bc08c:	f7f7 ffce 	bl	b402c <__adddf3>
   bc090:	4682      	mov	sl, r0
   bc092:	468b      	mov	fp, r1
   bc094:	2d0f      	cmp	r5, #15
   bc096:	dc38      	bgt.n	bc10a <_strtod_l+0x452>
   bc098:	9b06      	ldr	r3, [sp, #24]
   bc09a:	2b00      	cmp	r3, #0
   bc09c:	f43f ae50 	beq.w	bbd40 <_strtod_l+0x88>
   bc0a0:	dd24      	ble.n	bc0ec <_strtod_l+0x434>
   bc0a2:	2b16      	cmp	r3, #22
   bc0a4:	dc0b      	bgt.n	bc0be <_strtod_l+0x406>
   bc0a6:	496d      	ldr	r1, [pc, #436]	; (bc25c <_strtod_l+0x5a4>)
   bc0a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc0ac:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc0b0:	4652      	mov	r2, sl
   bc0b2:	465b      	mov	r3, fp
   bc0b4:	f7f8 f970 	bl	b4398 <__aeabi_dmul>
   bc0b8:	4682      	mov	sl, r0
   bc0ba:	468b      	mov	fp, r1
   bc0bc:	e640      	b.n	bbd40 <_strtod_l+0x88>
   bc0be:	9a06      	ldr	r2, [sp, #24]
   bc0c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bc0c4:	4293      	cmp	r3, r2
   bc0c6:	db20      	blt.n	bc10a <_strtod_l+0x452>
   bc0c8:	4c64      	ldr	r4, [pc, #400]	; (bc25c <_strtod_l+0x5a4>)
   bc0ca:	f1c5 050f 	rsb	r5, r5, #15
   bc0ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bc0d2:	4652      	mov	r2, sl
   bc0d4:	465b      	mov	r3, fp
   bc0d6:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc0da:	f7f8 f95d 	bl	b4398 <__aeabi_dmul>
   bc0de:	9b06      	ldr	r3, [sp, #24]
   bc0e0:	1b5d      	subs	r5, r3, r5
   bc0e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bc0e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   bc0ea:	e7e3      	b.n	bc0b4 <_strtod_l+0x3fc>
   bc0ec:	9b06      	ldr	r3, [sp, #24]
   bc0ee:	3316      	adds	r3, #22
   bc0f0:	db0b      	blt.n	bc10a <_strtod_l+0x452>
   bc0f2:	9b05      	ldr	r3, [sp, #20]
   bc0f4:	1b9e      	subs	r6, r3, r6
   bc0f6:	4b59      	ldr	r3, [pc, #356]	; (bc25c <_strtod_l+0x5a4>)
   bc0f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bc0fc:	e9d6 2300 	ldrd	r2, r3, [r6]
   bc100:	4650      	mov	r0, sl
   bc102:	4659      	mov	r1, fp
   bc104:	f7f8 fa72 	bl	b45ec <__aeabi_ddiv>
   bc108:	e7d6      	b.n	bc0b8 <_strtod_l+0x400>
   bc10a:	9b06      	ldr	r3, [sp, #24]
   bc10c:	eba5 0808 	sub.w	r8, r5, r8
   bc110:	4498      	add	r8, r3
   bc112:	f1b8 0f00 	cmp.w	r8, #0
   bc116:	dd74      	ble.n	bc202 <_strtod_l+0x54a>
   bc118:	f018 030f 	ands.w	r3, r8, #15
   bc11c:	d00a      	beq.n	bc134 <_strtod_l+0x47c>
   bc11e:	494f      	ldr	r1, [pc, #316]	; (bc25c <_strtod_l+0x5a4>)
   bc120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc124:	4652      	mov	r2, sl
   bc126:	465b      	mov	r3, fp
   bc128:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc12c:	f7f8 f934 	bl	b4398 <__aeabi_dmul>
   bc130:	4682      	mov	sl, r0
   bc132:	468b      	mov	fp, r1
   bc134:	f038 080f 	bics.w	r8, r8, #15
   bc138:	d04f      	beq.n	bc1da <_strtod_l+0x522>
   bc13a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bc13e:	dd22      	ble.n	bc186 <_strtod_l+0x4ce>
   bc140:	2500      	movs	r5, #0
   bc142:	462e      	mov	r6, r5
   bc144:	9507      	str	r5, [sp, #28]
   bc146:	9505      	str	r5, [sp, #20]
   bc148:	2322      	movs	r3, #34	; 0x22
   bc14a:	f8df b118 	ldr.w	fp, [pc, #280]	; bc264 <_strtod_l+0x5ac>
   bc14e:	6023      	str	r3, [r4, #0]
   bc150:	f04f 0a00 	mov.w	sl, #0
   bc154:	9b07      	ldr	r3, [sp, #28]
   bc156:	2b00      	cmp	r3, #0
   bc158:	f43f adf2 	beq.w	bbd40 <_strtod_l+0x88>
   bc15c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc15e:	4620      	mov	r0, r4
   bc160:	f001 f870 	bl	bd244 <_Bfree>
   bc164:	9905      	ldr	r1, [sp, #20]
   bc166:	4620      	mov	r0, r4
   bc168:	f001 f86c 	bl	bd244 <_Bfree>
   bc16c:	4631      	mov	r1, r6
   bc16e:	4620      	mov	r0, r4
   bc170:	f001 f868 	bl	bd244 <_Bfree>
   bc174:	9907      	ldr	r1, [sp, #28]
   bc176:	4620      	mov	r0, r4
   bc178:	f001 f864 	bl	bd244 <_Bfree>
   bc17c:	4629      	mov	r1, r5
   bc17e:	4620      	mov	r0, r4
   bc180:	f001 f860 	bl	bd244 <_Bfree>
   bc184:	e5dc      	b.n	bbd40 <_strtod_l+0x88>
   bc186:	4b36      	ldr	r3, [pc, #216]	; (bc260 <_strtod_l+0x5a8>)
   bc188:	9304      	str	r3, [sp, #16]
   bc18a:	2300      	movs	r3, #0
   bc18c:	ea4f 1828 	mov.w	r8, r8, asr #4
   bc190:	4650      	mov	r0, sl
   bc192:	4659      	mov	r1, fp
   bc194:	4699      	mov	r9, r3
   bc196:	f1b8 0f01 	cmp.w	r8, #1
   bc19a:	dc21      	bgt.n	bc1e0 <_strtod_l+0x528>
   bc19c:	b10b      	cbz	r3, bc1a2 <_strtod_l+0x4ea>
   bc19e:	4682      	mov	sl, r0
   bc1a0:	468b      	mov	fp, r1
   bc1a2:	4b2f      	ldr	r3, [pc, #188]	; (bc260 <_strtod_l+0x5a8>)
   bc1a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bc1a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bc1ac:	4652      	mov	r2, sl
   bc1ae:	465b      	mov	r3, fp
   bc1b0:	e9d9 0100 	ldrd	r0, r1, [r9]
   bc1b4:	f7f8 f8f0 	bl	b4398 <__aeabi_dmul>
   bc1b8:	4b2a      	ldr	r3, [pc, #168]	; (bc264 <_strtod_l+0x5ac>)
   bc1ba:	460a      	mov	r2, r1
   bc1bc:	400b      	ands	r3, r1
   bc1be:	492a      	ldr	r1, [pc, #168]	; (bc268 <_strtod_l+0x5b0>)
   bc1c0:	428b      	cmp	r3, r1
   bc1c2:	4682      	mov	sl, r0
   bc1c4:	d8bc      	bhi.n	bc140 <_strtod_l+0x488>
   bc1c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bc1ca:	428b      	cmp	r3, r1
   bc1cc:	bf86      	itte	hi
   bc1ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bc26c <_strtod_l+0x5b4>
   bc1d2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bc1d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bc1da:	2300      	movs	r3, #0
   bc1dc:	9304      	str	r3, [sp, #16]
   bc1de:	e084      	b.n	bc2ea <_strtod_l+0x632>
   bc1e0:	f018 0f01 	tst.w	r8, #1
   bc1e4:	d005      	beq.n	bc1f2 <_strtod_l+0x53a>
   bc1e6:	9b04      	ldr	r3, [sp, #16]
   bc1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc1ec:	f7f8 f8d4 	bl	b4398 <__aeabi_dmul>
   bc1f0:	2301      	movs	r3, #1
   bc1f2:	9a04      	ldr	r2, [sp, #16]
   bc1f4:	3208      	adds	r2, #8
   bc1f6:	f109 0901 	add.w	r9, r9, #1
   bc1fa:	ea4f 0868 	mov.w	r8, r8, asr #1
   bc1fe:	9204      	str	r2, [sp, #16]
   bc200:	e7c9      	b.n	bc196 <_strtod_l+0x4de>
   bc202:	d0ea      	beq.n	bc1da <_strtod_l+0x522>
   bc204:	f1c8 0800 	rsb	r8, r8, #0
   bc208:	f018 020f 	ands.w	r2, r8, #15
   bc20c:	d00a      	beq.n	bc224 <_strtod_l+0x56c>
   bc20e:	4b13      	ldr	r3, [pc, #76]	; (bc25c <_strtod_l+0x5a4>)
   bc210:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bc214:	4650      	mov	r0, sl
   bc216:	4659      	mov	r1, fp
   bc218:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc21c:	f7f8 f9e6 	bl	b45ec <__aeabi_ddiv>
   bc220:	4682      	mov	sl, r0
   bc222:	468b      	mov	fp, r1
   bc224:	ea5f 1828 	movs.w	r8, r8, asr #4
   bc228:	d0d7      	beq.n	bc1da <_strtod_l+0x522>
   bc22a:	f1b8 0f1f 	cmp.w	r8, #31
   bc22e:	dd1f      	ble.n	bc270 <_strtod_l+0x5b8>
   bc230:	2500      	movs	r5, #0
   bc232:	462e      	mov	r6, r5
   bc234:	9507      	str	r5, [sp, #28]
   bc236:	9505      	str	r5, [sp, #20]
   bc238:	2322      	movs	r3, #34	; 0x22
   bc23a:	f04f 0a00 	mov.w	sl, #0
   bc23e:	f04f 0b00 	mov.w	fp, #0
   bc242:	6023      	str	r3, [r4, #0]
   bc244:	e786      	b.n	bc154 <_strtod_l+0x49c>
   bc246:	bf00      	nop
   bc248:	000be62e 	.word	0x000be62e
   bc24c:	000be648 	.word	0x000be648
   bc250:	000be625 	.word	0x000be625
   bc254:	000be628 	.word	0x000be628
   bc258:	000be3da 	.word	0x000be3da
   bc25c:	000be898 	.word	0x000be898
   bc260:	000be870 	.word	0x000be870
   bc264:	7ff00000 	.word	0x7ff00000
   bc268:	7ca00000 	.word	0x7ca00000
   bc26c:	7fefffff 	.word	0x7fefffff
   bc270:	f018 0310 	ands.w	r3, r8, #16
   bc274:	bf18      	it	ne
   bc276:	236a      	movne	r3, #106	; 0x6a
   bc278:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bc628 <_strtod_l+0x970>
   bc27c:	9304      	str	r3, [sp, #16]
   bc27e:	4650      	mov	r0, sl
   bc280:	4659      	mov	r1, fp
   bc282:	2300      	movs	r3, #0
   bc284:	f018 0f01 	tst.w	r8, #1
   bc288:	d004      	beq.n	bc294 <_strtod_l+0x5dc>
   bc28a:	e9d9 2300 	ldrd	r2, r3, [r9]
   bc28e:	f7f8 f883 	bl	b4398 <__aeabi_dmul>
   bc292:	2301      	movs	r3, #1
   bc294:	ea5f 0868 	movs.w	r8, r8, asr #1
   bc298:	f109 0908 	add.w	r9, r9, #8
   bc29c:	d1f2      	bne.n	bc284 <_strtod_l+0x5cc>
   bc29e:	b10b      	cbz	r3, bc2a4 <_strtod_l+0x5ec>
   bc2a0:	4682      	mov	sl, r0
   bc2a2:	468b      	mov	fp, r1
   bc2a4:	9b04      	ldr	r3, [sp, #16]
   bc2a6:	b1c3      	cbz	r3, bc2da <_strtod_l+0x622>
   bc2a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bc2ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bc2b0:	2b00      	cmp	r3, #0
   bc2b2:	4659      	mov	r1, fp
   bc2b4:	dd11      	ble.n	bc2da <_strtod_l+0x622>
   bc2b6:	2b1f      	cmp	r3, #31
   bc2b8:	f340 8124 	ble.w	bc504 <_strtod_l+0x84c>
   bc2bc:	2b34      	cmp	r3, #52	; 0x34
   bc2be:	bfde      	ittt	le
   bc2c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bc2c4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bc2c8:	fa03 f202 	lslle.w	r2, r3, r2
   bc2cc:	f04f 0a00 	mov.w	sl, #0
   bc2d0:	bfcc      	ite	gt
   bc2d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bc2d6:	ea02 0b01 	andle.w	fp, r2, r1
   bc2da:	2200      	movs	r2, #0
   bc2dc:	2300      	movs	r3, #0
   bc2de:	4650      	mov	r0, sl
   bc2e0:	4659      	mov	r1, fp
   bc2e2:	f7f8 fac1 	bl	b4868 <__aeabi_dcmpeq>
   bc2e6:	2800      	cmp	r0, #0
   bc2e8:	d1a2      	bne.n	bc230 <_strtod_l+0x578>
   bc2ea:	9b07      	ldr	r3, [sp, #28]
   bc2ec:	9300      	str	r3, [sp, #0]
   bc2ee:	9908      	ldr	r1, [sp, #32]
   bc2f0:	462b      	mov	r3, r5
   bc2f2:	463a      	mov	r2, r7
   bc2f4:	4620      	mov	r0, r4
   bc2f6:	f001 f80d 	bl	bd314 <__s2b>
   bc2fa:	9007      	str	r0, [sp, #28]
   bc2fc:	2800      	cmp	r0, #0
   bc2fe:	f43f af1f 	beq.w	bc140 <_strtod_l+0x488>
   bc302:	9b05      	ldr	r3, [sp, #20]
   bc304:	1b9e      	subs	r6, r3, r6
   bc306:	9b06      	ldr	r3, [sp, #24]
   bc308:	2b00      	cmp	r3, #0
   bc30a:	bfb4      	ite	lt
   bc30c:	4633      	movlt	r3, r6
   bc30e:	2300      	movge	r3, #0
   bc310:	930c      	str	r3, [sp, #48]	; 0x30
   bc312:	9b06      	ldr	r3, [sp, #24]
   bc314:	2500      	movs	r5, #0
   bc316:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bc31a:	9312      	str	r3, [sp, #72]	; 0x48
   bc31c:	462e      	mov	r6, r5
   bc31e:	9b07      	ldr	r3, [sp, #28]
   bc320:	4620      	mov	r0, r4
   bc322:	6859      	ldr	r1, [r3, #4]
   bc324:	f000 ff4e 	bl	bd1c4 <_Balloc>
   bc328:	9005      	str	r0, [sp, #20]
   bc32a:	2800      	cmp	r0, #0
   bc32c:	f43f af0c 	beq.w	bc148 <_strtod_l+0x490>
   bc330:	9b07      	ldr	r3, [sp, #28]
   bc332:	691a      	ldr	r2, [r3, #16]
   bc334:	3202      	adds	r2, #2
   bc336:	f103 010c 	add.w	r1, r3, #12
   bc33a:	0092      	lsls	r2, r2, #2
   bc33c:	300c      	adds	r0, #12
   bc33e:	f7ff fbe3 	bl	bbb08 <memcpy>
   bc342:	ec4b ab10 	vmov	d0, sl, fp
   bc346:	aa1a      	add	r2, sp, #104	; 0x68
   bc348:	a919      	add	r1, sp, #100	; 0x64
   bc34a:	4620      	mov	r0, r4
   bc34c:	f001 fb28 	bl	bd9a0 <__d2b>
   bc350:	ec4b ab18 	vmov	d8, sl, fp
   bc354:	9018      	str	r0, [sp, #96]	; 0x60
   bc356:	2800      	cmp	r0, #0
   bc358:	f43f aef6 	beq.w	bc148 <_strtod_l+0x490>
   bc35c:	2101      	movs	r1, #1
   bc35e:	4620      	mov	r0, r4
   bc360:	f001 f872 	bl	bd448 <__i2b>
   bc364:	4606      	mov	r6, r0
   bc366:	2800      	cmp	r0, #0
   bc368:	f43f aeee 	beq.w	bc148 <_strtod_l+0x490>
   bc36c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bc36e:	9904      	ldr	r1, [sp, #16]
   bc370:	2b00      	cmp	r3, #0
   bc372:	bfab      	itete	ge
   bc374:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bc376:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bc378:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bc37a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bc37e:	bfac      	ite	ge
   bc380:	eb03 0902 	addge.w	r9, r3, r2
   bc384:	1ad7      	sublt	r7, r2, r3
   bc386:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bc388:	eba3 0801 	sub.w	r8, r3, r1
   bc38c:	4490      	add	r8, r2
   bc38e:	4ba1      	ldr	r3, [pc, #644]	; (bc614 <_strtod_l+0x95c>)
   bc390:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc394:	4598      	cmp	r8, r3
   bc396:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bc39a:	f280 80c7 	bge.w	bc52c <_strtod_l+0x874>
   bc39e:	eba3 0308 	sub.w	r3, r3, r8
   bc3a2:	2b1f      	cmp	r3, #31
   bc3a4:	eba2 0203 	sub.w	r2, r2, r3
   bc3a8:	f04f 0101 	mov.w	r1, #1
   bc3ac:	f300 80b1 	bgt.w	bc512 <_strtod_l+0x85a>
   bc3b0:	fa01 f303 	lsl.w	r3, r1, r3
   bc3b4:	930d      	str	r3, [sp, #52]	; 0x34
   bc3b6:	2300      	movs	r3, #0
   bc3b8:	9308      	str	r3, [sp, #32]
   bc3ba:	eb09 0802 	add.w	r8, r9, r2
   bc3be:	9b04      	ldr	r3, [sp, #16]
   bc3c0:	45c1      	cmp	r9, r8
   bc3c2:	4417      	add	r7, r2
   bc3c4:	441f      	add	r7, r3
   bc3c6:	464b      	mov	r3, r9
   bc3c8:	bfa8      	it	ge
   bc3ca:	4643      	movge	r3, r8
   bc3cc:	42bb      	cmp	r3, r7
   bc3ce:	bfa8      	it	ge
   bc3d0:	463b      	movge	r3, r7
   bc3d2:	2b00      	cmp	r3, #0
   bc3d4:	bfc2      	ittt	gt
   bc3d6:	eba8 0803 	subgt.w	r8, r8, r3
   bc3da:	1aff      	subgt	r7, r7, r3
   bc3dc:	eba9 0903 	subgt.w	r9, r9, r3
   bc3e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bc3e2:	2b00      	cmp	r3, #0
   bc3e4:	dd17      	ble.n	bc416 <_strtod_l+0x75e>
   bc3e6:	4631      	mov	r1, r6
   bc3e8:	461a      	mov	r2, r3
   bc3ea:	4620      	mov	r0, r4
   bc3ec:	f001 f8ec 	bl	bd5c8 <__pow5mult>
   bc3f0:	4606      	mov	r6, r0
   bc3f2:	2800      	cmp	r0, #0
   bc3f4:	f43f aea8 	beq.w	bc148 <_strtod_l+0x490>
   bc3f8:	4601      	mov	r1, r0
   bc3fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc3fc:	4620      	mov	r0, r4
   bc3fe:	f001 f839 	bl	bd474 <__multiply>
   bc402:	900b      	str	r0, [sp, #44]	; 0x2c
   bc404:	2800      	cmp	r0, #0
   bc406:	f43f ae9f 	beq.w	bc148 <_strtod_l+0x490>
   bc40a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc40c:	4620      	mov	r0, r4
   bc40e:	f000 ff19 	bl	bd244 <_Bfree>
   bc412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc414:	9318      	str	r3, [sp, #96]	; 0x60
   bc416:	f1b8 0f00 	cmp.w	r8, #0
   bc41a:	f300 808c 	bgt.w	bc536 <_strtod_l+0x87e>
   bc41e:	9b06      	ldr	r3, [sp, #24]
   bc420:	2b00      	cmp	r3, #0
   bc422:	dd08      	ble.n	bc436 <_strtod_l+0x77e>
   bc424:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bc426:	9905      	ldr	r1, [sp, #20]
   bc428:	4620      	mov	r0, r4
   bc42a:	f001 f8cd 	bl	bd5c8 <__pow5mult>
   bc42e:	9005      	str	r0, [sp, #20]
   bc430:	2800      	cmp	r0, #0
   bc432:	f43f ae89 	beq.w	bc148 <_strtod_l+0x490>
   bc436:	2f00      	cmp	r7, #0
   bc438:	dd08      	ble.n	bc44c <_strtod_l+0x794>
   bc43a:	9905      	ldr	r1, [sp, #20]
   bc43c:	463a      	mov	r2, r7
   bc43e:	4620      	mov	r0, r4
   bc440:	f001 f91c 	bl	bd67c <__lshift>
   bc444:	9005      	str	r0, [sp, #20]
   bc446:	2800      	cmp	r0, #0
   bc448:	f43f ae7e 	beq.w	bc148 <_strtod_l+0x490>
   bc44c:	f1b9 0f00 	cmp.w	r9, #0
   bc450:	dd08      	ble.n	bc464 <_strtod_l+0x7ac>
   bc452:	4631      	mov	r1, r6
   bc454:	464a      	mov	r2, r9
   bc456:	4620      	mov	r0, r4
   bc458:	f001 f910 	bl	bd67c <__lshift>
   bc45c:	4606      	mov	r6, r0
   bc45e:	2800      	cmp	r0, #0
   bc460:	f43f ae72 	beq.w	bc148 <_strtod_l+0x490>
   bc464:	9a05      	ldr	r2, [sp, #20]
   bc466:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc468:	4620      	mov	r0, r4
   bc46a:	f001 f993 	bl	bd794 <__mdiff>
   bc46e:	4605      	mov	r5, r0
   bc470:	2800      	cmp	r0, #0
   bc472:	f43f ae69 	beq.w	bc148 <_strtod_l+0x490>
   bc476:	68c3      	ldr	r3, [r0, #12]
   bc478:	930b      	str	r3, [sp, #44]	; 0x2c
   bc47a:	2300      	movs	r3, #0
   bc47c:	60c3      	str	r3, [r0, #12]
   bc47e:	4631      	mov	r1, r6
   bc480:	f001 f96c 	bl	bd75c <__mcmp>
   bc484:	2800      	cmp	r0, #0
   bc486:	da60      	bge.n	bc54a <_strtod_l+0x892>
   bc488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc48a:	ea53 030a 	orrs.w	r3, r3, sl
   bc48e:	f040 8082 	bne.w	bc596 <_strtod_l+0x8de>
   bc492:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc496:	2b00      	cmp	r3, #0
   bc498:	d17d      	bne.n	bc596 <_strtod_l+0x8de>
   bc49a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc49e:	0d1b      	lsrs	r3, r3, #20
   bc4a0:	051b      	lsls	r3, r3, #20
   bc4a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bc4a6:	d976      	bls.n	bc596 <_strtod_l+0x8de>
   bc4a8:	696b      	ldr	r3, [r5, #20]
   bc4aa:	b913      	cbnz	r3, bc4b2 <_strtod_l+0x7fa>
   bc4ac:	692b      	ldr	r3, [r5, #16]
   bc4ae:	2b01      	cmp	r3, #1
   bc4b0:	dd71      	ble.n	bc596 <_strtod_l+0x8de>
   bc4b2:	4629      	mov	r1, r5
   bc4b4:	2201      	movs	r2, #1
   bc4b6:	4620      	mov	r0, r4
   bc4b8:	f001 f8e0 	bl	bd67c <__lshift>
   bc4bc:	4631      	mov	r1, r6
   bc4be:	4605      	mov	r5, r0
   bc4c0:	f001 f94c 	bl	bd75c <__mcmp>
   bc4c4:	2800      	cmp	r0, #0
   bc4c6:	dd66      	ble.n	bc596 <_strtod_l+0x8de>
   bc4c8:	9904      	ldr	r1, [sp, #16]
   bc4ca:	4a53      	ldr	r2, [pc, #332]	; (bc618 <_strtod_l+0x960>)
   bc4cc:	465b      	mov	r3, fp
   bc4ce:	2900      	cmp	r1, #0
   bc4d0:	f000 8081 	beq.w	bc5d6 <_strtod_l+0x91e>
   bc4d4:	ea02 010b 	and.w	r1, r2, fp
   bc4d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bc4dc:	dc7b      	bgt.n	bc5d6 <_strtod_l+0x91e>
   bc4de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bc4e2:	f77f aea9 	ble.w	bc238 <_strtod_l+0x580>
   bc4e6:	4b4d      	ldr	r3, [pc, #308]	; (bc61c <_strtod_l+0x964>)
   bc4e8:	4650      	mov	r0, sl
   bc4ea:	4659      	mov	r1, fp
   bc4ec:	2200      	movs	r2, #0
   bc4ee:	f7f7 ff53 	bl	b4398 <__aeabi_dmul>
   bc4f2:	460b      	mov	r3, r1
   bc4f4:	4303      	orrs	r3, r0
   bc4f6:	bf08      	it	eq
   bc4f8:	2322      	moveq	r3, #34	; 0x22
   bc4fa:	4682      	mov	sl, r0
   bc4fc:	468b      	mov	fp, r1
   bc4fe:	bf08      	it	eq
   bc500:	6023      	streq	r3, [r4, #0]
   bc502:	e62b      	b.n	bc15c <_strtod_l+0x4a4>
   bc504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc508:	fa02 f303 	lsl.w	r3, r2, r3
   bc50c:	ea03 0a0a 	and.w	sl, r3, sl
   bc510:	e6e3      	b.n	bc2da <_strtod_l+0x622>
   bc512:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bc516:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bc51a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bc51e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bc522:	fa01 f308 	lsl.w	r3, r1, r8
   bc526:	9308      	str	r3, [sp, #32]
   bc528:	910d      	str	r1, [sp, #52]	; 0x34
   bc52a:	e746      	b.n	bc3ba <_strtod_l+0x702>
   bc52c:	2300      	movs	r3, #0
   bc52e:	9308      	str	r3, [sp, #32]
   bc530:	2301      	movs	r3, #1
   bc532:	930d      	str	r3, [sp, #52]	; 0x34
   bc534:	e741      	b.n	bc3ba <_strtod_l+0x702>
   bc536:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc538:	4642      	mov	r2, r8
   bc53a:	4620      	mov	r0, r4
   bc53c:	f001 f89e 	bl	bd67c <__lshift>
   bc540:	9018      	str	r0, [sp, #96]	; 0x60
   bc542:	2800      	cmp	r0, #0
   bc544:	f47f af6b 	bne.w	bc41e <_strtod_l+0x766>
   bc548:	e5fe      	b.n	bc148 <_strtod_l+0x490>
   bc54a:	465f      	mov	r7, fp
   bc54c:	d16e      	bne.n	bc62c <_strtod_l+0x974>
   bc54e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc550:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc554:	b342      	cbz	r2, bc5a8 <_strtod_l+0x8f0>
   bc556:	4a32      	ldr	r2, [pc, #200]	; (bc620 <_strtod_l+0x968>)
   bc558:	4293      	cmp	r3, r2
   bc55a:	d128      	bne.n	bc5ae <_strtod_l+0x8f6>
   bc55c:	9b04      	ldr	r3, [sp, #16]
   bc55e:	4651      	mov	r1, sl
   bc560:	b1eb      	cbz	r3, bc59e <_strtod_l+0x8e6>
   bc562:	4b2d      	ldr	r3, [pc, #180]	; (bc618 <_strtod_l+0x960>)
   bc564:	403b      	ands	r3, r7
   bc566:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc56a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc56e:	d819      	bhi.n	bc5a4 <_strtod_l+0x8ec>
   bc570:	0d1b      	lsrs	r3, r3, #20
   bc572:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc576:	fa02 f303 	lsl.w	r3, r2, r3
   bc57a:	4299      	cmp	r1, r3
   bc57c:	d117      	bne.n	bc5ae <_strtod_l+0x8f6>
   bc57e:	4b29      	ldr	r3, [pc, #164]	; (bc624 <_strtod_l+0x96c>)
   bc580:	429f      	cmp	r7, r3
   bc582:	d102      	bne.n	bc58a <_strtod_l+0x8d2>
   bc584:	3101      	adds	r1, #1
   bc586:	f43f addf 	beq.w	bc148 <_strtod_l+0x490>
   bc58a:	4b23      	ldr	r3, [pc, #140]	; (bc618 <_strtod_l+0x960>)
   bc58c:	403b      	ands	r3, r7
   bc58e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bc592:	f04f 0a00 	mov.w	sl, #0
   bc596:	9b04      	ldr	r3, [sp, #16]
   bc598:	2b00      	cmp	r3, #0
   bc59a:	d1a4      	bne.n	bc4e6 <_strtod_l+0x82e>
   bc59c:	e5de      	b.n	bc15c <_strtod_l+0x4a4>
   bc59e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc5a2:	e7ea      	b.n	bc57a <_strtod_l+0x8c2>
   bc5a4:	4613      	mov	r3, r2
   bc5a6:	e7e8      	b.n	bc57a <_strtod_l+0x8c2>
   bc5a8:	ea53 030a 	orrs.w	r3, r3, sl
   bc5ac:	d08c      	beq.n	bc4c8 <_strtod_l+0x810>
   bc5ae:	9b08      	ldr	r3, [sp, #32]
   bc5b0:	b1db      	cbz	r3, bc5ea <_strtod_l+0x932>
   bc5b2:	423b      	tst	r3, r7
   bc5b4:	d0ef      	beq.n	bc596 <_strtod_l+0x8de>
   bc5b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc5b8:	9a04      	ldr	r2, [sp, #16]
   bc5ba:	4650      	mov	r0, sl
   bc5bc:	4659      	mov	r1, fp
   bc5be:	b1c3      	cbz	r3, bc5f2 <_strtod_l+0x93a>
   bc5c0:	f7ff fb5d 	bl	bbc7e <sulp>
   bc5c4:	4602      	mov	r2, r0
   bc5c6:	460b      	mov	r3, r1
   bc5c8:	ec51 0b18 	vmov	r0, r1, d8
   bc5cc:	f7f7 fd2e 	bl	b402c <__adddf3>
   bc5d0:	4682      	mov	sl, r0
   bc5d2:	468b      	mov	fp, r1
   bc5d4:	e7df      	b.n	bc596 <_strtod_l+0x8de>
   bc5d6:	4013      	ands	r3, r2
   bc5d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bc5dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bc5e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bc5e4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc5e8:	e7d5      	b.n	bc596 <_strtod_l+0x8de>
   bc5ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc5ec:	ea13 0f0a 	tst.w	r3, sl
   bc5f0:	e7e0      	b.n	bc5b4 <_strtod_l+0x8fc>
   bc5f2:	f7ff fb44 	bl	bbc7e <sulp>
   bc5f6:	4602      	mov	r2, r0
   bc5f8:	460b      	mov	r3, r1
   bc5fa:	ec51 0b18 	vmov	r0, r1, d8
   bc5fe:	f7f7 fd13 	bl	b4028 <__aeabi_dsub>
   bc602:	2200      	movs	r2, #0
   bc604:	2300      	movs	r3, #0
   bc606:	4682      	mov	sl, r0
   bc608:	468b      	mov	fp, r1
   bc60a:	f7f8 f92d 	bl	b4868 <__aeabi_dcmpeq>
   bc60e:	2800      	cmp	r0, #0
   bc610:	d0c1      	beq.n	bc596 <_strtod_l+0x8de>
   bc612:	e611      	b.n	bc238 <_strtod_l+0x580>
   bc614:	fffffc02 	.word	0xfffffc02
   bc618:	7ff00000 	.word	0x7ff00000
   bc61c:	39500000 	.word	0x39500000
   bc620:	000fffff 	.word	0x000fffff
   bc624:	7fefffff 	.word	0x7fefffff
   bc628:	000be660 	.word	0x000be660
   bc62c:	4631      	mov	r1, r6
   bc62e:	4628      	mov	r0, r5
   bc630:	f001 fa12 	bl	bda58 <__ratio>
   bc634:	ec59 8b10 	vmov	r8, r9, d0
   bc638:	ee10 0a10 	vmov	r0, s0
   bc63c:	2200      	movs	r2, #0
   bc63e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc642:	4649      	mov	r1, r9
   bc644:	f7f8 f924 	bl	b4890 <__aeabi_dcmple>
   bc648:	2800      	cmp	r0, #0
   bc64a:	d07a      	beq.n	bc742 <_strtod_l+0xa8a>
   bc64c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc64e:	2b00      	cmp	r3, #0
   bc650:	d04a      	beq.n	bc6e8 <_strtod_l+0xa30>
   bc652:	4b95      	ldr	r3, [pc, #596]	; (bc8a8 <_strtod_l+0xbf0>)
   bc654:	2200      	movs	r2, #0
   bc656:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc65a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bc8a8 <_strtod_l+0xbf0>
   bc65e:	f04f 0800 	mov.w	r8, #0
   bc662:	4b92      	ldr	r3, [pc, #584]	; (bc8ac <_strtod_l+0xbf4>)
   bc664:	403b      	ands	r3, r7
   bc666:	930d      	str	r3, [sp, #52]	; 0x34
   bc668:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc66a:	4b91      	ldr	r3, [pc, #580]	; (bc8b0 <_strtod_l+0xbf8>)
   bc66c:	429a      	cmp	r2, r3
   bc66e:	f040 80b0 	bne.w	bc7d2 <_strtod_l+0xb1a>
   bc672:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc676:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bc67a:	ec4b ab10 	vmov	d0, sl, fp
   bc67e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc682:	f001 f911 	bl	bd8a8 <__ulp>
   bc686:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc68a:	ec53 2b10 	vmov	r2, r3, d0
   bc68e:	f7f7 fe83 	bl	b4398 <__aeabi_dmul>
   bc692:	4652      	mov	r2, sl
   bc694:	465b      	mov	r3, fp
   bc696:	f7f7 fcc9 	bl	b402c <__adddf3>
   bc69a:	460b      	mov	r3, r1
   bc69c:	4983      	ldr	r1, [pc, #524]	; (bc8ac <_strtod_l+0xbf4>)
   bc69e:	4a85      	ldr	r2, [pc, #532]	; (bc8b4 <_strtod_l+0xbfc>)
   bc6a0:	4019      	ands	r1, r3
   bc6a2:	4291      	cmp	r1, r2
   bc6a4:	4682      	mov	sl, r0
   bc6a6:	d960      	bls.n	bc76a <_strtod_l+0xab2>
   bc6a8:	ee18 3a90 	vmov	r3, s17
   bc6ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bc6b0:	4293      	cmp	r3, r2
   bc6b2:	d104      	bne.n	bc6be <_strtod_l+0xa06>
   bc6b4:	ee18 3a10 	vmov	r3, s16
   bc6b8:	3301      	adds	r3, #1
   bc6ba:	f43f ad45 	beq.w	bc148 <_strtod_l+0x490>
   bc6be:	f8df b200 	ldr.w	fp, [pc, #512]	; bc8c0 <_strtod_l+0xc08>
   bc6c2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc6c6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc6c8:	4620      	mov	r0, r4
   bc6ca:	f000 fdbb 	bl	bd244 <_Bfree>
   bc6ce:	9905      	ldr	r1, [sp, #20]
   bc6d0:	4620      	mov	r0, r4
   bc6d2:	f000 fdb7 	bl	bd244 <_Bfree>
   bc6d6:	4631      	mov	r1, r6
   bc6d8:	4620      	mov	r0, r4
   bc6da:	f000 fdb3 	bl	bd244 <_Bfree>
   bc6de:	4629      	mov	r1, r5
   bc6e0:	4620      	mov	r0, r4
   bc6e2:	f000 fdaf 	bl	bd244 <_Bfree>
   bc6e6:	e61a      	b.n	bc31e <_strtod_l+0x666>
   bc6e8:	f1ba 0f00 	cmp.w	sl, #0
   bc6ec:	d11b      	bne.n	bc726 <_strtod_l+0xa6e>
   bc6ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc6f2:	b9f3      	cbnz	r3, bc732 <_strtod_l+0xa7a>
   bc6f4:	4b6c      	ldr	r3, [pc, #432]	; (bc8a8 <_strtod_l+0xbf0>)
   bc6f6:	2200      	movs	r2, #0
   bc6f8:	4640      	mov	r0, r8
   bc6fa:	4649      	mov	r1, r9
   bc6fc:	f7f8 f8be 	bl	b487c <__aeabi_dcmplt>
   bc700:	b9d0      	cbnz	r0, bc738 <_strtod_l+0xa80>
   bc702:	4640      	mov	r0, r8
   bc704:	4649      	mov	r1, r9
   bc706:	4b6c      	ldr	r3, [pc, #432]	; (bc8b8 <_strtod_l+0xc00>)
   bc708:	2200      	movs	r2, #0
   bc70a:	f7f7 fe45 	bl	b4398 <__aeabi_dmul>
   bc70e:	4680      	mov	r8, r0
   bc710:	4689      	mov	r9, r1
   bc712:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bc716:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bc71a:	9315      	str	r3, [sp, #84]	; 0x54
   bc71c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bc720:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc724:	e79d      	b.n	bc662 <_strtod_l+0x9aa>
   bc726:	f1ba 0f01 	cmp.w	sl, #1
   bc72a:	d102      	bne.n	bc732 <_strtod_l+0xa7a>
   bc72c:	2f00      	cmp	r7, #0
   bc72e:	f43f ad83 	beq.w	bc238 <_strtod_l+0x580>
   bc732:	4b62      	ldr	r3, [pc, #392]	; (bc8bc <_strtod_l+0xc04>)
   bc734:	2200      	movs	r2, #0
   bc736:	e78e      	b.n	bc656 <_strtod_l+0x99e>
   bc738:	f8df 917c 	ldr.w	r9, [pc, #380]	; bc8b8 <_strtod_l+0xc00>
   bc73c:	f04f 0800 	mov.w	r8, #0
   bc740:	e7e7      	b.n	bc712 <_strtod_l+0xa5a>
   bc742:	4b5d      	ldr	r3, [pc, #372]	; (bc8b8 <_strtod_l+0xc00>)
   bc744:	4640      	mov	r0, r8
   bc746:	4649      	mov	r1, r9
   bc748:	2200      	movs	r2, #0
   bc74a:	f7f7 fe25 	bl	b4398 <__aeabi_dmul>
   bc74e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc750:	4680      	mov	r8, r0
   bc752:	4689      	mov	r9, r1
   bc754:	b933      	cbnz	r3, bc764 <_strtod_l+0xaac>
   bc756:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc75a:	900e      	str	r0, [sp, #56]	; 0x38
   bc75c:	930f      	str	r3, [sp, #60]	; 0x3c
   bc75e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bc762:	e7dd      	b.n	bc720 <_strtod_l+0xa68>
   bc764:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bc768:	e7f9      	b.n	bc75e <_strtod_l+0xaa6>
   bc76a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bc76e:	9b04      	ldr	r3, [sp, #16]
   bc770:	2b00      	cmp	r3, #0
   bc772:	d1a8      	bne.n	bc6c6 <_strtod_l+0xa0e>
   bc774:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc778:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc77a:	0d1b      	lsrs	r3, r3, #20
   bc77c:	051b      	lsls	r3, r3, #20
   bc77e:	429a      	cmp	r2, r3
   bc780:	d1a1      	bne.n	bc6c6 <_strtod_l+0xa0e>
   bc782:	4640      	mov	r0, r8
   bc784:	4649      	mov	r1, r9
   bc786:	f7f8 faeb 	bl	b4d60 <__aeabi_d2lz>
   bc78a:	f7f7 fdd7 	bl	b433c <__aeabi_l2d>
   bc78e:	4602      	mov	r2, r0
   bc790:	460b      	mov	r3, r1
   bc792:	4640      	mov	r0, r8
   bc794:	4649      	mov	r1, r9
   bc796:	f7f7 fc47 	bl	b4028 <__aeabi_dsub>
   bc79a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc79c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc7a0:	ea43 030a 	orr.w	r3, r3, sl
   bc7a4:	4313      	orrs	r3, r2
   bc7a6:	4680      	mov	r8, r0
   bc7a8:	4689      	mov	r9, r1
   bc7aa:	d055      	beq.n	bc858 <_strtod_l+0xba0>
   bc7ac:	a336      	add	r3, pc, #216	; (adr r3, bc888 <_strtod_l+0xbd0>)
   bc7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc7b2:	f7f8 f863 	bl	b487c <__aeabi_dcmplt>
   bc7b6:	2800      	cmp	r0, #0
   bc7b8:	f47f acd0 	bne.w	bc15c <_strtod_l+0x4a4>
   bc7bc:	a334      	add	r3, pc, #208	; (adr r3, bc890 <_strtod_l+0xbd8>)
   bc7be:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc7c2:	4640      	mov	r0, r8
   bc7c4:	4649      	mov	r1, r9
   bc7c6:	f7f8 f877 	bl	b48b8 <__aeabi_dcmpgt>
   bc7ca:	2800      	cmp	r0, #0
   bc7cc:	f43f af7b 	beq.w	bc6c6 <_strtod_l+0xa0e>
   bc7d0:	e4c4      	b.n	bc15c <_strtod_l+0x4a4>
   bc7d2:	9b04      	ldr	r3, [sp, #16]
   bc7d4:	b333      	cbz	r3, bc824 <_strtod_l+0xb6c>
   bc7d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc7d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc7dc:	d822      	bhi.n	bc824 <_strtod_l+0xb6c>
   bc7de:	a32e      	add	r3, pc, #184	; (adr r3, bc898 <_strtod_l+0xbe0>)
   bc7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc7e4:	4640      	mov	r0, r8
   bc7e6:	4649      	mov	r1, r9
   bc7e8:	f7f8 f852 	bl	b4890 <__aeabi_dcmple>
   bc7ec:	b1a0      	cbz	r0, bc818 <_strtod_l+0xb60>
   bc7ee:	4649      	mov	r1, r9
   bc7f0:	4640      	mov	r0, r8
   bc7f2:	f7f8 f893 	bl	b491c <__aeabi_d2uiz>
   bc7f6:	2801      	cmp	r0, #1
   bc7f8:	bf38      	it	cc
   bc7fa:	2001      	movcc	r0, #1
   bc7fc:	f7f7 fd52 	bl	b42a4 <__aeabi_ui2d>
   bc800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc802:	4680      	mov	r8, r0
   bc804:	4689      	mov	r9, r1
   bc806:	bb23      	cbnz	r3, bc852 <_strtod_l+0xb9a>
   bc808:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc80c:	9010      	str	r0, [sp, #64]	; 0x40
   bc80e:	9311      	str	r3, [sp, #68]	; 0x44
   bc810:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bc814:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc818:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc81a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc81c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bc820:	1a9b      	subs	r3, r3, r2
   bc822:	9309      	str	r3, [sp, #36]	; 0x24
   bc824:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc828:	eeb0 0a48 	vmov.f32	s0, s16
   bc82c:	eef0 0a68 	vmov.f32	s1, s17
   bc830:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc834:	f001 f838 	bl	bd8a8 <__ulp>
   bc838:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc83c:	ec53 2b10 	vmov	r2, r3, d0
   bc840:	f7f7 fdaa 	bl	b4398 <__aeabi_dmul>
   bc844:	ec53 2b18 	vmov	r2, r3, d8
   bc848:	f7f7 fbf0 	bl	b402c <__adddf3>
   bc84c:	4682      	mov	sl, r0
   bc84e:	468b      	mov	fp, r1
   bc850:	e78d      	b.n	bc76e <_strtod_l+0xab6>
   bc852:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bc856:	e7db      	b.n	bc810 <_strtod_l+0xb58>
   bc858:	a311      	add	r3, pc, #68	; (adr r3, bc8a0 <_strtod_l+0xbe8>)
   bc85a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc85e:	f7f8 f80d 	bl	b487c <__aeabi_dcmplt>
   bc862:	e7b2      	b.n	bc7ca <_strtod_l+0xb12>
   bc864:	2300      	movs	r3, #0
   bc866:	930a      	str	r3, [sp, #40]	; 0x28
   bc868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bc86a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc86c:	6013      	str	r3, [r2, #0]
   bc86e:	f7ff ba6b 	b.w	bbd48 <_strtod_l+0x90>
   bc872:	2a65      	cmp	r2, #101	; 0x65
   bc874:	f43f ab5f 	beq.w	bbf36 <_strtod_l+0x27e>
   bc878:	2a45      	cmp	r2, #69	; 0x45
   bc87a:	f43f ab5c 	beq.w	bbf36 <_strtod_l+0x27e>
   bc87e:	2301      	movs	r3, #1
   bc880:	f7ff bb94 	b.w	bbfac <_strtod_l+0x2f4>
   bc884:	f3af 8000 	nop.w
   bc888:	94a03595 	.word	0x94a03595
   bc88c:	3fdfffff 	.word	0x3fdfffff
   bc890:	35afe535 	.word	0x35afe535
   bc894:	3fe00000 	.word	0x3fe00000
   bc898:	ffc00000 	.word	0xffc00000
   bc89c:	41dfffff 	.word	0x41dfffff
   bc8a0:	94a03595 	.word	0x94a03595
   bc8a4:	3fcfffff 	.word	0x3fcfffff
   bc8a8:	3ff00000 	.word	0x3ff00000
   bc8ac:	7ff00000 	.word	0x7ff00000
   bc8b0:	7fe00000 	.word	0x7fe00000
   bc8b4:	7c9fffff 	.word	0x7c9fffff
   bc8b8:	3fe00000 	.word	0x3fe00000
   bc8bc:	bff00000 	.word	0xbff00000
   bc8c0:	7fefffff 	.word	0x7fefffff

000bc8c4 <strtod>:
   bc8c4:	460a      	mov	r2, r1
   bc8c6:	4601      	mov	r1, r0
   bc8c8:	4802      	ldr	r0, [pc, #8]	; (bc8d4 <strtod+0x10>)
   bc8ca:	4b03      	ldr	r3, [pc, #12]	; (bc8d8 <strtod+0x14>)
   bc8cc:	6800      	ldr	r0, [r0, #0]
   bc8ce:	f7ff b9f3 	b.w	bbcb8 <_strtod_l>
   bc8d2:	bf00      	nop
   bc8d4:	2003e45c 	.word	0x2003e45c
   bc8d8:	2003e4c8 	.word	0x2003e4c8

000bc8dc <_strtol_l.constprop.0>:
   bc8dc:	2b01      	cmp	r3, #1
   bc8de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc8e2:	d001      	beq.n	bc8e8 <_strtol_l.constprop.0+0xc>
   bc8e4:	2b24      	cmp	r3, #36	; 0x24
   bc8e6:	d906      	bls.n	bc8f6 <_strtol_l.constprop.0+0x1a>
   bc8e8:	f7fa ff72 	bl	b77d0 <__errno>
   bc8ec:	2316      	movs	r3, #22
   bc8ee:	6003      	str	r3, [r0, #0]
   bc8f0:	2000      	movs	r0, #0
   bc8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc8f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc9dc <_strtol_l.constprop.0+0x100>
   bc8fa:	460d      	mov	r5, r1
   bc8fc:	462e      	mov	r6, r5
   bc8fe:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc902:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc906:	f017 0708 	ands.w	r7, r7, #8
   bc90a:	d1f7      	bne.n	bc8fc <_strtol_l.constprop.0+0x20>
   bc90c:	2c2d      	cmp	r4, #45	; 0x2d
   bc90e:	d132      	bne.n	bc976 <_strtol_l.constprop.0+0x9a>
   bc910:	782c      	ldrb	r4, [r5, #0]
   bc912:	2701      	movs	r7, #1
   bc914:	1cb5      	adds	r5, r6, #2
   bc916:	2b00      	cmp	r3, #0
   bc918:	d05b      	beq.n	bc9d2 <_strtol_l.constprop.0+0xf6>
   bc91a:	2b10      	cmp	r3, #16
   bc91c:	d109      	bne.n	bc932 <_strtol_l.constprop.0+0x56>
   bc91e:	2c30      	cmp	r4, #48	; 0x30
   bc920:	d107      	bne.n	bc932 <_strtol_l.constprop.0+0x56>
   bc922:	782c      	ldrb	r4, [r5, #0]
   bc924:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc928:	2c58      	cmp	r4, #88	; 0x58
   bc92a:	d14d      	bne.n	bc9c8 <_strtol_l.constprop.0+0xec>
   bc92c:	786c      	ldrb	r4, [r5, #1]
   bc92e:	2310      	movs	r3, #16
   bc930:	3502      	adds	r5, #2
   bc932:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc936:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc93a:	f04f 0c00 	mov.w	ip, #0
   bc93e:	fbb8 f9f3 	udiv	r9, r8, r3
   bc942:	4666      	mov	r6, ip
   bc944:	fb03 8a19 	mls	sl, r3, r9, r8
   bc948:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc94c:	f1be 0f09 	cmp.w	lr, #9
   bc950:	d816      	bhi.n	bc980 <_strtol_l.constprop.0+0xa4>
   bc952:	4674      	mov	r4, lr
   bc954:	42a3      	cmp	r3, r4
   bc956:	dd24      	ble.n	bc9a2 <_strtol_l.constprop.0+0xc6>
   bc958:	f1bc 0f00 	cmp.w	ip, #0
   bc95c:	db1e      	blt.n	bc99c <_strtol_l.constprop.0+0xc0>
   bc95e:	45b1      	cmp	r9, r6
   bc960:	d31c      	bcc.n	bc99c <_strtol_l.constprop.0+0xc0>
   bc962:	d101      	bne.n	bc968 <_strtol_l.constprop.0+0x8c>
   bc964:	45a2      	cmp	sl, r4
   bc966:	db19      	blt.n	bc99c <_strtol_l.constprop.0+0xc0>
   bc968:	fb06 4603 	mla	r6, r6, r3, r4
   bc96c:	f04f 0c01 	mov.w	ip, #1
   bc970:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc974:	e7e8      	b.n	bc948 <_strtol_l.constprop.0+0x6c>
   bc976:	2c2b      	cmp	r4, #43	; 0x2b
   bc978:	bf04      	itt	eq
   bc97a:	782c      	ldrbeq	r4, [r5, #0]
   bc97c:	1cb5      	addeq	r5, r6, #2
   bc97e:	e7ca      	b.n	bc916 <_strtol_l.constprop.0+0x3a>
   bc980:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc984:	f1be 0f19 	cmp.w	lr, #25
   bc988:	d801      	bhi.n	bc98e <_strtol_l.constprop.0+0xb2>
   bc98a:	3c37      	subs	r4, #55	; 0x37
   bc98c:	e7e2      	b.n	bc954 <_strtol_l.constprop.0+0x78>
   bc98e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc992:	f1be 0f19 	cmp.w	lr, #25
   bc996:	d804      	bhi.n	bc9a2 <_strtol_l.constprop.0+0xc6>
   bc998:	3c57      	subs	r4, #87	; 0x57
   bc99a:	e7db      	b.n	bc954 <_strtol_l.constprop.0+0x78>
   bc99c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc9a0:	e7e6      	b.n	bc970 <_strtol_l.constprop.0+0x94>
   bc9a2:	f1bc 0f00 	cmp.w	ip, #0
   bc9a6:	da05      	bge.n	bc9b4 <_strtol_l.constprop.0+0xd8>
   bc9a8:	2322      	movs	r3, #34	; 0x22
   bc9aa:	6003      	str	r3, [r0, #0]
   bc9ac:	4646      	mov	r6, r8
   bc9ae:	b942      	cbnz	r2, bc9c2 <_strtol_l.constprop.0+0xe6>
   bc9b0:	4630      	mov	r0, r6
   bc9b2:	e79e      	b.n	bc8f2 <_strtol_l.constprop.0+0x16>
   bc9b4:	b107      	cbz	r7, bc9b8 <_strtol_l.constprop.0+0xdc>
   bc9b6:	4276      	negs	r6, r6
   bc9b8:	2a00      	cmp	r2, #0
   bc9ba:	d0f9      	beq.n	bc9b0 <_strtol_l.constprop.0+0xd4>
   bc9bc:	f1bc 0f00 	cmp.w	ip, #0
   bc9c0:	d000      	beq.n	bc9c4 <_strtol_l.constprop.0+0xe8>
   bc9c2:	1e69      	subs	r1, r5, #1
   bc9c4:	6011      	str	r1, [r2, #0]
   bc9c6:	e7f3      	b.n	bc9b0 <_strtol_l.constprop.0+0xd4>
   bc9c8:	2430      	movs	r4, #48	; 0x30
   bc9ca:	2b00      	cmp	r3, #0
   bc9cc:	d1b1      	bne.n	bc932 <_strtol_l.constprop.0+0x56>
   bc9ce:	2308      	movs	r3, #8
   bc9d0:	e7af      	b.n	bc932 <_strtol_l.constprop.0+0x56>
   bc9d2:	2c30      	cmp	r4, #48	; 0x30
   bc9d4:	d0a5      	beq.n	bc922 <_strtol_l.constprop.0+0x46>
   bc9d6:	230a      	movs	r3, #10
   bc9d8:	e7ab      	b.n	bc932 <_strtol_l.constprop.0+0x56>
   bc9da:	bf00      	nop
   bc9dc:	000be689 	.word	0x000be689

000bc9e0 <strtol>:
   bc9e0:	4613      	mov	r3, r2
   bc9e2:	460a      	mov	r2, r1
   bc9e4:	4601      	mov	r1, r0
   bc9e6:	4802      	ldr	r0, [pc, #8]	; (bc9f0 <strtol+0x10>)
   bc9e8:	6800      	ldr	r0, [r0, #0]
   bc9ea:	f7ff bf77 	b.w	bc8dc <_strtol_l.constprop.0>
   bc9ee:	bf00      	nop
   bc9f0:	2003e45c 	.word	0x2003e45c

000bc9f4 <__register_exitproc>:
   bc9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc9f8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bcab4 <__register_exitproc+0xc0>
   bc9fc:	4606      	mov	r6, r0
   bc9fe:	f8d8 0000 	ldr.w	r0, [r8]
   bca02:	461f      	mov	r7, r3
   bca04:	460d      	mov	r5, r1
   bca06:	4691      	mov	r9, r2
   bca08:	f000 fbc6 	bl	bd198 <__retarget_lock_acquire_recursive>
   bca0c:	4b25      	ldr	r3, [pc, #148]	; (bcaa4 <__register_exitproc+0xb0>)
   bca0e:	681c      	ldr	r4, [r3, #0]
   bca10:	b934      	cbnz	r4, bca20 <__register_exitproc+0x2c>
   bca12:	4c25      	ldr	r4, [pc, #148]	; (bcaa8 <__register_exitproc+0xb4>)
   bca14:	601c      	str	r4, [r3, #0]
   bca16:	4b25      	ldr	r3, [pc, #148]	; (bcaac <__register_exitproc+0xb8>)
   bca18:	b113      	cbz	r3, bca20 <__register_exitproc+0x2c>
   bca1a:	681b      	ldr	r3, [r3, #0]
   bca1c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bca20:	6863      	ldr	r3, [r4, #4]
   bca22:	2b1f      	cmp	r3, #31
   bca24:	dd07      	ble.n	bca36 <__register_exitproc+0x42>
   bca26:	f8d8 0000 	ldr.w	r0, [r8]
   bca2a:	f000 fbb7 	bl	bd19c <__retarget_lock_release_recursive>
   bca2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bca32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bca36:	b34e      	cbz	r6, bca8c <__register_exitproc+0x98>
   bca38:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bca3c:	b988      	cbnz	r0, bca62 <__register_exitproc+0x6e>
   bca3e:	4b1c      	ldr	r3, [pc, #112]	; (bcab0 <__register_exitproc+0xbc>)
   bca40:	b923      	cbnz	r3, bca4c <__register_exitproc+0x58>
   bca42:	f8d8 0000 	ldr.w	r0, [r8]
   bca46:	f000 fba8 	bl	bd19a <__retarget_lock_release>
   bca4a:	e7f0      	b.n	bca2e <__register_exitproc+0x3a>
   bca4c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bca50:	f7fa fe86 	bl	b7760 <malloc>
   bca54:	2800      	cmp	r0, #0
   bca56:	d0f4      	beq.n	bca42 <__register_exitproc+0x4e>
   bca58:	2300      	movs	r3, #0
   bca5a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bca5e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bca62:	6863      	ldr	r3, [r4, #4]
   bca64:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bca68:	2201      	movs	r2, #1
   bca6a:	409a      	lsls	r2, r3
   bca6c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bca70:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bca74:	4313      	orrs	r3, r2
   bca76:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bca7a:	2e02      	cmp	r6, #2
   bca7c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bca80:	bf02      	ittt	eq
   bca82:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bca86:	4313      	orreq	r3, r2
   bca88:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bca8c:	6863      	ldr	r3, [r4, #4]
   bca8e:	f8d8 0000 	ldr.w	r0, [r8]
   bca92:	1c5a      	adds	r2, r3, #1
   bca94:	3302      	adds	r3, #2
   bca96:	6062      	str	r2, [r4, #4]
   bca98:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bca9c:	f000 fb7e 	bl	bd19c <__retarget_lock_release_recursive>
   bcaa0:	2000      	movs	r0, #0
   bcaa2:	e7c6      	b.n	bca32 <__register_exitproc+0x3e>
   bcaa4:	2003e7f4 	.word	0x2003e7f4
   bcaa8:	2003e768 	.word	0x2003e768
   bcaac:	00000000 	.word	0x00000000
   bcab0:	000b7761 	.word	0x000b7761
   bcab4:	2003e4c0 	.word	0x2003e4c0

000bcab8 <rshift>:
   bcab8:	6903      	ldr	r3, [r0, #16]
   bcaba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bcabe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcac2:	ea4f 1261 	mov.w	r2, r1, asr #5
   bcac6:	f100 0414 	add.w	r4, r0, #20
   bcaca:	dd45      	ble.n	bcb58 <rshift+0xa0>
   bcacc:	f011 011f 	ands.w	r1, r1, #31
   bcad0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bcad4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bcad8:	d10c      	bne.n	bcaf4 <rshift+0x3c>
   bcada:	f100 0710 	add.w	r7, r0, #16
   bcade:	4629      	mov	r1, r5
   bcae0:	42b1      	cmp	r1, r6
   bcae2:	d334      	bcc.n	bcb4e <rshift+0x96>
   bcae4:	1a9b      	subs	r3, r3, r2
   bcae6:	009b      	lsls	r3, r3, #2
   bcae8:	1eea      	subs	r2, r5, #3
   bcaea:	4296      	cmp	r6, r2
   bcaec:	bf38      	it	cc
   bcaee:	2300      	movcc	r3, #0
   bcaf0:	4423      	add	r3, r4
   bcaf2:	e015      	b.n	bcb20 <rshift+0x68>
   bcaf4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bcaf8:	f1c1 0820 	rsb	r8, r1, #32
   bcafc:	40cf      	lsrs	r7, r1
   bcafe:	f105 0e04 	add.w	lr, r5, #4
   bcb02:	46a1      	mov	r9, r4
   bcb04:	4576      	cmp	r6, lr
   bcb06:	46f4      	mov	ip, lr
   bcb08:	d815      	bhi.n	bcb36 <rshift+0x7e>
   bcb0a:	1a9a      	subs	r2, r3, r2
   bcb0c:	0092      	lsls	r2, r2, #2
   bcb0e:	3a04      	subs	r2, #4
   bcb10:	3501      	adds	r5, #1
   bcb12:	42ae      	cmp	r6, r5
   bcb14:	bf38      	it	cc
   bcb16:	2200      	movcc	r2, #0
   bcb18:	18a3      	adds	r3, r4, r2
   bcb1a:	50a7      	str	r7, [r4, r2]
   bcb1c:	b107      	cbz	r7, bcb20 <rshift+0x68>
   bcb1e:	3304      	adds	r3, #4
   bcb20:	1b1a      	subs	r2, r3, r4
   bcb22:	42a3      	cmp	r3, r4
   bcb24:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bcb28:	bf08      	it	eq
   bcb2a:	2300      	moveq	r3, #0
   bcb2c:	6102      	str	r2, [r0, #16]
   bcb2e:	bf08      	it	eq
   bcb30:	6143      	streq	r3, [r0, #20]
   bcb32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bcb36:	f8dc c000 	ldr.w	ip, [ip]
   bcb3a:	fa0c fc08 	lsl.w	ip, ip, r8
   bcb3e:	ea4c 0707 	orr.w	r7, ip, r7
   bcb42:	f849 7b04 	str.w	r7, [r9], #4
   bcb46:	f85e 7b04 	ldr.w	r7, [lr], #4
   bcb4a:	40cf      	lsrs	r7, r1
   bcb4c:	e7da      	b.n	bcb04 <rshift+0x4c>
   bcb4e:	f851 cb04 	ldr.w	ip, [r1], #4
   bcb52:	f847 cf04 	str.w	ip, [r7, #4]!
   bcb56:	e7c3      	b.n	bcae0 <rshift+0x28>
   bcb58:	4623      	mov	r3, r4
   bcb5a:	e7e1      	b.n	bcb20 <rshift+0x68>

000bcb5c <__hexdig_fun>:
   bcb5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bcb60:	2b09      	cmp	r3, #9
   bcb62:	d802      	bhi.n	bcb6a <__hexdig_fun+0xe>
   bcb64:	3820      	subs	r0, #32
   bcb66:	b2c0      	uxtb	r0, r0
   bcb68:	4770      	bx	lr
   bcb6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bcb6e:	2b05      	cmp	r3, #5
   bcb70:	d801      	bhi.n	bcb76 <__hexdig_fun+0x1a>
   bcb72:	3847      	subs	r0, #71	; 0x47
   bcb74:	e7f7      	b.n	bcb66 <__hexdig_fun+0xa>
   bcb76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bcb7a:	2b05      	cmp	r3, #5
   bcb7c:	d801      	bhi.n	bcb82 <__hexdig_fun+0x26>
   bcb7e:	3827      	subs	r0, #39	; 0x27
   bcb80:	e7f1      	b.n	bcb66 <__hexdig_fun+0xa>
   bcb82:	2000      	movs	r0, #0
   bcb84:	4770      	bx	lr
	...

000bcb88 <__gethex>:
   bcb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcb8c:	ed2d 8b02 	vpush	{d8}
   bcb90:	b089      	sub	sp, #36	; 0x24
   bcb92:	ee08 0a10 	vmov	s16, r0
   bcb96:	9304      	str	r3, [sp, #16]
   bcb98:	4bb4      	ldr	r3, [pc, #720]	; (bce6c <__gethex+0x2e4>)
   bcb9a:	681b      	ldr	r3, [r3, #0]
   bcb9c:	9301      	str	r3, [sp, #4]
   bcb9e:	4618      	mov	r0, r3
   bcba0:	468b      	mov	fp, r1
   bcba2:	4690      	mov	r8, r2
   bcba4:	f7f8 f8d4 	bl	b4d50 <strlen>
   bcba8:	9b01      	ldr	r3, [sp, #4]
   bcbaa:	f8db 2000 	ldr.w	r2, [fp]
   bcbae:	4403      	add	r3, r0
   bcbb0:	4682      	mov	sl, r0
   bcbb2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bcbb6:	9305      	str	r3, [sp, #20]
   bcbb8:	1c93      	adds	r3, r2, #2
   bcbba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bcbbe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bcbc2:	32fe      	adds	r2, #254	; 0xfe
   bcbc4:	18d1      	adds	r1, r2, r3
   bcbc6:	461f      	mov	r7, r3
   bcbc8:	f813 0b01 	ldrb.w	r0, [r3], #1
   bcbcc:	9100      	str	r1, [sp, #0]
   bcbce:	2830      	cmp	r0, #48	; 0x30
   bcbd0:	d0f8      	beq.n	bcbc4 <__gethex+0x3c>
   bcbd2:	f7ff ffc3 	bl	bcb5c <__hexdig_fun>
   bcbd6:	4604      	mov	r4, r0
   bcbd8:	2800      	cmp	r0, #0
   bcbda:	d13a      	bne.n	bcc52 <__gethex+0xca>
   bcbdc:	9901      	ldr	r1, [sp, #4]
   bcbde:	4652      	mov	r2, sl
   bcbe0:	4638      	mov	r0, r7
   bcbe2:	f7ff f80e 	bl	bbc02 <strncmp>
   bcbe6:	4605      	mov	r5, r0
   bcbe8:	2800      	cmp	r0, #0
   bcbea:	d168      	bne.n	bccbe <__gethex+0x136>
   bcbec:	f817 000a 	ldrb.w	r0, [r7, sl]
   bcbf0:	eb07 060a 	add.w	r6, r7, sl
   bcbf4:	f7ff ffb2 	bl	bcb5c <__hexdig_fun>
   bcbf8:	2800      	cmp	r0, #0
   bcbfa:	d062      	beq.n	bccc2 <__gethex+0x13a>
   bcbfc:	4633      	mov	r3, r6
   bcbfe:	7818      	ldrb	r0, [r3, #0]
   bcc00:	2830      	cmp	r0, #48	; 0x30
   bcc02:	461f      	mov	r7, r3
   bcc04:	f103 0301 	add.w	r3, r3, #1
   bcc08:	d0f9      	beq.n	bcbfe <__gethex+0x76>
   bcc0a:	f7ff ffa7 	bl	bcb5c <__hexdig_fun>
   bcc0e:	2301      	movs	r3, #1
   bcc10:	fab0 f480 	clz	r4, r0
   bcc14:	0964      	lsrs	r4, r4, #5
   bcc16:	4635      	mov	r5, r6
   bcc18:	9300      	str	r3, [sp, #0]
   bcc1a:	463a      	mov	r2, r7
   bcc1c:	4616      	mov	r6, r2
   bcc1e:	3201      	adds	r2, #1
   bcc20:	7830      	ldrb	r0, [r6, #0]
   bcc22:	f7ff ff9b 	bl	bcb5c <__hexdig_fun>
   bcc26:	2800      	cmp	r0, #0
   bcc28:	d1f8      	bne.n	bcc1c <__gethex+0x94>
   bcc2a:	9901      	ldr	r1, [sp, #4]
   bcc2c:	4652      	mov	r2, sl
   bcc2e:	4630      	mov	r0, r6
   bcc30:	f7fe ffe7 	bl	bbc02 <strncmp>
   bcc34:	b980      	cbnz	r0, bcc58 <__gethex+0xd0>
   bcc36:	b94d      	cbnz	r5, bcc4c <__gethex+0xc4>
   bcc38:	eb06 050a 	add.w	r5, r6, sl
   bcc3c:	462a      	mov	r2, r5
   bcc3e:	4616      	mov	r6, r2
   bcc40:	3201      	adds	r2, #1
   bcc42:	7830      	ldrb	r0, [r6, #0]
   bcc44:	f7ff ff8a 	bl	bcb5c <__hexdig_fun>
   bcc48:	2800      	cmp	r0, #0
   bcc4a:	d1f8      	bne.n	bcc3e <__gethex+0xb6>
   bcc4c:	1bad      	subs	r5, r5, r6
   bcc4e:	00ad      	lsls	r5, r5, #2
   bcc50:	e004      	b.n	bcc5c <__gethex+0xd4>
   bcc52:	2400      	movs	r4, #0
   bcc54:	4625      	mov	r5, r4
   bcc56:	e7e0      	b.n	bcc1a <__gethex+0x92>
   bcc58:	2d00      	cmp	r5, #0
   bcc5a:	d1f7      	bne.n	bcc4c <__gethex+0xc4>
   bcc5c:	7833      	ldrb	r3, [r6, #0]
   bcc5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bcc62:	2b50      	cmp	r3, #80	; 0x50
   bcc64:	d13b      	bne.n	bccde <__gethex+0x156>
   bcc66:	7873      	ldrb	r3, [r6, #1]
   bcc68:	2b2b      	cmp	r3, #43	; 0x2b
   bcc6a:	d02c      	beq.n	bccc6 <__gethex+0x13e>
   bcc6c:	2b2d      	cmp	r3, #45	; 0x2d
   bcc6e:	d02e      	beq.n	bccce <__gethex+0x146>
   bcc70:	1c71      	adds	r1, r6, #1
   bcc72:	f04f 0900 	mov.w	r9, #0
   bcc76:	7808      	ldrb	r0, [r1, #0]
   bcc78:	f7ff ff70 	bl	bcb5c <__hexdig_fun>
   bcc7c:	1e43      	subs	r3, r0, #1
   bcc7e:	b2db      	uxtb	r3, r3
   bcc80:	2b18      	cmp	r3, #24
   bcc82:	d82c      	bhi.n	bccde <__gethex+0x156>
   bcc84:	f1a0 0210 	sub.w	r2, r0, #16
   bcc88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bcc8c:	f7ff ff66 	bl	bcb5c <__hexdig_fun>
   bcc90:	1e43      	subs	r3, r0, #1
   bcc92:	b2db      	uxtb	r3, r3
   bcc94:	2b18      	cmp	r3, #24
   bcc96:	d91d      	bls.n	bccd4 <__gethex+0x14c>
   bcc98:	f1b9 0f00 	cmp.w	r9, #0
   bcc9c:	d000      	beq.n	bcca0 <__gethex+0x118>
   bcc9e:	4252      	negs	r2, r2
   bcca0:	4415      	add	r5, r2
   bcca2:	f8cb 1000 	str.w	r1, [fp]
   bcca6:	b1e4      	cbz	r4, bcce2 <__gethex+0x15a>
   bcca8:	9b00      	ldr	r3, [sp, #0]
   bccaa:	2b00      	cmp	r3, #0
   bccac:	bf14      	ite	ne
   bccae:	2700      	movne	r7, #0
   bccb0:	2706      	moveq	r7, #6
   bccb2:	4638      	mov	r0, r7
   bccb4:	b009      	add	sp, #36	; 0x24
   bccb6:	ecbd 8b02 	vpop	{d8}
   bccba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bccbe:	463e      	mov	r6, r7
   bccc0:	4625      	mov	r5, r4
   bccc2:	2401      	movs	r4, #1
   bccc4:	e7ca      	b.n	bcc5c <__gethex+0xd4>
   bccc6:	f04f 0900 	mov.w	r9, #0
   bccca:	1cb1      	adds	r1, r6, #2
   bcccc:	e7d3      	b.n	bcc76 <__gethex+0xee>
   bccce:	f04f 0901 	mov.w	r9, #1
   bccd2:	e7fa      	b.n	bccca <__gethex+0x142>
   bccd4:	230a      	movs	r3, #10
   bccd6:	fb03 0202 	mla	r2, r3, r2, r0
   bccda:	3a10      	subs	r2, #16
   bccdc:	e7d4      	b.n	bcc88 <__gethex+0x100>
   bccde:	4631      	mov	r1, r6
   bcce0:	e7df      	b.n	bcca2 <__gethex+0x11a>
   bcce2:	1bf3      	subs	r3, r6, r7
   bcce4:	3b01      	subs	r3, #1
   bcce6:	4621      	mov	r1, r4
   bcce8:	2b07      	cmp	r3, #7
   bccea:	dc0b      	bgt.n	bcd04 <__gethex+0x17c>
   bccec:	ee18 0a10 	vmov	r0, s16
   bccf0:	f000 fa68 	bl	bd1c4 <_Balloc>
   bccf4:	4604      	mov	r4, r0
   bccf6:	b940      	cbnz	r0, bcd0a <__gethex+0x182>
   bccf8:	4b5d      	ldr	r3, [pc, #372]	; (bce70 <__gethex+0x2e8>)
   bccfa:	4602      	mov	r2, r0
   bccfc:	21de      	movs	r1, #222	; 0xde
   bccfe:	485d      	ldr	r0, [pc, #372]	; (bce74 <__gethex+0x2ec>)
   bcd00:	f7fa fd6e 	bl	b77e0 <__assert_func>
   bcd04:	3101      	adds	r1, #1
   bcd06:	105b      	asrs	r3, r3, #1
   bcd08:	e7ee      	b.n	bcce8 <__gethex+0x160>
   bcd0a:	f100 0914 	add.w	r9, r0, #20
   bcd0e:	f04f 0b00 	mov.w	fp, #0
   bcd12:	f1ca 0301 	rsb	r3, sl, #1
   bcd16:	f8cd 9008 	str.w	r9, [sp, #8]
   bcd1a:	f8cd b000 	str.w	fp, [sp]
   bcd1e:	9306      	str	r3, [sp, #24]
   bcd20:	42b7      	cmp	r7, r6
   bcd22:	d340      	bcc.n	bcda6 <__gethex+0x21e>
   bcd24:	9802      	ldr	r0, [sp, #8]
   bcd26:	9b00      	ldr	r3, [sp, #0]
   bcd28:	f840 3b04 	str.w	r3, [r0], #4
   bcd2c:	eba0 0009 	sub.w	r0, r0, r9
   bcd30:	1080      	asrs	r0, r0, #2
   bcd32:	0146      	lsls	r6, r0, #5
   bcd34:	6120      	str	r0, [r4, #16]
   bcd36:	4618      	mov	r0, r3
   bcd38:	f000 fb36 	bl	bd3a8 <__hi0bits>
   bcd3c:	1a30      	subs	r0, r6, r0
   bcd3e:	f8d8 6000 	ldr.w	r6, [r8]
   bcd42:	42b0      	cmp	r0, r6
   bcd44:	dd63      	ble.n	bce0e <__gethex+0x286>
   bcd46:	1b87      	subs	r7, r0, r6
   bcd48:	4639      	mov	r1, r7
   bcd4a:	4620      	mov	r0, r4
   bcd4c:	f000 feda 	bl	bdb04 <__any_on>
   bcd50:	4682      	mov	sl, r0
   bcd52:	b1a8      	cbz	r0, bcd80 <__gethex+0x1f8>
   bcd54:	1e7b      	subs	r3, r7, #1
   bcd56:	1159      	asrs	r1, r3, #5
   bcd58:	f003 021f 	and.w	r2, r3, #31
   bcd5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bcd60:	f04f 0a01 	mov.w	sl, #1
   bcd64:	fa0a f202 	lsl.w	r2, sl, r2
   bcd68:	420a      	tst	r2, r1
   bcd6a:	d009      	beq.n	bcd80 <__gethex+0x1f8>
   bcd6c:	4553      	cmp	r3, sl
   bcd6e:	dd05      	ble.n	bcd7c <__gethex+0x1f4>
   bcd70:	1eb9      	subs	r1, r7, #2
   bcd72:	4620      	mov	r0, r4
   bcd74:	f000 fec6 	bl	bdb04 <__any_on>
   bcd78:	2800      	cmp	r0, #0
   bcd7a:	d145      	bne.n	bce08 <__gethex+0x280>
   bcd7c:	f04f 0a02 	mov.w	sl, #2
   bcd80:	4639      	mov	r1, r7
   bcd82:	4620      	mov	r0, r4
   bcd84:	f7ff fe98 	bl	bcab8 <rshift>
   bcd88:	443d      	add	r5, r7
   bcd8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bcd8e:	42ab      	cmp	r3, r5
   bcd90:	da4c      	bge.n	bce2c <__gethex+0x2a4>
   bcd92:	ee18 0a10 	vmov	r0, s16
   bcd96:	4621      	mov	r1, r4
   bcd98:	f000 fa54 	bl	bd244 <_Bfree>
   bcd9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bcd9e:	2300      	movs	r3, #0
   bcda0:	6013      	str	r3, [r2, #0]
   bcda2:	27a3      	movs	r7, #163	; 0xa3
   bcda4:	e785      	b.n	bccb2 <__gethex+0x12a>
   bcda6:	1e73      	subs	r3, r6, #1
   bcda8:	9a05      	ldr	r2, [sp, #20]
   bcdaa:	9303      	str	r3, [sp, #12]
   bcdac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bcdb0:	4293      	cmp	r3, r2
   bcdb2:	d019      	beq.n	bcde8 <__gethex+0x260>
   bcdb4:	f1bb 0f20 	cmp.w	fp, #32
   bcdb8:	d107      	bne.n	bcdca <__gethex+0x242>
   bcdba:	9b02      	ldr	r3, [sp, #8]
   bcdbc:	9a00      	ldr	r2, [sp, #0]
   bcdbe:	f843 2b04 	str.w	r2, [r3], #4
   bcdc2:	9302      	str	r3, [sp, #8]
   bcdc4:	2300      	movs	r3, #0
   bcdc6:	9300      	str	r3, [sp, #0]
   bcdc8:	469b      	mov	fp, r3
   bcdca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bcdce:	f7ff fec5 	bl	bcb5c <__hexdig_fun>
   bcdd2:	9b00      	ldr	r3, [sp, #0]
   bcdd4:	f000 000f 	and.w	r0, r0, #15
   bcdd8:	fa00 f00b 	lsl.w	r0, r0, fp
   bcddc:	4303      	orrs	r3, r0
   bcdde:	9300      	str	r3, [sp, #0]
   bcde0:	f10b 0b04 	add.w	fp, fp, #4
   bcde4:	9b03      	ldr	r3, [sp, #12]
   bcde6:	e00d      	b.n	bce04 <__gethex+0x27c>
   bcde8:	9b03      	ldr	r3, [sp, #12]
   bcdea:	9a06      	ldr	r2, [sp, #24]
   bcdec:	4413      	add	r3, r2
   bcdee:	42bb      	cmp	r3, r7
   bcdf0:	d3e0      	bcc.n	bcdb4 <__gethex+0x22c>
   bcdf2:	4618      	mov	r0, r3
   bcdf4:	9901      	ldr	r1, [sp, #4]
   bcdf6:	9307      	str	r3, [sp, #28]
   bcdf8:	4652      	mov	r2, sl
   bcdfa:	f7fe ff02 	bl	bbc02 <strncmp>
   bcdfe:	9b07      	ldr	r3, [sp, #28]
   bce00:	2800      	cmp	r0, #0
   bce02:	d1d7      	bne.n	bcdb4 <__gethex+0x22c>
   bce04:	461e      	mov	r6, r3
   bce06:	e78b      	b.n	bcd20 <__gethex+0x198>
   bce08:	f04f 0a03 	mov.w	sl, #3
   bce0c:	e7b8      	b.n	bcd80 <__gethex+0x1f8>
   bce0e:	da0a      	bge.n	bce26 <__gethex+0x29e>
   bce10:	1a37      	subs	r7, r6, r0
   bce12:	4621      	mov	r1, r4
   bce14:	ee18 0a10 	vmov	r0, s16
   bce18:	463a      	mov	r2, r7
   bce1a:	f000 fc2f 	bl	bd67c <__lshift>
   bce1e:	1bed      	subs	r5, r5, r7
   bce20:	4604      	mov	r4, r0
   bce22:	f100 0914 	add.w	r9, r0, #20
   bce26:	f04f 0a00 	mov.w	sl, #0
   bce2a:	e7ae      	b.n	bcd8a <__gethex+0x202>
   bce2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bce30:	42a8      	cmp	r0, r5
   bce32:	dd72      	ble.n	bcf1a <__gethex+0x392>
   bce34:	1b45      	subs	r5, r0, r5
   bce36:	42ae      	cmp	r6, r5
   bce38:	dc36      	bgt.n	bcea8 <__gethex+0x320>
   bce3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bce3e:	2b02      	cmp	r3, #2
   bce40:	d02a      	beq.n	bce98 <__gethex+0x310>
   bce42:	2b03      	cmp	r3, #3
   bce44:	d02c      	beq.n	bcea0 <__gethex+0x318>
   bce46:	2b01      	cmp	r3, #1
   bce48:	d11c      	bne.n	bce84 <__gethex+0x2fc>
   bce4a:	42ae      	cmp	r6, r5
   bce4c:	d11a      	bne.n	bce84 <__gethex+0x2fc>
   bce4e:	2e01      	cmp	r6, #1
   bce50:	d112      	bne.n	bce78 <__gethex+0x2f0>
   bce52:	9a04      	ldr	r2, [sp, #16]
   bce54:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bce58:	6013      	str	r3, [r2, #0]
   bce5a:	2301      	movs	r3, #1
   bce5c:	6123      	str	r3, [r4, #16]
   bce5e:	f8c9 3000 	str.w	r3, [r9]
   bce62:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bce64:	2762      	movs	r7, #98	; 0x62
   bce66:	601c      	str	r4, [r3, #0]
   bce68:	e723      	b.n	bccb2 <__gethex+0x12a>
   bce6a:	bf00      	nop
   bce6c:	000be800 	.word	0x000be800
   bce70:	000be789 	.word	0x000be789
   bce74:	000be79a 	.word	0x000be79a
   bce78:	1e71      	subs	r1, r6, #1
   bce7a:	4620      	mov	r0, r4
   bce7c:	f000 fe42 	bl	bdb04 <__any_on>
   bce80:	2800      	cmp	r0, #0
   bce82:	d1e6      	bne.n	bce52 <__gethex+0x2ca>
   bce84:	ee18 0a10 	vmov	r0, s16
   bce88:	4621      	mov	r1, r4
   bce8a:	f000 f9db 	bl	bd244 <_Bfree>
   bce8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bce90:	2300      	movs	r3, #0
   bce92:	6013      	str	r3, [r2, #0]
   bce94:	2750      	movs	r7, #80	; 0x50
   bce96:	e70c      	b.n	bccb2 <__gethex+0x12a>
   bce98:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bce9a:	2b00      	cmp	r3, #0
   bce9c:	d1f2      	bne.n	bce84 <__gethex+0x2fc>
   bce9e:	e7d8      	b.n	bce52 <__gethex+0x2ca>
   bcea0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bcea2:	2b00      	cmp	r3, #0
   bcea4:	d1d5      	bne.n	bce52 <__gethex+0x2ca>
   bcea6:	e7ed      	b.n	bce84 <__gethex+0x2fc>
   bcea8:	1e6f      	subs	r7, r5, #1
   bceaa:	f1ba 0f00 	cmp.w	sl, #0
   bceae:	d131      	bne.n	bcf14 <__gethex+0x38c>
   bceb0:	b127      	cbz	r7, bcebc <__gethex+0x334>
   bceb2:	4639      	mov	r1, r7
   bceb4:	4620      	mov	r0, r4
   bceb6:	f000 fe25 	bl	bdb04 <__any_on>
   bceba:	4682      	mov	sl, r0
   bcebc:	117b      	asrs	r3, r7, #5
   bcebe:	2101      	movs	r1, #1
   bcec0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bcec4:	f007 071f 	and.w	r7, r7, #31
   bcec8:	fa01 f707 	lsl.w	r7, r1, r7
   bcecc:	421f      	tst	r7, r3
   bcece:	4629      	mov	r1, r5
   bced0:	4620      	mov	r0, r4
   bced2:	bf18      	it	ne
   bced4:	f04a 0a02 	orrne.w	sl, sl, #2
   bced8:	1b76      	subs	r6, r6, r5
   bceda:	f7ff fded 	bl	bcab8 <rshift>
   bcede:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bcee2:	2702      	movs	r7, #2
   bcee4:	f1ba 0f00 	cmp.w	sl, #0
   bcee8:	d048      	beq.n	bcf7c <__gethex+0x3f4>
   bceea:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bceee:	2b02      	cmp	r3, #2
   bcef0:	d015      	beq.n	bcf1e <__gethex+0x396>
   bcef2:	2b03      	cmp	r3, #3
   bcef4:	d017      	beq.n	bcf26 <__gethex+0x39e>
   bcef6:	2b01      	cmp	r3, #1
   bcef8:	d109      	bne.n	bcf0e <__gethex+0x386>
   bcefa:	f01a 0f02 	tst.w	sl, #2
   bcefe:	d006      	beq.n	bcf0e <__gethex+0x386>
   bcf00:	f8d9 0000 	ldr.w	r0, [r9]
   bcf04:	ea4a 0a00 	orr.w	sl, sl, r0
   bcf08:	f01a 0f01 	tst.w	sl, #1
   bcf0c:	d10e      	bne.n	bcf2c <__gethex+0x3a4>
   bcf0e:	f047 0710 	orr.w	r7, r7, #16
   bcf12:	e033      	b.n	bcf7c <__gethex+0x3f4>
   bcf14:	f04f 0a01 	mov.w	sl, #1
   bcf18:	e7d0      	b.n	bcebc <__gethex+0x334>
   bcf1a:	2701      	movs	r7, #1
   bcf1c:	e7e2      	b.n	bcee4 <__gethex+0x35c>
   bcf1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bcf20:	f1c3 0301 	rsb	r3, r3, #1
   bcf24:	9315      	str	r3, [sp, #84]	; 0x54
   bcf26:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bcf28:	2b00      	cmp	r3, #0
   bcf2a:	d0f0      	beq.n	bcf0e <__gethex+0x386>
   bcf2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bcf30:	f104 0314 	add.w	r3, r4, #20
   bcf34:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bcf38:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bcf3c:	f04f 0c00 	mov.w	ip, #0
   bcf40:	4618      	mov	r0, r3
   bcf42:	f853 2b04 	ldr.w	r2, [r3], #4
   bcf46:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bcf4a:	d01c      	beq.n	bcf86 <__gethex+0x3fe>
   bcf4c:	3201      	adds	r2, #1
   bcf4e:	6002      	str	r2, [r0, #0]
   bcf50:	2f02      	cmp	r7, #2
   bcf52:	f104 0314 	add.w	r3, r4, #20
   bcf56:	d13f      	bne.n	bcfd8 <__gethex+0x450>
   bcf58:	f8d8 2000 	ldr.w	r2, [r8]
   bcf5c:	3a01      	subs	r2, #1
   bcf5e:	42b2      	cmp	r2, r6
   bcf60:	d10a      	bne.n	bcf78 <__gethex+0x3f0>
   bcf62:	1171      	asrs	r1, r6, #5
   bcf64:	2201      	movs	r2, #1
   bcf66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bcf6a:	f006 061f 	and.w	r6, r6, #31
   bcf6e:	fa02 f606 	lsl.w	r6, r2, r6
   bcf72:	421e      	tst	r6, r3
   bcf74:	bf18      	it	ne
   bcf76:	4617      	movne	r7, r2
   bcf78:	f047 0720 	orr.w	r7, r7, #32
   bcf7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bcf7e:	601c      	str	r4, [r3, #0]
   bcf80:	9b04      	ldr	r3, [sp, #16]
   bcf82:	601d      	str	r5, [r3, #0]
   bcf84:	e695      	b.n	bccb2 <__gethex+0x12a>
   bcf86:	4299      	cmp	r1, r3
   bcf88:	f843 cc04 	str.w	ip, [r3, #-4]
   bcf8c:	d8d8      	bhi.n	bcf40 <__gethex+0x3b8>
   bcf8e:	68a3      	ldr	r3, [r4, #8]
   bcf90:	459b      	cmp	fp, r3
   bcf92:	db19      	blt.n	bcfc8 <__gethex+0x440>
   bcf94:	6861      	ldr	r1, [r4, #4]
   bcf96:	ee18 0a10 	vmov	r0, s16
   bcf9a:	3101      	adds	r1, #1
   bcf9c:	f000 f912 	bl	bd1c4 <_Balloc>
   bcfa0:	4681      	mov	r9, r0
   bcfa2:	b918      	cbnz	r0, bcfac <__gethex+0x424>
   bcfa4:	4b1a      	ldr	r3, [pc, #104]	; (bd010 <__gethex+0x488>)
   bcfa6:	4602      	mov	r2, r0
   bcfa8:	2184      	movs	r1, #132	; 0x84
   bcfaa:	e6a8      	b.n	bccfe <__gethex+0x176>
   bcfac:	6922      	ldr	r2, [r4, #16]
   bcfae:	3202      	adds	r2, #2
   bcfb0:	f104 010c 	add.w	r1, r4, #12
   bcfb4:	0092      	lsls	r2, r2, #2
   bcfb6:	300c      	adds	r0, #12
   bcfb8:	f7fe fda6 	bl	bbb08 <memcpy>
   bcfbc:	4621      	mov	r1, r4
   bcfbe:	ee18 0a10 	vmov	r0, s16
   bcfc2:	f000 f93f 	bl	bd244 <_Bfree>
   bcfc6:	464c      	mov	r4, r9
   bcfc8:	6923      	ldr	r3, [r4, #16]
   bcfca:	1c5a      	adds	r2, r3, #1
   bcfcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bcfd0:	6122      	str	r2, [r4, #16]
   bcfd2:	2201      	movs	r2, #1
   bcfd4:	615a      	str	r2, [r3, #20]
   bcfd6:	e7bb      	b.n	bcf50 <__gethex+0x3c8>
   bcfd8:	6922      	ldr	r2, [r4, #16]
   bcfda:	455a      	cmp	r2, fp
   bcfdc:	dd0b      	ble.n	bcff6 <__gethex+0x46e>
   bcfde:	2101      	movs	r1, #1
   bcfe0:	4620      	mov	r0, r4
   bcfe2:	f7ff fd69 	bl	bcab8 <rshift>
   bcfe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bcfea:	3501      	adds	r5, #1
   bcfec:	42ab      	cmp	r3, r5
   bcfee:	f6ff aed0 	blt.w	bcd92 <__gethex+0x20a>
   bcff2:	2701      	movs	r7, #1
   bcff4:	e7c0      	b.n	bcf78 <__gethex+0x3f0>
   bcff6:	f016 061f 	ands.w	r6, r6, #31
   bcffa:	d0fa      	beq.n	bcff2 <__gethex+0x46a>
   bcffc:	4453      	add	r3, sl
   bcffe:	f1c6 0620 	rsb	r6, r6, #32
   bd002:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bd006:	f000 f9cf 	bl	bd3a8 <__hi0bits>
   bd00a:	42b0      	cmp	r0, r6
   bd00c:	dbe7      	blt.n	bcfde <__gethex+0x456>
   bd00e:	e7f0      	b.n	bcff2 <__gethex+0x46a>
   bd010:	000be789 	.word	0x000be789

000bd014 <L_shift>:
   bd014:	f1c2 0208 	rsb	r2, r2, #8
   bd018:	0092      	lsls	r2, r2, #2
   bd01a:	b570      	push	{r4, r5, r6, lr}
   bd01c:	f1c2 0620 	rsb	r6, r2, #32
   bd020:	6843      	ldr	r3, [r0, #4]
   bd022:	6804      	ldr	r4, [r0, #0]
   bd024:	fa03 f506 	lsl.w	r5, r3, r6
   bd028:	432c      	orrs	r4, r5
   bd02a:	40d3      	lsrs	r3, r2
   bd02c:	6004      	str	r4, [r0, #0]
   bd02e:	f840 3f04 	str.w	r3, [r0, #4]!
   bd032:	4288      	cmp	r0, r1
   bd034:	d3f4      	bcc.n	bd020 <L_shift+0xc>
   bd036:	bd70      	pop	{r4, r5, r6, pc}

000bd038 <__match>:
   bd038:	b530      	push	{r4, r5, lr}
   bd03a:	6803      	ldr	r3, [r0, #0]
   bd03c:	3301      	adds	r3, #1
   bd03e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd042:	b914      	cbnz	r4, bd04a <__match+0x12>
   bd044:	6003      	str	r3, [r0, #0]
   bd046:	2001      	movs	r0, #1
   bd048:	bd30      	pop	{r4, r5, pc}
   bd04a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd04e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bd052:	2d19      	cmp	r5, #25
   bd054:	bf98      	it	ls
   bd056:	3220      	addls	r2, #32
   bd058:	42a2      	cmp	r2, r4
   bd05a:	d0f0      	beq.n	bd03e <__match+0x6>
   bd05c:	2000      	movs	r0, #0
   bd05e:	e7f3      	b.n	bd048 <__match+0x10>

000bd060 <__hexnan>:
   bd060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd064:	680b      	ldr	r3, [r1, #0]
   bd066:	115e      	asrs	r6, r3, #5
   bd068:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bd06c:	f013 031f 	ands.w	r3, r3, #31
   bd070:	b087      	sub	sp, #28
   bd072:	bf18      	it	ne
   bd074:	3604      	addne	r6, #4
   bd076:	2500      	movs	r5, #0
   bd078:	1f37      	subs	r7, r6, #4
   bd07a:	4690      	mov	r8, r2
   bd07c:	6802      	ldr	r2, [r0, #0]
   bd07e:	9301      	str	r3, [sp, #4]
   bd080:	4682      	mov	sl, r0
   bd082:	f846 5c04 	str.w	r5, [r6, #-4]
   bd086:	46b9      	mov	r9, r7
   bd088:	463c      	mov	r4, r7
   bd08a:	9502      	str	r5, [sp, #8]
   bd08c:	46ab      	mov	fp, r5
   bd08e:	7851      	ldrb	r1, [r2, #1]
   bd090:	1c53      	adds	r3, r2, #1
   bd092:	9303      	str	r3, [sp, #12]
   bd094:	b341      	cbz	r1, bd0e8 <__hexnan+0x88>
   bd096:	4608      	mov	r0, r1
   bd098:	9205      	str	r2, [sp, #20]
   bd09a:	9104      	str	r1, [sp, #16]
   bd09c:	f7ff fd5e 	bl	bcb5c <__hexdig_fun>
   bd0a0:	2800      	cmp	r0, #0
   bd0a2:	d14f      	bne.n	bd144 <__hexnan+0xe4>
   bd0a4:	9904      	ldr	r1, [sp, #16]
   bd0a6:	9a05      	ldr	r2, [sp, #20]
   bd0a8:	2920      	cmp	r1, #32
   bd0aa:	d818      	bhi.n	bd0de <__hexnan+0x7e>
   bd0ac:	9b02      	ldr	r3, [sp, #8]
   bd0ae:	459b      	cmp	fp, r3
   bd0b0:	dd13      	ble.n	bd0da <__hexnan+0x7a>
   bd0b2:	454c      	cmp	r4, r9
   bd0b4:	d206      	bcs.n	bd0c4 <__hexnan+0x64>
   bd0b6:	2d07      	cmp	r5, #7
   bd0b8:	dc04      	bgt.n	bd0c4 <__hexnan+0x64>
   bd0ba:	462a      	mov	r2, r5
   bd0bc:	4649      	mov	r1, r9
   bd0be:	4620      	mov	r0, r4
   bd0c0:	f7ff ffa8 	bl	bd014 <L_shift>
   bd0c4:	4544      	cmp	r4, r8
   bd0c6:	d950      	bls.n	bd16a <__hexnan+0x10a>
   bd0c8:	2300      	movs	r3, #0
   bd0ca:	f1a4 0904 	sub.w	r9, r4, #4
   bd0ce:	f844 3c04 	str.w	r3, [r4, #-4]
   bd0d2:	f8cd b008 	str.w	fp, [sp, #8]
   bd0d6:	464c      	mov	r4, r9
   bd0d8:	461d      	mov	r5, r3
   bd0da:	9a03      	ldr	r2, [sp, #12]
   bd0dc:	e7d7      	b.n	bd08e <__hexnan+0x2e>
   bd0de:	2929      	cmp	r1, #41	; 0x29
   bd0e0:	d156      	bne.n	bd190 <__hexnan+0x130>
   bd0e2:	3202      	adds	r2, #2
   bd0e4:	f8ca 2000 	str.w	r2, [sl]
   bd0e8:	f1bb 0f00 	cmp.w	fp, #0
   bd0ec:	d050      	beq.n	bd190 <__hexnan+0x130>
   bd0ee:	454c      	cmp	r4, r9
   bd0f0:	d206      	bcs.n	bd100 <__hexnan+0xa0>
   bd0f2:	2d07      	cmp	r5, #7
   bd0f4:	dc04      	bgt.n	bd100 <__hexnan+0xa0>
   bd0f6:	462a      	mov	r2, r5
   bd0f8:	4649      	mov	r1, r9
   bd0fa:	4620      	mov	r0, r4
   bd0fc:	f7ff ff8a 	bl	bd014 <L_shift>
   bd100:	4544      	cmp	r4, r8
   bd102:	d934      	bls.n	bd16e <__hexnan+0x10e>
   bd104:	f1a8 0204 	sub.w	r2, r8, #4
   bd108:	4623      	mov	r3, r4
   bd10a:	f853 1b04 	ldr.w	r1, [r3], #4
   bd10e:	f842 1f04 	str.w	r1, [r2, #4]!
   bd112:	429f      	cmp	r7, r3
   bd114:	d2f9      	bcs.n	bd10a <__hexnan+0xaa>
   bd116:	1b3b      	subs	r3, r7, r4
   bd118:	f023 0303 	bic.w	r3, r3, #3
   bd11c:	3304      	adds	r3, #4
   bd11e:	3401      	adds	r4, #1
   bd120:	3e03      	subs	r6, #3
   bd122:	42b4      	cmp	r4, r6
   bd124:	bf88      	it	hi
   bd126:	2304      	movhi	r3, #4
   bd128:	4443      	add	r3, r8
   bd12a:	2200      	movs	r2, #0
   bd12c:	f843 2b04 	str.w	r2, [r3], #4
   bd130:	429f      	cmp	r7, r3
   bd132:	d2fb      	bcs.n	bd12c <__hexnan+0xcc>
   bd134:	683b      	ldr	r3, [r7, #0]
   bd136:	b91b      	cbnz	r3, bd140 <__hexnan+0xe0>
   bd138:	4547      	cmp	r7, r8
   bd13a:	d127      	bne.n	bd18c <__hexnan+0x12c>
   bd13c:	2301      	movs	r3, #1
   bd13e:	603b      	str	r3, [r7, #0]
   bd140:	2005      	movs	r0, #5
   bd142:	e026      	b.n	bd192 <__hexnan+0x132>
   bd144:	3501      	adds	r5, #1
   bd146:	2d08      	cmp	r5, #8
   bd148:	f10b 0b01 	add.w	fp, fp, #1
   bd14c:	dd06      	ble.n	bd15c <__hexnan+0xfc>
   bd14e:	4544      	cmp	r4, r8
   bd150:	d9c3      	bls.n	bd0da <__hexnan+0x7a>
   bd152:	2300      	movs	r3, #0
   bd154:	f844 3c04 	str.w	r3, [r4, #-4]
   bd158:	2501      	movs	r5, #1
   bd15a:	3c04      	subs	r4, #4
   bd15c:	6822      	ldr	r2, [r4, #0]
   bd15e:	f000 000f 	and.w	r0, r0, #15
   bd162:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bd166:	6022      	str	r2, [r4, #0]
   bd168:	e7b7      	b.n	bd0da <__hexnan+0x7a>
   bd16a:	2508      	movs	r5, #8
   bd16c:	e7b5      	b.n	bd0da <__hexnan+0x7a>
   bd16e:	9b01      	ldr	r3, [sp, #4]
   bd170:	2b00      	cmp	r3, #0
   bd172:	d0df      	beq.n	bd134 <__hexnan+0xd4>
   bd174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd178:	f1c3 0320 	rsb	r3, r3, #32
   bd17c:	fa22 f303 	lsr.w	r3, r2, r3
   bd180:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bd184:	401a      	ands	r2, r3
   bd186:	f846 2c04 	str.w	r2, [r6, #-4]
   bd18a:	e7d3      	b.n	bd134 <__hexnan+0xd4>
   bd18c:	3f04      	subs	r7, #4
   bd18e:	e7d1      	b.n	bd134 <__hexnan+0xd4>
   bd190:	2004      	movs	r0, #4
   bd192:	b007      	add	sp, #28
   bd194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd198 <__retarget_lock_acquire_recursive>:
   bd198:	4770      	bx	lr

000bd19a <__retarget_lock_release>:
   bd19a:	4770      	bx	lr

000bd19c <__retarget_lock_release_recursive>:
   bd19c:	4770      	bx	lr

000bd19e <__ascii_mbtowc>:
   bd19e:	b082      	sub	sp, #8
   bd1a0:	b901      	cbnz	r1, bd1a4 <__ascii_mbtowc+0x6>
   bd1a2:	a901      	add	r1, sp, #4
   bd1a4:	b142      	cbz	r2, bd1b8 <__ascii_mbtowc+0x1a>
   bd1a6:	b14b      	cbz	r3, bd1bc <__ascii_mbtowc+0x1e>
   bd1a8:	7813      	ldrb	r3, [r2, #0]
   bd1aa:	600b      	str	r3, [r1, #0]
   bd1ac:	7812      	ldrb	r2, [r2, #0]
   bd1ae:	1e10      	subs	r0, r2, #0
   bd1b0:	bf18      	it	ne
   bd1b2:	2001      	movne	r0, #1
   bd1b4:	b002      	add	sp, #8
   bd1b6:	4770      	bx	lr
   bd1b8:	4610      	mov	r0, r2
   bd1ba:	e7fb      	b.n	bd1b4 <__ascii_mbtowc+0x16>
   bd1bc:	f06f 0001 	mvn.w	r0, #1
   bd1c0:	e7f8      	b.n	bd1b4 <__ascii_mbtowc+0x16>
	...

000bd1c4 <_Balloc>:
   bd1c4:	b570      	push	{r4, r5, r6, lr}
   bd1c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd1c8:	4604      	mov	r4, r0
   bd1ca:	460d      	mov	r5, r1
   bd1cc:	b976      	cbnz	r6, bd1ec <_Balloc+0x28>
   bd1ce:	2010      	movs	r0, #16
   bd1d0:	f7fa fac6 	bl	b7760 <malloc>
   bd1d4:	4602      	mov	r2, r0
   bd1d6:	6260      	str	r0, [r4, #36]	; 0x24
   bd1d8:	b920      	cbnz	r0, bd1e4 <_Balloc+0x20>
   bd1da:	4b18      	ldr	r3, [pc, #96]	; (bd23c <_Balloc+0x78>)
   bd1dc:	4818      	ldr	r0, [pc, #96]	; (bd240 <_Balloc+0x7c>)
   bd1de:	2166      	movs	r1, #102	; 0x66
   bd1e0:	f7fa fafe 	bl	b77e0 <__assert_func>
   bd1e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd1e8:	6006      	str	r6, [r0, #0]
   bd1ea:	60c6      	str	r6, [r0, #12]
   bd1ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bd1ee:	68f3      	ldr	r3, [r6, #12]
   bd1f0:	b183      	cbz	r3, bd214 <_Balloc+0x50>
   bd1f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd1f4:	68db      	ldr	r3, [r3, #12]
   bd1f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bd1fa:	b9b8      	cbnz	r0, bd22c <_Balloc+0x68>
   bd1fc:	2101      	movs	r1, #1
   bd1fe:	fa01 f605 	lsl.w	r6, r1, r5
   bd202:	1d72      	adds	r2, r6, #5
   bd204:	0092      	lsls	r2, r2, #2
   bd206:	4620      	mov	r0, r4
   bd208:	f000 fc9d 	bl	bdb46 <_calloc_r>
   bd20c:	b160      	cbz	r0, bd228 <_Balloc+0x64>
   bd20e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bd212:	e00e      	b.n	bd232 <_Balloc+0x6e>
   bd214:	2221      	movs	r2, #33	; 0x21
   bd216:	2104      	movs	r1, #4
   bd218:	4620      	mov	r0, r4
   bd21a:	f000 fc94 	bl	bdb46 <_calloc_r>
   bd21e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd220:	60f0      	str	r0, [r6, #12]
   bd222:	68db      	ldr	r3, [r3, #12]
   bd224:	2b00      	cmp	r3, #0
   bd226:	d1e4      	bne.n	bd1f2 <_Balloc+0x2e>
   bd228:	2000      	movs	r0, #0
   bd22a:	bd70      	pop	{r4, r5, r6, pc}
   bd22c:	6802      	ldr	r2, [r0, #0]
   bd22e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bd232:	2300      	movs	r3, #0
   bd234:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bd238:	e7f7      	b.n	bd22a <_Balloc+0x66>
   bd23a:	bf00      	nop
   bd23c:	000be5b5 	.word	0x000be5b5
   bd240:	000be812 	.word	0x000be812

000bd244 <_Bfree>:
   bd244:	b570      	push	{r4, r5, r6, lr}
   bd246:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd248:	4605      	mov	r5, r0
   bd24a:	460c      	mov	r4, r1
   bd24c:	b976      	cbnz	r6, bd26c <_Bfree+0x28>
   bd24e:	2010      	movs	r0, #16
   bd250:	f7fa fa86 	bl	b7760 <malloc>
   bd254:	4602      	mov	r2, r0
   bd256:	6268      	str	r0, [r5, #36]	; 0x24
   bd258:	b920      	cbnz	r0, bd264 <_Bfree+0x20>
   bd25a:	4b09      	ldr	r3, [pc, #36]	; (bd280 <_Bfree+0x3c>)
   bd25c:	4809      	ldr	r0, [pc, #36]	; (bd284 <_Bfree+0x40>)
   bd25e:	218a      	movs	r1, #138	; 0x8a
   bd260:	f7fa fabe 	bl	b77e0 <__assert_func>
   bd264:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd268:	6006      	str	r6, [r0, #0]
   bd26a:	60c6      	str	r6, [r0, #12]
   bd26c:	b13c      	cbz	r4, bd27e <_Bfree+0x3a>
   bd26e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd270:	6862      	ldr	r2, [r4, #4]
   bd272:	68db      	ldr	r3, [r3, #12]
   bd274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bd278:	6021      	str	r1, [r4, #0]
   bd27a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bd27e:	bd70      	pop	{r4, r5, r6, pc}
   bd280:	000be5b5 	.word	0x000be5b5
   bd284:	000be812 	.word	0x000be812

000bd288 <__multadd>:
   bd288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd28c:	690d      	ldr	r5, [r1, #16]
   bd28e:	4607      	mov	r7, r0
   bd290:	460c      	mov	r4, r1
   bd292:	461e      	mov	r6, r3
   bd294:	f101 0c14 	add.w	ip, r1, #20
   bd298:	2000      	movs	r0, #0
   bd29a:	f8dc 3000 	ldr.w	r3, [ip]
   bd29e:	b299      	uxth	r1, r3
   bd2a0:	fb02 6101 	mla	r1, r2, r1, r6
   bd2a4:	0c1e      	lsrs	r6, r3, #16
   bd2a6:	0c0b      	lsrs	r3, r1, #16
   bd2a8:	fb02 3306 	mla	r3, r2, r6, r3
   bd2ac:	b289      	uxth	r1, r1
   bd2ae:	3001      	adds	r0, #1
   bd2b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bd2b4:	4285      	cmp	r5, r0
   bd2b6:	f84c 1b04 	str.w	r1, [ip], #4
   bd2ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bd2be:	dcec      	bgt.n	bd29a <__multadd+0x12>
   bd2c0:	b30e      	cbz	r6, bd306 <__multadd+0x7e>
   bd2c2:	68a3      	ldr	r3, [r4, #8]
   bd2c4:	42ab      	cmp	r3, r5
   bd2c6:	dc19      	bgt.n	bd2fc <__multadd+0x74>
   bd2c8:	6861      	ldr	r1, [r4, #4]
   bd2ca:	4638      	mov	r0, r7
   bd2cc:	3101      	adds	r1, #1
   bd2ce:	f7ff ff79 	bl	bd1c4 <_Balloc>
   bd2d2:	4680      	mov	r8, r0
   bd2d4:	b928      	cbnz	r0, bd2e2 <__multadd+0x5a>
   bd2d6:	4602      	mov	r2, r0
   bd2d8:	4b0c      	ldr	r3, [pc, #48]	; (bd30c <__multadd+0x84>)
   bd2da:	480d      	ldr	r0, [pc, #52]	; (bd310 <__multadd+0x88>)
   bd2dc:	21b5      	movs	r1, #181	; 0xb5
   bd2de:	f7fa fa7f 	bl	b77e0 <__assert_func>
   bd2e2:	6922      	ldr	r2, [r4, #16]
   bd2e4:	3202      	adds	r2, #2
   bd2e6:	f104 010c 	add.w	r1, r4, #12
   bd2ea:	0092      	lsls	r2, r2, #2
   bd2ec:	300c      	adds	r0, #12
   bd2ee:	f7fe fc0b 	bl	bbb08 <memcpy>
   bd2f2:	4621      	mov	r1, r4
   bd2f4:	4638      	mov	r0, r7
   bd2f6:	f7ff ffa5 	bl	bd244 <_Bfree>
   bd2fa:	4644      	mov	r4, r8
   bd2fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bd300:	3501      	adds	r5, #1
   bd302:	615e      	str	r6, [r3, #20]
   bd304:	6125      	str	r5, [r4, #16]
   bd306:	4620      	mov	r0, r4
   bd308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd30c:	000be789 	.word	0x000be789
   bd310:	000be812 	.word	0x000be812

000bd314 <__s2b>:
   bd314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd318:	460c      	mov	r4, r1
   bd31a:	4615      	mov	r5, r2
   bd31c:	461f      	mov	r7, r3
   bd31e:	2209      	movs	r2, #9
   bd320:	3308      	adds	r3, #8
   bd322:	4606      	mov	r6, r0
   bd324:	fb93 f3f2 	sdiv	r3, r3, r2
   bd328:	2100      	movs	r1, #0
   bd32a:	2201      	movs	r2, #1
   bd32c:	429a      	cmp	r2, r3
   bd32e:	db09      	blt.n	bd344 <__s2b+0x30>
   bd330:	4630      	mov	r0, r6
   bd332:	f7ff ff47 	bl	bd1c4 <_Balloc>
   bd336:	b940      	cbnz	r0, bd34a <__s2b+0x36>
   bd338:	4602      	mov	r2, r0
   bd33a:	4b19      	ldr	r3, [pc, #100]	; (bd3a0 <__s2b+0x8c>)
   bd33c:	4819      	ldr	r0, [pc, #100]	; (bd3a4 <__s2b+0x90>)
   bd33e:	21ce      	movs	r1, #206	; 0xce
   bd340:	f7fa fa4e 	bl	b77e0 <__assert_func>
   bd344:	0052      	lsls	r2, r2, #1
   bd346:	3101      	adds	r1, #1
   bd348:	e7f0      	b.n	bd32c <__s2b+0x18>
   bd34a:	9b08      	ldr	r3, [sp, #32]
   bd34c:	6143      	str	r3, [r0, #20]
   bd34e:	2d09      	cmp	r5, #9
   bd350:	f04f 0301 	mov.w	r3, #1
   bd354:	6103      	str	r3, [r0, #16]
   bd356:	dd16      	ble.n	bd386 <__s2b+0x72>
   bd358:	f104 0909 	add.w	r9, r4, #9
   bd35c:	46c8      	mov	r8, r9
   bd35e:	442c      	add	r4, r5
   bd360:	f818 3b01 	ldrb.w	r3, [r8], #1
   bd364:	4601      	mov	r1, r0
   bd366:	3b30      	subs	r3, #48	; 0x30
   bd368:	220a      	movs	r2, #10
   bd36a:	4630      	mov	r0, r6
   bd36c:	f7ff ff8c 	bl	bd288 <__multadd>
   bd370:	45a0      	cmp	r8, r4
   bd372:	d1f5      	bne.n	bd360 <__s2b+0x4c>
   bd374:	f1a5 0408 	sub.w	r4, r5, #8
   bd378:	444c      	add	r4, r9
   bd37a:	1b2d      	subs	r5, r5, r4
   bd37c:	1963      	adds	r3, r4, r5
   bd37e:	42bb      	cmp	r3, r7
   bd380:	db04      	blt.n	bd38c <__s2b+0x78>
   bd382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd386:	340a      	adds	r4, #10
   bd388:	2509      	movs	r5, #9
   bd38a:	e7f6      	b.n	bd37a <__s2b+0x66>
   bd38c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bd390:	4601      	mov	r1, r0
   bd392:	3b30      	subs	r3, #48	; 0x30
   bd394:	220a      	movs	r2, #10
   bd396:	4630      	mov	r0, r6
   bd398:	f7ff ff76 	bl	bd288 <__multadd>
   bd39c:	e7ee      	b.n	bd37c <__s2b+0x68>
   bd39e:	bf00      	nop
   bd3a0:	000be789 	.word	0x000be789
   bd3a4:	000be812 	.word	0x000be812

000bd3a8 <__hi0bits>:
   bd3a8:	0c03      	lsrs	r3, r0, #16
   bd3aa:	041b      	lsls	r3, r3, #16
   bd3ac:	b9d3      	cbnz	r3, bd3e4 <__hi0bits+0x3c>
   bd3ae:	0400      	lsls	r0, r0, #16
   bd3b0:	2310      	movs	r3, #16
   bd3b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bd3b6:	bf04      	itt	eq
   bd3b8:	0200      	lsleq	r0, r0, #8
   bd3ba:	3308      	addeq	r3, #8
   bd3bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bd3c0:	bf04      	itt	eq
   bd3c2:	0100      	lsleq	r0, r0, #4
   bd3c4:	3304      	addeq	r3, #4
   bd3c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bd3ca:	bf04      	itt	eq
   bd3cc:	0080      	lsleq	r0, r0, #2
   bd3ce:	3302      	addeq	r3, #2
   bd3d0:	2800      	cmp	r0, #0
   bd3d2:	db05      	blt.n	bd3e0 <__hi0bits+0x38>
   bd3d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bd3d8:	f103 0301 	add.w	r3, r3, #1
   bd3dc:	bf08      	it	eq
   bd3de:	2320      	moveq	r3, #32
   bd3e0:	4618      	mov	r0, r3
   bd3e2:	4770      	bx	lr
   bd3e4:	2300      	movs	r3, #0
   bd3e6:	e7e4      	b.n	bd3b2 <__hi0bits+0xa>

000bd3e8 <__lo0bits>:
   bd3e8:	6803      	ldr	r3, [r0, #0]
   bd3ea:	f013 0207 	ands.w	r2, r3, #7
   bd3ee:	4601      	mov	r1, r0
   bd3f0:	d00b      	beq.n	bd40a <__lo0bits+0x22>
   bd3f2:	07da      	lsls	r2, r3, #31
   bd3f4:	d423      	bmi.n	bd43e <__lo0bits+0x56>
   bd3f6:	0798      	lsls	r0, r3, #30
   bd3f8:	bf49      	itett	mi
   bd3fa:	085b      	lsrmi	r3, r3, #1
   bd3fc:	089b      	lsrpl	r3, r3, #2
   bd3fe:	2001      	movmi	r0, #1
   bd400:	600b      	strmi	r3, [r1, #0]
   bd402:	bf5c      	itt	pl
   bd404:	600b      	strpl	r3, [r1, #0]
   bd406:	2002      	movpl	r0, #2
   bd408:	4770      	bx	lr
   bd40a:	b298      	uxth	r0, r3
   bd40c:	b9a8      	cbnz	r0, bd43a <__lo0bits+0x52>
   bd40e:	0c1b      	lsrs	r3, r3, #16
   bd410:	2010      	movs	r0, #16
   bd412:	b2da      	uxtb	r2, r3
   bd414:	b90a      	cbnz	r2, bd41a <__lo0bits+0x32>
   bd416:	3008      	adds	r0, #8
   bd418:	0a1b      	lsrs	r3, r3, #8
   bd41a:	071a      	lsls	r2, r3, #28
   bd41c:	bf04      	itt	eq
   bd41e:	091b      	lsreq	r3, r3, #4
   bd420:	3004      	addeq	r0, #4
   bd422:	079a      	lsls	r2, r3, #30
   bd424:	bf04      	itt	eq
   bd426:	089b      	lsreq	r3, r3, #2
   bd428:	3002      	addeq	r0, #2
   bd42a:	07da      	lsls	r2, r3, #31
   bd42c:	d403      	bmi.n	bd436 <__lo0bits+0x4e>
   bd42e:	085b      	lsrs	r3, r3, #1
   bd430:	f100 0001 	add.w	r0, r0, #1
   bd434:	d005      	beq.n	bd442 <__lo0bits+0x5a>
   bd436:	600b      	str	r3, [r1, #0]
   bd438:	4770      	bx	lr
   bd43a:	4610      	mov	r0, r2
   bd43c:	e7e9      	b.n	bd412 <__lo0bits+0x2a>
   bd43e:	2000      	movs	r0, #0
   bd440:	4770      	bx	lr
   bd442:	2020      	movs	r0, #32
   bd444:	4770      	bx	lr
	...

000bd448 <__i2b>:
   bd448:	b510      	push	{r4, lr}
   bd44a:	460c      	mov	r4, r1
   bd44c:	2101      	movs	r1, #1
   bd44e:	f7ff feb9 	bl	bd1c4 <_Balloc>
   bd452:	4602      	mov	r2, r0
   bd454:	b928      	cbnz	r0, bd462 <__i2b+0x1a>
   bd456:	4b05      	ldr	r3, [pc, #20]	; (bd46c <__i2b+0x24>)
   bd458:	4805      	ldr	r0, [pc, #20]	; (bd470 <__i2b+0x28>)
   bd45a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bd45e:	f7fa f9bf 	bl	b77e0 <__assert_func>
   bd462:	2301      	movs	r3, #1
   bd464:	6144      	str	r4, [r0, #20]
   bd466:	6103      	str	r3, [r0, #16]
   bd468:	bd10      	pop	{r4, pc}
   bd46a:	bf00      	nop
   bd46c:	000be789 	.word	0x000be789
   bd470:	000be812 	.word	0x000be812

000bd474 <__multiply>:
   bd474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd478:	4691      	mov	r9, r2
   bd47a:	690a      	ldr	r2, [r1, #16]
   bd47c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd480:	429a      	cmp	r2, r3
   bd482:	bfb8      	it	lt
   bd484:	460b      	movlt	r3, r1
   bd486:	460c      	mov	r4, r1
   bd488:	bfbc      	itt	lt
   bd48a:	464c      	movlt	r4, r9
   bd48c:	4699      	movlt	r9, r3
   bd48e:	6927      	ldr	r7, [r4, #16]
   bd490:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bd494:	68a3      	ldr	r3, [r4, #8]
   bd496:	6861      	ldr	r1, [r4, #4]
   bd498:	eb07 060a 	add.w	r6, r7, sl
   bd49c:	42b3      	cmp	r3, r6
   bd49e:	b085      	sub	sp, #20
   bd4a0:	bfb8      	it	lt
   bd4a2:	3101      	addlt	r1, #1
   bd4a4:	f7ff fe8e 	bl	bd1c4 <_Balloc>
   bd4a8:	b930      	cbnz	r0, bd4b8 <__multiply+0x44>
   bd4aa:	4602      	mov	r2, r0
   bd4ac:	4b44      	ldr	r3, [pc, #272]	; (bd5c0 <__multiply+0x14c>)
   bd4ae:	4845      	ldr	r0, [pc, #276]	; (bd5c4 <__multiply+0x150>)
   bd4b0:	f240 115d 	movw	r1, #349	; 0x15d
   bd4b4:	f7fa f994 	bl	b77e0 <__assert_func>
   bd4b8:	f100 0514 	add.w	r5, r0, #20
   bd4bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bd4c0:	462b      	mov	r3, r5
   bd4c2:	2200      	movs	r2, #0
   bd4c4:	4543      	cmp	r3, r8
   bd4c6:	d321      	bcc.n	bd50c <__multiply+0x98>
   bd4c8:	f104 0314 	add.w	r3, r4, #20
   bd4cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bd4d0:	f109 0314 	add.w	r3, r9, #20
   bd4d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bd4d8:	9202      	str	r2, [sp, #8]
   bd4da:	1b3a      	subs	r2, r7, r4
   bd4dc:	3a15      	subs	r2, #21
   bd4de:	f022 0203 	bic.w	r2, r2, #3
   bd4e2:	3204      	adds	r2, #4
   bd4e4:	f104 0115 	add.w	r1, r4, #21
   bd4e8:	428f      	cmp	r7, r1
   bd4ea:	bf38      	it	cc
   bd4ec:	2204      	movcc	r2, #4
   bd4ee:	9201      	str	r2, [sp, #4]
   bd4f0:	9a02      	ldr	r2, [sp, #8]
   bd4f2:	9303      	str	r3, [sp, #12]
   bd4f4:	429a      	cmp	r2, r3
   bd4f6:	d80c      	bhi.n	bd512 <__multiply+0x9e>
   bd4f8:	2e00      	cmp	r6, #0
   bd4fa:	dd03      	ble.n	bd504 <__multiply+0x90>
   bd4fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bd500:	2b00      	cmp	r3, #0
   bd502:	d05a      	beq.n	bd5ba <__multiply+0x146>
   bd504:	6106      	str	r6, [r0, #16]
   bd506:	b005      	add	sp, #20
   bd508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd50c:	f843 2b04 	str.w	r2, [r3], #4
   bd510:	e7d8      	b.n	bd4c4 <__multiply+0x50>
   bd512:	f8b3 a000 	ldrh.w	sl, [r3]
   bd516:	f1ba 0f00 	cmp.w	sl, #0
   bd51a:	d024      	beq.n	bd566 <__multiply+0xf2>
   bd51c:	f104 0e14 	add.w	lr, r4, #20
   bd520:	46a9      	mov	r9, r5
   bd522:	f04f 0c00 	mov.w	ip, #0
   bd526:	f85e 2b04 	ldr.w	r2, [lr], #4
   bd52a:	f8d9 1000 	ldr.w	r1, [r9]
   bd52e:	fa1f fb82 	uxth.w	fp, r2
   bd532:	b289      	uxth	r1, r1
   bd534:	fb0a 110b 	mla	r1, sl, fp, r1
   bd538:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bd53c:	f8d9 2000 	ldr.w	r2, [r9]
   bd540:	4461      	add	r1, ip
   bd542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd546:	fb0a c20b 	mla	r2, sl, fp, ip
   bd54a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bd54e:	b289      	uxth	r1, r1
   bd550:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bd554:	4577      	cmp	r7, lr
   bd556:	f849 1b04 	str.w	r1, [r9], #4
   bd55a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd55e:	d8e2      	bhi.n	bd526 <__multiply+0xb2>
   bd560:	9a01      	ldr	r2, [sp, #4]
   bd562:	f845 c002 	str.w	ip, [r5, r2]
   bd566:	9a03      	ldr	r2, [sp, #12]
   bd568:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bd56c:	3304      	adds	r3, #4
   bd56e:	f1b9 0f00 	cmp.w	r9, #0
   bd572:	d020      	beq.n	bd5b6 <__multiply+0x142>
   bd574:	6829      	ldr	r1, [r5, #0]
   bd576:	f104 0c14 	add.w	ip, r4, #20
   bd57a:	46ae      	mov	lr, r5
   bd57c:	f04f 0a00 	mov.w	sl, #0
   bd580:	f8bc b000 	ldrh.w	fp, [ip]
   bd584:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bd588:	fb09 220b 	mla	r2, r9, fp, r2
   bd58c:	4492      	add	sl, r2
   bd58e:	b289      	uxth	r1, r1
   bd590:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bd594:	f84e 1b04 	str.w	r1, [lr], #4
   bd598:	f85c 2b04 	ldr.w	r2, [ip], #4
   bd59c:	f8be 1000 	ldrh.w	r1, [lr]
   bd5a0:	0c12      	lsrs	r2, r2, #16
   bd5a2:	fb09 1102 	mla	r1, r9, r2, r1
   bd5a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bd5aa:	4567      	cmp	r7, ip
   bd5ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bd5b0:	d8e6      	bhi.n	bd580 <__multiply+0x10c>
   bd5b2:	9a01      	ldr	r2, [sp, #4]
   bd5b4:	50a9      	str	r1, [r5, r2]
   bd5b6:	3504      	adds	r5, #4
   bd5b8:	e79a      	b.n	bd4f0 <__multiply+0x7c>
   bd5ba:	3e01      	subs	r6, #1
   bd5bc:	e79c      	b.n	bd4f8 <__multiply+0x84>
   bd5be:	bf00      	nop
   bd5c0:	000be789 	.word	0x000be789
   bd5c4:	000be812 	.word	0x000be812

000bd5c8 <__pow5mult>:
   bd5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd5cc:	4615      	mov	r5, r2
   bd5ce:	f012 0203 	ands.w	r2, r2, #3
   bd5d2:	4606      	mov	r6, r0
   bd5d4:	460f      	mov	r7, r1
   bd5d6:	d007      	beq.n	bd5e8 <__pow5mult+0x20>
   bd5d8:	4c25      	ldr	r4, [pc, #148]	; (bd670 <__pow5mult+0xa8>)
   bd5da:	3a01      	subs	r2, #1
   bd5dc:	2300      	movs	r3, #0
   bd5de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bd5e2:	f7ff fe51 	bl	bd288 <__multadd>
   bd5e6:	4607      	mov	r7, r0
   bd5e8:	10ad      	asrs	r5, r5, #2
   bd5ea:	d03d      	beq.n	bd668 <__pow5mult+0xa0>
   bd5ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bd5ee:	b97c      	cbnz	r4, bd610 <__pow5mult+0x48>
   bd5f0:	2010      	movs	r0, #16
   bd5f2:	f7fa f8b5 	bl	b7760 <malloc>
   bd5f6:	4602      	mov	r2, r0
   bd5f8:	6270      	str	r0, [r6, #36]	; 0x24
   bd5fa:	b928      	cbnz	r0, bd608 <__pow5mult+0x40>
   bd5fc:	4b1d      	ldr	r3, [pc, #116]	; (bd674 <__pow5mult+0xac>)
   bd5fe:	481e      	ldr	r0, [pc, #120]	; (bd678 <__pow5mult+0xb0>)
   bd600:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bd604:	f7fa f8ec 	bl	b77e0 <__assert_func>
   bd608:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd60c:	6004      	str	r4, [r0, #0]
   bd60e:	60c4      	str	r4, [r0, #12]
   bd610:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bd614:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bd618:	b94c      	cbnz	r4, bd62e <__pow5mult+0x66>
   bd61a:	f240 2171 	movw	r1, #625	; 0x271
   bd61e:	4630      	mov	r0, r6
   bd620:	f7ff ff12 	bl	bd448 <__i2b>
   bd624:	2300      	movs	r3, #0
   bd626:	f8c8 0008 	str.w	r0, [r8, #8]
   bd62a:	4604      	mov	r4, r0
   bd62c:	6003      	str	r3, [r0, #0]
   bd62e:	f04f 0900 	mov.w	r9, #0
   bd632:	07eb      	lsls	r3, r5, #31
   bd634:	d50a      	bpl.n	bd64c <__pow5mult+0x84>
   bd636:	4639      	mov	r1, r7
   bd638:	4622      	mov	r2, r4
   bd63a:	4630      	mov	r0, r6
   bd63c:	f7ff ff1a 	bl	bd474 <__multiply>
   bd640:	4639      	mov	r1, r7
   bd642:	4680      	mov	r8, r0
   bd644:	4630      	mov	r0, r6
   bd646:	f7ff fdfd 	bl	bd244 <_Bfree>
   bd64a:	4647      	mov	r7, r8
   bd64c:	106d      	asrs	r5, r5, #1
   bd64e:	d00b      	beq.n	bd668 <__pow5mult+0xa0>
   bd650:	6820      	ldr	r0, [r4, #0]
   bd652:	b938      	cbnz	r0, bd664 <__pow5mult+0x9c>
   bd654:	4622      	mov	r2, r4
   bd656:	4621      	mov	r1, r4
   bd658:	4630      	mov	r0, r6
   bd65a:	f7ff ff0b 	bl	bd474 <__multiply>
   bd65e:	6020      	str	r0, [r4, #0]
   bd660:	f8c0 9000 	str.w	r9, [r0]
   bd664:	4604      	mov	r4, r0
   bd666:	e7e4      	b.n	bd632 <__pow5mult+0x6a>
   bd668:	4638      	mov	r0, r7
   bd66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd66e:	bf00      	nop
   bd670:	000be960 	.word	0x000be960
   bd674:	000be5b5 	.word	0x000be5b5
   bd678:	000be812 	.word	0x000be812

000bd67c <__lshift>:
   bd67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd680:	460c      	mov	r4, r1
   bd682:	6849      	ldr	r1, [r1, #4]
   bd684:	6923      	ldr	r3, [r4, #16]
   bd686:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bd68a:	68a3      	ldr	r3, [r4, #8]
   bd68c:	4607      	mov	r7, r0
   bd68e:	4691      	mov	r9, r2
   bd690:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bd694:	f108 0601 	add.w	r6, r8, #1
   bd698:	42b3      	cmp	r3, r6
   bd69a:	db0b      	blt.n	bd6b4 <__lshift+0x38>
   bd69c:	4638      	mov	r0, r7
   bd69e:	f7ff fd91 	bl	bd1c4 <_Balloc>
   bd6a2:	4605      	mov	r5, r0
   bd6a4:	b948      	cbnz	r0, bd6ba <__lshift+0x3e>
   bd6a6:	4602      	mov	r2, r0
   bd6a8:	4b2a      	ldr	r3, [pc, #168]	; (bd754 <__lshift+0xd8>)
   bd6aa:	482b      	ldr	r0, [pc, #172]	; (bd758 <__lshift+0xdc>)
   bd6ac:	f240 11d9 	movw	r1, #473	; 0x1d9
   bd6b0:	f7fa f896 	bl	b77e0 <__assert_func>
   bd6b4:	3101      	adds	r1, #1
   bd6b6:	005b      	lsls	r3, r3, #1
   bd6b8:	e7ee      	b.n	bd698 <__lshift+0x1c>
   bd6ba:	2300      	movs	r3, #0
   bd6bc:	f100 0114 	add.w	r1, r0, #20
   bd6c0:	f100 0210 	add.w	r2, r0, #16
   bd6c4:	4618      	mov	r0, r3
   bd6c6:	4553      	cmp	r3, sl
   bd6c8:	db37      	blt.n	bd73a <__lshift+0xbe>
   bd6ca:	6920      	ldr	r0, [r4, #16]
   bd6cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bd6d0:	f104 0314 	add.w	r3, r4, #20
   bd6d4:	f019 091f 	ands.w	r9, r9, #31
   bd6d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bd6dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bd6e0:	d02f      	beq.n	bd742 <__lshift+0xc6>
   bd6e2:	f1c9 0e20 	rsb	lr, r9, #32
   bd6e6:	468a      	mov	sl, r1
   bd6e8:	f04f 0c00 	mov.w	ip, #0
   bd6ec:	681a      	ldr	r2, [r3, #0]
   bd6ee:	fa02 f209 	lsl.w	r2, r2, r9
   bd6f2:	ea42 020c 	orr.w	r2, r2, ip
   bd6f6:	f84a 2b04 	str.w	r2, [sl], #4
   bd6fa:	f853 2b04 	ldr.w	r2, [r3], #4
   bd6fe:	4298      	cmp	r0, r3
   bd700:	fa22 fc0e 	lsr.w	ip, r2, lr
   bd704:	d8f2      	bhi.n	bd6ec <__lshift+0x70>
   bd706:	1b03      	subs	r3, r0, r4
   bd708:	3b15      	subs	r3, #21
   bd70a:	f023 0303 	bic.w	r3, r3, #3
   bd70e:	3304      	adds	r3, #4
   bd710:	f104 0215 	add.w	r2, r4, #21
   bd714:	4290      	cmp	r0, r2
   bd716:	bf38      	it	cc
   bd718:	2304      	movcc	r3, #4
   bd71a:	f841 c003 	str.w	ip, [r1, r3]
   bd71e:	f1bc 0f00 	cmp.w	ip, #0
   bd722:	d001      	beq.n	bd728 <__lshift+0xac>
   bd724:	f108 0602 	add.w	r6, r8, #2
   bd728:	3e01      	subs	r6, #1
   bd72a:	4638      	mov	r0, r7
   bd72c:	612e      	str	r6, [r5, #16]
   bd72e:	4621      	mov	r1, r4
   bd730:	f7ff fd88 	bl	bd244 <_Bfree>
   bd734:	4628      	mov	r0, r5
   bd736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd73a:	f842 0f04 	str.w	r0, [r2, #4]!
   bd73e:	3301      	adds	r3, #1
   bd740:	e7c1      	b.n	bd6c6 <__lshift+0x4a>
   bd742:	3904      	subs	r1, #4
   bd744:	f853 2b04 	ldr.w	r2, [r3], #4
   bd748:	f841 2f04 	str.w	r2, [r1, #4]!
   bd74c:	4298      	cmp	r0, r3
   bd74e:	d8f9      	bhi.n	bd744 <__lshift+0xc8>
   bd750:	e7ea      	b.n	bd728 <__lshift+0xac>
   bd752:	bf00      	nop
   bd754:	000be789 	.word	0x000be789
   bd758:	000be812 	.word	0x000be812

000bd75c <__mcmp>:
   bd75c:	b530      	push	{r4, r5, lr}
   bd75e:	6902      	ldr	r2, [r0, #16]
   bd760:	690c      	ldr	r4, [r1, #16]
   bd762:	1b12      	subs	r2, r2, r4
   bd764:	d10e      	bne.n	bd784 <__mcmp+0x28>
   bd766:	f100 0314 	add.w	r3, r0, #20
   bd76a:	3114      	adds	r1, #20
   bd76c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bd770:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bd774:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bd778:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bd77c:	42a5      	cmp	r5, r4
   bd77e:	d003      	beq.n	bd788 <__mcmp+0x2c>
   bd780:	d305      	bcc.n	bd78e <__mcmp+0x32>
   bd782:	2201      	movs	r2, #1
   bd784:	4610      	mov	r0, r2
   bd786:	bd30      	pop	{r4, r5, pc}
   bd788:	4283      	cmp	r3, r0
   bd78a:	d3f3      	bcc.n	bd774 <__mcmp+0x18>
   bd78c:	e7fa      	b.n	bd784 <__mcmp+0x28>
   bd78e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd792:	e7f7      	b.n	bd784 <__mcmp+0x28>

000bd794 <__mdiff>:
   bd794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd798:	460c      	mov	r4, r1
   bd79a:	4606      	mov	r6, r0
   bd79c:	4611      	mov	r1, r2
   bd79e:	4620      	mov	r0, r4
   bd7a0:	4690      	mov	r8, r2
   bd7a2:	f7ff ffdb 	bl	bd75c <__mcmp>
   bd7a6:	1e05      	subs	r5, r0, #0
   bd7a8:	d110      	bne.n	bd7cc <__mdiff+0x38>
   bd7aa:	4629      	mov	r1, r5
   bd7ac:	4630      	mov	r0, r6
   bd7ae:	f7ff fd09 	bl	bd1c4 <_Balloc>
   bd7b2:	b930      	cbnz	r0, bd7c2 <__mdiff+0x2e>
   bd7b4:	4b3a      	ldr	r3, [pc, #232]	; (bd8a0 <__mdiff+0x10c>)
   bd7b6:	4602      	mov	r2, r0
   bd7b8:	f240 2132 	movw	r1, #562	; 0x232
   bd7bc:	4839      	ldr	r0, [pc, #228]	; (bd8a4 <__mdiff+0x110>)
   bd7be:	f7fa f80f 	bl	b77e0 <__assert_func>
   bd7c2:	2301      	movs	r3, #1
   bd7c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bd7c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd7cc:	bfa4      	itt	ge
   bd7ce:	4643      	movge	r3, r8
   bd7d0:	46a0      	movge	r8, r4
   bd7d2:	4630      	mov	r0, r6
   bd7d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bd7d8:	bfa6      	itte	ge
   bd7da:	461c      	movge	r4, r3
   bd7dc:	2500      	movge	r5, #0
   bd7de:	2501      	movlt	r5, #1
   bd7e0:	f7ff fcf0 	bl	bd1c4 <_Balloc>
   bd7e4:	b920      	cbnz	r0, bd7f0 <__mdiff+0x5c>
   bd7e6:	4b2e      	ldr	r3, [pc, #184]	; (bd8a0 <__mdiff+0x10c>)
   bd7e8:	4602      	mov	r2, r0
   bd7ea:	f44f 7110 	mov.w	r1, #576	; 0x240
   bd7ee:	e7e5      	b.n	bd7bc <__mdiff+0x28>
   bd7f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bd7f4:	6926      	ldr	r6, [r4, #16]
   bd7f6:	60c5      	str	r5, [r0, #12]
   bd7f8:	f104 0914 	add.w	r9, r4, #20
   bd7fc:	f108 0514 	add.w	r5, r8, #20
   bd800:	f100 0e14 	add.w	lr, r0, #20
   bd804:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bd808:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bd80c:	f108 0210 	add.w	r2, r8, #16
   bd810:	46f2      	mov	sl, lr
   bd812:	2100      	movs	r1, #0
   bd814:	f859 3b04 	ldr.w	r3, [r9], #4
   bd818:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bd81c:	fa1f f883 	uxth.w	r8, r3
   bd820:	fa11 f18b 	uxtah	r1, r1, fp
   bd824:	0c1b      	lsrs	r3, r3, #16
   bd826:	eba1 0808 	sub.w	r8, r1, r8
   bd82a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bd82e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bd832:	fa1f f888 	uxth.w	r8, r8
   bd836:	1419      	asrs	r1, r3, #16
   bd838:	454e      	cmp	r6, r9
   bd83a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bd83e:	f84a 3b04 	str.w	r3, [sl], #4
   bd842:	d8e7      	bhi.n	bd814 <__mdiff+0x80>
   bd844:	1b33      	subs	r3, r6, r4
   bd846:	3b15      	subs	r3, #21
   bd848:	f023 0303 	bic.w	r3, r3, #3
   bd84c:	3304      	adds	r3, #4
   bd84e:	3415      	adds	r4, #21
   bd850:	42a6      	cmp	r6, r4
   bd852:	bf38      	it	cc
   bd854:	2304      	movcc	r3, #4
   bd856:	441d      	add	r5, r3
   bd858:	4473      	add	r3, lr
   bd85a:	469e      	mov	lr, r3
   bd85c:	462e      	mov	r6, r5
   bd85e:	4566      	cmp	r6, ip
   bd860:	d30e      	bcc.n	bd880 <__mdiff+0xec>
   bd862:	f10c 0203 	add.w	r2, ip, #3
   bd866:	1b52      	subs	r2, r2, r5
   bd868:	f022 0203 	bic.w	r2, r2, #3
   bd86c:	3d03      	subs	r5, #3
   bd86e:	45ac      	cmp	ip, r5
   bd870:	bf38      	it	cc
   bd872:	2200      	movcc	r2, #0
   bd874:	441a      	add	r2, r3
   bd876:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bd87a:	b17b      	cbz	r3, bd89c <__mdiff+0x108>
   bd87c:	6107      	str	r7, [r0, #16]
   bd87e:	e7a3      	b.n	bd7c8 <__mdiff+0x34>
   bd880:	f856 8b04 	ldr.w	r8, [r6], #4
   bd884:	fa11 f288 	uxtah	r2, r1, r8
   bd888:	1414      	asrs	r4, r2, #16
   bd88a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bd88e:	b292      	uxth	r2, r2
   bd890:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bd894:	f84e 2b04 	str.w	r2, [lr], #4
   bd898:	1421      	asrs	r1, r4, #16
   bd89a:	e7e0      	b.n	bd85e <__mdiff+0xca>
   bd89c:	3f01      	subs	r7, #1
   bd89e:	e7ea      	b.n	bd876 <__mdiff+0xe2>
   bd8a0:	000be789 	.word	0x000be789
   bd8a4:	000be812 	.word	0x000be812

000bd8a8 <__ulp>:
   bd8a8:	b082      	sub	sp, #8
   bd8aa:	ed8d 0b00 	vstr	d0, [sp]
   bd8ae:	9b01      	ldr	r3, [sp, #4]
   bd8b0:	4912      	ldr	r1, [pc, #72]	; (bd8fc <__ulp+0x54>)
   bd8b2:	4019      	ands	r1, r3
   bd8b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bd8b8:	2900      	cmp	r1, #0
   bd8ba:	dd05      	ble.n	bd8c8 <__ulp+0x20>
   bd8bc:	2200      	movs	r2, #0
   bd8be:	460b      	mov	r3, r1
   bd8c0:	ec43 2b10 	vmov	d0, r2, r3
   bd8c4:	b002      	add	sp, #8
   bd8c6:	4770      	bx	lr
   bd8c8:	4249      	negs	r1, r1
   bd8ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bd8ce:	ea4f 5021 	mov.w	r0, r1, asr #20
   bd8d2:	f04f 0200 	mov.w	r2, #0
   bd8d6:	f04f 0300 	mov.w	r3, #0
   bd8da:	da04      	bge.n	bd8e6 <__ulp+0x3e>
   bd8dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bd8e0:	fa41 f300 	asr.w	r3, r1, r0
   bd8e4:	e7ec      	b.n	bd8c0 <__ulp+0x18>
   bd8e6:	f1a0 0114 	sub.w	r1, r0, #20
   bd8ea:	291e      	cmp	r1, #30
   bd8ec:	bfda      	itte	le
   bd8ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bd8f2:	fa20 f101 	lsrle.w	r1, r0, r1
   bd8f6:	2101      	movgt	r1, #1
   bd8f8:	460a      	mov	r2, r1
   bd8fa:	e7e1      	b.n	bd8c0 <__ulp+0x18>
   bd8fc:	7ff00000 	.word	0x7ff00000

000bd900 <__b2d>:
   bd900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd902:	6905      	ldr	r5, [r0, #16]
   bd904:	f100 0714 	add.w	r7, r0, #20
   bd908:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bd90c:	1f2e      	subs	r6, r5, #4
   bd90e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bd912:	4620      	mov	r0, r4
   bd914:	f7ff fd48 	bl	bd3a8 <__hi0bits>
   bd918:	f1c0 0320 	rsb	r3, r0, #32
   bd91c:	280a      	cmp	r0, #10
   bd91e:	f8df c07c 	ldr.w	ip, [pc, #124]	; bd99c <__b2d+0x9c>
   bd922:	600b      	str	r3, [r1, #0]
   bd924:	dc14      	bgt.n	bd950 <__b2d+0x50>
   bd926:	f1c0 0e0b 	rsb	lr, r0, #11
   bd92a:	fa24 f10e 	lsr.w	r1, r4, lr
   bd92e:	42b7      	cmp	r7, r6
   bd930:	ea41 030c 	orr.w	r3, r1, ip
   bd934:	bf34      	ite	cc
   bd936:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd93a:	2100      	movcs	r1, #0
   bd93c:	3015      	adds	r0, #21
   bd93e:	fa04 f000 	lsl.w	r0, r4, r0
   bd942:	fa21 f10e 	lsr.w	r1, r1, lr
   bd946:	ea40 0201 	orr.w	r2, r0, r1
   bd94a:	ec43 2b10 	vmov	d0, r2, r3
   bd94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd950:	42b7      	cmp	r7, r6
   bd952:	bf3a      	itte	cc
   bd954:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd958:	f1a5 0608 	subcc.w	r6, r5, #8
   bd95c:	2100      	movcs	r1, #0
   bd95e:	380b      	subs	r0, #11
   bd960:	d017      	beq.n	bd992 <__b2d+0x92>
   bd962:	f1c0 0c20 	rsb	ip, r0, #32
   bd966:	fa04 f500 	lsl.w	r5, r4, r0
   bd96a:	42be      	cmp	r6, r7
   bd96c:	fa21 f40c 	lsr.w	r4, r1, ip
   bd970:	ea45 0504 	orr.w	r5, r5, r4
   bd974:	bf8c      	ite	hi
   bd976:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bd97a:	2400      	movls	r4, #0
   bd97c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bd980:	fa01 f000 	lsl.w	r0, r1, r0
   bd984:	fa24 f40c 	lsr.w	r4, r4, ip
   bd988:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bd98c:	ea40 0204 	orr.w	r2, r0, r4
   bd990:	e7db      	b.n	bd94a <__b2d+0x4a>
   bd992:	ea44 030c 	orr.w	r3, r4, ip
   bd996:	460a      	mov	r2, r1
   bd998:	e7d7      	b.n	bd94a <__b2d+0x4a>
   bd99a:	bf00      	nop
   bd99c:	3ff00000 	.word	0x3ff00000

000bd9a0 <__d2b>:
   bd9a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bd9a4:	4689      	mov	r9, r1
   bd9a6:	2101      	movs	r1, #1
   bd9a8:	ec57 6b10 	vmov	r6, r7, d0
   bd9ac:	4690      	mov	r8, r2
   bd9ae:	f7ff fc09 	bl	bd1c4 <_Balloc>
   bd9b2:	4604      	mov	r4, r0
   bd9b4:	b930      	cbnz	r0, bd9c4 <__d2b+0x24>
   bd9b6:	4602      	mov	r2, r0
   bd9b8:	4b25      	ldr	r3, [pc, #148]	; (bda50 <__d2b+0xb0>)
   bd9ba:	4826      	ldr	r0, [pc, #152]	; (bda54 <__d2b+0xb4>)
   bd9bc:	f240 310a 	movw	r1, #778	; 0x30a
   bd9c0:	f7f9 ff0e 	bl	b77e0 <__assert_func>
   bd9c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bd9c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bd9cc:	bb35      	cbnz	r5, bda1c <__d2b+0x7c>
   bd9ce:	2e00      	cmp	r6, #0
   bd9d0:	9301      	str	r3, [sp, #4]
   bd9d2:	d028      	beq.n	bda26 <__d2b+0x86>
   bd9d4:	4668      	mov	r0, sp
   bd9d6:	9600      	str	r6, [sp, #0]
   bd9d8:	f7ff fd06 	bl	bd3e8 <__lo0bits>
   bd9dc:	9900      	ldr	r1, [sp, #0]
   bd9de:	b300      	cbz	r0, bda22 <__d2b+0x82>
   bd9e0:	9a01      	ldr	r2, [sp, #4]
   bd9e2:	f1c0 0320 	rsb	r3, r0, #32
   bd9e6:	fa02 f303 	lsl.w	r3, r2, r3
   bd9ea:	430b      	orrs	r3, r1
   bd9ec:	40c2      	lsrs	r2, r0
   bd9ee:	6163      	str	r3, [r4, #20]
   bd9f0:	9201      	str	r2, [sp, #4]
   bd9f2:	9b01      	ldr	r3, [sp, #4]
   bd9f4:	61a3      	str	r3, [r4, #24]
   bd9f6:	2b00      	cmp	r3, #0
   bd9f8:	bf14      	ite	ne
   bd9fa:	2202      	movne	r2, #2
   bd9fc:	2201      	moveq	r2, #1
   bd9fe:	6122      	str	r2, [r4, #16]
   bda00:	b1d5      	cbz	r5, bda38 <__d2b+0x98>
   bda02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bda06:	4405      	add	r5, r0
   bda08:	f8c9 5000 	str.w	r5, [r9]
   bda0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bda10:	f8c8 0000 	str.w	r0, [r8]
   bda14:	4620      	mov	r0, r4
   bda16:	b003      	add	sp, #12
   bda18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bda1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bda20:	e7d5      	b.n	bd9ce <__d2b+0x2e>
   bda22:	6161      	str	r1, [r4, #20]
   bda24:	e7e5      	b.n	bd9f2 <__d2b+0x52>
   bda26:	a801      	add	r0, sp, #4
   bda28:	f7ff fcde 	bl	bd3e8 <__lo0bits>
   bda2c:	9b01      	ldr	r3, [sp, #4]
   bda2e:	6163      	str	r3, [r4, #20]
   bda30:	2201      	movs	r2, #1
   bda32:	6122      	str	r2, [r4, #16]
   bda34:	3020      	adds	r0, #32
   bda36:	e7e3      	b.n	bda00 <__d2b+0x60>
   bda38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bda3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bda40:	f8c9 0000 	str.w	r0, [r9]
   bda44:	6918      	ldr	r0, [r3, #16]
   bda46:	f7ff fcaf 	bl	bd3a8 <__hi0bits>
   bda4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bda4e:	e7df      	b.n	bda10 <__d2b+0x70>
   bda50:	000be789 	.word	0x000be789
   bda54:	000be812 	.word	0x000be812

000bda58 <__ratio>:
   bda58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bda5c:	4688      	mov	r8, r1
   bda5e:	4669      	mov	r1, sp
   bda60:	4681      	mov	r9, r0
   bda62:	f7ff ff4d 	bl	bd900 <__b2d>
   bda66:	a901      	add	r1, sp, #4
   bda68:	4640      	mov	r0, r8
   bda6a:	ec55 4b10 	vmov	r4, r5, d0
   bda6e:	f7ff ff47 	bl	bd900 <__b2d>
   bda72:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bda76:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bda7a:	eba3 0c02 	sub.w	ip, r3, r2
   bda7e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bda82:	1a9b      	subs	r3, r3, r2
   bda84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bda88:	ec51 0b10 	vmov	r0, r1, d0
   bda8c:	2b00      	cmp	r3, #0
   bda8e:	bfd6      	itet	le
   bda90:	460a      	movle	r2, r1
   bda92:	462a      	movgt	r2, r5
   bda94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bda98:	468b      	mov	fp, r1
   bda9a:	462f      	mov	r7, r5
   bda9c:	bfd4      	ite	le
   bda9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bdaa2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bdaa6:	4620      	mov	r0, r4
   bdaa8:	ee10 2a10 	vmov	r2, s0
   bdaac:	465b      	mov	r3, fp
   bdaae:	4639      	mov	r1, r7
   bdab0:	f7f6 fd9c 	bl	b45ec <__aeabi_ddiv>
   bdab4:	ec41 0b10 	vmov	d0, r0, r1
   bdab8:	b003      	add	sp, #12
   bdaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bdabe <__copybits>:
   bdabe:	3901      	subs	r1, #1
   bdac0:	b570      	push	{r4, r5, r6, lr}
   bdac2:	1149      	asrs	r1, r1, #5
   bdac4:	6914      	ldr	r4, [r2, #16]
   bdac6:	3101      	adds	r1, #1
   bdac8:	f102 0314 	add.w	r3, r2, #20
   bdacc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bdad0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bdad4:	1f05      	subs	r5, r0, #4
   bdad6:	42a3      	cmp	r3, r4
   bdad8:	d30c      	bcc.n	bdaf4 <__copybits+0x36>
   bdada:	1aa3      	subs	r3, r4, r2
   bdadc:	3b11      	subs	r3, #17
   bdade:	f023 0303 	bic.w	r3, r3, #3
   bdae2:	3211      	adds	r2, #17
   bdae4:	42a2      	cmp	r2, r4
   bdae6:	bf88      	it	hi
   bdae8:	2300      	movhi	r3, #0
   bdaea:	4418      	add	r0, r3
   bdaec:	2300      	movs	r3, #0
   bdaee:	4288      	cmp	r0, r1
   bdaf0:	d305      	bcc.n	bdafe <__copybits+0x40>
   bdaf2:	bd70      	pop	{r4, r5, r6, pc}
   bdaf4:	f853 6b04 	ldr.w	r6, [r3], #4
   bdaf8:	f845 6f04 	str.w	r6, [r5, #4]!
   bdafc:	e7eb      	b.n	bdad6 <__copybits+0x18>
   bdafe:	f840 3b04 	str.w	r3, [r0], #4
   bdb02:	e7f4      	b.n	bdaee <__copybits+0x30>

000bdb04 <__any_on>:
   bdb04:	f100 0214 	add.w	r2, r0, #20
   bdb08:	6900      	ldr	r0, [r0, #16]
   bdb0a:	114b      	asrs	r3, r1, #5
   bdb0c:	4298      	cmp	r0, r3
   bdb0e:	b510      	push	{r4, lr}
   bdb10:	db11      	blt.n	bdb36 <__any_on+0x32>
   bdb12:	dd0a      	ble.n	bdb2a <__any_on+0x26>
   bdb14:	f011 011f 	ands.w	r1, r1, #31
   bdb18:	d007      	beq.n	bdb2a <__any_on+0x26>
   bdb1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bdb1e:	fa24 f001 	lsr.w	r0, r4, r1
   bdb22:	fa00 f101 	lsl.w	r1, r0, r1
   bdb26:	428c      	cmp	r4, r1
   bdb28:	d10b      	bne.n	bdb42 <__any_on+0x3e>
   bdb2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bdb2e:	4293      	cmp	r3, r2
   bdb30:	d803      	bhi.n	bdb3a <__any_on+0x36>
   bdb32:	2000      	movs	r0, #0
   bdb34:	bd10      	pop	{r4, pc}
   bdb36:	4603      	mov	r3, r0
   bdb38:	e7f7      	b.n	bdb2a <__any_on+0x26>
   bdb3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bdb3e:	2900      	cmp	r1, #0
   bdb40:	d0f5      	beq.n	bdb2e <__any_on+0x2a>
   bdb42:	2001      	movs	r0, #1
   bdb44:	e7f6      	b.n	bdb34 <__any_on+0x30>

000bdb46 <_calloc_r>:
   bdb46:	b513      	push	{r0, r1, r4, lr}
   bdb48:	434a      	muls	r2, r1
   bdb4a:	4611      	mov	r1, r2
   bdb4c:	9201      	str	r2, [sp, #4]
   bdb4e:	f7f9 fe37 	bl	b77c0 <_malloc_r>
   bdb52:	4604      	mov	r4, r0
   bdb54:	b118      	cbz	r0, bdb5e <_calloc_r+0x18>
   bdb56:	9a01      	ldr	r2, [sp, #4]
   bdb58:	2100      	movs	r1, #0
   bdb5a:	f7fd fffd 	bl	bbb58 <memset>
   bdb5e:	4620      	mov	r0, r4
   bdb60:	b002      	add	sp, #8
   bdb62:	bd10      	pop	{r4, pc}
   bdb64:	0000      	movs	r0, r0
	...

000bdb68 <nan>:
   bdb68:	ed9f 0b01 	vldr	d0, [pc, #4]	; bdb70 <nan+0x8>
   bdb6c:	4770      	bx	lr
   bdb6e:	bf00      	nop
   bdb70:	00000000 	.word	0x00000000
   bdb74:	7ff80000 	.word	0x7ff80000

000bdb78 <__ascii_wctomb>:
   bdb78:	b149      	cbz	r1, bdb8e <__ascii_wctomb+0x16>
   bdb7a:	2aff      	cmp	r2, #255	; 0xff
   bdb7c:	bf85      	ittet	hi
   bdb7e:	238a      	movhi	r3, #138	; 0x8a
   bdb80:	6003      	strhi	r3, [r0, #0]
   bdb82:	700a      	strbls	r2, [r1, #0]
   bdb84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bdb88:	bf98      	it	ls
   bdb8a:	2001      	movls	r0, #1
   bdb8c:	4770      	bx	lr
   bdb8e:	4608      	mov	r0, r1
   bdb90:	4770      	bx	lr

000bdb92 <link_code_end>:
	...

000bdb94 <dynalib_user>:
   bdb94:	4d91 000b 4dcd 000b 4df5 000b 4df9 000b     .M...M...M...M..
   bdba4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bdbb4:	7620 7269 7574 6c61 6400 7665 6369 2d65      virtual.device-
   bdbc4:	6f63 666e 6769 6400 7665 6369 2d65 6f6c     config.device-lo
   bdbd4:	6767 6e69 0067 0000                         gging...

000bdbdc <_ZTVN5spark10LogHandlerE>:
	...
   bdbec:	4e19 000b 4e41 000b                         .N..AN..

000bdbf4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   bdbfc:	4e45 000b 4e79 000b 9459 000b 95fd 000b     EN..yN..Y.......
   bdc0c:	7274 6575 6600 6c61 6573 4100 7373 7265     true.false.Asser
   bdc1c:	6974 6e6f 6146 6c69 7275 2065 2e72 6365     tionFailure r.ec
   bdc2c:	3d20 203d 7473 3a64 653a 7272 2863 0029      == std::errc().
   bdc3c:	6564 6976 6563 692d 666e 006f 4157 4e52     device-info.WARN
   bdc4c:	5400 4152 4543 4e00 4e4f 0045 4e49 4f46     .TRACE.NONE.INFO
   bdc5c:	4500 5252 524f 5000 4e41 4349 4100 4c4c     .ERROR.PANIC.ALL
   bdc6c:	6400 7665 6369 2d65 6e69 6f66 642d 6665     .device-info-def
   bdc7c:	7561 746c 0073 6564 6976 6563 692d 666e     aults.device-inf
   bdc8c:	2d6f 6f63 666e 6769 6c00 676f 654c 6576     o-config.logLeve
   bdc9c:	006c 6f6c 4667 6c69 6574 7372 7600 6365     l.logFilters.vec
   bdcac:	6f74 3a72 5f3a 5f4d 6572 6c61 6f6c 5f63     tor::_M_realloc_
   bdcbc:	6e69 6573 7472 6300 6e6f 4c6e 676f 6c00     insert.connLog.l
   bdccc:	7361 5274 6e75 7200 7365 7465 6552 7361     astRun.resetReas
   bdcdc:	6e6f 7200 7365 7465 6552 7361 6e6f 6144     on.resetReasonDa
   bdcec:	6174 6900 636e 756c 6564 6944 6761 6400     ta.includeDiag.d
   bdcfc:	6169 0067 6e69 6c63 6475 5465 776f 7265     iag.includeTower
   bdd0c:	6d00 6363 6d00 636e 6300 6469 6c00 6361     .mcc.mnc.cid.lac
   bdd1c:	7400 776f 7265 4300 6c65 756c 616c 2072     .tower.Cellular 
   bdd2c:	6e49 6f66 203a 6963 3d64 6c25 2075 616c     Info: cid=%lu la
   bdd3c:	3d63 7525 6d20 6363 253d 2075 6e6d 3d63     c=%u mcc=%u mnc=
   bdd4c:	7525 6300 6c65 756c 616c 5f72 6c67 626f     %u.cellular_glob
   bdd5c:	6c61 695f 6564 746e 7469 2079 6166 6c69     al_identity fail
   bdd6c:	6465 2520 0064 6e69 6c63 6475 4765 6e65     ed %d.includeGen
   bdd7c:	7265 6c61 7300 7379 6576 0072 6e69 6f66     eral.sysver.info
   bdd8c:	654c 6764 7265 7520 6470 7461 6465 6c00     Ledger updated.l
   bdd9c:	7361 5274 6e75 6f4c 0067 6f63 6e6e 6365     astRunLog.connec
   bddac:	6974 6e6f 6f4c 0067 7075 6164 6574 6f43     tionLog.updateCo
   bddbc:	666e 6769 6c20 7361 5274 6e75 6f4c 3d67     nfig lastRunLog=
   bddcc:	6425 6320 6e6f 656e 7463 6f69 4c6e 676f     %d connectionLog
   bdddc:	253d 2064 6f6c 4c67 7665 6c65 253d 0073     =%d logLevel=%s.
   bddec:	6572 6174 6e69 6465 6220 6675 6566 2072     retained buffer 
   bddfc:	6176 696c 0064 6572 6174 6e69 6465 6220     valid.retained b
   bde0c:	6675 6566 2072 6572 6e69 7469 6169 696c     uffer reinitiali
   bde1c:	657a 0064 7061 2e70 6564 6976 666e 006f     zed.app.devinfo.

000bde2c <_ZNSt8__detail9__variant12__gen_vtableINS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEEaSEOSH_EUlOT_T0_E_JRSt7variantIJS4_bijxydS5_S7_SC_SG_EEEE9_S_vtableE>:
   bde2c:	5d55 000b 5d5f 000b 6019 000b 5ffb 000b     U].._]...`..._..
   bde3c:	5fdd 000b 5fbb 000b 5f99 000b 5f77 000b     ._..._..._..w_..
   bde4c:	5f3d 000b 5f03 000b 5ea7 000b 632d 000b     =_..._...^..-c..

000bde5c <_ZNSt8__detail9__variant12__gen_vtableINS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE4swapERSH_EUlOT_T0_E_JSI_EE9_S_vtableE>:
   bde5c:	5e57 000b 5e71 000b 5e0b 000b 5dbf 000b     W^..q^...^...]..
   bde6c:	5d73 000b 60ef 000b 6093 000b 6037 000b     s]...`...`..7`..
   bde7c:	622f 000b 61bd 000b 614b 000b 62b5 000b     /b...a..Ka...b..

000bde8c <_ZNSt8__detail9__variant12__gen_vtableINS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEERNS0_15_Copy_ctor_baseILb0EJS4_bijxydS5_S7_SC_SG_EEERKSI_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS4_bijxydS5_S7_SC_SG_EEEE9_S_vtableE>:
   bde8c:	5203 000b 5201 000b 5205 000b 520d 000b     .R...R...R...R..
   bde9c:	5215 000b 53c3 000b 53b7 000b 53ab 000b     .R...S...S...S..
   bdeac:	53a5 000b 576d 000b 6885 000b 6671 000b     .S..mW...h..qf..

000bdebc <_ZNSt8__detail9__variant12__gen_vtableIvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS5_7VariantENS7_16DefaultAllocatorEEENS5_3MapIS4_S9_St4lessIS4_EEEEE8_M_resetEvEUlOT_E_JRSt7variantIJS3_bijxydS4_S6_SB_SF_EEEE9_S_vtableE>:
   bdebc:	51f3 000b 51f5 000b 51f7 000b 51f9 000b     .Q...Q...Q...Q..
   bdecc:	51fb 000b 51fd 000b 51ff 000b 5291 000b     .Q...Q...Q...R..
   bdedc:	5493 000b 5ccd 000b 5c9d 000b               .T...\...\..

000bdee8 <_ZNSt8__detail9__variant12__gen_vtableINS0_21__deduce_visit_resultIN8particle3MapI6StringNS3_7VariantESt4lessIS5_EEEEEONS6_16ConvertToVisitorIS9_vEEJRKSt7variantIJSt9monostatebijxydS5_NS3_6BufferEN5spark6VectorIS6_NSH_16DefaultAllocatorEEES9_EEEE9_S_vtableE>:
   bdee8:	518f 000b 5199 000b 51a3 000b 51ad 000b     .Q...Q...Q...Q..
   bdef8:	51b7 000b 51c1 000b 51cb 000b 51d5 000b     .Q...Q...Q...Q..
   bdf08:	51df 000b 51e9 000b 665f 000b               .Q...Q.._f..

000bdf14 <_ZNSt8__detail9__variant12__gen_vtableINS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS3_vEEJRKSt7variantIJSt9monostatebijxydS3_NS5_6BufferEN5spark6VectorIS6_NSD_16DefaultAllocatorEEENS5_3MapIS3_S6_St4lessIS3_EEEEEEE9_S_vtableE>:
   bdf14:	5241 000b 521d 000b 5999 000b 5945 000b     AR...R...Y..EY..
   bdf24:	5b35 000b 5ad9 000b 52a9 000b 5297 000b     5[...Z...R...R..
   bdf34:	5255 000b 5269 000b 527d 000b               UR..iR..}R..

000bdf40 <_ZNSt8__detail9__variant12__gen_vtableINS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEEJRKSt7variantIJSt9monostatebijxyd6StringNS4_6BufferEN5spark6VectorIS5_NSD_16DefaultAllocatorEEENS4_3MapISB_S5_St4lessISB_EEEEEEE9_S_vtableE>:
   bdf40:	5147 000b 514b 000b 5153 000b 515b 000b     GQ..KQ..SQ..[Q..
   bdf50:	5163 000b 516b 000b 5173 000b 540d 000b     cQ..kQ..sQ...T..
   bdf60:	5183 000b 5187 000b 518b 000b               .Q...Q...Q..

000bdf6c <_ZNSt8__detail9__variant12__gen_vtableINS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEEJRKSt7variantIJSt9monostatebijxyd6StringNS4_6BufferEN5spark6VectorIS5_NSD_16DefaultAllocatorEEENS4_3MapISB_S5_St4lessISB_EEEEEEE9_S_vtableE>:
   bdf6c:	50d1 000b 50d5 000b 50dd 000b 50eb 000b     .P...P...P...P..
   bdf7c:	50f9 000b 510b 000b 511d 000b 5311 000b     .P...Q...Q...S..
   bdf8c:	513b 000b 513f 000b 5143 000b               ;Q..?Q..CQ..

000bdf98 <_ZZNSt8__detail18__to_chars_10_implIyEEvPcjT_E8__digits>:
   bdf98:	3030 3130 3230 3330 3430 3530 3630 3730     0001020304050607
   bdfa8:	3830 3930 3031 3131 3231 3331 3431 3531     0809101112131415
   bdfb8:	3631 3731 3831 3931 3032 3132 3232 3332     1617181920212223
   bdfc8:	3432 3532 3632 3732 3832 3932 3033 3133     2425262728293031
   bdfd8:	3233 3333 3433 3533 3633 3733 3833 3933     3233343536373839
   bdfe8:	3034 3134 3234 3334 3434 3534 3634 3734     4041424344454647
   bdff8:	3834 3934 3035 3135 3235 3335 3435 3535     4849505152535455
   be008:	3635 3735 3835 3935 3036 3136 3236 3336     5657585960616263
   be018:	3436 3536 3636 3736 3836 3936 3037 3137     6465666768697071
   be028:	3237 3337 3437 3537 3637 3737 3837 3937     7273747576777879
   be038:	3038 3138 3238 3338 3438 3538 3638 3738     8081828384858687
   be048:	3838 3938 3039 3139 3239 3339 3439 3539     8889909192939495
   be058:	3639 3739 3839 3939                          96979899.

000be061 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits>:
   be061:	3030 3130 3230 3330 3430 3530 3630 3730     0001020304050607
   be071:	3830 3930 3031 3131 3231 3331 3431 3531     0809101112131415
   be081:	3631 3731 3831 3931 3032 3132 3232 3332     1617181920212223
   be091:	3432 3532 3632 3732 3832 3932 3033 3133     2425262728293031
   be0a1:	3233 3333 3433 3533 3633 3733 3833 3933     3233343536373839
   be0b1:	3034 3134 3234 3334 3434 3534 3634 3734     4041424344454647
   be0c1:	3834 3934 3035 3135 3235 3335 3435 3535     4849505152535455
   be0d1:	3635 3735 3835 3935 3036 3136 3236 3336     5657585960616263
   be0e1:	3436 3536 3636 3736 3836 3936 3037 3137     6465666768697071
   be0f1:	3237 3337 3437 3537 3637 3737 3837 3937     7273747576777879
   be101:	3038 3138 3238 3338 3438 3538 3638 3738     8081828384858687
   be111:	3838 3938 3039 3139 3239 3339 3439 3539     8889909192939495
   be121:	3639 3739 3839 3939 0000                     96979899...

000be12c <_ZTV16DeviceInfoLedger>:
	...
   be134:	559d 000b 55b9 000b 6b11 000b               .U...U...k..

000be140 <_ZTV18DeviceConfigLedger>:
	...
   be148:	5cd9 000b 5d41 000b                         .\..A]..

000be150 <_ZTV26DeviceInfoLedgerLogHandler>:
	...
   be158:	53d1 000b 53f1 000b 9459 000b 95fd 000b     .S...S..Y.......
   be168:	5713 000b ffdc ffff 0000 0000 53e9 000b     .W...........S..
   be178:	5405 000b 5729 000b 9941 000b               .T..)W..A...

000be184 <_ZTVN5spark13CellularClassE>:
	...
   be18c:	7917 000b 790d 000b 7903 000b 78b9 000b     .y...y...y...x..
   be19c:	78f7 000b 78eb 000b 97e9 000b 97f1 000b     .x...x..........
   be1ac:	78df 000b 78d7 000b 78cd 000b 78c3 000b     .x...x...x...x..
   be1bc:	9919 000b 9821 000b 9829 000b 6977 6972     ....!...)...wiri
   be1cc:	676e 4600 6961 656c 2064 6f74 7020 7261     ng.Failed to par
   be1dc:	6573 4320 4f42 3a52 2520 0064 656c 6764     se CBOR: %d.ledg
   be1ec:	7265 675f 7465 695f 736e 6174 636e 2865     er_get_instance(
   be1fc:	2029 6166 6c69 6465 203a 6425 0000 0000     ) failed: %d....

000be20c <_ZTVN5spark13EthernetClassE>:
	...
   be214:	79f3 000b 79e9 000b 79df 000b 79d5 000b     .y...y...y...y..
   be224:	79c9 000b 79bd 000b 97e9 000b 97f1 000b     .y...y..........
   be234:	79b1 000b 79a9 000b 799f 000b 7995 000b     .y...y...y...y..
   be244:	9919 000b 9821 000b 9829 000b               ....!...)...

000be250 <_ZTV9IPAddress>:
	...
   be258:	7a3d 000b 7a2d 000b 7a2f 000b 2e30 0030     =z..-z../z..0.0.
   be268:	2575 3430 0078 0000                         u%04x...

000be270 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be278:	7b4b 000b 7b51 000b 7bd7 000b 7b5f 000b     K{..Q{...{.._{..
   be288:	7b4d 000b 656c 6764 7265 725f 6165 2864     M{..ledger_read(
   be298:	2029 6166 6c69 6465 203a 6425 6c00 6465     ) failed: %d.led
   be2a8:	6567 5f72 7277 7469 2865 2029 6166 6c69     ger_write() fail
   be2b8:	6465 203a 6425 6c00 6465 6567 5f72 6c63     ed: %d.ledger_cl
   be2c8:	736f 2865 2029 6166 6c69 6465 203a 6425     ose() failed: %d
   be2d8:	6c00 6465 6567 5f72 706f 6e65 2928 6620     .ledger_open() f
   be2e8:	6961 656c 3a64 2520 0064 6146 6c69 6465     ailed: %d.Failed
   be2f8:	7420 206f 6e65 6f63 6564 6c20 6465 6567      to encode ledge
   be308:	2072 6164 6174 203a 6425 4600 6961 656c     r data: %d.Faile
   be318:	2064 6f74 6420 6365 646f 2065 656c 6764     d to decode ledg
   be328:	7265 6420 7461 3a61 2520 0064 6e55 7865     er data: %d.Unex
   be338:	6570 7463 6465 7420 7079 2065 666f 6c20     pected type of l
   be348:	6465 6567 2072 6164 6174 0000               edger data..

000be354 <_ZTVN8particle12_GLOBAL__N_112LedgerStreamE>:
	...
   be35c:	83ad 000b 83c5 000b 834d 000b 82fd 000b     ........M.......
   be36c:	827d 000b 82dd 000b 827d 000b 8283 000b     }.......}.......
   be37c:	8285 000b 6162 6475 5300 7265 6169 006c     ....baud.Serial.
   be38c:	6553 6972 6c61 0031 534a 4e4f 7453 6572     Serial1.JSONStre
   be39c:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   be3ac:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
   be3bc:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
   be3cc:	6400 7465 6961 736c 3d20 0020 0a0d 6d00     .details = ....m
   be3dc:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   be3ec:	6c69 0000                                   il..

000be3f0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   be3f8:	88d9 000b 88ff 000b 88b1 000b 7b67 000b     ............g{..

000be408 <_ZTVN5spark16StreamLogHandlerE>:
	...
   be410:	8d61 000b 8d79 000b 9459 000b 95fd 000b     a...y...Y.......

000be420 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   be428:	8d8d 000b 8da1 000b 9635 000b 88c5 000b     ........5.......

000be438 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   be440:	88d7 000b 890d 000b 93bd 000b 88c7 000b     ................

000be450 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   be458:	88d5 000b 891b 000b 8cc9 000b 893d 000b     ............=...

000be468 <CSWTCH.109>:
   be468:	e6a4 2003 e674 2003 e6f8 2003 e720 2003     ... t.. ...  .. 

000be478 <_ZTVN5spark12NetworkClassE>:
	...
   be480:	97a9 000b 97b3 000b 97bd 000b 97c7 000b     ................
   be490:	97d1 000b 97dd 000b 97e9 000b 97f1 000b     ................
   be4a0:	97f9 000b 9805 000b 980d 000b 9817 000b     ................
   be4b0:	9919 000b 9821 000b 9829 000b               ....!...)...

000be4bc <_ZTVN8particle11TetherClassE>:
	...
   be4c4:	9cdf 000b 9cd5 000b 9ccb 000b 9cc1 000b     ................
   be4d4:	9cb5 000b 9ca9 000b 97e9 000b 97f1 000b     ................
   be4e4:	9c9d 000b 9c95 000b 9c8b 000b 9c81 000b     ................
   be4f4:	9919 000b 9821 000b 9829 000b 5925 252d     ....!...)...%Y-%
   be504:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   be514:	7361 7463 6d69 0065                         asctime.

000be51c <_ZTV11USARTSerial>:
	...
   be524:	9d11 000b 9d7d 000b 9d55 000b 9941 000b     ....}...U...A...
   be534:	9d25 000b 9d41 000b 9d33 000b 9d4f 000b     %...A...3...O...
   be544:	9a0b 000b 9d13 000b 9d17 000b               ............

000be550 <_ZTV9USBSerial>:
	...
   be558:	9dcf 000b 9e37 000b 9e0d 000b 9941 000b     ....7.......A...
   be568:	9dff 000b 9dd1 000b 9de1 000b 9e31 000b     ............1...
   be578:	9a0b 000b 9df1 000b 9dc9 000b 6725 0000     ............%g..

000be588 <_ZNSt8__detail9__variant12__gen_vtableINS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS3_16DefaultAllocatorEEEEEONS6_16ConvertToVisitorIS8_vEEJRKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferES8_NS5_3MapISF_S6_St4lessISF_EEEEEEE9_S_vtableE>:
   be588:	9edd 000b 9ee7 000b 9ef1 000b 9efb 000b     ................
   be598:	9f05 000b 9f0f 000b 9f19 000b 9f23 000b     ............#...
   be5a8:	9f2d 000b a755 000b 9f37 000b               -...U...7...

000be5b4 <_ZSt7nothrow>:
   be5b4:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   be5c4:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   be5d4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   be5e4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   be5f4:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   be604:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   be614:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   be624:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000be634 <fpi.1>:
   be634:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   be644:	0000 0000                                   ....

000be648 <fpinan.0>:
   be648:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000be660 <tinytens>:
   be660:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   be670:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   be680:	6f43 64ac 0628 1168                         Co.d(.h.

000be688 <_ctype_>:
   be688:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   be698:	2020 2020 2020 2020 2020 2020 2020 2020                     
   be6a8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   be6b8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   be6c8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   be6d8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   be6e8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   be6f8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   be708:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   be788:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   be798:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   be7a8:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   be7b8:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   be7c8:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   be7d8:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   be7e8:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   be7f8:	632e 2e00 0000 0000                         .c......

000be800 <_C_numeric_locale>:
   be800:	e7fb 000b e3da 000b e4c4 2003 4f50 4953     ........... POSI
   be810:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   be820:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   be830:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   be840:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   be850:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   be860:	696c 2f62 706d 6572 2e63 0063 0000 0000     lib/mprec.c.....

000be870 <__mprec_bigtens>:
   be870:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   be880:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   be890:	bf3c 7f73 4fdd 7515                         <.s..O.u

000be898 <__mprec_tens>:
   be898:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   be8a8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   be8b8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   be8c8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   be8d8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   be8e8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   be8f8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   be908:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   be918:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   be928:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   be938:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   be948:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   be958:	9db4 79d9 7843 44ea                         ...yCx.D

000be960 <p05.0>:
   be960:	0005 0000 0019 0000 007d 0000               ........}...

000be96c <link_const_data_end>:
   be96c:	000b5009 	.word	0x000b5009
   be970:	000b720d 	.word	0x000b720d
   be974:	000b78a9 	.word	0x000b78a9
   be978:	000b7921 	.word	0x000b7921
   be97c:	000b79fd 	.word	0x000b79fd
   be980:	000b7a11 	.word	0x000b7a11
   be984:	000b9449 	.word	0x000b9449
   be988:	000b992d 	.word	0x000b992d
   be98c:	000b99d5 	.word	0x000b99d5
   be990:	000b9c5d 	.word	0x000b9c5d
   be994:	000b9ce9 	.word	0x000b9ce9
   be998:	000b9cfd 	.word	0x000b9cfd
