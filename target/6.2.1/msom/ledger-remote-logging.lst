
/Users/erik/Documents/GitHub/ledger-remote-logging/target/6.2.1/msom/ledger-remote-logging.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f4000  085f4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f4018  085f4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085f40a4  085f40a4  000040a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023f51b8  085f40b0  000051b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   0000ae34  023f51c0  085f40b8  000051c0  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  7 .data         000001e8  1007ac34  085feeec  0001ac34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000001e0  1007ae1c  1007ae1c  0002ae1c  2**2
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
 10 .backup       00000804  1007b400  085ff0d4  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 000006e0  085ff8d8  085ff8d8  0001f8d8  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00272542  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001896c  00000000  00000000  00292542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000a8961  00000000  00000000  002aaeae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000042e0  00000000  00000000  0035380f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0001a258  00000000  00000000  00357aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000293c5  00000000  00000000  00371d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00060950  00000000  00000000  0039b10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001a332a  00000000  00000000  003fba5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000cfac  00000000  00000000  0059ed88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f4018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f4018:	4813      	ldr	r0, [pc, #76]	; (85f4068 <module_user_pre_init+0x50>)
 85f401a:	4914      	ldr	r1, [pc, #80]	; (85f406c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f401c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f401e:	4288      	cmp	r0, r1
 85f4020:	d005      	beq.n	85f402e <module_user_pre_init+0x16>
 85f4022:	4a13      	ldr	r2, [pc, #76]	; (85f4070 <module_user_pre_init+0x58>)
 85f4024:	4282      	cmp	r2, r0
 85f4026:	d002      	beq.n	85f402e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f4028:	4b12      	ldr	r3, [pc, #72]	; (85f4074 <module_user_pre_init+0x5c>)
 85f402a:	1a12      	subs	r2, r2, r0
 85f402c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f402e:	4812      	ldr	r0, [pc, #72]	; (85f4078 <module_user_pre_init+0x60>)
 85f4030:	4a12      	ldr	r2, [pc, #72]	; (85f407c <module_user_pre_init+0x64>)
 85f4032:	2100      	movs	r1, #0
 85f4034:	4b12      	ldr	r3, [pc, #72]	; (85f4080 <module_user_pre_init+0x68>)
 85f4036:	1a12      	subs	r2, r2, r0
 85f4038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f403a:	4812      	ldr	r0, [pc, #72]	; (85f4084 <module_user_pre_init+0x6c>)
 85f403c:	4912      	ldr	r1, [pc, #72]	; (85f4088 <module_user_pre_init+0x70>)
 85f403e:	4288      	cmp	r0, r1
 85f4040:	d005      	beq.n	85f404e <module_user_pre_init+0x36>
 85f4042:	4a12      	ldr	r2, [pc, #72]	; (85f408c <module_user_pre_init+0x74>)
 85f4044:	4282      	cmp	r2, r0
 85f4046:	d002      	beq.n	85f404e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f4048:	4b0a      	ldr	r3, [pc, #40]	; (85f4074 <module_user_pre_init+0x5c>)
 85f404a:	1a12      	subs	r2, r2, r0
 85f404c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f404e:	4810      	ldr	r0, [pc, #64]	; (85f4090 <module_user_pre_init+0x78>)
 85f4050:	4910      	ldr	r1, [pc, #64]	; (85f4094 <module_user_pre_init+0x7c>)
 85f4052:	4288      	cmp	r0, r1
 85f4054:	d005      	beq.n	85f4062 <module_user_pre_init+0x4a>
 85f4056:	4a10      	ldr	r2, [pc, #64]	; (85f4098 <module_user_pre_init+0x80>)
 85f4058:	4282      	cmp	r2, r0
 85f405a:	d002      	beq.n	85f4062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f405c:	4b05      	ldr	r3, [pc, #20]	; (85f4074 <module_user_pre_init+0x5c>)
 85f405e:	1a12      	subs	r2, r2, r0
 85f4060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f4062:	4801      	ldr	r0, [pc, #4]	; (85f4068 <module_user_pre_init+0x50>)
 85f4064:	bd08      	pop	{r3, pc}
 85f4066:	bf00      	nop
 85f4068:	1007ac34 	.word	0x1007ac34
 85f406c:	085feeec 	.word	0x085feeec
 85f4070:	1007ae1c 	.word	0x1007ae1c
 85f4074:	10110d2d 	.word	0x10110d2d
 85f4078:	1007ae1c 	.word	0x1007ae1c
 85f407c:	1007affc 	.word	0x1007affc
 85f4080:	10110ea1 	.word	0x10110ea1
 85f4084:	023f51b8 	.word	0x023f51b8
 85f4088:	085f40b0 	.word	0x085f40b0
 85f408c:	023f51c0 	.word	0x023f51c0
 85f4090:	023f51c0 	.word	0x023f51c0
 85f4094:	085f40b8 	.word	0x085f40b8
 85f4098:	023ffff4 	.word	0x023ffff4

085f409c <dynalib_preinit>:
 85f409c:	085f4019 00000000                       .@_.....

Disassembly of section .psram_text:

023f51c0 <__aeabi_drsub>:
 23f51c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23f51c4:	e002      	b.n	23f51cc <__adddf3>
 23f51c6:	bf00      	nop

023f51c8 <__aeabi_dsub>:
 23f51c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023f51cc <__adddf3>:
 23f51cc:	b530      	push	{r4, r5, lr}
 23f51ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23f51d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23f51d6:	ea94 0f05 	teq	r4, r5
 23f51da:	bf08      	it	eq
 23f51dc:	ea90 0f02 	teqeq	r0, r2
 23f51e0:	bf1f      	itttt	ne
 23f51e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 23f51e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 23f51ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23f51ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f51f2:	f000 80e2 	beq.w	23f53ba <__adddf3+0x1ee>
 23f51f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23f51fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23f51fe:	bfb8      	it	lt
 23f5200:	426d      	neglt	r5, r5
 23f5202:	dd0c      	ble.n	23f521e <__adddf3+0x52>
 23f5204:	442c      	add	r4, r5
 23f5206:	ea80 0202 	eor.w	r2, r0, r2
 23f520a:	ea81 0303 	eor.w	r3, r1, r3
 23f520e:	ea82 0000 	eor.w	r0, r2, r0
 23f5212:	ea83 0101 	eor.w	r1, r3, r1
 23f5216:	ea80 0202 	eor.w	r2, r0, r2
 23f521a:	ea81 0303 	eor.w	r3, r1, r3
 23f521e:	2d36      	cmp	r5, #54	; 0x36
 23f5220:	bf88      	it	hi
 23f5222:	bd30      	pophi	{r4, r5, pc}
 23f5224:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f5228:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f522c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23f5230:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23f5234:	d002      	beq.n	23f523c <__adddf3+0x70>
 23f5236:	4240      	negs	r0, r0
 23f5238:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f523c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23f5240:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f5244:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23f5248:	d002      	beq.n	23f5250 <__adddf3+0x84>
 23f524a:	4252      	negs	r2, r2
 23f524c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f5250:	ea94 0f05 	teq	r4, r5
 23f5254:	f000 80a7 	beq.w	23f53a6 <__adddf3+0x1da>
 23f5258:	f1a4 0401 	sub.w	r4, r4, #1
 23f525c:	f1d5 0e20 	rsbs	lr, r5, #32
 23f5260:	db0d      	blt.n	23f527e <__adddf3+0xb2>
 23f5262:	fa02 fc0e 	lsl.w	ip, r2, lr
 23f5266:	fa22 f205 	lsr.w	r2, r2, r5
 23f526a:	1880      	adds	r0, r0, r2
 23f526c:	f141 0100 	adc.w	r1, r1, #0
 23f5270:	fa03 f20e 	lsl.w	r2, r3, lr
 23f5274:	1880      	adds	r0, r0, r2
 23f5276:	fa43 f305 	asr.w	r3, r3, r5
 23f527a:	4159      	adcs	r1, r3
 23f527c:	e00e      	b.n	23f529c <__adddf3+0xd0>
 23f527e:	f1a5 0520 	sub.w	r5, r5, #32
 23f5282:	f10e 0e20 	add.w	lr, lr, #32
 23f5286:	2a01      	cmp	r2, #1
 23f5288:	fa03 fc0e 	lsl.w	ip, r3, lr
 23f528c:	bf28      	it	cs
 23f528e:	f04c 0c02 	orrcs.w	ip, ip, #2
 23f5292:	fa43 f305 	asr.w	r3, r3, r5
 23f5296:	18c0      	adds	r0, r0, r3
 23f5298:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23f529c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f52a0:	d507      	bpl.n	23f52b2 <__adddf3+0xe6>
 23f52a2:	f04f 0e00 	mov.w	lr, #0
 23f52a6:	f1dc 0c00 	rsbs	ip, ip, #0
 23f52aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 23f52ae:	eb6e 0101 	sbc.w	r1, lr, r1
 23f52b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23f52b6:	d31b      	bcc.n	23f52f0 <__adddf3+0x124>
 23f52b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23f52bc:	d30c      	bcc.n	23f52d8 <__adddf3+0x10c>
 23f52be:	0849      	lsrs	r1, r1, #1
 23f52c0:	ea5f 0030 	movs.w	r0, r0, rrx
 23f52c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23f52c8:	f104 0401 	add.w	r4, r4, #1
 23f52cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23f52d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23f52d4:	f080 809a 	bcs.w	23f540c <__adddf3+0x240>
 23f52d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23f52dc:	bf08      	it	eq
 23f52de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f52e2:	f150 0000 	adcs.w	r0, r0, #0
 23f52e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f52ea:	ea41 0105 	orr.w	r1, r1, r5
 23f52ee:	bd30      	pop	{r4, r5, pc}
 23f52f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23f52f4:	4140      	adcs	r0, r0
 23f52f6:	eb41 0101 	adc.w	r1, r1, r1
 23f52fa:	3c01      	subs	r4, #1
 23f52fc:	bf28      	it	cs
 23f52fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23f5302:	d2e9      	bcs.n	23f52d8 <__adddf3+0x10c>
 23f5304:	f091 0f00 	teq	r1, #0
 23f5308:	bf04      	itt	eq
 23f530a:	4601      	moveq	r1, r0
 23f530c:	2000      	moveq	r0, #0
 23f530e:	fab1 f381 	clz	r3, r1
 23f5312:	bf08      	it	eq
 23f5314:	3320      	addeq	r3, #32
 23f5316:	f1a3 030b 	sub.w	r3, r3, #11
 23f531a:	f1b3 0220 	subs.w	r2, r3, #32
 23f531e:	da0c      	bge.n	23f533a <__adddf3+0x16e>
 23f5320:	320c      	adds	r2, #12
 23f5322:	dd08      	ble.n	23f5336 <__adddf3+0x16a>
 23f5324:	f102 0c14 	add.w	ip, r2, #20
 23f5328:	f1c2 020c 	rsb	r2, r2, #12
 23f532c:	fa01 f00c 	lsl.w	r0, r1, ip
 23f5330:	fa21 f102 	lsr.w	r1, r1, r2
 23f5334:	e00c      	b.n	23f5350 <__adddf3+0x184>
 23f5336:	f102 0214 	add.w	r2, r2, #20
 23f533a:	bfd8      	it	le
 23f533c:	f1c2 0c20 	rsble	ip, r2, #32
 23f5340:	fa01 f102 	lsl.w	r1, r1, r2
 23f5344:	fa20 fc0c 	lsr.w	ip, r0, ip
 23f5348:	bfdc      	itt	le
 23f534a:	ea41 010c 	orrle.w	r1, r1, ip
 23f534e:	4090      	lslle	r0, r2
 23f5350:	1ae4      	subs	r4, r4, r3
 23f5352:	bfa2      	ittt	ge
 23f5354:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23f5358:	4329      	orrge	r1, r5
 23f535a:	bd30      	popge	{r4, r5, pc}
 23f535c:	ea6f 0404 	mvn.w	r4, r4
 23f5360:	3c1f      	subs	r4, #31
 23f5362:	da1c      	bge.n	23f539e <__adddf3+0x1d2>
 23f5364:	340c      	adds	r4, #12
 23f5366:	dc0e      	bgt.n	23f5386 <__adddf3+0x1ba>
 23f5368:	f104 0414 	add.w	r4, r4, #20
 23f536c:	f1c4 0220 	rsb	r2, r4, #32
 23f5370:	fa20 f004 	lsr.w	r0, r0, r4
 23f5374:	fa01 f302 	lsl.w	r3, r1, r2
 23f5378:	ea40 0003 	orr.w	r0, r0, r3
 23f537c:	fa21 f304 	lsr.w	r3, r1, r4
 23f5380:	ea45 0103 	orr.w	r1, r5, r3
 23f5384:	bd30      	pop	{r4, r5, pc}
 23f5386:	f1c4 040c 	rsb	r4, r4, #12
 23f538a:	f1c4 0220 	rsb	r2, r4, #32
 23f538e:	fa20 f002 	lsr.w	r0, r0, r2
 23f5392:	fa01 f304 	lsl.w	r3, r1, r4
 23f5396:	ea40 0003 	orr.w	r0, r0, r3
 23f539a:	4629      	mov	r1, r5
 23f539c:	bd30      	pop	{r4, r5, pc}
 23f539e:	fa21 f004 	lsr.w	r0, r1, r4
 23f53a2:	4629      	mov	r1, r5
 23f53a4:	bd30      	pop	{r4, r5, pc}
 23f53a6:	f094 0f00 	teq	r4, #0
 23f53aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23f53ae:	bf06      	itte	eq
 23f53b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23f53b4:	3401      	addeq	r4, #1
 23f53b6:	3d01      	subne	r5, #1
 23f53b8:	e74e      	b.n	23f5258 <__adddf3+0x8c>
 23f53ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f53be:	bf18      	it	ne
 23f53c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f53c4:	d029      	beq.n	23f541a <__adddf3+0x24e>
 23f53c6:	ea94 0f05 	teq	r4, r5
 23f53ca:	bf08      	it	eq
 23f53cc:	ea90 0f02 	teqeq	r0, r2
 23f53d0:	d005      	beq.n	23f53de <__adddf3+0x212>
 23f53d2:	ea54 0c00 	orrs.w	ip, r4, r0
 23f53d6:	bf04      	itt	eq
 23f53d8:	4619      	moveq	r1, r3
 23f53da:	4610      	moveq	r0, r2
 23f53dc:	bd30      	pop	{r4, r5, pc}
 23f53de:	ea91 0f03 	teq	r1, r3
 23f53e2:	bf1e      	ittt	ne
 23f53e4:	2100      	movne	r1, #0
 23f53e6:	2000      	movne	r0, #0
 23f53e8:	bd30      	popne	{r4, r5, pc}
 23f53ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23f53ee:	d105      	bne.n	23f53fc <__adddf3+0x230>
 23f53f0:	0040      	lsls	r0, r0, #1
 23f53f2:	4149      	adcs	r1, r1
 23f53f4:	bf28      	it	cs
 23f53f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23f53fa:	bd30      	pop	{r4, r5, pc}
 23f53fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23f5400:	bf3c      	itt	cc
 23f5402:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23f5406:	bd30      	popcc	{r4, r5, pc}
 23f5408:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f540c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23f5410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f5414:	f04f 0000 	mov.w	r0, #0
 23f5418:	bd30      	pop	{r4, r5, pc}
 23f541a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f541e:	bf1a      	itte	ne
 23f5420:	4619      	movne	r1, r3
 23f5422:	4610      	movne	r0, r2
 23f5424:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23f5428:	bf1c      	itt	ne
 23f542a:	460b      	movne	r3, r1
 23f542c:	4602      	movne	r2, r0
 23f542e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f5432:	bf06      	itte	eq
 23f5434:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23f5438:	ea91 0f03 	teqeq	r1, r3
 23f543c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23f5440:	bd30      	pop	{r4, r5, pc}
 23f5442:	bf00      	nop

023f5444 <__aeabi_ui2d>:
 23f5444:	f090 0f00 	teq	r0, #0
 23f5448:	bf04      	itt	eq
 23f544a:	2100      	moveq	r1, #0
 23f544c:	4770      	bxeq	lr
 23f544e:	b530      	push	{r4, r5, lr}
 23f5450:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f5454:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f5458:	f04f 0500 	mov.w	r5, #0
 23f545c:	f04f 0100 	mov.w	r1, #0
 23f5460:	e750      	b.n	23f5304 <__adddf3+0x138>
 23f5462:	bf00      	nop

023f5464 <__aeabi_i2d>:
 23f5464:	f090 0f00 	teq	r0, #0
 23f5468:	bf04      	itt	eq
 23f546a:	2100      	moveq	r1, #0
 23f546c:	4770      	bxeq	lr
 23f546e:	b530      	push	{r4, r5, lr}
 23f5470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f5474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f5478:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23f547c:	bf48      	it	mi
 23f547e:	4240      	negmi	r0, r0
 23f5480:	f04f 0100 	mov.w	r1, #0
 23f5484:	e73e      	b.n	23f5304 <__adddf3+0x138>
 23f5486:	bf00      	nop

023f5488 <__aeabi_f2d>:
 23f5488:	0042      	lsls	r2, r0, #1
 23f548a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23f548e:	ea4f 0131 	mov.w	r1, r1, rrx
 23f5492:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23f5496:	bf1f      	itttt	ne
 23f5498:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23f549c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23f54a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23f54a4:	4770      	bxne	lr
 23f54a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23f54aa:	bf08      	it	eq
 23f54ac:	4770      	bxeq	lr
 23f54ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23f54b2:	bf04      	itt	eq
 23f54b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23f54b8:	4770      	bxeq	lr
 23f54ba:	b530      	push	{r4, r5, lr}
 23f54bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 23f54c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f54c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f54c8:	e71c      	b.n	23f5304 <__adddf3+0x138>
 23f54ca:	bf00      	nop

023f54cc <__aeabi_ul2d>:
 23f54cc:	ea50 0201 	orrs.w	r2, r0, r1
 23f54d0:	bf08      	it	eq
 23f54d2:	4770      	bxeq	lr
 23f54d4:	b530      	push	{r4, r5, lr}
 23f54d6:	f04f 0500 	mov.w	r5, #0
 23f54da:	e00a      	b.n	23f54f2 <__aeabi_l2d+0x16>

023f54dc <__aeabi_l2d>:
 23f54dc:	ea50 0201 	orrs.w	r2, r0, r1
 23f54e0:	bf08      	it	eq
 23f54e2:	4770      	bxeq	lr
 23f54e4:	b530      	push	{r4, r5, lr}
 23f54e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23f54ea:	d502      	bpl.n	23f54f2 <__aeabi_l2d+0x16>
 23f54ec:	4240      	negs	r0, r0
 23f54ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f54f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f54f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f54fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23f54fe:	f43f aed8 	beq.w	23f52b2 <__adddf3+0xe6>
 23f5502:	f04f 0203 	mov.w	r2, #3
 23f5506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f550a:	bf18      	it	ne
 23f550c:	3203      	addne	r2, #3
 23f550e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f5512:	bf18      	it	ne
 23f5514:	3203      	addne	r2, #3
 23f5516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23f551a:	f1c2 0320 	rsb	r3, r2, #32
 23f551e:	fa00 fc03 	lsl.w	ip, r0, r3
 23f5522:	fa20 f002 	lsr.w	r0, r0, r2
 23f5526:	fa01 fe03 	lsl.w	lr, r1, r3
 23f552a:	ea40 000e 	orr.w	r0, r0, lr
 23f552e:	fa21 f102 	lsr.w	r1, r1, r2
 23f5532:	4414      	add	r4, r2
 23f5534:	e6bd      	b.n	23f52b2 <__adddf3+0xe6>
 23f5536:	bf00      	nop

023f5538 <__aeabi_dmul>:
 23f5538:	b570      	push	{r4, r5, r6, lr}
 23f553a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f553e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f5542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f5546:	bf1d      	ittte	ne
 23f5548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f554c:	ea94 0f0c 	teqne	r4, ip
 23f5550:	ea95 0f0c 	teqne	r5, ip
 23f5554:	f000 f8de 	bleq	23f5714 <__aeabi_dmul+0x1dc>
 23f5558:	442c      	add	r4, r5
 23f555a:	ea81 0603 	eor.w	r6, r1, r3
 23f555e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23f5562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23f5566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23f556a:	bf18      	it	ne
 23f556c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23f5570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f5574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23f5578:	d038      	beq.n	23f55ec <__aeabi_dmul+0xb4>
 23f557a:	fba0 ce02 	umull	ip, lr, r0, r2
 23f557e:	f04f 0500 	mov.w	r5, #0
 23f5582:	fbe1 e502 	umlal	lr, r5, r1, r2
 23f5586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23f558a:	fbe0 e503 	umlal	lr, r5, r0, r3
 23f558e:	f04f 0600 	mov.w	r6, #0
 23f5592:	fbe1 5603 	umlal	r5, r6, r1, r3
 23f5596:	f09c 0f00 	teq	ip, #0
 23f559a:	bf18      	it	ne
 23f559c:	f04e 0e01 	orrne.w	lr, lr, #1
 23f55a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23f55a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f55a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23f55ac:	d204      	bcs.n	23f55b8 <__aeabi_dmul+0x80>
 23f55ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23f55b2:	416d      	adcs	r5, r5
 23f55b4:	eb46 0606 	adc.w	r6, r6, r6
 23f55b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23f55bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23f55c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23f55c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23f55c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23f55cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f55d0:	bf88      	it	hi
 23f55d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f55d6:	d81e      	bhi.n	23f5616 <__aeabi_dmul+0xde>
 23f55d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23f55dc:	bf08      	it	eq
 23f55de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23f55e2:	f150 0000 	adcs.w	r0, r0, #0
 23f55e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f55ea:	bd70      	pop	{r4, r5, r6, pc}
 23f55ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23f55f0:	ea46 0101 	orr.w	r1, r6, r1
 23f55f4:	ea40 0002 	orr.w	r0, r0, r2
 23f55f8:	ea81 0103 	eor.w	r1, r1, r3
 23f55fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23f5600:	bfc2      	ittt	gt
 23f5602:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f5606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f560a:	bd70      	popgt	{r4, r5, r6, pc}
 23f560c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f5610:	f04f 0e00 	mov.w	lr, #0
 23f5614:	3c01      	subs	r4, #1
 23f5616:	f300 80ab 	bgt.w	23f5770 <__aeabi_dmul+0x238>
 23f561a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23f561e:	bfde      	ittt	le
 23f5620:	2000      	movle	r0, #0
 23f5622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23f5626:	bd70      	pople	{r4, r5, r6, pc}
 23f5628:	f1c4 0400 	rsb	r4, r4, #0
 23f562c:	3c20      	subs	r4, #32
 23f562e:	da35      	bge.n	23f569c <__aeabi_dmul+0x164>
 23f5630:	340c      	adds	r4, #12
 23f5632:	dc1b      	bgt.n	23f566c <__aeabi_dmul+0x134>
 23f5634:	f104 0414 	add.w	r4, r4, #20
 23f5638:	f1c4 0520 	rsb	r5, r4, #32
 23f563c:	fa00 f305 	lsl.w	r3, r0, r5
 23f5640:	fa20 f004 	lsr.w	r0, r0, r4
 23f5644:	fa01 f205 	lsl.w	r2, r1, r5
 23f5648:	ea40 0002 	orr.w	r0, r0, r2
 23f564c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23f5650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f5654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f5658:	fa21 f604 	lsr.w	r6, r1, r4
 23f565c:	eb42 0106 	adc.w	r1, r2, r6
 23f5660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f5664:	bf08      	it	eq
 23f5666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f566a:	bd70      	pop	{r4, r5, r6, pc}
 23f566c:	f1c4 040c 	rsb	r4, r4, #12
 23f5670:	f1c4 0520 	rsb	r5, r4, #32
 23f5674:	fa00 f304 	lsl.w	r3, r0, r4
 23f5678:	fa20 f005 	lsr.w	r0, r0, r5
 23f567c:	fa01 f204 	lsl.w	r2, r1, r4
 23f5680:	ea40 0002 	orr.w	r0, r0, r2
 23f5684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f5688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f568c:	f141 0100 	adc.w	r1, r1, #0
 23f5690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f5694:	bf08      	it	eq
 23f5696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f569a:	bd70      	pop	{r4, r5, r6, pc}
 23f569c:	f1c4 0520 	rsb	r5, r4, #32
 23f56a0:	fa00 f205 	lsl.w	r2, r0, r5
 23f56a4:	ea4e 0e02 	orr.w	lr, lr, r2
 23f56a8:	fa20 f304 	lsr.w	r3, r0, r4
 23f56ac:	fa01 f205 	lsl.w	r2, r1, r5
 23f56b0:	ea43 0302 	orr.w	r3, r3, r2
 23f56b4:	fa21 f004 	lsr.w	r0, r1, r4
 23f56b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f56bc:	fa21 f204 	lsr.w	r2, r1, r4
 23f56c0:	ea20 0002 	bic.w	r0, r0, r2
 23f56c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23f56c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f56cc:	bf08      	it	eq
 23f56ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f56d2:	bd70      	pop	{r4, r5, r6, pc}
 23f56d4:	f094 0f00 	teq	r4, #0
 23f56d8:	d10f      	bne.n	23f56fa <__aeabi_dmul+0x1c2>
 23f56da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23f56de:	0040      	lsls	r0, r0, #1
 23f56e0:	eb41 0101 	adc.w	r1, r1, r1
 23f56e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f56e8:	bf08      	it	eq
 23f56ea:	3c01      	subeq	r4, #1
 23f56ec:	d0f7      	beq.n	23f56de <__aeabi_dmul+0x1a6>
 23f56ee:	ea41 0106 	orr.w	r1, r1, r6
 23f56f2:	f095 0f00 	teq	r5, #0
 23f56f6:	bf18      	it	ne
 23f56f8:	4770      	bxne	lr
 23f56fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23f56fe:	0052      	lsls	r2, r2, #1
 23f5700:	eb43 0303 	adc.w	r3, r3, r3
 23f5704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23f5708:	bf08      	it	eq
 23f570a:	3d01      	subeq	r5, #1
 23f570c:	d0f7      	beq.n	23f56fe <__aeabi_dmul+0x1c6>
 23f570e:	ea43 0306 	orr.w	r3, r3, r6
 23f5712:	4770      	bx	lr
 23f5714:	ea94 0f0c 	teq	r4, ip
 23f5718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f571c:	bf18      	it	ne
 23f571e:	ea95 0f0c 	teqne	r5, ip
 23f5722:	d00c      	beq.n	23f573e <__aeabi_dmul+0x206>
 23f5724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f5728:	bf18      	it	ne
 23f572a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f572e:	d1d1      	bne.n	23f56d4 <__aeabi_dmul+0x19c>
 23f5730:	ea81 0103 	eor.w	r1, r1, r3
 23f5734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f5738:	f04f 0000 	mov.w	r0, #0
 23f573c:	bd70      	pop	{r4, r5, r6, pc}
 23f573e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f5742:	bf06      	itte	eq
 23f5744:	4610      	moveq	r0, r2
 23f5746:	4619      	moveq	r1, r3
 23f5748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f574c:	d019      	beq.n	23f5782 <__aeabi_dmul+0x24a>
 23f574e:	ea94 0f0c 	teq	r4, ip
 23f5752:	d102      	bne.n	23f575a <__aeabi_dmul+0x222>
 23f5754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23f5758:	d113      	bne.n	23f5782 <__aeabi_dmul+0x24a>
 23f575a:	ea95 0f0c 	teq	r5, ip
 23f575e:	d105      	bne.n	23f576c <__aeabi_dmul+0x234>
 23f5760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23f5764:	bf1c      	itt	ne
 23f5766:	4610      	movne	r0, r2
 23f5768:	4619      	movne	r1, r3
 23f576a:	d10a      	bne.n	23f5782 <__aeabi_dmul+0x24a>
 23f576c:	ea81 0103 	eor.w	r1, r1, r3
 23f5770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f5774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f5778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f577c:	f04f 0000 	mov.w	r0, #0
 23f5780:	bd70      	pop	{r4, r5, r6, pc}
 23f5782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f5786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23f578a:	bd70      	pop	{r4, r5, r6, pc}

023f578c <__aeabi_ddiv>:
 23f578c:	b570      	push	{r4, r5, r6, lr}
 23f578e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f5792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f5796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f579a:	bf1d      	ittte	ne
 23f579c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f57a0:	ea94 0f0c 	teqne	r4, ip
 23f57a4:	ea95 0f0c 	teqne	r5, ip
 23f57a8:	f000 f8a7 	bleq	23f58fa <__aeabi_ddiv+0x16e>
 23f57ac:	eba4 0405 	sub.w	r4, r4, r5
 23f57b0:	ea81 0e03 	eor.w	lr, r1, r3
 23f57b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f57b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f57bc:	f000 8088 	beq.w	23f58d0 <__aeabi_ddiv+0x144>
 23f57c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f57c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23f57c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23f57cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23f57d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23f57d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23f57d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23f57dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23f57e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23f57e4:	429d      	cmp	r5, r3
 23f57e6:	bf08      	it	eq
 23f57e8:	4296      	cmpeq	r6, r2
 23f57ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23f57ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23f57f2:	d202      	bcs.n	23f57fa <__aeabi_ddiv+0x6e>
 23f57f4:	085b      	lsrs	r3, r3, #1
 23f57f6:	ea4f 0232 	mov.w	r2, r2, rrx
 23f57fa:	1ab6      	subs	r6, r6, r2
 23f57fc:	eb65 0503 	sbc.w	r5, r5, r3
 23f5800:	085b      	lsrs	r3, r3, #1
 23f5802:	ea4f 0232 	mov.w	r2, r2, rrx
 23f5806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23f580a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23f580e:	ebb6 0e02 	subs.w	lr, r6, r2
 23f5812:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f5816:	bf22      	ittt	cs
 23f5818:	1ab6      	subcs	r6, r6, r2
 23f581a:	4675      	movcs	r5, lr
 23f581c:	ea40 000c 	orrcs.w	r0, r0, ip
 23f5820:	085b      	lsrs	r3, r3, #1
 23f5822:	ea4f 0232 	mov.w	r2, r2, rrx
 23f5826:	ebb6 0e02 	subs.w	lr, r6, r2
 23f582a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f582e:	bf22      	ittt	cs
 23f5830:	1ab6      	subcs	r6, r6, r2
 23f5832:	4675      	movcs	r5, lr
 23f5834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23f5838:	085b      	lsrs	r3, r3, #1
 23f583a:	ea4f 0232 	mov.w	r2, r2, rrx
 23f583e:	ebb6 0e02 	subs.w	lr, r6, r2
 23f5842:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f5846:	bf22      	ittt	cs
 23f5848:	1ab6      	subcs	r6, r6, r2
 23f584a:	4675      	movcs	r5, lr
 23f584c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23f5850:	085b      	lsrs	r3, r3, #1
 23f5852:	ea4f 0232 	mov.w	r2, r2, rrx
 23f5856:	ebb6 0e02 	subs.w	lr, r6, r2
 23f585a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f585e:	bf22      	ittt	cs
 23f5860:	1ab6      	subcs	r6, r6, r2
 23f5862:	4675      	movcs	r5, lr
 23f5864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23f5868:	ea55 0e06 	orrs.w	lr, r5, r6
 23f586c:	d018      	beq.n	23f58a0 <__aeabi_ddiv+0x114>
 23f586e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23f5872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23f5876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23f587a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23f587e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23f5882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23f5886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23f588a:	d1c0      	bne.n	23f580e <__aeabi_ddiv+0x82>
 23f588c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f5890:	d10b      	bne.n	23f58aa <__aeabi_ddiv+0x11e>
 23f5892:	ea41 0100 	orr.w	r1, r1, r0
 23f5896:	f04f 0000 	mov.w	r0, #0
 23f589a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23f589e:	e7b6      	b.n	23f580e <__aeabi_ddiv+0x82>
 23f58a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f58a4:	bf04      	itt	eq
 23f58a6:	4301      	orreq	r1, r0
 23f58a8:	2000      	moveq	r0, #0
 23f58aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f58ae:	bf88      	it	hi
 23f58b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f58b4:	f63f aeaf 	bhi.w	23f5616 <__aeabi_dmul+0xde>
 23f58b8:	ebb5 0c03 	subs.w	ip, r5, r3
 23f58bc:	bf04      	itt	eq
 23f58be:	ebb6 0c02 	subseq.w	ip, r6, r2
 23f58c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f58c6:	f150 0000 	adcs.w	r0, r0, #0
 23f58ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f58ce:	bd70      	pop	{r4, r5, r6, pc}
 23f58d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23f58d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23f58d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23f58dc:	bfc2      	ittt	gt
 23f58de:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f58e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f58e6:	bd70      	popgt	{r4, r5, r6, pc}
 23f58e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f58ec:	f04f 0e00 	mov.w	lr, #0
 23f58f0:	3c01      	subs	r4, #1
 23f58f2:	e690      	b.n	23f5616 <__aeabi_dmul+0xde>
 23f58f4:	ea45 0e06 	orr.w	lr, r5, r6
 23f58f8:	e68d      	b.n	23f5616 <__aeabi_dmul+0xde>
 23f58fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f58fe:	ea94 0f0c 	teq	r4, ip
 23f5902:	bf08      	it	eq
 23f5904:	ea95 0f0c 	teqeq	r5, ip
 23f5908:	f43f af3b 	beq.w	23f5782 <__aeabi_dmul+0x24a>
 23f590c:	ea94 0f0c 	teq	r4, ip
 23f5910:	d10a      	bne.n	23f5928 <__aeabi_ddiv+0x19c>
 23f5912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f5916:	f47f af34 	bne.w	23f5782 <__aeabi_dmul+0x24a>
 23f591a:	ea95 0f0c 	teq	r5, ip
 23f591e:	f47f af25 	bne.w	23f576c <__aeabi_dmul+0x234>
 23f5922:	4610      	mov	r0, r2
 23f5924:	4619      	mov	r1, r3
 23f5926:	e72c      	b.n	23f5782 <__aeabi_dmul+0x24a>
 23f5928:	ea95 0f0c 	teq	r5, ip
 23f592c:	d106      	bne.n	23f593c <__aeabi_ddiv+0x1b0>
 23f592e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f5932:	f43f aefd 	beq.w	23f5730 <__aeabi_dmul+0x1f8>
 23f5936:	4610      	mov	r0, r2
 23f5938:	4619      	mov	r1, r3
 23f593a:	e722      	b.n	23f5782 <__aeabi_dmul+0x24a>
 23f593c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f5940:	bf18      	it	ne
 23f5942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f5946:	f47f aec5 	bne.w	23f56d4 <__aeabi_dmul+0x19c>
 23f594a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23f594e:	f47f af0d 	bne.w	23f576c <__aeabi_dmul+0x234>
 23f5952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23f5956:	f47f aeeb 	bne.w	23f5730 <__aeabi_dmul+0x1f8>
 23f595a:	e712      	b.n	23f5782 <__aeabi_dmul+0x24a>

023f595c <__gedf2>:
 23f595c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23f5960:	e006      	b.n	23f5970 <__cmpdf2+0x4>
 23f5962:	bf00      	nop

023f5964 <__ledf2>:
 23f5964:	f04f 0c01 	mov.w	ip, #1
 23f5968:	e002      	b.n	23f5970 <__cmpdf2+0x4>
 23f596a:	bf00      	nop

023f596c <__cmpdf2>:
 23f596c:	f04f 0c01 	mov.w	ip, #1
 23f5970:	f84d cd04 	str.w	ip, [sp, #-4]!
 23f5974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f5978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f597c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f5980:	bf18      	it	ne
 23f5982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23f5986:	d01b      	beq.n	23f59c0 <__cmpdf2+0x54>
 23f5988:	b001      	add	sp, #4
 23f598a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23f598e:	bf0c      	ite	eq
 23f5990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23f5994:	ea91 0f03 	teqne	r1, r3
 23f5998:	bf02      	ittt	eq
 23f599a:	ea90 0f02 	teqeq	r0, r2
 23f599e:	2000      	moveq	r0, #0
 23f59a0:	4770      	bxeq	lr
 23f59a2:	f110 0f00 	cmn.w	r0, #0
 23f59a6:	ea91 0f03 	teq	r1, r3
 23f59aa:	bf58      	it	pl
 23f59ac:	4299      	cmppl	r1, r3
 23f59ae:	bf08      	it	eq
 23f59b0:	4290      	cmpeq	r0, r2
 23f59b2:	bf2c      	ite	cs
 23f59b4:	17d8      	asrcs	r0, r3, #31
 23f59b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23f59ba:	f040 0001 	orr.w	r0, r0, #1
 23f59be:	4770      	bx	lr
 23f59c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f59c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f59c8:	d102      	bne.n	23f59d0 <__cmpdf2+0x64>
 23f59ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23f59ce:	d107      	bne.n	23f59e0 <__cmpdf2+0x74>
 23f59d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f59d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f59d8:	d1d6      	bne.n	23f5988 <__cmpdf2+0x1c>
 23f59da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23f59de:	d0d3      	beq.n	23f5988 <__cmpdf2+0x1c>
 23f59e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 23f59e4:	4770      	bx	lr
 23f59e6:	bf00      	nop

023f59e8 <__aeabi_cdrcmple>:
 23f59e8:	4684      	mov	ip, r0
 23f59ea:	4610      	mov	r0, r2
 23f59ec:	4662      	mov	r2, ip
 23f59ee:	468c      	mov	ip, r1
 23f59f0:	4619      	mov	r1, r3
 23f59f2:	4663      	mov	r3, ip
 23f59f4:	e000      	b.n	23f59f8 <__aeabi_cdcmpeq>
 23f59f6:	bf00      	nop

023f59f8 <__aeabi_cdcmpeq>:
 23f59f8:	b501      	push	{r0, lr}
 23f59fa:	f7ff ffb7 	bl	23f596c <__cmpdf2>
 23f59fe:	2800      	cmp	r0, #0
 23f5a00:	bf48      	it	mi
 23f5a02:	f110 0f00 	cmnmi.w	r0, #0
 23f5a06:	bd01      	pop	{r0, pc}

023f5a08 <__aeabi_dcmpeq>:
 23f5a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f5a0c:	f7ff fff4 	bl	23f59f8 <__aeabi_cdcmpeq>
 23f5a10:	bf0c      	ite	eq
 23f5a12:	2001      	moveq	r0, #1
 23f5a14:	2000      	movne	r0, #0
 23f5a16:	f85d fb08 	ldr.w	pc, [sp], #8
 23f5a1a:	bf00      	nop

023f5a1c <__aeabi_dcmplt>:
 23f5a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f5a20:	f7ff ffea 	bl	23f59f8 <__aeabi_cdcmpeq>
 23f5a24:	bf34      	ite	cc
 23f5a26:	2001      	movcc	r0, #1
 23f5a28:	2000      	movcs	r0, #0
 23f5a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 23f5a2e:	bf00      	nop

023f5a30 <__aeabi_dcmple>:
 23f5a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f5a34:	f7ff ffe0 	bl	23f59f8 <__aeabi_cdcmpeq>
 23f5a38:	bf94      	ite	ls
 23f5a3a:	2001      	movls	r0, #1
 23f5a3c:	2000      	movhi	r0, #0
 23f5a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 23f5a42:	bf00      	nop

023f5a44 <__aeabi_dcmpge>:
 23f5a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f5a48:	f7ff ffce 	bl	23f59e8 <__aeabi_cdrcmple>
 23f5a4c:	bf94      	ite	ls
 23f5a4e:	2001      	movls	r0, #1
 23f5a50:	2000      	movhi	r0, #0
 23f5a52:	f85d fb08 	ldr.w	pc, [sp], #8
 23f5a56:	bf00      	nop

023f5a58 <__aeabi_dcmpgt>:
 23f5a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f5a5c:	f7ff ffc4 	bl	23f59e8 <__aeabi_cdrcmple>
 23f5a60:	bf34      	ite	cc
 23f5a62:	2001      	movcc	r0, #1
 23f5a64:	2000      	movcs	r0, #0
 23f5a66:	f85d fb08 	ldr.w	pc, [sp], #8
 23f5a6a:	bf00      	nop

023f5a6c <__aeabi_d2iz>:
 23f5a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23f5a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23f5a74:	d215      	bcs.n	23f5aa2 <__aeabi_d2iz+0x36>
 23f5a76:	d511      	bpl.n	23f5a9c <__aeabi_d2iz+0x30>
 23f5a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23f5a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23f5a80:	d912      	bls.n	23f5aa8 <__aeabi_d2iz+0x3c>
 23f5a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f5a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23f5a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23f5a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f5a92:	fa23 f002 	lsr.w	r0, r3, r2
 23f5a96:	bf18      	it	ne
 23f5a98:	4240      	negne	r0, r0
 23f5a9a:	4770      	bx	lr
 23f5a9c:	f04f 0000 	mov.w	r0, #0
 23f5aa0:	4770      	bx	lr
 23f5aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23f5aa6:	d105      	bne.n	23f5ab4 <__aeabi_d2iz+0x48>
 23f5aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23f5aac:	bf08      	it	eq
 23f5aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23f5ab2:	4770      	bx	lr
 23f5ab4:	f04f 0000 	mov.w	r0, #0
 23f5ab8:	4770      	bx	lr
 23f5aba:	bf00      	nop

023f5abc <__aeabi_d2uiz>:
 23f5abc:	004a      	lsls	r2, r1, #1
 23f5abe:	d211      	bcs.n	23f5ae4 <__aeabi_d2uiz+0x28>
 23f5ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23f5ac4:	d211      	bcs.n	23f5aea <__aeabi_d2uiz+0x2e>
 23f5ac6:	d50d      	bpl.n	23f5ae4 <__aeabi_d2uiz+0x28>
 23f5ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23f5acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23f5ad0:	d40e      	bmi.n	23f5af0 <__aeabi_d2uiz+0x34>
 23f5ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f5ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23f5ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23f5ade:	fa23 f002 	lsr.w	r0, r3, r2
 23f5ae2:	4770      	bx	lr
 23f5ae4:	f04f 0000 	mov.w	r0, #0
 23f5ae8:	4770      	bx	lr
 23f5aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23f5aee:	d102      	bne.n	23f5af6 <__aeabi_d2uiz+0x3a>
 23f5af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f5af4:	4770      	bx	lr
 23f5af6:	f04f 0000 	mov.w	r0, #0
 23f5afa:	4770      	bx	lr

023f5afc <__aeabi_d2f>:
 23f5afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23f5b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23f5b04:	bf24      	itt	cs
 23f5b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23f5b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23f5b0e:	d90d      	bls.n	23f5b2c <__aeabi_d2f+0x30>
 23f5b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23f5b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23f5b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23f5b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23f5b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23f5b24:	bf08      	it	eq
 23f5b26:	f020 0001 	biceq.w	r0, r0, #1
 23f5b2a:	4770      	bx	lr
 23f5b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23f5b30:	d121      	bne.n	23f5b76 <__aeabi_d2f+0x7a>
 23f5b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23f5b36:	bfbc      	itt	lt
 23f5b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23f5b3c:	4770      	bxlt	lr
 23f5b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f5b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23f5b46:	f1c2 0218 	rsb	r2, r2, #24
 23f5b4a:	f1c2 0c20 	rsb	ip, r2, #32
 23f5b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 23f5b52:	fa20 f002 	lsr.w	r0, r0, r2
 23f5b56:	bf18      	it	ne
 23f5b58:	f040 0001 	orrne.w	r0, r0, #1
 23f5b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f5b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23f5b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 23f5b68:	ea40 000c 	orr.w	r0, r0, ip
 23f5b6c:	fa23 f302 	lsr.w	r3, r3, r2
 23f5b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f5b74:	e7cc      	b.n	23f5b10 <__aeabi_d2f+0x14>
 23f5b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23f5b7a:	d107      	bne.n	23f5b8c <__aeabi_d2f+0x90>
 23f5b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23f5b80:	bf1e      	ittt	ne
 23f5b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23f5b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23f5b8a:	4770      	bxne	lr
 23f5b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23f5b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23f5b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23f5b98:	4770      	bx	lr
 23f5b9a:	bf00      	nop

023f5b9c <__aeabi_uldivmod>:
 23f5b9c:	b953      	cbnz	r3, 23f5bb4 <__aeabi_uldivmod+0x18>
 23f5b9e:	b94a      	cbnz	r2, 23f5bb4 <__aeabi_uldivmod+0x18>
 23f5ba0:	2900      	cmp	r1, #0
 23f5ba2:	bf08      	it	eq
 23f5ba4:	2800      	cmpeq	r0, #0
 23f5ba6:	bf1c      	itt	ne
 23f5ba8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23f5bac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f5bb0:	f000 b9a0 	b.w	23f5ef4 <__aeabi_idiv0>
 23f5bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 23f5bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23f5bbc:	f000 f824 	bl	23f5c08 <__udivmoddi4>
 23f5bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 23f5bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23f5bc8:	b004      	add	sp, #16
 23f5bca:	4770      	bx	lr

023f5bcc <__aeabi_d2ulz>:
 23f5bcc:	b5d0      	push	{r4, r6, r7, lr}
 23f5bce:	2200      	movs	r2, #0
 23f5bd0:	4b0b      	ldr	r3, [pc, #44]	; (23f5c00 <__aeabi_d2ulz+0x34>)
 23f5bd2:	4606      	mov	r6, r0
 23f5bd4:	460f      	mov	r7, r1
 23f5bd6:	f7ff fcaf 	bl	23f5538 <__aeabi_dmul>
 23f5bda:	f7ff ff6f 	bl	23f5abc <__aeabi_d2uiz>
 23f5bde:	4604      	mov	r4, r0
 23f5be0:	f7ff fc30 	bl	23f5444 <__aeabi_ui2d>
 23f5be4:	2200      	movs	r2, #0
 23f5be6:	4b07      	ldr	r3, [pc, #28]	; (23f5c04 <__aeabi_d2ulz+0x38>)
 23f5be8:	f7ff fca6 	bl	23f5538 <__aeabi_dmul>
 23f5bec:	4602      	mov	r2, r0
 23f5bee:	460b      	mov	r3, r1
 23f5bf0:	4630      	mov	r0, r6
 23f5bf2:	4639      	mov	r1, r7
 23f5bf4:	f7ff fae8 	bl	23f51c8 <__aeabi_dsub>
 23f5bf8:	f7ff ff60 	bl	23f5abc <__aeabi_d2uiz>
 23f5bfc:	4621      	mov	r1, r4
 23f5bfe:	bdd0      	pop	{r4, r6, r7, pc}
 23f5c00:	3df00000 	.word	0x3df00000
 23f5c04:	41f00000 	.word	0x41f00000

023f5c08 <__udivmoddi4>:
 23f5c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5c0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23f5c0e:	4604      	mov	r4, r0
 23f5c10:	460f      	mov	r7, r1
 23f5c12:	2b00      	cmp	r3, #0
 23f5c14:	d148      	bne.n	23f5ca8 <__udivmoddi4+0xa0>
 23f5c16:	428a      	cmp	r2, r1
 23f5c18:	4694      	mov	ip, r2
 23f5c1a:	d961      	bls.n	23f5ce0 <__udivmoddi4+0xd8>
 23f5c1c:	fab2 f382 	clz	r3, r2
 23f5c20:	b143      	cbz	r3, 23f5c34 <__udivmoddi4+0x2c>
 23f5c22:	f1c3 0120 	rsb	r1, r3, #32
 23f5c26:	409f      	lsls	r7, r3
 23f5c28:	fa02 fc03 	lsl.w	ip, r2, r3
 23f5c2c:	409c      	lsls	r4, r3
 23f5c2e:	fa20 f101 	lsr.w	r1, r0, r1
 23f5c32:	430f      	orrs	r7, r1
 23f5c34:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23f5c38:	fa1f fe8c 	uxth.w	lr, ip
 23f5c3c:	0c22      	lsrs	r2, r4, #16
 23f5c3e:	fbb7 f6f1 	udiv	r6, r7, r1
 23f5c42:	fb01 7716 	mls	r7, r1, r6, r7
 23f5c46:	fb06 f00e 	mul.w	r0, r6, lr
 23f5c4a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23f5c4e:	4290      	cmp	r0, r2
 23f5c50:	d908      	bls.n	23f5c64 <__udivmoddi4+0x5c>
 23f5c52:	eb1c 0202 	adds.w	r2, ip, r2
 23f5c56:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23f5c5a:	d202      	bcs.n	23f5c62 <__udivmoddi4+0x5a>
 23f5c5c:	4290      	cmp	r0, r2
 23f5c5e:	f200 8137 	bhi.w	23f5ed0 <__udivmoddi4+0x2c8>
 23f5c62:	463e      	mov	r6, r7
 23f5c64:	1a12      	subs	r2, r2, r0
 23f5c66:	b2a4      	uxth	r4, r4
 23f5c68:	fbb2 f0f1 	udiv	r0, r2, r1
 23f5c6c:	fb01 2210 	mls	r2, r1, r0, r2
 23f5c70:	fb00 fe0e 	mul.w	lr, r0, lr
 23f5c74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23f5c78:	45a6      	cmp	lr, r4
 23f5c7a:	d908      	bls.n	23f5c8e <__udivmoddi4+0x86>
 23f5c7c:	eb1c 0404 	adds.w	r4, ip, r4
 23f5c80:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23f5c84:	d202      	bcs.n	23f5c8c <__udivmoddi4+0x84>
 23f5c86:	45a6      	cmp	lr, r4
 23f5c88:	f200 811c 	bhi.w	23f5ec4 <__udivmoddi4+0x2bc>
 23f5c8c:	4610      	mov	r0, r2
 23f5c8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23f5c92:	eba4 040e 	sub.w	r4, r4, lr
 23f5c96:	2600      	movs	r6, #0
 23f5c98:	b11d      	cbz	r5, 23f5ca2 <__udivmoddi4+0x9a>
 23f5c9a:	40dc      	lsrs	r4, r3
 23f5c9c:	2300      	movs	r3, #0
 23f5c9e:	e9c5 4300 	strd	r4, r3, [r5]
 23f5ca2:	4631      	mov	r1, r6
 23f5ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f5ca8:	428b      	cmp	r3, r1
 23f5caa:	d909      	bls.n	23f5cc0 <__udivmoddi4+0xb8>
 23f5cac:	2d00      	cmp	r5, #0
 23f5cae:	f000 80fd 	beq.w	23f5eac <__udivmoddi4+0x2a4>
 23f5cb2:	2600      	movs	r6, #0
 23f5cb4:	e9c5 0100 	strd	r0, r1, [r5]
 23f5cb8:	4630      	mov	r0, r6
 23f5cba:	4631      	mov	r1, r6
 23f5cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f5cc0:	fab3 f683 	clz	r6, r3
 23f5cc4:	2e00      	cmp	r6, #0
 23f5cc6:	d14b      	bne.n	23f5d60 <__udivmoddi4+0x158>
 23f5cc8:	428b      	cmp	r3, r1
 23f5cca:	f0c0 80f2 	bcc.w	23f5eb2 <__udivmoddi4+0x2aa>
 23f5cce:	4282      	cmp	r2, r0
 23f5cd0:	f240 80ef 	bls.w	23f5eb2 <__udivmoddi4+0x2aa>
 23f5cd4:	4630      	mov	r0, r6
 23f5cd6:	2d00      	cmp	r5, #0
 23f5cd8:	d0e3      	beq.n	23f5ca2 <__udivmoddi4+0x9a>
 23f5cda:	e9c5 4700 	strd	r4, r7, [r5]
 23f5cde:	e7e0      	b.n	23f5ca2 <__udivmoddi4+0x9a>
 23f5ce0:	b902      	cbnz	r2, 23f5ce4 <__udivmoddi4+0xdc>
 23f5ce2:	deff      	udf	#255	; 0xff
 23f5ce4:	fab2 f382 	clz	r3, r2
 23f5ce8:	2b00      	cmp	r3, #0
 23f5cea:	f040 809d 	bne.w	23f5e28 <__udivmoddi4+0x220>
 23f5cee:	1a89      	subs	r1, r1, r2
 23f5cf0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23f5cf4:	b297      	uxth	r7, r2
 23f5cf6:	2601      	movs	r6, #1
 23f5cf8:	0c20      	lsrs	r0, r4, #16
 23f5cfa:	fbb1 f2fe 	udiv	r2, r1, lr
 23f5cfe:	fb0e 1112 	mls	r1, lr, r2, r1
 23f5d02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23f5d06:	fb07 f002 	mul.w	r0, r7, r2
 23f5d0a:	4288      	cmp	r0, r1
 23f5d0c:	d90f      	bls.n	23f5d2e <__udivmoddi4+0x126>
 23f5d0e:	eb1c 0101 	adds.w	r1, ip, r1
 23f5d12:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23f5d16:	bf2c      	ite	cs
 23f5d18:	f04f 0901 	movcs.w	r9, #1
 23f5d1c:	f04f 0900 	movcc.w	r9, #0
 23f5d20:	4288      	cmp	r0, r1
 23f5d22:	d903      	bls.n	23f5d2c <__udivmoddi4+0x124>
 23f5d24:	f1b9 0f00 	cmp.w	r9, #0
 23f5d28:	f000 80cf 	beq.w	23f5eca <__udivmoddi4+0x2c2>
 23f5d2c:	4642      	mov	r2, r8
 23f5d2e:	1a09      	subs	r1, r1, r0
 23f5d30:	b2a4      	uxth	r4, r4
 23f5d32:	fbb1 f0fe 	udiv	r0, r1, lr
 23f5d36:	fb0e 1110 	mls	r1, lr, r0, r1
 23f5d3a:	fb00 f707 	mul.w	r7, r0, r7
 23f5d3e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23f5d42:	42a7      	cmp	r7, r4
 23f5d44:	d908      	bls.n	23f5d58 <__udivmoddi4+0x150>
 23f5d46:	eb1c 0404 	adds.w	r4, ip, r4
 23f5d4a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23f5d4e:	d202      	bcs.n	23f5d56 <__udivmoddi4+0x14e>
 23f5d50:	42a7      	cmp	r7, r4
 23f5d52:	f200 80b4 	bhi.w	23f5ebe <__udivmoddi4+0x2b6>
 23f5d56:	4608      	mov	r0, r1
 23f5d58:	1be4      	subs	r4, r4, r7
 23f5d5a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23f5d5e:	e79b      	b.n	23f5c98 <__udivmoddi4+0x90>
 23f5d60:	f1c6 0720 	rsb	r7, r6, #32
 23f5d64:	40b3      	lsls	r3, r6
 23f5d66:	fa01 f406 	lsl.w	r4, r1, r6
 23f5d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 23f5d6e:	40f9      	lsrs	r1, r7
 23f5d70:	40b2      	lsls	r2, r6
 23f5d72:	ea4c 0c03 	orr.w	ip, ip, r3
 23f5d76:	fa20 f307 	lsr.w	r3, r0, r7
 23f5d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23f5d7e:	431c      	orrs	r4, r3
 23f5d80:	fa1f fe8c 	uxth.w	lr, ip
 23f5d84:	fa00 f306 	lsl.w	r3, r0, r6
 23f5d88:	0c20      	lsrs	r0, r4, #16
 23f5d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 23f5d8e:	fb09 1118 	mls	r1, r9, r8, r1
 23f5d92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23f5d96:	fb08 f00e 	mul.w	r0, r8, lr
 23f5d9a:	4288      	cmp	r0, r1
 23f5d9c:	d90f      	bls.n	23f5dbe <__udivmoddi4+0x1b6>
 23f5d9e:	eb1c 0101 	adds.w	r1, ip, r1
 23f5da2:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23f5da6:	bf2c      	ite	cs
 23f5da8:	f04f 0b01 	movcs.w	fp, #1
 23f5dac:	f04f 0b00 	movcc.w	fp, #0
 23f5db0:	4288      	cmp	r0, r1
 23f5db2:	d903      	bls.n	23f5dbc <__udivmoddi4+0x1b4>
 23f5db4:	f1bb 0f00 	cmp.w	fp, #0
 23f5db8:	f000 808d 	beq.w	23f5ed6 <__udivmoddi4+0x2ce>
 23f5dbc:	46d0      	mov	r8, sl
 23f5dbe:	1a09      	subs	r1, r1, r0
 23f5dc0:	b2a4      	uxth	r4, r4
 23f5dc2:	fbb1 f0f9 	udiv	r0, r1, r9
 23f5dc6:	fb09 1110 	mls	r1, r9, r0, r1
 23f5dca:	fb00 fe0e 	mul.w	lr, r0, lr
 23f5dce:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23f5dd2:	458e      	cmp	lr, r1
 23f5dd4:	d907      	bls.n	23f5de6 <__udivmoddi4+0x1de>
 23f5dd6:	eb1c 0101 	adds.w	r1, ip, r1
 23f5dda:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23f5dde:	d201      	bcs.n	23f5de4 <__udivmoddi4+0x1dc>
 23f5de0:	458e      	cmp	lr, r1
 23f5de2:	d87f      	bhi.n	23f5ee4 <__udivmoddi4+0x2dc>
 23f5de4:	4620      	mov	r0, r4
 23f5de6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23f5dea:	eba1 010e 	sub.w	r1, r1, lr
 23f5dee:	fba0 9802 	umull	r9, r8, r0, r2
 23f5df2:	4541      	cmp	r1, r8
 23f5df4:	464c      	mov	r4, r9
 23f5df6:	46c6      	mov	lr, r8
 23f5df8:	d302      	bcc.n	23f5e00 <__udivmoddi4+0x1f8>
 23f5dfa:	d106      	bne.n	23f5e0a <__udivmoddi4+0x202>
 23f5dfc:	454b      	cmp	r3, r9
 23f5dfe:	d204      	bcs.n	23f5e0a <__udivmoddi4+0x202>
 23f5e00:	3801      	subs	r0, #1
 23f5e02:	ebb9 0402 	subs.w	r4, r9, r2
 23f5e06:	eb68 0e0c 	sbc.w	lr, r8, ip
 23f5e0a:	2d00      	cmp	r5, #0
 23f5e0c:	d070      	beq.n	23f5ef0 <__udivmoddi4+0x2e8>
 23f5e0e:	1b1a      	subs	r2, r3, r4
 23f5e10:	eb61 010e 	sbc.w	r1, r1, lr
 23f5e14:	fa22 f306 	lsr.w	r3, r2, r6
 23f5e18:	fa01 f707 	lsl.w	r7, r1, r7
 23f5e1c:	40f1      	lsrs	r1, r6
 23f5e1e:	2600      	movs	r6, #0
 23f5e20:	431f      	orrs	r7, r3
 23f5e22:	e9c5 7100 	strd	r7, r1, [r5]
 23f5e26:	e73c      	b.n	23f5ca2 <__udivmoddi4+0x9a>
 23f5e28:	fa02 fc03 	lsl.w	ip, r2, r3
 23f5e2c:	f1c3 0020 	rsb	r0, r3, #32
 23f5e30:	fa01 f203 	lsl.w	r2, r1, r3
 23f5e34:	fa21 f600 	lsr.w	r6, r1, r0
 23f5e38:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23f5e3c:	fa24 f100 	lsr.w	r1, r4, r0
 23f5e40:	fa1f f78c 	uxth.w	r7, ip
 23f5e44:	409c      	lsls	r4, r3
 23f5e46:	4311      	orrs	r1, r2
 23f5e48:	fbb6 f0fe 	udiv	r0, r6, lr
 23f5e4c:	0c0a      	lsrs	r2, r1, #16
 23f5e4e:	fb0e 6610 	mls	r6, lr, r0, r6
 23f5e52:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23f5e56:	fb00 f607 	mul.w	r6, r0, r7
 23f5e5a:	4296      	cmp	r6, r2
 23f5e5c:	d90e      	bls.n	23f5e7c <__udivmoddi4+0x274>
 23f5e5e:	eb1c 0202 	adds.w	r2, ip, r2
 23f5e62:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23f5e66:	bf2c      	ite	cs
 23f5e68:	f04f 0901 	movcs.w	r9, #1
 23f5e6c:	f04f 0900 	movcc.w	r9, #0
 23f5e70:	4296      	cmp	r6, r2
 23f5e72:	d902      	bls.n	23f5e7a <__udivmoddi4+0x272>
 23f5e74:	f1b9 0f00 	cmp.w	r9, #0
 23f5e78:	d031      	beq.n	23f5ede <__udivmoddi4+0x2d6>
 23f5e7a:	4640      	mov	r0, r8
 23f5e7c:	1b92      	subs	r2, r2, r6
 23f5e7e:	b289      	uxth	r1, r1
 23f5e80:	fbb2 f6fe 	udiv	r6, r2, lr
 23f5e84:	fb0e 2216 	mls	r2, lr, r6, r2
 23f5e88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23f5e8c:	fb06 f207 	mul.w	r2, r6, r7
 23f5e90:	428a      	cmp	r2, r1
 23f5e92:	d907      	bls.n	23f5ea4 <__udivmoddi4+0x29c>
 23f5e94:	eb1c 0101 	adds.w	r1, ip, r1
 23f5e98:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23f5e9c:	d201      	bcs.n	23f5ea2 <__udivmoddi4+0x29a>
 23f5e9e:	428a      	cmp	r2, r1
 23f5ea0:	d823      	bhi.n	23f5eea <__udivmoddi4+0x2e2>
 23f5ea2:	4646      	mov	r6, r8
 23f5ea4:	1a89      	subs	r1, r1, r2
 23f5ea6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23f5eaa:	e725      	b.n	23f5cf8 <__udivmoddi4+0xf0>
 23f5eac:	462e      	mov	r6, r5
 23f5eae:	4628      	mov	r0, r5
 23f5eb0:	e6f7      	b.n	23f5ca2 <__udivmoddi4+0x9a>
 23f5eb2:	1a84      	subs	r4, r0, r2
 23f5eb4:	eb61 0303 	sbc.w	r3, r1, r3
 23f5eb8:	2001      	movs	r0, #1
 23f5eba:	461f      	mov	r7, r3
 23f5ebc:	e70b      	b.n	23f5cd6 <__udivmoddi4+0xce>
 23f5ebe:	4464      	add	r4, ip
 23f5ec0:	3802      	subs	r0, #2
 23f5ec2:	e749      	b.n	23f5d58 <__udivmoddi4+0x150>
 23f5ec4:	4464      	add	r4, ip
 23f5ec6:	3802      	subs	r0, #2
 23f5ec8:	e6e1      	b.n	23f5c8e <__udivmoddi4+0x86>
 23f5eca:	3a02      	subs	r2, #2
 23f5ecc:	4461      	add	r1, ip
 23f5ece:	e72e      	b.n	23f5d2e <__udivmoddi4+0x126>
 23f5ed0:	3e02      	subs	r6, #2
 23f5ed2:	4462      	add	r2, ip
 23f5ed4:	e6c6      	b.n	23f5c64 <__udivmoddi4+0x5c>
 23f5ed6:	f1a8 0802 	sub.w	r8, r8, #2
 23f5eda:	4461      	add	r1, ip
 23f5edc:	e76f      	b.n	23f5dbe <__udivmoddi4+0x1b6>
 23f5ede:	3802      	subs	r0, #2
 23f5ee0:	4462      	add	r2, ip
 23f5ee2:	e7cb      	b.n	23f5e7c <__udivmoddi4+0x274>
 23f5ee4:	3802      	subs	r0, #2
 23f5ee6:	4461      	add	r1, ip
 23f5ee8:	e77d      	b.n	23f5de6 <__udivmoddi4+0x1de>
 23f5eea:	3e02      	subs	r6, #2
 23f5eec:	4461      	add	r1, ip
 23f5eee:	e7d9      	b.n	23f5ea4 <__udivmoddi4+0x29c>
 23f5ef0:	462e      	mov	r6, r5
 23f5ef2:	e6d6      	b.n	23f5ca2 <__udivmoddi4+0x9a>

023f5ef4 <__aeabi_idiv0>:
 23f5ef4:	4770      	bx	lr
 23f5ef6:	bf00      	nop

023f5ef8 <strcmp>:
 23f5ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f5efc:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f5f00:	2a01      	cmp	r2, #1
 23f5f02:	bf28      	it	cs
 23f5f04:	429a      	cmpcs	r2, r3
 23f5f06:	d0f7      	beq.n	23f5ef8 <strcmp>
 23f5f08:	1ad0      	subs	r0, r2, r3
 23f5f0a:	4770      	bx	lr

023f5f0c <strlen>:
 23f5f0c:	4603      	mov	r3, r0
 23f5f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f5f12:	2a00      	cmp	r2, #0
 23f5f14:	d1fb      	bne.n	23f5f0e <strlen+0x2>
 23f5f16:	1a18      	subs	r0, r3, r0
 23f5f18:	3801      	subs	r0, #1
 23f5f1a:	4770      	bx	lr

023f5f1c <__aeabi_d2lz>:
 23f5f1c:	b538      	push	{r3, r4, r5, lr}
 23f5f1e:	2200      	movs	r2, #0
 23f5f20:	2300      	movs	r3, #0
 23f5f22:	4604      	mov	r4, r0
 23f5f24:	460d      	mov	r5, r1
 23f5f26:	f7ff fd79 	bl	23f5a1c <__aeabi_dcmplt>
 23f5f2a:	b928      	cbnz	r0, 23f5f38 <__aeabi_d2lz+0x1c>
 23f5f2c:	4620      	mov	r0, r4
 23f5f2e:	4629      	mov	r1, r5
 23f5f30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f5f34:	f7ff be4a 	b.w	23f5bcc <__aeabi_d2ulz>
 23f5f38:	4620      	mov	r0, r4
 23f5f3a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 23f5f3e:	f7ff fe45 	bl	23f5bcc <__aeabi_d2ulz>
 23f5f42:	4240      	negs	r0, r0
 23f5f44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f5f48:	bd38      	pop	{r3, r4, r5, pc}
 23f5f4a:	bf00      	nop

023f5f4c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f5f4c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f5f4e:	f006 ff1f 	bl	23fcd90 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f5f52:	2500      	movs	r5, #0
 23f5f54:	4e05      	ldr	r6, [pc, #20]	; (23f5f6c <module_user_init+0x20>)
 23f5f56:	4c06      	ldr	r4, [pc, #24]	; (23f5f70 <module_user_init+0x24>)
 23f5f58:	1ba4      	subs	r4, r4, r6
 23f5f5a:	08a4      	lsrs	r4, r4, #2
 23f5f5c:	42ac      	cmp	r4, r5
 23f5f5e:	d100      	bne.n	23f5f62 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f5f60:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f5f62:	f856 3b04 	ldr.w	r3, [r6], #4
 23f5f66:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f5f68:	3501      	adds	r5, #1
 23f5f6a:	e7f7      	b.n	23f5f5c <module_user_init+0x10>
 23f5f6c:	023fffc4 	.word	0x023fffc4
 23f5f70:	023ffff4 	.word	0x023ffff4

023f5f74 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f5f74:	f000 b84a 	b.w	23f600c <setup>

023f5f78 <module_user_loop>:
}

void module_user_loop() {
 23f5f78:	b508      	push	{r3, lr}
    loop();
 23f5f7a:	f000 f88b 	bl	23f6094 <loop>
    _post_loop();
}
 23f5f7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f5f82:	f006 bebd 	b.w	23fcd00 <_post_loop>

023f5f86 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f5f86:	f002 be6f 	b.w	23f8c68 <malloc>

023f5f8a <_Znaj>:
 23f5f8a:	f002 be6d 	b.w	23f8c68 <malloc>

023f5f8e <_ZdaPv>:
 23f5f8e:	f002 be79 	b.w	23f8c84 <free>

023f5f92 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f5f92:	f002 be77 	b.w	23f8c84 <free>
	...

023f5f98 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f5f98:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f5f9a:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f5f9c:	4a02      	ldr	r2, [pc, #8]	; (23f5fa8 <__cxa_pure_virtual+0x10>)
 23f5f9e:	4903      	ldr	r1, [pc, #12]	; (23f5fac <__cxa_pure_virtual+0x14>)
 23f5fa0:	f002 fbfa 	bl	23f8798 <panic_>
  while (1);
 23f5fa4:	e7fe      	b.n	23f5fa4 <__cxa_pure_virtual+0xc>
 23f5fa6:	bf00      	nop
 23f5fa8:	023f84dd 	.word	0x023f84dd
 23f5fac:	023ff204 	.word	0x023ff204

023f5fb0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f5fb0:	7800      	ldrb	r0, [r0, #0]
 23f5fb2:	fab0 f080 	clz	r0, r0
 23f5fb6:	0940      	lsrs	r0, r0, #5
 23f5fb8:	4770      	bx	lr

023f5fba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f5fba:	2301      	movs	r3, #1
 23f5fbc:	7003      	strb	r3, [r0, #0]
 23f5fbe:	4770      	bx	lr

023f5fc0 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23f5fc0:	4770      	bx	lr
	...

023f5fc4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23f5fc4:	b510      	push	{r4, lr}
 23f5fc6:	4604      	mov	r4, r0
 23f5fc8:	4b09      	ldr	r3, [pc, #36]	; (23f5ff0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23f5fca:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23f5fcc:	f004 f8aa 	bl	23fa124 <_ZN5spark10LogManager8instanceEv>
 23f5fd0:	4621      	mov	r1, r4
 23f5fd2:	f004 faf3 	bl	23fa5bc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23f5fd6:	f005 f9e3 	bl	23fb3a0 <_Z16_fetch_usbserialv>
 23f5fda:	f005 f9d3 	bl	23fb384 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23f5fde:	4620      	mov	r0, r4
 23f5fe0:	4b04      	ldr	r3, [pc, #16]	; (23f5ff4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23f5fe2:	f840 3b04 	str.w	r3, [r0], #4
 23f5fe6:	f004 f973 	bl	23fa2d0 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23f5fea:	4620      	mov	r0, r4
 23f5fec:	bd10      	pop	{r4, pc}
 23f5fee:	bf00      	nop
 23f5ff0:	023ff258 	.word	0x023ff258
 23f5ff4:	023ff240 	.word	0x023ff240

023f5ff8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23f5ff8:	b510      	push	{r4, lr}
 23f5ffa:	4604      	mov	r4, r0
    }
 23f5ffc:	f7ff ffe2 	bl	23f5fc4 <_ZN5spark16SerialLogHandlerD1Ev>
 23f6000:	4620      	mov	r0, r4
 23f6002:	2124      	movs	r1, #36	; 0x24
 23f6004:	f7ff ffc5 	bl	23f5f92 <_ZdlPvj>
 23f6008:	4620      	mov	r0, r4
 23f600a:	bd10      	pop	{r4, pc}

023f600c <setup>:

// Used for retaining the last log
retained uint8_t retainedLogs[2048];

// setup() runs once, when the device is first turned on
void setup() {
 23f600c:	b538      	push	{r3, r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23f600e:	2000      	movs	r0, #0
 23f6010:	f002 fa80 	bl	23f8514 <hal_timer_millis>
        while (_while() && !_condition()) {
 23f6014:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
 23f6018:	4604      	mov	r4, r0
 23f601a:	2000      	movs	r0, #0
 23f601c:	f002 fa7a 	bl	23f8514 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23f6020:	1b00      	subs	r0, r0, r4
 23f6022:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23f6026:	42a8      	cmp	r0, r5
 23f6028:	f171 0300 	sbcs.w	r3, r1, #0
 23f602c:	d207      	bcs.n	23f603e <setup+0x32>
  // Put initialization like pinMode and begin functions here
  
  waitFor(Serial.isConnected, 10000);   //waits for serial port for specified time, handy for seeing early log messages
 23f602e:	f005 f9b7 	bl	23fb3a0 <_Z16_fetch_usbserialv>
 23f6032:	f005 f9aa 	bl	23fb38a <_ZN9USBSerial11isConnectedEv>
 23f6036:	b910      	cbnz	r0, 23f603e <setup+0x32>
            spark_process();
 23f6038:	f002 fc72 	bl	23f8920 <spark_process>
        while (_while() && !_condition()) {
 23f603c:	e7ed      	b.n	23f601a <setup+0xe>
 23f603e:	f005 f9af 	bl	23fb3a0 <_Z16_fetch_usbserialv>
 23f6042:	f005 f9a2 	bl	23fb38a <_ZN9USBSerial11isConnectedEv>

    // This sets up remote configuration
    DeviceConfigLedger::instance()
 23f6046:	f000 fed1 	bl	23f6dec <_ZN18DeviceConfigLedger8instanceEv>
     * Making this call sets the name and also enables it. 
     * 
     * Must be called before setup().
     */
    DeviceConfigLedger &withConfigDefaultLedgerName(const char *configDefaultLedgerName) {
        this->configDefaultLedgerName = configDefaultLedgerName;
 23f604a:	490f      	ldr	r1, [pc, #60]	; (23f6088 <setup+0x7c>)
 23f604c:	4604      	mov	r4, r0
 23f604e:	3050      	adds	r0, #80	; 0x50
 23f6050:	f005 f868 	bl	23fb124 <_ZN6StringaSEPKc>
        this->configDefaultLedgerEnabled = true;
 23f6054:	2301      	movs	r3, #1
        .withConfigDefaultLedgerName("device-config")
        .setup();
 23f6056:	4620      	mov	r0, r4
 23f6058:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
 23f605c:	f001 fa90 	bl	23f7580 <_ZN18DeviceConfigLedger5setupEv>
    
    // This sets up the device information in ledger
    DeviceInfoLedger::instance()
 23f6060:	f000 fb96 	bl	23f6790 <_ZN16DeviceInfoLedger8instanceEv>
 23f6064:	4604      	mov	r4, r0
     * Default is "device-info". 
     * 
     * Must be called before setup().
     */
    DeviceInfoLedger &withInfoLedgerName(const char *infoLedgerName) {
        this->infoLedgerName = infoLedgerName;
 23f6066:	4909      	ldr	r1, [pc, #36]	; (23f608c <setup+0x80>)
 23f6068:	3004      	adds	r0, #4
 23f606a:	f005 f85b 	bl	23fb124 <_ZN6StringaSEPKc>
     * buffer as large as is reasonable for your application.
     * 
     * Must be called before setup().
     */
    DeviceInfoLedger &withRetainedBuffer(uint8_t *retainedBuffer, size_t retainedBufferSize) {
        this->retainedBuffer = retainedBuffer;
 23f606e:	4b08      	ldr	r3, [pc, #32]	; (23f6090 <setup+0x84>)
        .withInfoLedgerName("device-logging")
        .withRetainedBuffer(retainedLogs, sizeof(retainedLogs))
        .setup(); 
 23f6070:	4620      	mov	r0, r4
 23f6072:	6163      	str	r3, [r4, #20]
        this->retainedBufferSize = retainedBufferSize;
 23f6074:	f44f 6300 	mov.w	r3, #2048	; 0x800
 23f6078:	61a3      	str	r3, [r4, #24]
 23f607a:	f002 f8a9 	bl	23f81d0 <_ZN16DeviceInfoLedger5setupEv>

    // Using SYSTEM_MODE(SEMI_AUTOMATIC) and calling Particle.connect() after calling setup() for DeviceInfoLedger
    // is recommended to avoid getting new connection information in the last run log.
    Particle.connect();

}
 23f607e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 23f6082:	f002 bc5b 	b.w	23f893c <spark_cloud_flag_connect>
 23f6086:	bf00      	nop
 23f6088:	023ff219 	.word	0x023ff219
 23f608c:	023ff227 	.word	0x023ff227
 23f6090:	1007b400 	.word	0x1007b400

023f6094 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 23f6094:	b508      	push	{r3, lr}
  // Log.info("Sending Hello World to the cloud!");
  // Particle.publish("Hello world!");
  // delay( 10 * 1000 ); // milliseconds and blocking - see docs for more info!

  // This captures the various messages and sets the values in retainedLogs
  DeviceInfoLedger::instance().loop();
 23f6096:	f000 fb7b 	bl	23f6790 <_ZN16DeviceInfoLedger8instanceEv>
 23f609a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DeviceInfoLedger::instance().loop();
 23f609e:	f002 b967 	b.w	23f8370 <_ZN16DeviceInfoLedger4loopEv>

023f60a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f60a2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f60a4:	2614      	movs	r6, #20
 23f60a6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f60aa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f60ac:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f60b0:	42ae      	cmp	r6, r5
 23f60b2:	d004      	beq.n	23f60be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f60b4:	4628      	mov	r0, r5
 23f60b6:	f004 ff7f 	bl	23fafb8 <_ZN6StringD1Ev>
 23f60ba:	3514      	adds	r5, #20
 23f60bc:	e7f8      	b.n	23f60b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f60be:	6820      	ldr	r0, [r4, #0]
 23f60c0:	f002 fde0 	bl	23f8c84 <free>
    AllocatorT::free(data_);
}
 23f60c4:	4620      	mov	r0, r4
 23f60c6:	bd70      	pop	{r4, r5, r6, pc}

023f60c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f60c8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f60ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f60cc:	4604      	mov	r4, r0
 23f60ce:	460d      	mov	r5, r1
 23f60d0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f60d2:	d916      	bls.n	23f6102 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f60d4:	4290      	cmp	r0, r2
 23f60d6:	d215      	bcs.n	23f6104 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f60d8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f60dc:	1a75      	subs	r5, r6, r1
 23f60de:	f1a1 0714 	sub.w	r7, r1, #20
 23f60e2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f60e4:	42b7      	cmp	r7, r6
 23f60e6:	d01c      	beq.n	23f6122 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f60e8:	b12c      	cbz	r4, 23f60f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f60ea:	4631      	mov	r1, r6
 23f60ec:	4620      	mov	r0, r4
 23f60ee:	f004 ffec 	bl	23fb0ca <_ZN6StringC1EOS_>
 23f60f2:	7c33      	ldrb	r3, [r6, #16]
 23f60f4:	7423      	strb	r3, [r4, #16]
 23f60f6:	4630      	mov	r0, r6
 23f60f8:	f004 ff5e 	bl	23fafb8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f60fc:	3e14      	subs	r6, #20
 23f60fe:	3c14      	subs	r4, #20
 23f6100:	e7f0      	b.n	23f60e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f6102:	d00e      	beq.n	23f6122 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f6104:	42b5      	cmp	r5, r6
 23f6106:	d00c      	beq.n	23f6122 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f6108:	b12c      	cbz	r4, 23f6116 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f610a:	4629      	mov	r1, r5
 23f610c:	4620      	mov	r0, r4
 23f610e:	f004 ffdc 	bl	23fb0ca <_ZN6StringC1EOS_>
 23f6112:	7c2b      	ldrb	r3, [r5, #16]
 23f6114:	7423      	strb	r3, [r4, #16]
 23f6116:	4628      	mov	r0, r5
 23f6118:	f004 ff4e 	bl	23fafb8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f611c:	3514      	adds	r5, #20
 23f611e:	3414      	adds	r4, #20
 23f6120:	e7f0      	b.n	23f6104 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f6122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f6124 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f6124:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f6126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f612a:	e9c0 3300 	strd	r3, r3, [r0]
 23f612e:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f6130:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f6132:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f6134:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f6136:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f6138:	dd24      	ble.n	23f6184 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f613a:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f613e:	fb08 f007 	mul.w	r0, r8, r7
 23f6142:	f002 fd91 	bl	23f8c68 <malloc>
            if (!d) {
 23f6146:	4605      	mov	r5, r0
 23f6148:	b1e0      	cbz	r0, 23f6184 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f614a:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f614e:	fb08 1202 	mla	r2, r8, r2, r1
 23f6152:	f7ff ffb9 	bl	23f60c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f6156:	6820      	ldr	r0, [r4, #0]
 23f6158:	f002 fd94 	bl	23f8c84 <free>
        data_ = d;
 23f615c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f615e:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f6160:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f6164:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f6168:	45b8      	cmp	r8, r7
 23f616a:	d009      	beq.n	23f6180 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f616c:	4639      	mov	r1, r7
 23f616e:	4628      	mov	r0, r5
 23f6170:	f004 ffc5 	bl	23fb0fe <_ZN6StringC1ERKS_>
 23f6174:	7c3b      	ldrb	r3, [r7, #16]
 23f6176:	3514      	adds	r5, #20
 23f6178:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f617c:	3714      	adds	r7, #20
 23f617e:	e7f3      	b.n	23f6168 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f6180:	6873      	ldr	r3, [r6, #4]
 23f6182:	6063      	str	r3, [r4, #4]
}
 23f6184:	4620      	mov	r0, r4
 23f6186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023f618c <_GLOBAL__sub_I_SystemMode>:
 23f618c:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
 23f618e:	2400      	movs	r4, #0
 23f6190:	4b2a      	ldr	r3, [pc, #168]	; (23f623c <_GLOBAL__sub_I_SystemMode+0xb0>)
    SleepResult() {}
 23f6192:	4a2b      	ldr	r2, [pc, #172]	; (23f6240 <_GLOBAL__sub_I_SystemMode+0xb4>)
 23f6194:	b08c      	sub	sp, #48	; 0x30
              error_(SYSTEM_ERROR_NONE) {
 23f6196:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23f619a:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23f619c:	2002      	movs	r0, #2
 23f619e:	f002 fb5d 	bl	23f885c <set_system_mode>
SYSTEM_THREAD(ENABLED);   //not required for OS >=6.2.x
 23f61a2:	4621      	mov	r1, r4
 23f61a4:	2001      	movs	r0, #1
 23f61a6:	f002 fb67 	bl	23f8878 <system_thread_set_state>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 23f61aa:	f006 fe23 	bl	23fcdf4 <spark_protocol_instance>
 23f61ae:	4623      	mov	r3, r4
 23f61b0:	4622      	mov	r2, r4
 23f61b2:	2103      	movs	r1, #3
 23f61b4:	f006 fe3a 	bl	23fce2c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 23f61b8:	f006 fe1c 	bl	23fcdf4 <spark_protocol_instance>
 23f61bc:	4622      	mov	r2, r4
 23f61be:	4623      	mov	r3, r4
 23f61c0:	2123      	movs	r1, #35	; 0x23
 23f61c2:	f006 fe25 	bl	23fce10 <spark_protocol_set_product_id>
        capacity_(0) {
 23f61c6:	e9cd 4400 	strd	r4, r4, [sp]
 23f61ca:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23f61cc:	f005 f8e8 	bl	23fb3a0 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23f61d0:	4c1c      	ldr	r4, [pc, #112]	; (23f6244 <_GLOBAL__sub_I_SystemMode+0xb8>)
 23f61d2:	4605      	mov	r5, r0
 23f61d4:	4626      	mov	r6, r4
 23f61d6:	4669      	mov	r1, sp
 23f61d8:	a803      	add	r0, sp, #12
 23f61da:	f7ff ffa3 	bl	23f6124 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23f61de:	a903      	add	r1, sp, #12
 23f61e0:	a806      	add	r0, sp, #24
 23f61e2:	f7ff ff9f 	bl	23f6124 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f61e6:	4b18      	ldr	r3, [pc, #96]	; (23f6248 <_GLOBAL__sub_I_SystemMode+0xbc>)
 23f61e8:	a906      	add	r1, sp, #24
 23f61ea:	f846 3b04 	str.w	r3, [r6], #4
 23f61ee:	a809      	add	r0, sp, #36	; 0x24
 23f61f0:	f7ff ff98 	bl	23f6124 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f61f4:	aa09      	add	r2, sp, #36	; 0x24
 23f61f6:	211e      	movs	r1, #30
 23f61f8:	4630      	mov	r0, r6
 23f61fa:	f004 fa7f 	bl	23fa6fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f61fe:	a809      	add	r0, sp, #36	; 0x24
 23f6200:	f7ff ff4f 	bl	23f60a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f6204:	a806      	add	r0, sp, #24
 23f6206:	f7ff ff4c 	bl	23f60a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f620a:	4b10      	ldr	r3, [pc, #64]	; (23f624c <_GLOBAL__sub_I_SystemMode+0xc0>)
 23f620c:	6225      	str	r5, [r4, #32]
 23f620e:	6023      	str	r3, [r4, #0]
 23f6210:	a803      	add	r0, sp, #12
 23f6212:	f7ff ff46 	bl	23f60a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f6216:	4b0e      	ldr	r3, [pc, #56]	; (23f6250 <_GLOBAL__sub_I_SystemMode+0xc4>)
 23f6218:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23f621a:	f005 f8c1 	bl	23fb3a0 <_Z16_fetch_usbserialv>
 23f621e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f6222:	f005 f8ab 	bl	23fb37c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23f6226:	f003 ff7d 	bl	23fa124 <_ZN5spark10LogManager8instanceEv>
 23f622a:	4621      	mov	r1, r4
 23f622c:	f004 f980 	bl	23fa530 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23f6230:	4668      	mov	r0, sp
 23f6232:	f7ff ff36 	bl	23f60a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f6236:	b00c      	add	sp, #48	; 0x30
 23f6238:	bd70      	pop	{r4, r5, r6, pc}
 23f623a:	bf00      	nop
 23f623c:	1007ae1c 	.word	0x1007ae1c
 23f6240:	ffff0000 	.word	0xffff0000
 23f6244:	1007ae28 	.word	0x1007ae28
 23f6248:	023ff240 	.word	0x023ff240
 23f624c:	023ffa6c 	.word	0x023ffa6c
 23f6250:	023ff258 	.word	0x023ff258

023f6254 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeES9_SO_>:
		std::forward<_Variants>(__vars))...);
	else // for std::visit<R> use INVOKE<R>
	  return std::__invoke_r<_Result_type>(
	      std::forward<_Visitor>(__visitor),
	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
      }
 23f6254:	2000      	movs	r0, #0
 23f6256:	4770      	bx	lr

023f6258 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeES9_SO_>:
    }

    template<typename SourceT>
    bool operator()(const SourceT& val) {
        if constexpr (std::is_arithmetic_v<SourceT>) {
            ok = true;
 23f6258:	2301      	movs	r3, #1
 23f625a:	7003      	strb	r3, [r0, #0]
 23f625c:	7808      	ldrb	r0, [r1, #0]
 23f625e:	4770      	bx	lr

023f6260 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeES9_SO_>:
 23f6260:	2301      	movs	r3, #1
 23f6262:	7003      	strb	r3, [r0, #0]
            return static_cast<bool>(val);
 23f6264:	6808      	ldr	r0, [r1, #0]
 23f6266:	3800      	subs	r0, #0
 23f6268:	bf18      	it	ne
 23f626a:	2001      	movne	r0, #1
 23f626c:	4770      	bx	lr

023f626e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeES9_SO_>:
            ok = true;
 23f626e:	2301      	movs	r3, #1
 23f6270:	7003      	strb	r3, [r0, #0]
            return static_cast<bool>(val);
 23f6272:	6808      	ldr	r0, [r1, #0]
 23f6274:	3800      	subs	r0, #0
 23f6276:	bf18      	it	ne
 23f6278:	2001      	movne	r0, #1
 23f627a:	4770      	bx	lr

023f627c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeES9_SO_>:
            ok = true;
 23f627c:	2301      	movs	r3, #1
 23f627e:	7003      	strb	r3, [r0, #0]
            return static_cast<bool>(val);
 23f6280:	e9d1 2300 	ldrd	r2, r3, [r1]
 23f6284:	4313      	orrs	r3, r2
 23f6286:	bf14      	ite	ne
 23f6288:	2001      	movne	r0, #1
 23f628a:	2000      	moveq	r0, #0
 23f628c:	4770      	bx	lr

023f628e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeES9_SO_>:
            ok = true;
 23f628e:	2301      	movs	r3, #1
 23f6290:	7003      	strb	r3, [r0, #0]
            return static_cast<bool>(val);
 23f6292:	e9d1 2300 	ldrd	r2, r3, [r1]
 23f6296:	4313      	orrs	r3, r2
 23f6298:	bf14      	ite	ne
 23f629a:	2001      	movne	r0, #1
 23f629c:	2000      	moveq	r0, #0
 23f629e:	4770      	bx	lr

023f62a0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeES9_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f62a0:	b510      	push	{r4, lr}
            ok = true;
 23f62a2:	2401      	movs	r4, #1
 23f62a4:	7004      	strb	r4, [r0, #0]
            return static_cast<bool>(val);
 23f62a6:	2200      	movs	r2, #0
 23f62a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f62ac:	2300      	movs	r3, #0
 23f62ae:	f7ff fbab 	bl	23f5a08 <__aeabi_dcmpeq>
 23f62b2:	b108      	cbz	r0, 23f62b8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeES9_SO_+0x18>
 23f62b4:	f04f 0400 	mov.w	r4, #0
      }
 23f62b8:	f004 0001 	and.w	r0, r4, #1
 23f62bc:	bd10      	pop	{r4, pc}

023f62be <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeES9_SO_>:
 23f62be:	2000      	movs	r0, #0
 23f62c0:	4770      	bx	lr

023f62c2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeES9_SO_>:
 23f62c2:	2000      	movs	r0, #0
 23f62c4:	4770      	bx	lr

023f62c6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeES9_SO_>:
 23f62c6:	2000      	movs	r0, #0
 23f62c8:	4770      	bx	lr

023f62ca <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeES9_SO_>:
 23f62ca:	2000      	movs	r0, #0
 23f62cc:	4770      	bx	lr

023f62ce <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeES9_SO_>:
    }

    template<typename SourceT>
    TargetT operator()(const SourceT& val) {
        if constexpr (std::is_arithmetic_v<SourceT>) {
            ok = true;
 23f62ce:	2301      	movs	r3, #1
 23f62d0:	7003      	strb	r3, [r0, #0]
 23f62d2:	7808      	ldrb	r0, [r1, #0]
 23f62d4:	4770      	bx	lr

023f62d6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeES9_SO_>:
 23f62d6:	2301      	movs	r3, #1
 23f62d8:	7003      	strb	r3, [r0, #0]
 23f62da:	6808      	ldr	r0, [r1, #0]
 23f62dc:	4770      	bx	lr

023f62de <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeES9_SO_>:
 23f62de:	2301      	movs	r3, #1
 23f62e0:	7003      	strb	r3, [r0, #0]
 23f62e2:	6808      	ldr	r0, [r1, #0]
 23f62e4:	4770      	bx	lr

023f62e6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeES9_SO_>:
 23f62e6:	2301      	movs	r3, #1
 23f62e8:	7003      	strb	r3, [r0, #0]
 23f62ea:	6808      	ldr	r0, [r1, #0]
 23f62ec:	4770      	bx	lr

023f62ee <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeES9_SO_>:
 23f62ee:	2301      	movs	r3, #1
 23f62f0:	7003      	strb	r3, [r0, #0]
 23f62f2:	6808      	ldr	r0, [r1, #0]
 23f62f4:	4770      	bx	lr

023f62f6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeES9_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f62f6:	b508      	push	{r3, lr}
 23f62f8:	2301      	movs	r3, #1
 23f62fa:	7003      	strb	r3, [r0, #0]
            return static_cast<TargetT>(val);
 23f62fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f6300:	f7ff fbb4 	bl	23f5a6c <__aeabi_d2iz>
      }
 23f6304:	bd08      	pop	{r3, pc}

023f6306 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeES9_SO_>:
 23f6306:	2000      	movs	r0, #0
 23f6308:	4770      	bx	lr

023f630a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeES9_SO_>:
 23f630a:	2000      	movs	r0, #0
 23f630c:	4770      	bx	lr

023f630e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeES9_SO_>:
 23f630e:	2000      	movs	r0, #0
 23f6310:	4770      	bx	lr

023f6312 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESE_SO_>:
        return val;
    }

    template<typename SourceT>
    VariantMap operator()(const SourceT& val) const {
        return VariantMap();
 23f6312:	2200      	movs	r2, #0
 23f6314:	e9c0 2200 	strd	r2, r2, [r0]
 23f6318:	6082      	str	r2, [r0, #8]
 23f631a:	4770      	bx	lr

023f631c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESE_SO_>:
 23f631c:	2200      	movs	r2, #0
 23f631e:	e9c0 2200 	strd	r2, r2, [r0]
 23f6322:	6082      	str	r2, [r0, #8]
 23f6324:	4770      	bx	lr

023f6326 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESE_SO_>:
 23f6326:	2200      	movs	r2, #0
 23f6328:	e9c0 2200 	strd	r2, r2, [r0]
 23f632c:	6082      	str	r2, [r0, #8]
 23f632e:	4770      	bx	lr

023f6330 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESE_SO_>:
 23f6330:	2200      	movs	r2, #0
 23f6332:	e9c0 2200 	strd	r2, r2, [r0]
 23f6336:	6082      	str	r2, [r0, #8]
 23f6338:	4770      	bx	lr

023f633a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESE_SO_>:
 23f633a:	2200      	movs	r2, #0
 23f633c:	e9c0 2200 	strd	r2, r2, [r0]
 23f6340:	6082      	str	r2, [r0, #8]
 23f6342:	4770      	bx	lr

023f6344 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESE_SO_>:
 23f6344:	2200      	movs	r2, #0
 23f6346:	e9c0 2200 	strd	r2, r2, [r0]
 23f634a:	6082      	str	r2, [r0, #8]
 23f634c:	4770      	bx	lr

023f634e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESE_SO_>:
 23f634e:	2200      	movs	r2, #0
 23f6350:	e9c0 2200 	strd	r2, r2, [r0]
 23f6354:	6082      	str	r2, [r0, #8]
 23f6356:	4770      	bx	lr

023f6358 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESE_SO_>:
 23f6358:	2200      	movs	r2, #0
 23f635a:	e9c0 2200 	strd	r2, r2, [r0]
 23f635e:	6082      	str	r2, [r0, #8]
 23f6360:	4770      	bx	lr

023f6362 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESE_SO_>:
 23f6362:	2200      	movs	r2, #0
 23f6364:	e9c0 2200 	strd	r2, r2, [r0]
 23f6368:	6082      	str	r2, [r0, #8]
 23f636a:	4770      	bx	lr

023f636c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESE_SO_>:
 23f636c:	2200      	movs	r2, #0
 23f636e:	e9c0 2200 	strd	r2, r2, [r0]
 23f6372:	6082      	str	r2, [r0, #8]
 23f6374:	4770      	bx	lr

023f6376 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESL_SO_>:
 23f6376:	4770      	bx	lr

023f6378 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESL_SO_>:
 23f6378:	4770      	bx	lr

023f637a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESL_SO_>:
 23f637a:	4770      	bx	lr

023f637c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESL_SO_>:
 23f637c:	4770      	bx	lr

023f637e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESL_SO_>:
 23f637e:	4770      	bx	lr

023f6380 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESL_SO_>:
 23f6380:	4770      	bx	lr

023f6382 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESL_SO_>:
 23f6382:	4770      	bx	lr

023f6384 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESU_SY_>:
 23f6384:	4770      	bx	lr

023f6386 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4294967295EEEE14__visit_invokeESU_SY_>:
 23f6386:	4770      	bx	lr

023f6388 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESU_SY_>:
      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 23f6388:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
 23f638a:	780a      	ldrb	r2, [r1, #0]
 23f638c:	701a      	strb	r2, [r3, #0]
      }
 23f638e:	4770      	bx	lr

023f6390 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESU_SY_>:
      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 23f6390:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
 23f6392:	680a      	ldr	r2, [r1, #0]
 23f6394:	601a      	str	r2, [r3, #0]
      }
 23f6396:	4770      	bx	lr

023f6398 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESU_SY_>:
      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 23f6398:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
 23f639a:	680a      	ldr	r2, [r1, #0]
 23f639c:	601a      	str	r2, [r3, #0]
      }
 23f639e:	4770      	bx	lr

023f63a0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f63a0:	b538      	push	{r3, r4, r5, lr}
        ok = true;
 23f63a2:	2301      	movs	r3, #1
 23f63a4:	4604      	mov	r4, r0
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f63a6:	7815      	ldrb	r5, [r2, #0]
        return val ? "true" : "false";
 23f63a8:	4a04      	ldr	r2, [pc, #16]	; (23f63bc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESA_SO_+0x1c>)
        ok = true;
 23f63aa:	700b      	strb	r3, [r1, #0]
        return val ? "true" : "false";
 23f63ac:	4904      	ldr	r1, [pc, #16]	; (23f63c0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESA_SO_+0x20>)
 23f63ae:	2d00      	cmp	r5, #0
 23f63b0:	bf18      	it	ne
 23f63b2:	4611      	movne	r1, r2
 23f63b4:	f004 fe4b 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
      }
 23f63b8:	4620      	mov	r0, r4
 23f63ba:	bd38      	pop	{r3, r4, r5, pc}
 23f63bc:	023ff268 	.word	0x023ff268
 23f63c0:	023ff26d 	.word	0x023ff26d

023f63c4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f63c4:	b510      	push	{r4, lr}
 23f63c6:	4604      	mov	r4, r0
            return String();
 23f63c8:	4902      	ldr	r1, [pc, #8]	; (23f63d4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESA_SO_+0x10>)
 23f63ca:	f004 fe40 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
      }
 23f63ce:	4620      	mov	r0, r4
 23f63d0:	bd10      	pop	{r4, pc}
 23f63d2:	bf00      	nop
 23f63d4:	023ffa36 	.word	0x023ffa36

023f63d8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f63d8:	b510      	push	{r4, lr}
 23f63da:	4604      	mov	r4, r0
 23f63dc:	4902      	ldr	r1, [pc, #8]	; (23f63e8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESA_SO_+0x10>)
 23f63de:	f004 fe36 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
      }
 23f63e2:	4620      	mov	r0, r4
 23f63e4:	bd10      	pop	{r4, pc}
 23f63e6:	bf00      	nop
 23f63e8:	023ffa36 	.word	0x023ffa36

023f63ec <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f63ec:	b510      	push	{r4, lr}
 23f63ee:	4604      	mov	r4, r0
 23f63f0:	4902      	ldr	r1, [pc, #8]	; (23f63fc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESA_SO_+0x10>)
 23f63f2:	f004 fe2c 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
      }
 23f63f6:	4620      	mov	r0, r4
 23f63f8:	bd10      	pop	{r4, pc}
 23f63fa:	bf00      	nop
 23f63fc:	023ffa36 	.word	0x023ffa36

023f6400 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6400:	b510      	push	{r4, lr}
 23f6402:	4604      	mov	r4, r0
 23f6404:	4902      	ldr	r1, [pc, #8]	; (23f6410 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESA_SO_+0x10>)
 23f6406:	f004 fe22 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
      }
 23f640a:	4620      	mov	r0, r4
 23f640c:	bd10      	pop	{r4, pc}
 23f640e:	bf00      	nop
 23f6410:	023ffa36 	.word	0x023ffa36

023f6414 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESL_SO_>:
    _Destroy(_Tp* __pointer)
    {
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
 23f6414:	4608      	mov	r0, r1
 23f6416:	f004 bdcf 	b.w	23fafb8 <_ZN6StringD1Ev>

023f641a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESA_SO_>:
        ok = true;
 23f641a:	2301      	movs	r3, #1
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f641c:	b510      	push	{r4, lr}
 23f641e:	4604      	mov	r4, r0
 23f6420:	700b      	strb	r3, [r1, #0]
        return val;
 23f6422:	4611      	mov	r1, r2
 23f6424:	f004 fe6b 	bl	23fb0fe <_ZN6StringC1ERKS_>
      }
 23f6428:	4620      	mov	r0, r4
 23f642a:	bd10      	pop	{r4, pc}

023f642c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f642c:	b570      	push	{r4, r5, r6, lr}
 23f642e:	b08a      	sub	sp, #40	; 0x28
            auto r = detail::to_chars(buf, buf + sizeof(buf), val);
 23f6430:	ad02      	add	r5, sp, #8
 23f6432:	ed92 0b00 	vldr	d0, [r2]
 23f6436:	4604      	mov	r4, r0
 23f6438:	460e      	mov	r6, r1
 23f643a:	4668      	mov	r0, sp
 23f643c:	4629      	mov	r1, r5
 23f643e:	aa0a      	add	r2, sp, #40	; 0x28
 23f6440:	f005 f932 	bl	23fb6a8 <_ZN8particle6detail8to_charsEPcS1_d>
            SPARK_ASSERT(r.ec == std::errc());
 23f6444:	9b01      	ldr	r3, [sp, #4]
 23f6446:	b123      	cbz	r3, 23f6452 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESA_SO_+0x26>
 23f6448:	200a      	movs	r0, #10
 23f644a:	4a07      	ldr	r2, [pc, #28]	; (23f6468 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESA_SO_+0x3c>)
 23f644c:	4907      	ldr	r1, [pc, #28]	; (23f646c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESA_SO_+0x40>)
 23f644e:	f002 f9a3 	bl	23f8798 <panic_>
            ok = true;
 23f6452:	2301      	movs	r3, #1
            return String(buf, r.ptr - buf);
 23f6454:	9a00      	ldr	r2, [sp, #0]
 23f6456:	4629      	mov	r1, r5
 23f6458:	4620      	mov	r0, r4
            ok = true;
 23f645a:	7033      	strb	r3, [r6, #0]
            return String(buf, r.ptr - buf);
 23f645c:	1b52      	subs	r2, r2, r5
 23f645e:	f004 fe0a 	bl	23fb076 <_ZN6StringC1EPKcj>
      }
 23f6462:	4620      	mov	r0, r4
 23f6464:	b00a      	add	sp, #40	; 0x28
 23f6466:	bd70      	pop	{r4, r5, r6, pc}
 23f6468:	023f84dd 	.word	0x023f84dd
 23f646c:	023ff273 	.word	0x023ff273

023f6470 <_ZZN16DeviceInfoLedger17onCloudConnectionEvENUt_8appenderEPvPKhj>:
    	String jsonStr;

	    jsonStr.reserve(256);

        struct {
            static bool appender(void* appender, const uint8_t* data, size_t size) {
 23f6470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f6472:	4604      	mov	r4, r0
                String *s = (String *)appender;
                return (bool) s->concat(String((const char *)data, size));
 23f6474:	4668      	mov	r0, sp
 23f6476:	f004 fdfe 	bl	23fb076 <_ZN6StringC1EPKcj>
 23f647a:	4669      	mov	r1, sp
 23f647c:	4620      	mov	r0, r4
 23f647e:	f004 fe7f 	bl	23fb180 <_ZN6String6concatERKS_>
 23f6482:	4604      	mov	r4, r0
 23f6484:	4668      	mov	r0, sp
 23f6486:	f004 fd97 	bl	23fafb8 <_ZN6StringD1Ev>
            }
 23f648a:	1e20      	subs	r0, r4, #0
 23f648c:	bf18      	it	ne
 23f648e:	2001      	movne	r0, #1
 23f6490:	b004      	add	sp, #16
 23f6492:	bd10      	pop	{r4, pc}

023f6494 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6494:	b570      	push	{r4, r5, r6, lr}
 23f6496:	460e      	mov	r6, r1
 23f6498:	4605      	mov	r5, r0
    operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    int compareTo(const String &s) const;
    unsigned char equals(const String &s) const;
    unsigned char equals(const char *cstr) const;
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f649a:	490a      	ldr	r1, [pc, #40]	; (23f64c4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x30>)
 23f649c:	4630      	mov	r0, r6
 23f649e:	f004 fe88 	bl	23fb1b2 <_ZNK6String6equalsEPKc>
        if (val == "true") {
 23f64a2:	4604      	mov	r4, r0
 23f64a4:	b118      	cbz	r0, 23f64ae <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x1a>
            ok = true;
 23f64a6:	2301      	movs	r3, #1
            return true;
 23f64a8:	4618      	mov	r0, r3
            ok = true;
 23f64aa:	702b      	strb	r3, [r5, #0]
      }
 23f64ac:	bd70      	pop	{r4, r5, r6, pc}
 23f64ae:	4630      	mov	r0, r6
 23f64b0:	4905      	ldr	r1, [pc, #20]	; (23f64c8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x34>)
 23f64b2:	f004 fe7e 	bl	23fb1b2 <_ZNK6String6equalsEPKc>
        if (val == "false") {
 23f64b6:	2800      	cmp	r0, #0
 23f64b8:	d0f8      	beq.n	23f64ac <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x18>
            ok = true;
 23f64ba:	2301      	movs	r3, #1
            return false;
 23f64bc:	4620      	mov	r0, r4
            ok = true;
 23f64be:	702b      	strb	r3, [r5, #0]
            return false;
 23f64c0:	e7f4      	b.n	23f64ac <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x18>
 23f64c2:	bf00      	nop
 23f64c4:	023ff268 	.word	0x023ff268
 23f64c8:	023ff26d 	.word	0x023ff26d

023f64cc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>:
      operator=(_Move_assign_base&& __rhs)
 23f64cc:	b507      	push	{r0, r1, r2, lr}
      {
	using __index_type = typename _Base::__index_type;
	if constexpr (__detail::__variant::__never_valueless<_Types...>())
	  return this->_M_index;
	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
	  return make_signed_t<__index_type>(this->_M_index);
 23f64ce:	f991 3010 	ldrsb.w	r3, [r1, #16]
    {
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;

      auto __func_ptr = __vtable._M_access(__variants.index()...);
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23f64d2:	4a05      	ldr	r2, [pc, #20]	; (23f64e8 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0+0x1c>)
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 23f64d4:	3301      	adds	r3, #1
	__variant::__raw_idx_visit(
 23f64d6:	9001      	str	r0, [sp, #4]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23f64d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23f64dc:	a801      	add	r0, sp, #4
 23f64de:	4798      	blx	r3
      }
 23f64e0:	b003      	add	sp, #12
 23f64e2:	f85d fb04 	ldr.w	pc, [sp], #4
 23f64e6:	bf00      	nop
 23f64e8:	023ff488 	.word	0x023ff488

023f64ec <_ZNSt17_Function_handlerIFvvEZN16DeviceInfoLedger5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
 23f64ec:	2a01      	cmp	r2, #1
 23f64ee:	d102      	bne.n	23f64f6 <_ZNSt17_Function_handlerIFvvEZN16DeviceInfoLedger5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f64f0:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
 23f64f2:	2000      	movs	r0, #0
 23f64f4:	4770      	bx	lr
	  switch (__op)
 23f64f6:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f64f8:	bf04      	itt	eq
 23f64fa:	680b      	ldreq	r3, [r1, #0]
 23f64fc:	6003      	streq	r3, [r0, #0]
	      break;
 23f64fe:	e7f8      	b.n	23f64f2 <_ZNSt17_Function_handlerIFvvEZN16DeviceInfoLedger5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

023f6500 <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
 23f6500:	2a01      	cmp	r2, #1
 23f6502:	d102      	bne.n	23f650a <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f6504:	6001      	str	r1, [r0, #0]
      }
 23f6506:	2000      	movs	r0, #0
 23f6508:	4770      	bx	lr
	  switch (__op)
 23f650a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f650c:	bf04      	itt	eq
 23f650e:	680b      	ldreq	r3, [r1, #0]
 23f6510:	6003      	streq	r3, [r0, #0]
	      break;
 23f6512:	e7f8      	b.n	23f6506 <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

023f6514 <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
 23f6514:	2a01      	cmp	r2, #1
 23f6516:	d102      	bne.n	23f651e <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f6518:	6001      	str	r1, [r0, #0]
      }
 23f651a:	2000      	movs	r0, #0
 23f651c:	4770      	bx	lr
	  switch (__op)
 23f651e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f6520:	bf04      	itt	eq
 23f6522:	680b      	ldreq	r3, [r1, #0]
 23f6524:	6003      	streq	r3, [r0, #0]
	      break;
 23f6526:	e7f8      	b.n	23f651a <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

023f6528 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESU_SY_>:
        ::new (__storage)
 23f6528:	6800      	ldr	r0, [r0, #0]
 23f652a:	f004 bde8 	b.w	23fb0fe <_ZN6StringC1ERKS_>

023f652e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESU_SY_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 23f652e:	6803      	ldr	r3, [r0, #0]
 23f6530:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f6534:	e9c3 0100 	strd	r0, r1, [r3]
      }
 23f6538:	4770      	bx	lr

023f653a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESU_SY_>:
 23f653a:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
 23f653c:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f6540:	e9c3 0100 	strd	r0, r1, [r3]
      }
 23f6544:	4770      	bx	lr

023f6546 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESU_SY_>:
 23f6546:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
 23f6548:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f654c:	e9c3 0100 	strd	r0, r1, [r3]
      }
 23f6550:	4770      	bx	lr
	...

023f6554 <_ZN26DeviceInfoLedgerLogHandlerD1Ev>:
#ifndef UNITTEST
DeviceInfoLedgerLogHandler::DeviceInfoLedgerLogHandler(LogLevel level, LogCategoryFilters filters) : StreamLogHandler(*this, level, filters) {

}

DeviceInfoLedgerLogHandler::~DeviceInfoLedgerLogHandler() {
 23f6554:	b510      	push	{r4, lr}
 23f6556:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23f6558:	4b03      	ldr	r3, [pc, #12]	; (23f6568 <_ZN26DeviceInfoLedgerLogHandlerD1Ev+0x14>)
 23f655a:	f840 3b04 	str.w	r3, [r0], #4
 23f655e:	f003 feb7 	bl	23fa2d0 <_ZN5spark6detail9LogFilterD1Ev>

}
 23f6562:	4620      	mov	r0, r4
 23f6564:	bd10      	pop	{r4, pc}
 23f6566:	bf00      	nop
 23f6568:	023ff240 	.word	0x023ff240

023f656c <_ZThn36_N26DeviceInfoLedgerLogHandlerD1Ev>:
    DeviceInfoLedgerLogHandler(LogLevel level, LogCategoryFilters filters);

    /**
     * @brief Deleted when a new log handler is created
     */
    virtual ~DeviceInfoLedgerLogHandler();
 23f656c:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
 23f6570:	f7ff bff0 	b.w	23f6554 <_ZN26DeviceInfoLedgerLogHandlerD1Ev>

023f6574 <_ZN26DeviceInfoLedgerLogHandlerD0Ev>:
DeviceInfoLedgerLogHandler::~DeviceInfoLedgerLogHandler() {
 23f6574:	b510      	push	{r4, lr}
 23f6576:	4604      	mov	r4, r0
}
 23f6578:	f7ff ffec 	bl	23f6554 <_ZN26DeviceInfoLedgerLogHandlerD1Ev>
 23f657c:	4620      	mov	r0, r4
 23f657e:	212c      	movs	r1, #44	; 0x2c
 23f6580:	f7ff fd07 	bl	23f5f92 <_ZdlPvj>
 23f6584:	4620      	mov	r0, r4
 23f6586:	bd10      	pop	{r4, pc}

023f6588 <_ZThn36_N26DeviceInfoLedgerLogHandlerD0Ev>:
 23f6588:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
 23f658c:	f7ff bff2 	b.w	23f6574 <_ZN26DeviceInfoLedgerLogHandlerD0Ev>

023f6590 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6590:	b5f0      	push	{r4, r5, r6, r7, lr}
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23f6592:	680a      	ldr	r2, [r1, #0]
        auto end = val.c_str() + val.length();
 23f6594:	688c      	ldr	r4, [r1, #8]
 23f6596:	4607      	mov	r7, r0
 23f6598:	4414      	add	r4, r2

      from_chars_result __res{__first, {}};

      int __sign = 1;
      if _GLIBCXX17_CONSTEXPR (std::is_signed<_Tp>::value)
	if (__first != __last && *__first == '-')
 23f659a:	42a2      	cmp	r2, r4
 23f659c:	d01b      	beq.n	23f65d6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x46>
 23f659e:	7813      	ldrb	r3, [r2, #0]
 23f65a0:	2b2d      	cmp	r3, #45	; 0x2d
 23f65a2:	d118      	bne.n	23f65d6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x46>
	  {
	    __sign = -1;
 23f65a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	    ++__first;
 23f65a8:	3201      	adds	r2, #1
    __from_chars_digit(const char*& __first, const char* __last, _Tp& __val,
 23f65aa:	4616      	mov	r6, r2
	  }

      using _Up = __detail::__unsigned_least_t<_Tp>;
      _Up __val = 0;
 23f65ac:	2300      	movs	r3, #0
      if (__builtin_mul_overflow(__val, __base, &__val)
 23f65ae:	200a      	movs	r0, #10
      while (__first != __last)
 23f65b0:	42a6      	cmp	r6, r4
 23f65b2:	46b4      	mov	ip, r6
 23f65b4:	d011      	beq.n	23f65da <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x4a>
	  return '0' <= __c && __c <= ('0' + (__base - 1));
 23f65b6:	f89c 1000 	ldrb.w	r1, [ip]
 23f65ba:	3601      	adds	r6, #1
 23f65bc:	3930      	subs	r1, #48	; 0x30
 23f65be:	b2c9      	uxtb	r1, r1
 23f65c0:	2909      	cmp	r1, #9
 23f65c2:	d825      	bhi.n	23f6610 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x80>
      if (__builtin_mul_overflow(__val, __base, &__val)
 23f65c4:	fba3 3c00 	umull	r3, ip, r3, r0
 23f65c8:	f1bc 0f00 	cmp.w	ip, #0
 23f65cc:	d101      	bne.n	23f65d2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x42>
	  || __builtin_add_overflow(__val, __c, &__val))
 23f65ce:	185b      	adds	r3, r3, r1
 23f65d0:	d3ee      	bcc.n	23f65b0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x20>
            return TargetT();
 23f65d2:	2000      	movs	r0, #0
 23f65d4:	e01b      	b.n	23f660e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x7e>
      int __sign = 1;
 23f65d6:	2501      	movs	r5, #1
 23f65d8:	e7e7      	b.n	23f65aa <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x1a>
      else if (__base <= 10)
	__valid = __detail::__from_chars_digit(__first, __last, __val, __base);
      else
	__valid = __detail::__from_chars_alnum(__first, __last, __val, __base);

      if (__builtin_expect(__first == __start, 0))
 23f65da:	42a2      	cmp	r2, r4
 23f65dc:	d0f9      	beq.n	23f65d2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x42>
	  else
	    {
	      if _GLIBCXX17_CONSTEXPR (std::is_signed<_Tp>::value)
		{
		  _Tp __tmp;
		  if (__builtin_mul_overflow(__val, __sign, &__tmp))
 23f65de:	fb85 1203 	smull	r1, r2, r5, r3
 23f65e2:	ebb2 7fe1 	cmp.w	r2, r1, asr #31
 23f65e6:	bf14      	ite	ne
 23f65e8:	2201      	movne	r2, #1
 23f65ea:	2200      	moveq	r2, #0
 23f65ec:	2b00      	cmp	r3, #0
 23f65ee:	da06      	bge.n	23f65fe <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x6e>
 23f65f0:	2201      	movs	r2, #1
 23f65f2:	b11d      	cbz	r5, 23f65fc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x6c>
 23f65f4:	3501      	adds	r5, #1
 23f65f6:	d102      	bne.n	23f65fe <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x6e>
 23f65f8:	428b      	cmp	r3, r1
 23f65fa:	d100      	bne.n	23f65fe <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x6e>
 23f65fc:	2200      	movs	r2, #0
 23f65fe:	4610      	mov	r0, r2
 23f6600:	2a00      	cmp	r2, #0
 23f6602:	d1e6      	bne.n	23f65d2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x42>
        if (r.ec != std::errc() || r.ptr != end) {
 23f6604:	4564      	cmp	r4, ip
 23f6606:	d102      	bne.n	23f660e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x7e>
        ok = true;
 23f6608:	2301      	movs	r3, #1
		    __res.ec = errc::result_out_of_range;
		  else
		    __value = __tmp;
 23f660a:	4608      	mov	r0, r1
 23f660c:	703b      	strb	r3, [r7, #0]
      }
 23f660e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (__builtin_expect(__first == __start, 0))
 23f6610:	4562      	cmp	r2, ip
 23f6612:	e7e3      	b.n	23f65dc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEERKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferEN5spark6VectorIS6_NSE_16DefaultAllocatorEEENS5_3MapISC_S6_St4lessISC_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeES9_SO_+0x4c>

023f6614 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESL_SO_>:
    ::free(ptr);
 23f6614:	6808      	ldr	r0, [r1, #0]
 23f6616:	f002 bb35 	b.w	23f8c84 <free>

023f661a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f661a:	b510      	push	{r4, lr}
      if (_M_manager)
 23f661c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f661e:	4604      	mov	r4, r0
      if (_M_manager)
 23f6620:	b113      	cbz	r3, 23f6628 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f6622:	2203      	movs	r2, #3
 23f6624:	4601      	mov	r1, r0
 23f6626:	4798      	blx	r3
    }
 23f6628:	4620      	mov	r0, r4
 23f662a:	bd10      	pop	{r4, pc}

023f662c <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 23f662c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f6630:	4605      	mov	r5, r0
 23f6632:	460f      	mov	r7, r1
 23f6634:	4614      	mov	r4, r2
    _Function_base() : _M_manager(nullptr) { }
 23f6636:	f04f 0800 	mov.w	r8, #0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f663a:	466e      	mov	r6, sp
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
 23f663c:	42bd      	cmp	r5, r7
 23f663e:	d01c      	beq.n	23f667a <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x4e>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23f6640:	b1ac      	cbz	r4, 23f666e <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x42>
 23f6642:	f8c4 8008 	str.w	r8, [r4, #8]
 23f6646:	e895 0003 	ldmia.w	r5, {r0, r1}
 23f664a:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f664e:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f6652:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f6656:	e896 0003 	ldmia.w	r6, {r0, r1}
 23f665a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f665e:	68a2      	ldr	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f6660:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f6662:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f6664:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f6666:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f6668:	68e2      	ldr	r2, [r4, #12]
 23f666a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f666c:	60e3      	str	r3, [r4, #12]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 23f666e:	4628      	mov	r0, r5
 23f6670:	f7ff ffd3 	bl	23f661a <_ZNSt14_Function_baseD1Ev>
 23f6674:	3510      	adds	r5, #16
 23f6676:	3410      	adds	r4, #16
 23f6678:	e7e0      	b.n	23f663c <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x10>
	std::__relocate_object_a(std::__addressof(*__cur),
				 std::__addressof(*__first), __alloc);
      return __cur;
    }
 23f667a:	4620      	mov	r0, r4
 23f667c:	b002      	add	sp, #8
 23f667e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f6682 <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
 23f6682:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f6684:	f04f 0c20 	mov.w	ip, #32
 23f6688:	2300      	movs	r3, #0
inline void spark::Logger::trace(const char *fmt, ...) const {
 23f668a:	b500      	push	{lr}
 23f668c:	b08c      	sub	sp, #48	; 0x30
 23f668e:	aa0d      	add	r2, sp, #52	; 0x34
 23f6690:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23f6694:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f6698:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23f669c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f669e:	6801      	ldr	r1, [r0, #0]
 23f66a0:	aa04      	add	r2, sp, #16
 23f66a2:	2001      	movs	r0, #1
 23f66a4:	f002 f8a2 	bl	23f87ec <log_message_v>
}
 23f66a8:	b00c      	add	sp, #48	; 0x30
 23f66aa:	f85d eb04 	ldr.w	lr, [sp], #4
 23f66ae:	b003      	add	sp, #12
 23f66b0:	4770      	bx	lr

023f66b2 <_ZNK5spark6Logger4infoEPKcz>:
inline void spark::Logger::info(const char *fmt, ...) const {
 23f66b2:	b40e      	push	{r1, r2, r3}
    attr.flags = 0;
 23f66b4:	f04f 0c20 	mov.w	ip, #32
 23f66b8:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23f66ba:	b500      	push	{lr}
 23f66bc:	b08c      	sub	sp, #48	; 0x30
 23f66be:	aa0d      	add	r2, sp, #52	; 0x34
 23f66c0:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23f66c4:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f66c8:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23f66cc:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f66ce:	6801      	ldr	r1, [r0, #0]
 23f66d0:	aa04      	add	r2, sp, #16
 23f66d2:	201e      	movs	r0, #30
 23f66d4:	f002 f88a 	bl	23f87ec <log_message_v>
}
 23f66d8:	b00c      	add	sp, #48	; 0x30
 23f66da:	f85d eb04 	ldr.w	lr, [sp], #4
 23f66de:	b003      	add	sp, #12
 23f66e0:	4770      	bx	lr

023f66e2 <_ZSt26__throw_bad_variant_accessb>:
  {
 23f66e2:	b508      	push	{r3, lr}
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 23f66e4:	f002 fb06 	bl	23f8cf4 <abort>

023f66e8 <_ZN8particle7VariantC1EPKc>:
    Variant(const char* val) :
 23f66e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f66ea:	4604      	mov	r4, r0
            v_(String(val)) {
 23f66ec:	4668      	mov	r0, sp
 23f66ee:	f004 fcae 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
	  ::new ((void*)std::addressof(_M_storage))
 23f66f2:	4669      	mov	r1, sp
 23f66f4:	4620      	mov	r0, r4
 23f66f6:	f004 fce8 	bl	23fb0ca <_ZN6StringC1EOS_>
	_M_index{_Np}
 23f66fa:	2307      	movs	r3, #7
 23f66fc:	4668      	mov	r0, sp
 23f66fe:	7423      	strb	r3, [r4, #16]
 23f6700:	f004 fc5a 	bl	23fafb8 <_ZN6StringD1Ev>
    }
 23f6704:	4620      	mov	r0, r4
 23f6706:	b004      	add	sp, #16
 23f6708:	bd10      	pop	{r4, pc}

023f670a <_ZN8particle6LedgerD1Ev>:
    }

    /**
     * Destructor.
     */
    ~Ledger() {
 23f670a:	b510      	push	{r4, lr}
 23f670c:	4604      	mov	r4, r0
        if (instance_) {
 23f670e:	6800      	ldr	r0, [r0, #0]
 23f6710:	b110      	cbz	r0, 23f6718 <_ZN8particle6LedgerD1Ev+0xe>
            ledger_release(instance_, nullptr);
 23f6712:	2100      	movs	r1, #0
 23f6714:	f002 f958 	bl	23f89c8 <ledger_release>
        }
    }
 23f6718:	4620      	mov	r0, r4
 23f671a:	bd10      	pop	{r4, pc}

023f671c <_ZN16DeviceInfoLedgerD1Ev>:
DeviceInfoLedger::~DeviceInfoLedger() {
 23f671c:	b510      	push	{r4, lr}
 23f671e:	4604      	mov	r4, r0
 23f6720:	4b04      	ldr	r3, [pc, #16]	; (23f6734 <_ZN16DeviceInfoLedgerD1Ev+0x18>)
 23f6722:	f840 3b50 	str.w	r3, [r0], #80
 23f6726:	f7ff fff0 	bl	23f670a <_ZN8particle6LedgerD1Ev>
 23f672a:	1d20      	adds	r0, r4, #4
 23f672c:	f004 fc44 	bl	23fafb8 <_ZN6StringD1Ev>
}
 23f6730:	4620      	mov	r0, r4
 23f6732:	bd10      	pop	{r4, pc}
 23f6734:	023ff790 	.word	0x023ff790

023f6738 <_ZN16DeviceInfoLedgerD0Ev>:
DeviceInfoLedger::~DeviceInfoLedger() {
 23f6738:	b510      	push	{r4, lr}
 23f673a:	4604      	mov	r4, r0
}
 23f673c:	f7ff ffee 	bl	23f671c <_ZN16DeviceInfoLedgerD1Ev>
 23f6740:	4620      	mov	r0, r4
 23f6742:	2158      	movs	r1, #88	; 0x58
 23f6744:	f7ff fc25 	bl	23f5f92 <_ZdlPvj>
 23f6748:	4620      	mov	r0, r4
 23f674a:	bd10      	pop	{r4, pc}

023f674c <_ZN16DeviceInfoLedgerC1Ev>:
DeviceInfoLedger::DeviceInfoLedger() {
 23f674c:	4b0e      	ldr	r3, [pc, #56]	; (23f6788 <_ZN16DeviceInfoLedgerC1Ev+0x3c>)
 23f674e:	b510      	push	{r4, lr}
 23f6750:	490e      	ldr	r1, [pc, #56]	; (23f678c <_ZN16DeviceInfoLedgerC1Ev+0x40>)
 23f6752:	4604      	mov	r4, r0
 23f6754:	f840 3b04 	str.w	r3, [r0], #4
 23f6758:	f004 fc79 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
 23f675c:	2300      	movs	r3, #0
 23f675e:	2201      	movs	r2, #1
}
 23f6760:	4620      	mov	r0, r4
DeviceInfoLedger::DeviceInfoLedger() {
 23f6762:	e9c4 3305 	strd	r3, r3, [r4, #20]
 23f6766:	e9c4 3307 	strd	r3, r3, [r4, #28]
 23f676a:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 23f676e:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
            instance_(instance) {
 23f6772:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 23f6776:	6263      	str	r3, [r4, #36]	; 0x24
 23f6778:	62e2      	str	r2, [r4, #44]	; 0x2c
 23f677a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 23f677e:	6363      	str	r3, [r4, #52]	; 0x34
 23f6780:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 23f6784:	6563      	str	r3, [r4, #84]	; 0x54
}
 23f6786:	bd10      	pop	{r4, pc}
 23f6788:	023ff790 	.word	0x023ff790
 23f678c:	023ff298 	.word	0x023ff298

023f6790 <_ZN16DeviceInfoLedger8instanceEv>:
DeviceInfoLedger &DeviceInfoLedger::instance() {
 23f6790:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
 23f6792:	4d06      	ldr	r5, [pc, #24]	; (23f67ac <_ZN16DeviceInfoLedger8instanceEv+0x1c>)
 23f6794:	682b      	ldr	r3, [r5, #0]
 23f6796:	b93b      	cbnz	r3, 23f67a8 <_ZN16DeviceInfoLedger8instanceEv+0x18>
        _instance = new DeviceInfoLedger();
 23f6798:	2058      	movs	r0, #88	; 0x58
 23f679a:	f7ff fbf4 	bl	23f5f86 <_Znwj>
 23f679e:	4604      	mov	r4, r0
 23f67a0:	b108      	cbz	r0, 23f67a6 <_ZN16DeviceInfoLedger8instanceEv+0x16>
 23f67a2:	f7ff ffd3 	bl	23f674c <_ZN16DeviceInfoLedgerC1Ev>
 23f67a6:	602c      	str	r4, [r5, #0]
}
 23f67a8:	6828      	ldr	r0, [r5, #0]
 23f67aa:	bd38      	pop	{r3, r4, r5, pc}
 23f67ac:	1007ae50 	.word	0x1007ae50

023f67b0 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc>:
LogLevel DeviceInfoLedger::stringToLogLevel(const char *levelStr) const {
 23f67b0:	b510      	push	{r4, lr}
 23f67b2:	460c      	mov	r4, r1
    if (strstr(levelStr, "ALL") != 0) {
 23f67b4:	4914      	ldr	r1, [pc, #80]	; (23f6808 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x58>)
 23f67b6:	4620      	mov	r0, r4
 23f67b8:	f006 fd7b 	bl	23fd2b2 <strstr>
 23f67bc:	b9e0      	cbnz	r0, 23f67f8 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x48>
    if (strstr(levelStr, "TRACE") != 0) {
 23f67be:	4620      	mov	r0, r4
 23f67c0:	4912      	ldr	r1, [pc, #72]	; (23f680c <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x5c>)
 23f67c2:	f006 fd76 	bl	23fd2b2 <strstr>
 23f67c6:	b9b8      	cbnz	r0, 23f67f8 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x48>
    if (strstr(levelStr, "INFO") != 0) {
 23f67c8:	4620      	mov	r0, r4
 23f67ca:	4911      	ldr	r1, [pc, #68]	; (23f6810 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x60>)
 23f67cc:	f006 fd71 	bl	23fd2b2 <strstr>
 23f67d0:	b9a0      	cbnz	r0, 23f67fc <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x4c>
    if (strstr(levelStr, "WARN") != 0) {
 23f67d2:	4620      	mov	r0, r4
 23f67d4:	490f      	ldr	r1, [pc, #60]	; (23f6814 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x64>)
 23f67d6:	f006 fd6c 	bl	23fd2b2 <strstr>
 23f67da:	b988      	cbnz	r0, 23f6800 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x50>
    if (strstr(levelStr, "ERROR") != 0) {
 23f67dc:	4620      	mov	r0, r4
 23f67de:	490e      	ldr	r1, [pc, #56]	; (23f6818 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x68>)
 23f67e0:	f006 fd67 	bl	23fd2b2 <strstr>
 23f67e4:	b970      	cbnz	r0, 23f6804 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x54>
    if (strstr(levelStr, "PANIC") != 0) {
 23f67e6:	4620      	mov	r0, r4
 23f67e8:	490c      	ldr	r1, [pc, #48]	; (23f681c <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x6c>)
 23f67ea:	f006 fd62 	bl	23fd2b2 <strstr>
        level = LOG_LEVEL_NONE;
 23f67ee:	2800      	cmp	r0, #0
 23f67f0:	bf14      	ite	ne
 23f67f2:	203c      	movne	r0, #60	; 0x3c
 23f67f4:	2046      	moveq	r0, #70	; 0x46
}
 23f67f6:	bd10      	pop	{r4, pc}
        level = LOG_LEVEL_ALL;
 23f67f8:	2001      	movs	r0, #1
 23f67fa:	e7fc      	b.n	23f67f6 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x46>
        level = LOG_LEVEL_INFO;
 23f67fc:	201e      	movs	r0, #30
 23f67fe:	e7fa      	b.n	23f67f6 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x46>
        level = LOG_LEVEL_WARN;
 23f6800:	2028      	movs	r0, #40	; 0x28
 23f6802:	e7f8      	b.n	23f67f6 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x46>
        level = LOG_LEVEL_ERROR;
 23f6804:	2032      	movs	r0, #50	; 0x32
 23f6806:	e7f6      	b.n	23f67f6 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc+0x46>
 23f6808:	023ff2c5 	.word	0x023ff2c5
 23f680c:	023ff2a9 	.word	0x023ff2a9
 23f6810:	023ff2b4 	.word	0x023ff2b4
 23f6814:	023ff2a4 	.word	0x023ff2a4
 23f6818:	023ff2b9 	.word	0x023ff2b9
 23f681c:	023ff2bf 	.word	0x023ff2bf

023f6820 <_ZN16DeviceInfoLedger5writeEh>:
void DeviceInfoLedger::write(uint8_t c) {
 23f6820:	b530      	push	{r4, r5, lr}
    if (!setupComplete) {
 23f6822:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 23f6826:	b35b      	cbz	r3, 23f6880 <_ZN16DeviceInfoLedger5writeEh+0x60>
    if (c == '\r') {
 23f6828:	290d      	cmp	r1, #13
 23f682a:	d029      	beq.n	23f6880 <_ZN16DeviceInfoLedger5writeEh+0x60>
    if (retainedBuffer) {
 23f682c:	6943      	ldr	r3, [r0, #20]
 23f682e:	b183      	cbz	r3, 23f6852 <_ZN16DeviceInfoLedger5writeEh+0x32>
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_add(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }
 23f6830:	e9d0 340f 	ldrd	r3, r4, [r0, #60]	; 0x3c
 23f6834:	3308      	adds	r3, #8
 23f6836:	e8d3 2fef 	ldaex	r2, [r3]
 23f683a:	1c55      	adds	r5, r2, #1
 23f683c:	e8c3 5fec 	stlex	ip, r5, [r3]
 23f6840:	f1bc 0f00 	cmp.w	ip, #0
 23f6844:	d1f7      	bne.n	23f6836 <_ZN16DeviceInfoLedger5writeEh+0x16>
        retainedData[retainedHdr->offset++ % retainedDataSize] = c;
 23f6846:	6c43      	ldr	r3, [r0, #68]	; 0x44
 23f6848:	fbb2 f5f3 	udiv	r5, r2, r3
 23f684c:	fb03 2215 	mls	r2, r3, r5, r2
 23f6850:	54a1      	strb	r1, [r4, r2]
    if (writeToConnectionLog && connectionLogSize && connectionLogBuffer) {
 23f6852:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 23f6856:	b19b      	cbz	r3, 23f6880 <_ZN16DeviceInfoLedger5writeEh+0x60>
 23f6858:	6a43      	ldr	r3, [r0, #36]	; 0x24
 23f685a:	b18b      	cbz	r3, 23f6880 <_ZN16DeviceInfoLedger5writeEh+0x60>
 23f685c:	6a04      	ldr	r4, [r0, #32]
 23f685e:	b17c      	cbz	r4, 23f6880 <_ZN16DeviceInfoLedger5writeEh+0x60>
 23f6860:	f100 0228 	add.w	r2, r0, #40	; 0x28
 23f6864:	e8d2 3fef 	ldaex	r3, [r2]
 23f6868:	1c5d      	adds	r5, r3, #1
 23f686a:	e8c2 5fec 	stlex	ip, r5, [r2]
 23f686e:	f1bc 0f00 	cmp.w	ip, #0
 23f6872:	d1f7      	bne.n	23f6864 <_ZN16DeviceInfoLedger5writeEh+0x44>
        connectionLogBuffer[connectionLogOffset++ % connectionLogSize] = c;
 23f6874:	6a42      	ldr	r2, [r0, #36]	; 0x24
 23f6876:	fbb3 f0f2 	udiv	r0, r3, r2
 23f687a:	fb02 3310 	mls	r3, r2, r0, r3
 23f687e:	54e1      	strb	r1, [r4, r3]
}
 23f6880:	bd30      	pop	{r4, r5, pc}

023f6882 <_ZN26DeviceInfoLedgerLogHandler5writeEh>:

size_t DeviceInfoLedgerLogHandler::write(uint8_t c) {
 23f6882:	b507      	push	{r0, r1, r2, lr}
 23f6884:	9101      	str	r1, [sp, #4]
    DeviceInfoLedger::instance().write(c);
 23f6886:	f7ff ff83 	bl	23f6790 <_ZN16DeviceInfoLedger8instanceEv>
 23f688a:	9901      	ldr	r1, [sp, #4]
 23f688c:	f7ff ffc8 	bl	23f6820 <_ZN16DeviceInfoLedger5writeEh>
    return 1;
}
 23f6890:	2001      	movs	r0, #1
 23f6892:	b003      	add	sp, #12
 23f6894:	f85d fb04 	ldr.w	pc, [sp], #4

023f6898 <_ZThn36_N26DeviceInfoLedgerLogHandler5writeEh>:
    /**
     * @brief Virtual override in class Print for the StreamLogHandler to write data to the log
     * 
     * Calls write() in the DeviceInfoLedger singleton instance
     */
    virtual size_t write(uint8_t);
 23f6898:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
 23f689c:	f7ff bff1 	b.w	23f6882 <_ZN26DeviceInfoLedgerLogHandler5writeEh>

023f68a0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f68a0:	b570      	push	{r4, r5, r6, lr}
 23f68a2:	4604      	mov	r4, r0
        capacity_(0) {
 23f68a4:	2000      	movs	r0, #0
 23f68a6:	e9c4 0000 	strd	r0, r0, [r4]
 23f68aa:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f68ac:	684e      	ldr	r6, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f68ae:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f68b0:	4286      	cmp	r6, r0
 23f68b2:	dd11      	ble.n	23f68d8 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x38>
    return ::realloc(ptr, size);
 23f68b4:	4631      	mov	r1, r6
 23f68b6:	f002 f9f3 	bl	23f8ca0 <realloc>
            if (!d) {
 23f68ba:	b168      	cbz	r0, 23f68d8 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x38>
        data_ = d;
 23f68bc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23f68be:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f68c0:	e9d5 3200 	ldrd	r3, r2, [r5]
 23f68c4:	441a      	add	r2, r3
        for (; it != end; ++it, ++dest) {
 23f68c6:	429a      	cmp	r2, r3
 23f68c8:	d004      	beq.n	23f68d4 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x34>
            new(dest) T(*it);
 23f68ca:	f813 1b01 	ldrb.w	r1, [r3], #1
 23f68ce:	f800 1b01 	strb.w	r1, [r0], #1
        for (; it != end; ++it, ++dest) {
 23f68d2:	e7f8      	b.n	23f68c6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x26>
        size_ = vector.size_;
 23f68d4:	686b      	ldr	r3, [r5, #4]
 23f68d6:	6063      	str	r3, [r4, #4]
}
 23f68d8:	4620      	mov	r0, r4
 23f68da:	bd70      	pop	{r4, r5, r6, pc}

023f68dc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESU_SY_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f68dc:	b508      	push	{r3, lr}
namespace particle {

/**
 * A dynamically allocated buffer.
 */
class Buffer {
 23f68de:	6800      	ldr	r0, [r0, #0]
 23f68e0:	f7ff ffde 	bl	23f68a0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
      }
 23f68e4:	bd08      	pop	{r3, pc}

023f68e6 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 23f68e6:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f68e8:	2300      	movs	r3, #0
 23f68ea:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f68ec:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f68ee:	4604      	mov	r4, r0
 23f68f0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 23f68f2:	b12b      	cbz	r3, 23f6900 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f68f4:	2202      	movs	r2, #2
 23f68f6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f68f8:	68eb      	ldr	r3, [r5, #12]
 23f68fa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f68fc:	68ab      	ldr	r3, [r5, #8]
 23f68fe:	60a3      	str	r3, [r4, #8]
	}
    }
 23f6900:	4620      	mov	r0, r4
 23f6902:	bd38      	pop	{r3, r4, r5, pc}

023f6904 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>:
        capacity_(0) {
 23f6904:	2200      	movs	r2, #0
 23f6906:	e9c0 2200 	strd	r2, r2, [r0]
 23f690a:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23f690c:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 23f690e:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f6910:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f6912:	6004      	str	r4, [r0, #0]
 23f6914:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f6916:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f6918:	6044      	str	r4, [r0, #4]
 23f691a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f691c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f691e:	6084      	str	r4, [r0, #8]
}
 23f6920:	bd10      	pop	{r4, pc}

023f6922 <_ZN8particle6BufferaSEOS0_.isra.0>:
 23f6922:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f6924:	4604      	mov	r4, r0
 23f6926:	a801      	add	r0, sp, #4
 23f6928:	f7ff ffec 	bl	23f6904 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
 23f692c:	9b01      	ldr	r3, [sp, #4]
 23f692e:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f6930:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f6932:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f6934:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f6936:	6062      	str	r2, [r4, #4]
 23f6938:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f693a:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f693c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f693e:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f6940:	9001      	str	r0, [sp, #4]
 23f6942:	9303      	str	r3, [sp, #12]
    ::free(ptr);
 23f6944:	f002 f99e 	bl	23f8c84 <free>
 23f6948:	b004      	add	sp, #16
 23f694a:	bd10      	pop	{r4, pc}

023f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>:
        capacity_(0) {
 23f694c:	2200      	movs	r2, #0
 23f694e:	e9c0 2200 	strd	r2, r2, [r0]
 23f6952:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23f6954:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 23f6956:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f6958:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f695a:	6004      	str	r4, [r0, #0]
 23f695c:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f695e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f6960:	6044      	str	r4, [r0, #4]
 23f6962:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f6964:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f6966:	6084      	str	r4, [r0, #8]
}
 23f6968:	bd10      	pop	{r4, pc}

023f696a <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>:
        capacity_(0) {
 23f696a:	2200      	movs	r2, #0
 23f696c:	e9c0 2200 	strd	r2, r2, [r0]
 23f6970:	6082      	str	r2, [r0, #8]
    /**
     * Move constructor.
     *
     * @param map Map to move from.
     */
    Map(Map&& map) :
 23f6972:	b510      	push	{r4, lr}
 23f6974:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f6976:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f6978:	6004      	str	r4, [r0, #0]
 23f697a:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f697c:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f697e:	6044      	str	r4, [r0, #4]
 23f6980:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f6982:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f6984:	6084      	str	r4, [r0, #8]
            Map() {
        swap(*this, map);
    }
 23f6986:	bd10      	pop	{r4, pc}

023f6988 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>:
      : _M_index(static_cast<__index_type>(variant_npos))
 23f6988:	23ff      	movs	r3, #255	; 0xff
      _Copy_ctor_base(const _Copy_ctor_base& __rhs)
 23f698a:	b513      	push	{r0, r1, r4, lr}
 23f698c:	4604      	mov	r4, r0
      : _M_index(static_cast<__index_type>(variant_npos))
 23f698e:	7403      	strb	r3, [r0, #16]
      __lhs._M_index = __rhs._M_index;
 23f6990:	7c0b      	ldrb	r3, [r1, #16]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23f6992:	4a06      	ldr	r2, [pc, #24]	; (23f69ac <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_+0x24>)
      __lhs._M_index = __rhs._M_index;
 23f6994:	7403      	strb	r3, [r0, #16]
	  return make_signed_t<__index_type>(this->_M_index);
 23f6996:	b25b      	sxtb	r3, r3
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 23f6998:	3301      	adds	r3, #1
      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 23f699a:	9001      	str	r0, [sp, #4]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23f699c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23f69a0:	a801      	add	r0, sp, #4
 23f69a2:	4798      	blx	r3
      }
 23f69a4:	4620      	mov	r0, r4
 23f69a6:	b002      	add	sp, #8
 23f69a8:	bd10      	pop	{r4, pc}
 23f69aa:	bf00      	nop
 23f69ac:	023ff4e8 	.word	0x023ff4e8

023f69b0 <_ZNSt4pairIK6StringN8particle7VariantEEC1ERKS4_>:
	explicit constexpr pair(const pair<_U1, _U2>& __p)
	: first(__p.first), second(__p.second) { }
#endif

#if __cplusplus >= 201103L
      constexpr pair(const pair&) = default;	///< Copy constructor
 23f69b0:	b538      	push	{r3, r4, r5, lr}
 23f69b2:	4604      	mov	r4, r0
 23f69b4:	460d      	mov	r5, r1
 23f69b6:	f004 fba2 	bl	23fb0fe <_ZN6StringC1ERKS_>
      _Move_ctor_base(const _Move_ctor_base&) = default;
 23f69ba:	f105 0110 	add.w	r1, r5, #16
 23f69be:	f104 0010 	add.w	r0, r4, #16
 23f69c2:	f7ff ffe1 	bl	23f6988 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
 23f69c6:	4620      	mov	r0, r4
 23f69c8:	bd38      	pop	{r3, r4, r5, pc}
	...

023f69cc <_ZNK8particle7Variant2toI6StringEET_v>:
        return std::visit(ConvertToVisitor<T>(), v_);
 23f69cc:	2300      	movs	r3, #0
    T to() const {
 23f69ce:	b513      	push	{r0, r1, r4, lr}
        return std::visit(ConvertToVisitor<T>(), v_);
 23f69d0:	f88d 3004 	strb.w	r3, [sp, #4]
	return this->_M_index != __index_type(variant_npos);
 23f69d4:	7c0b      	ldrb	r3, [r1, #16]
    T to() const {
 23f69d6:	4604      	mov	r4, r0

  template<typename _Visitor, typename... _Variants>
    constexpr decltype(auto)
    visit(_Visitor&& __visitor, _Variants&&... __variants)
    {
      if ((__variants.valueless_by_exception() || ...))
 23f69d8:	2bff      	cmp	r3, #255	; 0xff
 23f69da:	d101      	bne.n	23f69e0 <_ZNK8particle7Variant2toI6StringEET_v+0x14>
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 23f69dc:	f002 f98a 	bl	23f8cf4 <abort>
			   std::forward<_Variants>(__variants)...);
 23f69e0:	4a04      	ldr	r2, [pc, #16]	; (23f69f4 <_ZNK8particle7Variant2toI6StringEET_v+0x28>)
	  return make_signed_t<__index_type>(this->_M_index);
 23f69e2:	b25b      	sxtb	r3, r3
			   std::forward<_Variants>(__variants)...);
 23f69e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23f69e8:	460a      	mov	r2, r1
 23f69ea:	a901      	add	r1, sp, #4
 23f69ec:	4798      	blx	r3
    }
 23f69ee:	4620      	mov	r0, r4
 23f69f0:	b002      	add	sp, #8
 23f69f2:	bd10      	pop	{r4, pc}
 23f69f4:	023ff570 	.word	0x023ff570

023f69f8 <_ZNK8particle7Variant2toINS_3MapI6StringS0_St4lessIS3_EEEEET_v>:
        return std::visit(ConvertToVisitor<T>(), v_);
 23f69f8:	2300      	movs	r3, #0
    T to() const {
 23f69fa:	b513      	push	{r0, r1, r4, lr}
        return std::visit(ConvertToVisitor<T>(), v_);
 23f69fc:	f88d 3004 	strb.w	r3, [sp, #4]
	return this->_M_index != __index_type(variant_npos);
 23f6a00:	7c0b      	ldrb	r3, [r1, #16]
    T to() const {
 23f6a02:	4604      	mov	r4, r0
      if ((__variants.valueless_by_exception() || ...))
 23f6a04:	2bff      	cmp	r3, #255	; 0xff
 23f6a06:	d101      	bne.n	23f6a0c <_ZNK8particle7Variant2toINS_3MapI6StringS0_St4lessIS3_EEEEET_v+0x14>
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 23f6a08:	f002 f974 	bl	23f8cf4 <abort>
			   std::forward<_Variants>(__variants)...);
 23f6a0c:	4a04      	ldr	r2, [pc, #16]	; (23f6a20 <_ZNK8particle7Variant2toINS_3MapI6StringS0_St4lessIS3_EEEEET_v+0x28>)
	  return make_signed_t<__index_type>(this->_M_index);
 23f6a0e:	b25b      	sxtb	r3, r3
			   std::forward<_Variants>(__variants)...);
 23f6a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23f6a14:	460a      	mov	r2, r1
 23f6a16:	a901      	add	r1, sp, #4
 23f6a18:	4798      	blx	r3
    }
 23f6a1a:	4620      	mov	r0, r4
 23f6a1c:	b002      	add	sp, #8
 23f6a1e:	bd10      	pop	{r4, pc}
 23f6a20:	023ff544 	.word	0x023ff544

023f6a24 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_>:
    __to_chars_10(char* __first, char* __last, _Tp __val) noexcept
 23f6a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f6a26:	461d      	mov	r5, r3
    __to_chars_len(_Tp __value, int __base = 10) noexcept
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 23f6a28:	2401      	movs	r4, #1
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
	  if (__value < __b2) return __n + 1;
	  if (__value < __b3) return __n + 2;
	  if (__value < __b4) return __n + 3;
 23f6a2a:	f242 770f 	movw	r7, #9999	; 0x270f
	  __value /= __b4;
 23f6a2e:	f242 7610 	movw	r6, #10000	; 0x2710
	  if (__value < (unsigned)__base) return __n;
 23f6a32:	2d09      	cmp	r5, #9
 23f6a34:	d902      	bls.n	23f6a3c <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x18>
	  if (__value < __b2) return __n + 1;
 23f6a36:	2d63      	cmp	r5, #99	; 0x63
 23f6a38:	d807      	bhi.n	23f6a4a <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x26>
 23f6a3a:	3401      	adds	r4, #1
      if (__builtin_expect((__last - __first) < __len, 0))
 23f6a3c:	1a55      	subs	r5, r2, r1
 23f6a3e:	42a5      	cmp	r5, r4
 23f6a40:	d210      	bcs.n	23f6a64 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x40>
	  __res.ec = errc::value_too_large;
 23f6a42:	238b      	movs	r3, #139	; 0x8b
	  __res.ptr = __last;
 23f6a44:	6002      	str	r2, [r0, #0]
      __res.ec = {};
 23f6a46:	6043      	str	r3, [r0, #4]
    }
 23f6a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  if (__value < __b3) return __n + 2;
 23f6a4a:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 23f6a4e:	d201      	bcs.n	23f6a54 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x30>
 23f6a50:	3402      	adds	r4, #2
 23f6a52:	e7f3      	b.n	23f6a3c <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x18>
	  if (__value < __b4) return __n + 3;
 23f6a54:	42bd      	cmp	r5, r7
 23f6a56:	d801      	bhi.n	23f6a5c <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x38>
 23f6a58:	3403      	adds	r4, #3
 23f6a5a:	e7ef      	b.n	23f6a3c <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x18>
	  __value /= __b4;
 23f6a5c:	fbb5 f5f6 	udiv	r5, r5, r6
	  __n += 4;
 23f6a60:	3404      	adds	r4, #4
	  if (__value < (unsigned)__base) return __n;
 23f6a62:	e7e6      	b.n	23f6a32 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0xe>
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 23f6a64:	440c      	add	r4, r1
 23f6a66:	4622      	mov	r2, r4
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
	{
	  auto const __num = (__val % 100) * 2;
 23f6a68:	f04f 0c64 	mov.w	ip, #100	; 0x64
	  __val /= 100;
	  __first[__pos] = __digits[__num + 1];
 23f6a6c:	4d10      	ldr	r5, [pc, #64]	; (23f6ab0 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x8c>)
      while (__val >= 100)
 23f6a6e:	2b63      	cmp	r3, #99	; 0x63
 23f6a70:	d90e      	bls.n	23f6a90 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x6c>
	  auto const __num = (__val % 100) * 2;
 23f6a72:	fbb3 f7fc 	udiv	r7, r3, ip
 23f6a76:	fb0c 3617 	mls	r6, ip, r7, r3
	  __val /= 100;
 23f6a7a:	463b      	mov	r3, r7
	  __first[__pos] = __digits[__num + 1];
 23f6a7c:	eb05 0746 	add.w	r7, r5, r6, lsl #1
 23f6a80:	787f      	ldrb	r7, [r7, #1]
	  __first[__pos - 1] = __digits[__num];
 23f6a82:	f815 6016 	ldrb.w	r6, [r5, r6, lsl #1]
	  __first[__pos] = __digits[__num + 1];
 23f6a86:	f802 7c01 	strb.w	r7, [r2, #-1]
	  __first[__pos - 1] = __digits[__num];
 23f6a8a:	f802 6d02 	strb.w	r6, [r2, #-2]!
      while (__val >= 100)
 23f6a8e:	e7ee      	b.n	23f6a6e <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x4a>
	  __pos -= 2;
	}
      if (__val >= 10)
 23f6a90:	2b09      	cmp	r3, #9
	{
	  auto const __num = __val * 2;
	  __first[1] = __digits[__num + 1];
 23f6a92:	bf89      	itett	hi
 23f6a94:	4a06      	ldrhi	r2, [pc, #24]	; (23f6ab0 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x8c>)
	  __first[0] = __digits[__num];
	}
      else
	__first[0] = '0' + __val;
 23f6a96:	3330      	addls	r3, #48	; 0x30
	  __first[1] = __digits[__num + 1];
 23f6a98:	eb02 0543 	addhi.w	r5, r2, r3, lsl #1
 23f6a9c:	786d      	ldrbhi	r5, [r5, #1]
	  __first[0] = __digits[__num];
 23f6a9e:	bf84      	itt	hi
 23f6aa0:	f812 3013 	ldrbhi.w	r3, [r2, r3, lsl #1]
	  __first[1] = __digits[__num + 1];
 23f6aa4:	704d      	strbhi	r5, [r1, #1]
	__first[0] = '0' + __val;
 23f6aa6:	700b      	strb	r3, [r1, #0]
      __res.ptr = __first + __len;
 23f6aa8:	6004      	str	r4, [r0, #0]
      __res.ec = {};
 23f6aaa:	2300      	movs	r3, #0
 23f6aac:	e7cb      	b.n	23f6a46 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x22>
 23f6aae:	bf00      	nop
 23f6ab0:	023ff6bd 	.word	0x023ff6bd

023f6ab4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f6ab6:	6813      	ldr	r3, [r2, #0]
 23f6ab8:	b08b      	sub	sp, #44	; 0x2c
 23f6aba:	4604      	mov	r4, r0
 23f6abc:	460e      	mov	r6, r1
_GLIBCXX_TO_CHARS(unsigned int)
 23f6abe:	ad02      	add	r5, sp, #8
      if (__value == 0)
 23f6ac0:	b973      	cbnz	r3, 23f6ae0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESA_SO_+0x2c>
	  *__first = '0';
 23f6ac2:	2330      	movs	r3, #48	; 0x30
	  return { __first + 1, errc{} };
 23f6ac4:	f10d 0709 	add.w	r7, sp, #9
	  *__first = '0';
 23f6ac8:	f88d 3008 	strb.w	r3, [sp, #8]
            ok = true;
 23f6acc:	2301      	movs	r3, #1
            return String(buf, r.ptr - buf);
 23f6ace:	4629      	mov	r1, r5
 23f6ad0:	4620      	mov	r0, r4
            ok = true;
 23f6ad2:	7033      	strb	r3, [r6, #0]
            return String(buf, r.ptr - buf);
 23f6ad4:	1b7a      	subs	r2, r7, r5
 23f6ad6:	f004 face 	bl	23fb076 <_ZN6StringC1EPKcj>
      }
 23f6ada:	4620      	mov	r0, r4
 23f6adc:	b00b      	add	sp, #44	; 0x2c
 23f6ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
 23f6ae0:	4629      	mov	r1, r5
 23f6ae2:	4668      	mov	r0, sp
 23f6ae4:	aa0a      	add	r2, sp, #40	; 0x28
 23f6ae6:	f7ff ff9d 	bl	23f6a24 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_>
            SPARK_ASSERT(r.ec == std::errc());
 23f6aea:	e9dd 7300 	ldrd	r7, r3, [sp]
 23f6aee:	2b00      	cmp	r3, #0
 23f6af0:	d0ec      	beq.n	23f6acc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESA_SO_+0x18>
 23f6af2:	200a      	movs	r0, #10
 23f6af4:	4a02      	ldr	r2, [pc, #8]	; (23f6b00 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESA_SO_+0x4c>)
 23f6af6:	4903      	ldr	r1, [pc, #12]	; (23f6b04 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESA_SO_+0x50>)
 23f6af8:	f001 fe4e 	bl	23f8798 <panic_>
 23f6afc:	e7e6      	b.n	23f6acc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESA_SO_+0x18>
 23f6afe:	bf00      	nop
 23f6b00:	023f84dd 	.word	0x023f84dd
 23f6b04:	023ff273 	.word	0x023ff273

023f6b08 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f6b0a:	6813      	ldr	r3, [r2, #0]
 23f6b0c:	b08b      	sub	sp, #44	; 0x2c
      if (__value == 0)
 23f6b0e:	2b00      	cmp	r3, #0
 23f6b10:	4604      	mov	r4, r0
 23f6b12:	460e      	mov	r6, r1
 23f6b14:	ad02      	add	r5, sp, #8
 23f6b16:	d10e      	bne.n	23f6b36 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESA_SO_+0x2e>
	  *__first = '0';
 23f6b18:	2330      	movs	r3, #48	; 0x30
	  return { __first + 1, errc{} };
 23f6b1a:	f10d 0709 	add.w	r7, sp, #9
	  *__first = '0';
 23f6b1e:	f88d 3008 	strb.w	r3, [sp, #8]
            ok = true;
 23f6b22:	2301      	movs	r3, #1
            return String(buf, r.ptr - buf);
 23f6b24:	4629      	mov	r1, r5
 23f6b26:	4620      	mov	r0, r4
            ok = true;
 23f6b28:	7033      	strb	r3, [r6, #0]
            return String(buf, r.ptr - buf);
 23f6b2a:	1b7a      	subs	r2, r7, r5
 23f6b2c:	f004 faa3 	bl	23fb076 <_ZN6StringC1EPKcj>
      }
 23f6b30:	4620      	mov	r0, r4
 23f6b32:	b00b      	add	sp, #44	; 0x2c
 23f6b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	      *__first++ = '-';
 23f6b36:	bfbd      	ittte	lt
 23f6b38:	222d      	movlt	r2, #45	; 0x2d
	    __unsigned_val = _Up(~__value) + _Up(1);
 23f6b3a:	425b      	neglt	r3, r3
	      *__first++ = '-';
 23f6b3c:	f88d 2008 	strblt.w	r2, [sp, #8]
	if (__value < 0)
 23f6b40:	4629      	movge	r1, r5
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
 23f6b42:	4668      	mov	r0, sp
	    __unsigned_val = _Up(~__value) + _Up(1);
 23f6b44:	bfb8      	it	lt
 23f6b46:	f10d 0109 	addlt.w	r1, sp, #9
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
 23f6b4a:	aa0a      	add	r2, sp, #40	; 0x28
 23f6b4c:	f7ff ff6a 	bl	23f6a24 <_ZNSt8__detail13__to_chars_10IjEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_>
            SPARK_ASSERT(r.ec == std::errc());
 23f6b50:	e9dd 7300 	ldrd	r7, r3, [sp]
 23f6b54:	2b00      	cmp	r3, #0
 23f6b56:	d0e4      	beq.n	23f6b22 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESA_SO_+0x1a>
 23f6b58:	200a      	movs	r0, #10
 23f6b5a:	4a02      	ldr	r2, [pc, #8]	; (23f6b64 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESA_SO_+0x5c>)
 23f6b5c:	4902      	ldr	r1, [pc, #8]	; (23f6b68 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESA_SO_+0x60>)
 23f6b5e:	f001 fe1b 	bl	23f8798 <panic_>
 23f6b62:	e7de      	b.n	23f6b22 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESA_SO_+0x1a>
 23f6b64:	023f84dd 	.word	0x023f84dd
 23f6b68:	023ff273 	.word	0x023ff273

023f6b6c <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_>:
    __to_chars_10(char* __first, char* __last, _Tp __val) noexcept
 23f6b6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f6b70:	4607      	mov	r7, r0
 23f6b72:	e9dd 460a 	ldrd	r4, r6, [sp, #40]	; 0x28
 23f6b76:	4688      	mov	r8, r1
 23f6b78:	4691      	mov	r9, r2
 23f6b7a:	4620      	mov	r0, r4
 23f6b7c:	4631      	mov	r1, r6
      unsigned __n = 1;
 23f6b7e:	2501      	movs	r5, #1
	  if (__value < __b4) return __n + 3;
 23f6b80:	f242 7a10 	movw	sl, #10000	; 0x2710
	  if (__value < (unsigned)__base) return __n;
 23f6b84:	280a      	cmp	r0, #10
 23f6b86:	f171 0300 	sbcs.w	r3, r1, #0
 23f6b8a:	d304      	bcc.n	23f6b96 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x2a>
	  if (__value < __b2) return __n + 1;
 23f6b8c:	2864      	cmp	r0, #100	; 0x64
 23f6b8e:	f171 0300 	sbcs.w	r3, r1, #0
 23f6b92:	d20b      	bcs.n	23f6bac <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x40>
 23f6b94:	3501      	adds	r5, #1
      if (__builtin_expect((__last - __first) < __len, 0))
 23f6b96:	eba9 0308 	sub.w	r3, r9, r8
 23f6b9a:	42ab      	cmp	r3, r5
 23f6b9c:	d21a      	bcs.n	23f6bd4 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x68>
	  __res.ec = errc::value_too_large;
 23f6b9e:	238b      	movs	r3, #139	; 0x8b
	  __res.ptr = __last;
 23f6ba0:	f8c7 9000 	str.w	r9, [r7]
    }
 23f6ba4:	4638      	mov	r0, r7
      __res.ec = {};
 23f6ba6:	607b      	str	r3, [r7, #4]
    }
 23f6ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  if (__value < __b3) return __n + 2;
 23f6bac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23f6bb0:	f171 0300 	sbcs.w	r3, r1, #0
 23f6bb4:	d201      	bcs.n	23f6bba <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x4e>
 23f6bb6:	3502      	adds	r5, #2
 23f6bb8:	e7ed      	b.n	23f6b96 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x2a>
	  if (__value < __b4) return __n + 3;
 23f6bba:	4550      	cmp	r0, sl
 23f6bbc:	f171 0300 	sbcs.w	r3, r1, #0
 23f6bc0:	d201      	bcs.n	23f6bc6 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x5a>
 23f6bc2:	3503      	adds	r5, #3
 23f6bc4:	e7e7      	b.n	23f6b96 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x2a>
	  __value /= __b4;
 23f6bc6:	f242 7210 	movw	r2, #10000	; 0x2710
 23f6bca:	2300      	movs	r3, #0
 23f6bcc:	f7fe ffe6 	bl	23f5b9c <__aeabi_uldivmod>
	  __n += 4;
 23f6bd0:	3504      	adds	r5, #4
	  if (__value < (unsigned)__base) return __n;
 23f6bd2:	e7d7      	b.n	23f6b84 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x18>
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 23f6bd4:	4445      	add	r5, r8
 23f6bd6:	46aa      	mov	sl, r5
	  __first[__pos] = __digits[__num + 1];
 23f6bd8:	f8df b068 	ldr.w	fp, [pc, #104]	; 23f6c44 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0xd8>
      while (__val >= 100)
 23f6bdc:	2c64      	cmp	r4, #100	; 0x64
 23f6bde:	f176 0300 	sbcs.w	r3, r6, #0
 23f6be2:	d31a      	bcc.n	23f6c1a <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0xae>
	  auto const __num = (__val % 100) * 2;
 23f6be4:	4620      	mov	r0, r4
 23f6be6:	4631      	mov	r1, r6
 23f6be8:	2264      	movs	r2, #100	; 0x64
 23f6bea:	2300      	movs	r3, #0
 23f6bec:	f7fe ffd6 	bl	23f5b9c <__aeabi_uldivmod>
	  __val /= 100;
 23f6bf0:	2300      	movs	r3, #0
	  auto const __num = (__val % 100) * 2;
 23f6bf2:	ea4f 0942 	mov.w	r9, r2, lsl #1
	  __val /= 100;
 23f6bf6:	4620      	mov	r0, r4
 23f6bf8:	4631      	mov	r1, r6
 23f6bfa:	2264      	movs	r2, #100	; 0x64
 23f6bfc:	f7fe ffce 	bl	23f5b9c <__aeabi_uldivmod>
	  __first[__pos] = __digits[__num + 1];
 23f6c00:	f119 0301 	adds.w	r3, r9, #1
 23f6c04:	f81b 3003 	ldrb.w	r3, [fp, r3]
	  __val /= 100;
 23f6c08:	4604      	mov	r4, r0
	  __first[__pos] = __digits[__num + 1];
 23f6c0a:	f80a 3c01 	strb.w	r3, [sl, #-1]
	  __first[__pos - 1] = __digits[__num];
 23f6c0e:	f81b 3009 	ldrb.w	r3, [fp, r9]
	  __val /= 100;
 23f6c12:	460e      	mov	r6, r1
	  __first[__pos - 1] = __digits[__num];
 23f6c14:	f80a 3d02 	strb.w	r3, [sl, #-2]!
      while (__val >= 100)
 23f6c18:	e7e0      	b.n	23f6bdc <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x70>
      if (__val >= 10)
 23f6c1a:	2c0a      	cmp	r4, #10
 23f6c1c:	f176 0300 	sbcs.w	r3, r6, #0
 23f6c20:	d30b      	bcc.n	23f6c3a <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0xce>
	  __first[1] = __digits[__num + 1];
 23f6c22:	4b08      	ldr	r3, [pc, #32]	; (23f6c44 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0xd8>)
	  auto const __num = __val * 2;
 23f6c24:	1924      	adds	r4, r4, r4
	  __first[1] = __digits[__num + 1];
 23f6c26:	1c62      	adds	r2, r4, #1
 23f6c28:	5c9a      	ldrb	r2, [r3, r2]
	  __first[0] = __digits[__num];
 23f6c2a:	5d1b      	ldrb	r3, [r3, r4]
	  __first[1] = __digits[__num + 1];
 23f6c2c:	f888 2001 	strb.w	r2, [r8, #1]
	  __first[0] = __digits[__num];
 23f6c30:	f888 3000 	strb.w	r3, [r8]
      __res.ec = {};
 23f6c34:	2300      	movs	r3, #0
      __res.ptr = __first + __len;
 23f6c36:	603d      	str	r5, [r7, #0]
 23f6c38:	e7b4      	b.n	23f6ba4 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0x38>
	__first[0] = '0' + __val;
 23f6c3a:	3430      	adds	r4, #48	; 0x30
 23f6c3c:	f888 4000 	strb.w	r4, [r8]
 23f6c40:	e7f8      	b.n	23f6c34 <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_+0xc8>
 23f6c42:	bf00      	nop
 23f6c44:	023ff5f4 	.word	0x023ff5f4

023f6c48 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f6c4a:	460e      	mov	r6, r1
    return std::to_chars(first, last, value);
 23f6c4c:	e9d2 1300 	ldrd	r1, r3, [r2]
 23f6c50:	b08d      	sub	sp, #52	; 0x34
      if (__value == 0)
 23f6c52:	ea51 0203 	orrs.w	r2, r1, r3
 23f6c56:	4604      	mov	r4, r0
 23f6c58:	ad04      	add	r5, sp, #16
 23f6c5a:	d10e      	bne.n	23f6c7a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESA_SO_+0x32>
	  *__first = '0';
 23f6c5c:	2330      	movs	r3, #48	; 0x30
	  return { __first + 1, errc{} };
 23f6c5e:	f10d 0711 	add.w	r7, sp, #17
	  *__first = '0';
 23f6c62:	f88d 3010 	strb.w	r3, [sp, #16]
            ok = true;
 23f6c66:	2301      	movs	r3, #1
            return String(buf, r.ptr - buf);
 23f6c68:	4629      	mov	r1, r5
 23f6c6a:	4620      	mov	r0, r4
            ok = true;
 23f6c6c:	7033      	strb	r3, [r6, #0]
            return String(buf, r.ptr - buf);
 23f6c6e:	1b7a      	subs	r2, r7, r5
 23f6c70:	f004 fa01 	bl	23fb076 <_ZN6StringC1EPKcj>
      }
 23f6c74:	4620      	mov	r0, r4
 23f6c76:	b00d      	add	sp, #52	; 0x34
 23f6c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
 23f6c7a:	e9cd 1300 	strd	r1, r3, [sp]
 23f6c7e:	aa0c      	add	r2, sp, #48	; 0x30
 23f6c80:	4629      	mov	r1, r5
 23f6c82:	a802      	add	r0, sp, #8
 23f6c84:	f7ff ff72 	bl	23f6b6c <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_>
            SPARK_ASSERT(r.ec == std::errc());
 23f6c88:	e9dd 7302 	ldrd	r7, r3, [sp, #8]
 23f6c8c:	2b00      	cmp	r3, #0
 23f6c8e:	d0ea      	beq.n	23f6c66 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESA_SO_+0x1e>
 23f6c90:	200a      	movs	r0, #10
 23f6c92:	4a02      	ldr	r2, [pc, #8]	; (23f6c9c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESA_SO_+0x54>)
 23f6c94:	4902      	ldr	r1, [pc, #8]	; (23f6ca0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESA_SO_+0x58>)
 23f6c96:	f001 fd7f 	bl	23f8798 <panic_>
 23f6c9a:	e7e4      	b.n	23f6c66 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESA_SO_+0x1e>
 23f6c9c:	023f84dd 	.word	0x023f84dd
 23f6ca0:	023ff273 	.word	0x023ff273

023f6ca4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f6ca6:	460d      	mov	r5, r1
    return std::to_chars(first, last, value);
 23f6ca8:	e9d2 3200 	ldrd	r3, r2, [r2]
 23f6cac:	b08d      	sub	sp, #52	; 0x34
      if (__value == 0)
 23f6cae:	ea53 0102 	orrs.w	r1, r3, r2
 23f6cb2:	4604      	mov	r4, r0
 23f6cb4:	ae04      	add	r6, sp, #16
 23f6cb6:	d10e      	bne.n	23f6cd6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x32>
	  *__first = '0';
 23f6cb8:	2330      	movs	r3, #48	; 0x30
	  return { __first + 1, errc{} };
 23f6cba:	f10d 0711 	add.w	r7, sp, #17
	  *__first = '0';
 23f6cbe:	f88d 3010 	strb.w	r3, [sp, #16]
            ok = true;
 23f6cc2:	2301      	movs	r3, #1
            return String(buf, r.ptr - buf);
 23f6cc4:	4631      	mov	r1, r6
 23f6cc6:	4620      	mov	r0, r4
            ok = true;
 23f6cc8:	702b      	strb	r3, [r5, #0]
            return String(buf, r.ptr - buf);
 23f6cca:	1bba      	subs	r2, r7, r6
 23f6ccc:	f004 f9d3 	bl	23fb076 <_ZN6StringC1EPKcj>
      }
 23f6cd0:	4620      	mov	r0, r4
 23f6cd2:	b00d      	add	sp, #52	; 0x34
 23f6cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (__value < 0)
 23f6cd6:	2a00      	cmp	r2, #0
 23f6cd8:	da17      	bge.n	23f6d0a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x66>
	      *__first++ = '-';
 23f6cda:	212d      	movs	r1, #45	; 0x2d
	    __unsigned_val = _Up(~__value) + _Up(1);
 23f6cdc:	425b      	negs	r3, r3
	      *__first++ = '-';
 23f6cde:	f88d 1010 	strb.w	r1, [sp, #16]
	    __unsigned_val = _Up(~__value) + _Up(1);
 23f6ce2:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 23f6ce6:	f10d 0111 	add.w	r1, sp, #17
	return __detail::__to_chars_10(__first, __last, __unsigned_val);
 23f6cea:	e9cd 3200 	strd	r3, r2, [sp]
 23f6cee:	a802      	add	r0, sp, #8
 23f6cf0:	aa0c      	add	r2, sp, #48	; 0x30
 23f6cf2:	f7ff ff3b 	bl	23f6b6c <_ZNSt8__detail13__to_chars_10IyEENSt9enable_ifIXsrSt5__or_IJS2_IJSt7is_sameINSt9remove_cvIT_E4typeEaES3_IS7_sES3_IS7_iES3_IS7_lES3_IS7_xEEES2_IJS3_IS7_hES3_IS7_tES3_IS7_jES3_IS7_mES3_IS7_yEEES3_IcS7_EEE5valueESt15to_chars_resultE4typeEPcSP_S5_>
            SPARK_ASSERT(r.ec == std::errc());
 23f6cf6:	e9dd 7302 	ldrd	r7, r3, [sp, #8]
 23f6cfa:	2b00      	cmp	r3, #0
 23f6cfc:	d0e1      	beq.n	23f6cc2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x1e>
 23f6cfe:	200a      	movs	r0, #10
 23f6d00:	4a03      	ldr	r2, [pc, #12]	; (23f6d10 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x6c>)
 23f6d02:	4904      	ldr	r1, [pc, #16]	; (23f6d14 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x70>)
 23f6d04:	f001 fd48 	bl	23f8798 <panic_>
 23f6d08:	e7db      	b.n	23f6cc2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x1e>
 23f6d0a:	4631      	mov	r1, r6
 23f6d0c:	e7ed      	b.n	23f6cea <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS4_vEERKSt7variantIJSt9monostatebijxydS4_NS6_6BufferEN5spark6VectorIS7_NSE_16DefaultAllocatorEEENS6_3MapIS4_S7_St4lessIS4_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESA_SO_+0x46>
 23f6d0e:	bf00      	nop
 23f6d10:	023f84dd 	.word	0x023f84dd
 23f6d14:	023ff273 	.word	0x023ff273

023f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>:
      void _M_reset()
 23f6d18:	b513      	push	{r0, r1, r4, lr}
	return this->_M_index != __index_type(variant_npos);
 23f6d1a:	7c03      	ldrb	r3, [r0, #16]
      void _M_reset()
 23f6d1c:	4604      	mov	r4, r0
	if (!_M_valid()) [[unlikely]]
 23f6d1e:	2bff      	cmp	r3, #255	; 0xff
 23f6d20:	d008      	beq.n	23f6d34 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv+0x1c>
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23f6d22:	4a05      	ldr	r2, [pc, #20]	; (23f6d38 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv+0x20>)
	  return make_signed_t<__index_type>(this->_M_index);
 23f6d24:	b25b      	sxtb	r3, r3
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23f6d26:	4601      	mov	r1, r0
 23f6d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23f6d2c:	a801      	add	r0, sp, #4
 23f6d2e:	4798      	blx	r3
	_M_index = static_cast<__index_type>(variant_npos);
 23f6d30:	23ff      	movs	r3, #255	; 0xff
 23f6d32:	7423      	strb	r3, [r4, #16]
      }
 23f6d34:	b002      	add	sp, #8
 23f6d36:	bd10      	pop	{r4, pc}
 23f6d38:	023ff518 	.word	0x023ff518

023f6d3c <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>:
    struct pair
 23f6d3c:	b510      	push	{r4, lr}
 23f6d3e:	4604      	mov	r4, r0
      { _M_reset(); }
 23f6d40:	3010      	adds	r0, #16
 23f6d42:	f7ff ffe9 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f6d46:	4620      	mov	r0, r4
 23f6d48:	f004 f936 	bl	23fafb8 <_ZN6StringD1Ev>
 23f6d4c:	4620      	mov	r0, r4
 23f6d4e:	bd10      	pop	{r4, pc}

023f6d50 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f6d50:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f6d52:	2628      	movs	r6, #40	; 0x28
 23f6d54:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f6d58:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f6d5a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f6d5e:	42ae      	cmp	r6, r5
 23f6d60:	d004      	beq.n	23f6d6c <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev+0x1c>
            p->~T();
 23f6d62:	4628      	mov	r0, r5
 23f6d64:	f7ff ffea 	bl	23f6d3c <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
        for (; p != end; ++p) {
 23f6d68:	3528      	adds	r5, #40	; 0x28
 23f6d6a:	e7f8      	b.n	23f6d5e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f6d6c:	6820      	ldr	r0, [r4, #0]
 23f6d6e:	f001 ff89 	bl	23f8c84 <free>
}
 23f6d72:	4620      	mov	r0, r4
 23f6d74:	bd70      	pop	{r4, r5, r6, pc}

023f6d76 <_ZN8particle10LedgerDataC1Ev>:
    using Entry = VariantMap::Entry;

    /**
     * Construct empty ledger data.
     */
    LedgerData() :
 23f6d76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
 23f6d78:	2300      	movs	r3, #0
	  ::new ((void*)std::addressof(_M_storage))
 23f6d7a:	4669      	mov	r1, sp
 23f6d7c:	4604      	mov	r4, r0
 23f6d7e:	e9cd 3300 	strd	r3, r3, [sp]
 23f6d82:	9302      	str	r3, [sp, #8]
 23f6d84:	f7ff fdf1 	bl	23f696a <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	_M_index{_Np}
 23f6d88:	230a      	movs	r3, #10
class Map {
 23f6d8a:	4668      	mov	r0, sp
 23f6d8c:	7423      	strb	r3, [r4, #16]
 23f6d8e:	f7ff ffdf 	bl	23f6d50 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
            v_(VariantMap()) {
    }
 23f6d92:	4620      	mov	r0, r4
 23f6d94:	b004      	add	sp, #16
 23f6d96:	bd10      	pop	{r4, pc}

023f6d98 <_ZN18DeviceConfigLedgerC1Ev>:
DeviceConfigLedger::DeviceConfigLedger() {
 23f6d98:	b510      	push	{r4, lr}
 23f6d9a:	4604      	mov	r4, r0
 23f6d9c:	4b10      	ldr	r3, [pc, #64]	; (23f6de0 <_ZN18DeviceConfigLedgerC1Ev+0x48>)
 23f6d9e:	f840 3b08 	str.w	r3, [r0], #8
 23f6da2:	f7ff ffe8 	bl	23f6d76 <_ZN8particle10LedgerDataC1Ev>
 23f6da6:	f104 0020 	add.w	r0, r4, #32
 23f6daa:	f7ff ffe4 	bl	23f6d76 <_ZN8particle10LedgerDataC1Ev>
 23f6dae:	f104 0038 	add.w	r0, r4, #56	; 0x38
 23f6db2:	f7ff ffe0 	bl	23f6d76 <_ZN8particle10LedgerDataC1Ev>
 23f6db6:	490b      	ldr	r1, [pc, #44]	; (23f6de4 <_ZN18DeviceConfigLedgerC1Ev+0x4c>)
 23f6db8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 23f6dbc:	f004 f947 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
 23f6dc0:	4909      	ldr	r1, [pc, #36]	; (23f6de8 <_ZN18DeviceConfigLedgerC1Ev+0x50>)
 23f6dc2:	f104 0060 	add.w	r0, r4, #96	; 0x60
 23f6dc6:	f004 f942 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
            instance_(instance) {
 23f6dca:	2300      	movs	r3, #0
}
 23f6dcc:	4620      	mov	r0, r4
 23f6dce:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
 23f6dd2:	e9c4 331f 	strd	r3, r3, [r4, #124]	; 0x7c
DeviceConfigLedger::DeviceConfigLedger() {
 23f6dd6:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 23f6dda:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 23f6dde:	bd10      	pop	{r4, pc}
 23f6de0:	023ff7a4 	.word	0x023ff7a4
 23f6de4:	023ff2c9 	.word	0x023ff2c9
 23f6de8:	023ff2de 	.word	0x023ff2de

023f6dec <_ZN18DeviceConfigLedger8instanceEv>:
DeviceConfigLedger &DeviceConfigLedger::instance() {
 23f6dec:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
 23f6dee:	4d06      	ldr	r5, [pc, #24]	; (23f6e08 <_ZN18DeviceConfigLedger8instanceEv+0x1c>)
 23f6df0:	682b      	ldr	r3, [r5, #0]
 23f6df2:	b93b      	cbnz	r3, 23f6e04 <_ZN18DeviceConfigLedger8instanceEv+0x18>
        _instance = new DeviceConfigLedger();
 23f6df4:	2088      	movs	r0, #136	; 0x88
 23f6df6:	f7ff f8c6 	bl	23f5f86 <_Znwj>
 23f6dfa:	4604      	mov	r4, r0
 23f6dfc:	b108      	cbz	r0, 23f6e02 <_ZN18DeviceConfigLedger8instanceEv+0x16>
 23f6dfe:	f7ff ffcb 	bl	23f6d98 <_ZN18DeviceConfigLedgerC1Ev>
 23f6e02:	602c      	str	r4, [r5, #0]
}
 23f6e04:	6828      	ldr	r0, [r5, #0]
 23f6e06:	bd38      	pop	{r3, r4, r5, pc}
 23f6e08:	1007ae54 	.word	0x1007ae54

023f6e0c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESL_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6e0c:	b508      	push	{r3, lr}
 23f6e0e:	4608      	mov	r0, r1
 23f6e10:	f7ff ff9e 	bl	23f6d50 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
      }
 23f6e14:	bd08      	pop	{r3, pc}

023f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f6e16:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f6e18:	2618      	movs	r6, #24
 23f6e1a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f6e1e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f6e20:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f6e24:	42ae      	cmp	r6, r5
 23f6e26:	d004      	beq.n	23f6e32 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev+0x1c>
      { _M_reset(); }
 23f6e28:	4628      	mov	r0, r5
 23f6e2a:	f7ff ff75 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f6e2e:	3518      	adds	r5, #24
 23f6e30:	e7f8      	b.n	23f6e24 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f6e32:	6820      	ldr	r0, [r4, #0]
 23f6e34:	f001 ff26 	bl	23f8c84 <free>
}
 23f6e38:	4620      	mov	r0, r4
 23f6e3a:	bd70      	pop	{r4, r5, r6, pc}

023f6e3c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESL_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6e3c:	b508      	push	{r3, lr}
 23f6e3e:	4608      	mov	r0, r1
 23f6e40:	f7ff ffe9 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
      }
 23f6e44:	bd08      	pop	{r3, pc}
	...

023f6e48 <_ZN18DeviceConfigLedgerD1Ev>:
DeviceConfigLedger::~DeviceConfigLedger() {
 23f6e48:	b570      	push	{r4, r5, r6, lr}
 23f6e4a:	4604      	mov	r4, r0
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 23f6e4c:	e9d0 561f 	ldrd	r5, r6, [r0, #124]	; 0x7c
 23f6e50:	4b16      	ldr	r3, [pc, #88]	; (23f6eac <_ZN18DeviceConfigLedgerD1Ev+0x64>)
 23f6e52:	6003      	str	r3, [r0, #0]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 23f6e54:	42ae      	cmp	r6, r5
 23f6e56:	d004      	beq.n	23f6e62 <_ZN18DeviceConfigLedgerD1Ev+0x1a>
    class function<_Res(_ArgTypes...)>
 23f6e58:	4628      	mov	r0, r5
 23f6e5a:	f7ff fbde 	bl	23f661a <_ZNSt14_Function_baseD1Ev>
 23f6e5e:	3510      	adds	r5, #16
 23f6e60:	e7f8      	b.n	23f6e54 <_ZN18DeviceConfigLedgerD1Ev+0xc>
	_M_deallocate(_M_impl._M_start,
 23f6e62:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	if (__p)
 23f6e64:	b120      	cbz	r0, 23f6e70 <_ZN18DeviceConfigLedgerD1Ev+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 23f6e66:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
	::operator delete(__p
 23f6e6a:	1a09      	subs	r1, r1, r0
 23f6e6c:	f7ff f891 	bl	23f5f92 <_ZdlPvj>
 23f6e70:	f104 0074 	add.w	r0, r4, #116	; 0x74
 23f6e74:	f7ff fc49 	bl	23f670a <_ZN8particle6LedgerD1Ev>
 23f6e78:	f104 0070 	add.w	r0, r4, #112	; 0x70
 23f6e7c:	f7ff fc45 	bl	23f670a <_ZN8particle6LedgerD1Ev>
 23f6e80:	f104 0060 	add.w	r0, r4, #96	; 0x60
 23f6e84:	f004 f898 	bl	23fafb8 <_ZN6StringD1Ev>
 23f6e88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 23f6e8c:	f004 f894 	bl	23fafb8 <_ZN6StringD1Ev>
      { _M_reset(); }
 23f6e90:	f104 0038 	add.w	r0, r4, #56	; 0x38
 23f6e94:	f7ff ff40 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f6e98:	f104 0020 	add.w	r0, r4, #32
 23f6e9c:	f7ff ff3c 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f6ea0:	f104 0008 	add.w	r0, r4, #8
 23f6ea4:	f7ff ff38 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
 23f6ea8:	4620      	mov	r0, r4
 23f6eaa:	bd70      	pop	{r4, r5, r6, pc}
 23f6eac:	023ff7a4 	.word	0x023ff7a4

023f6eb0 <_ZN18DeviceConfigLedgerD0Ev>:
DeviceConfigLedger::~DeviceConfigLedger() {
 23f6eb0:	b510      	push	{r4, lr}
 23f6eb2:	4604      	mov	r4, r0
}
 23f6eb4:	f7ff ffc8 	bl	23f6e48 <_ZN18DeviceConfigLedgerD1Ev>
 23f6eb8:	4620      	mov	r0, r4
 23f6eba:	2188      	movs	r1, #136	; 0x88
 23f6ebc:	f7ff f869 	bl	23f5f92 <_ZdlPvj>
 23f6ec0:	4620      	mov	r0, r4
 23f6ec2:	bd10      	pop	{r4, pc}

023f6ec4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4294967295EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6ec4:	b508      	push	{r3, lr}
	      this->_M_reset();
 23f6ec6:	6800      	ldr	r0, [r0, #0]
 23f6ec8:	f7ff ff26 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23f6ecc:	bd08      	pop	{r3, pc}

023f6ece <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6ece:	b510      	push	{r4, lr}
 23f6ed0:	6804      	ldr	r4, [r0, #0]
		if (this->_M_index == __rhs_index)
 23f6ed2:	7c23      	ldrb	r3, [r4, #16]
 23f6ed4:	b123      	cbz	r3, 23f6ee0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SR_+0x12>
	      this->_M_reset();
 23f6ed6:	4620      	mov	r0, r4
 23f6ed8:	f7ff ff1e 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23f6edc:	2300      	movs	r3, #0
 23f6ede:	7423      	strb	r3, [r4, #16]
      }
 23f6ee0:	bd10      	pop	{r4, pc}

023f6ee2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6ee2:	b570      	push	{r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f6ee4:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6ee6:	4605      	mov	r5, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23f6ee8:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6eea:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23f6eec:	2b03      	cmp	r3, #3
 23f6eee:	d104      	bne.n	23f6efa <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_+0x18>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f6ef0:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f6ef2:	680a      	ldr	r2, [r1, #0]
 23f6ef4:	6022      	str	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f6ef6:	600b      	str	r3, [r1, #0]
      }
 23f6ef8:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23f6efa:	2bff      	cmp	r3, #255	; 0xff
 23f6efc:	d00c      	beq.n	23f6f18 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_+0x36>
			auto __tmp(std::move(__rhs_mem));
 23f6efe:	680e      	ldr	r6, [r1, #0]
      _Variant_base& operator=(_Variant_base&&) = default;
 23f6f00:	6840      	ldr	r0, [r0, #4]
 23f6f02:	4621      	mov	r1, r4
 23f6f04:	f7ff fae2 	bl	23f64cc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f6f08:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
 23f6f0a:	4620      	mov	r0, r4
 23f6f0c:	f7ff ff04 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23f6f10:	2303      	movs	r3, #3
        ::new (__storage)
 23f6f12:	6026      	str	r6, [r4, #0]
	  this->_M_index = __rhs_index;
 23f6f14:	7423      	strb	r3, [r4, #16]
 23f6f16:	e7ef      	b.n	23f6ef8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_+0x16>
	  this->_M_reset();
 23f6f18:	4620      	mov	r0, r4
 23f6f1a:	f7ff fefd 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23f6f1e:	6833      	ldr	r3, [r6, #0]
 23f6f20:	6023      	str	r3, [r4, #0]
	  this->_M_index = __rhs_index;
 23f6f22:	2303      	movs	r3, #3
 23f6f24:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23f6f26:	6868      	ldr	r0, [r5, #4]
 23f6f28:	f7ff fef6 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23f6f2c:	e7e4      	b.n	23f6ef8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_+0x16>

023f6f2e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6f2e:	b570      	push	{r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f6f30:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6f32:	4605      	mov	r5, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23f6f34:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6f36:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23f6f38:	2b02      	cmp	r3, #2
 23f6f3a:	d104      	bne.n	23f6f46 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_+0x18>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f6f3c:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f6f3e:	680a      	ldr	r2, [r1, #0]
 23f6f40:	6022      	str	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f6f42:	600b      	str	r3, [r1, #0]
      }
 23f6f44:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23f6f46:	2bff      	cmp	r3, #255	; 0xff
 23f6f48:	d00c      	beq.n	23f6f64 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_+0x36>
			auto __tmp(std::move(__rhs_mem));
 23f6f4a:	680e      	ldr	r6, [r1, #0]
      _Variant_base& operator=(_Variant_base&&) = default;
 23f6f4c:	6840      	ldr	r0, [r0, #4]
 23f6f4e:	4621      	mov	r1, r4
 23f6f50:	f7ff fabc 	bl	23f64cc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f6f54:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
 23f6f56:	4620      	mov	r0, r4
 23f6f58:	f7ff fede 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23f6f5c:	2302      	movs	r3, #2
        ::new (__storage)
 23f6f5e:	6026      	str	r6, [r4, #0]
	  this->_M_index = __rhs_index;
 23f6f60:	7423      	strb	r3, [r4, #16]
 23f6f62:	e7ef      	b.n	23f6f44 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_+0x16>
	  this->_M_reset();
 23f6f64:	4620      	mov	r0, r4
 23f6f66:	f7ff fed7 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23f6f6a:	6833      	ldr	r3, [r6, #0]
 23f6f6c:	6023      	str	r3, [r4, #0]
	  this->_M_index = __rhs_index;
 23f6f6e:	2302      	movs	r3, #2
 23f6f70:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23f6f72:	6868      	ldr	r0, [r5, #4]
 23f6f74:	f7ff fed0 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23f6f78:	e7e4      	b.n	23f6f44 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_+0x16>

023f6f7a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6f7a:	b570      	push	{r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f6f7c:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6f7e:	4605      	mov	r5, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23f6f80:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6f82:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23f6f84:	2b01      	cmp	r3, #1
 23f6f86:	d104      	bne.n	23f6f92 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_+0x18>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f6f88:	7823      	ldrb	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f6f8a:	780a      	ldrb	r2, [r1, #0]
 23f6f8c:	7022      	strb	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f6f8e:	700b      	strb	r3, [r1, #0]
      }
 23f6f90:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23f6f92:	2bff      	cmp	r3, #255	; 0xff
 23f6f94:	d00c      	beq.n	23f6fb0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_+0x36>
			auto __tmp(std::move(__rhs_mem));
 23f6f96:	780e      	ldrb	r6, [r1, #0]
      _Variant_base& operator=(_Variant_base&&) = default;
 23f6f98:	6840      	ldr	r0, [r0, #4]
 23f6f9a:	4621      	mov	r1, r4
 23f6f9c:	f7ff fa96 	bl	23f64cc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f6fa0:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
 23f6fa2:	4620      	mov	r0, r4
 23f6fa4:	f7ff feb8 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23f6fa8:	2301      	movs	r3, #1
        ::new (__storage)
 23f6faa:	7026      	strb	r6, [r4, #0]
	  this->_M_index = __rhs_index;
 23f6fac:	7423      	strb	r3, [r4, #16]
 23f6fae:	e7ef      	b.n	23f6f90 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_+0x16>
	  this->_M_reset();
 23f6fb0:	4620      	mov	r0, r4
 23f6fb2:	f7ff feb1 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23f6fb6:	7833      	ldrb	r3, [r6, #0]
 23f6fb8:	7023      	strb	r3, [r4, #0]
	  this->_M_index = __rhs_index;
 23f6fba:	2301      	movs	r3, #1
 23f6fbc:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23f6fbe:	6868      	ldr	r0, [r5, #4]
 23f6fc0:	f7ff feaa 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23f6fc4:	e7e4      	b.n	23f6f90 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_+0x16>

023f6fc6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4294967295EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6fc6:	b510      	push	{r4, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f6fc8:	6801      	ldr	r1, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6fca:	4604      	mov	r4, r0
		if (!this->valueless_by_exception()) [[__likely__]]
 23f6fcc:	7c0b      	ldrb	r3, [r1, #16]
 23f6fce:	2bff      	cmp	r3, #255	; 0xff
 23f6fd0:	d005      	beq.n	23f6fde <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4294967295EEEE14__visit_invokeESO_SJ_+0x18>
      _Variant_base& operator=(_Variant_base&&) = default;
 23f6fd2:	6840      	ldr	r0, [r0, #4]
 23f6fd4:	f7ff fa7a 	bl	23f64cc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
		    this->_M_reset();
 23f6fd8:	6820      	ldr	r0, [r4, #0]
 23f6fda:	f7ff fe9d 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23f6fde:	bd10      	pop	{r4, pc}

023f6fe0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6fe0:	b538      	push	{r3, r4, r5, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f6fe2:	6805      	ldr	r5, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f6fe4:	4604      	mov	r4, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23f6fe6:	7c2b      	ldrb	r3, [r5, #16]
		if (this->index() == __rhs_index)
 23f6fe8:	b15b      	cbz	r3, 23f7002 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SJ_+0x22>
		    if (!this->valueless_by_exception()) [[__likely__]]
 23f6fea:	2bff      	cmp	r3, #255	; 0xff
 23f6fec:	d00a      	beq.n	23f7004 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SJ_+0x24>
      _Variant_base& operator=(_Variant_base&&) = default;
 23f6fee:	4629      	mov	r1, r5
 23f6ff0:	6840      	ldr	r0, [r0, #4]
 23f6ff2:	f7ff fa6b 	bl	23f64cc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f6ff6:	6824      	ldr	r4, [r4, #0]
	  this->_M_reset();
 23f6ff8:	4620      	mov	r0, r4
 23f6ffa:	f7ff fe8d 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23f6ffe:	2300      	movs	r3, #0
 23f7000:	7423      	strb	r3, [r4, #16]
      }
 23f7002:	bd38      	pop	{r3, r4, r5, pc}
	  this->_M_reset();
 23f7004:	4628      	mov	r0, r5
 23f7006:	f7ff fe87 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23f700a:	2300      	movs	r3, #0
 23f700c:	742b      	strb	r3, [r5, #16]
			__rhs._M_reset();
 23f700e:	6860      	ldr	r0, [r4, #4]
 23f7010:	f7ff fe82 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23f7014:	e7f5      	b.n	23f7002 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SJ_+0x22>

023f7016 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f7016:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 23f7018:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f701a:	4605      	mov	r5, r0
		if (this->_M_index == __rhs_index)
 23f701c:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f701e:	460e      	mov	r6, r1
		if (this->_M_index == __rhs_index)
 23f7020:	2b09      	cmp	r3, #9
 23f7022:	d114      	bne.n	23f704e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SR_+0x38>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23f7024:	a801      	add	r0, sp, #4
 23f7026:	f7ff fc91 	bl	23f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 23f702a:	682b      	ldr	r3, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f702c:	9901      	ldr	r1, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f702e:	681a      	ldr	r2, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f7030:	6019      	str	r1, [r3, #0]
 23f7032:	9902      	ldr	r1, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7034:	9201      	str	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7036:	685a      	ldr	r2, [r3, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f7038:	6059      	str	r1, [r3, #4]
 23f703a:	9903      	ldr	r1, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f703c:	9202      	str	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f703e:	689a      	ldr	r2, [r3, #8]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23f7040:	a801      	add	r0, sp, #4
      __a = _GLIBCXX_MOVE(__b);
 23f7042:	6099      	str	r1, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7044:	9203      	str	r2, [sp, #12]
 23f7046:	f7ff fee6 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
      }
 23f704a:	b004      	add	sp, #16
 23f704c:	bd70      	pop	{r4, r5, r6, pc}
	      this->_M_reset();
 23f704e:	4620      	mov	r0, r4
 23f7050:	f7ff fe62 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23f7054:	2309      	movs	r3, #9
      ::new ((void*)std::addressof(__storage))
 23f7056:	4631      	mov	r1, r6
 23f7058:	4620      	mov	r0, r4
      __v._M_index = _Np;
 23f705a:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
 23f705c:	f7ff fc76 	bl	23f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  return make_signed_t<__index_type>(this->_M_index);
 23f7060:	7c20      	ldrb	r0, [r4, #16]
      if (__v.index() != _Np)
 23f7062:	2809      	cmp	r0, #9
 23f7064:	d0f1      	beq.n	23f704a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SR_+0x34>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23f7066:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 23f706a:	4258      	negs	r0, r3
 23f706c:	4158      	adcs	r0, r3
 23f706e:	f7ff fb38 	bl	23f66e2 <_ZSt26__throw_bad_variant_accessb>

023f7072 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f7072:	b538      	push	{r3, r4, r5, lr}
 23f7074:	6804      	ldr	r4, [r0, #0]
 23f7076:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23f7078:	7c23      	ldrb	r3, [r4, #16]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23f707a:	4620      	mov	r0, r4
		if (this->_M_index == __rhs_index)
 23f707c:	2b08      	cmp	r3, #8
 23f707e:	d103      	bne.n	23f7088 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SR_+0x16>
      }
 23f7080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23f7084:	f7ff bc4d 	b.w	23f6922 <_ZN8particle6BufferaSEOS0_.isra.0>
	      this->_M_reset();
 23f7088:	f7ff fe46 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23f708c:	2308      	movs	r3, #8
 23f708e:	4629      	mov	r1, r5
 23f7090:	4620      	mov	r0, r4
 23f7092:	7423      	strb	r3, [r4, #16]
 23f7094:	f7ff fc36 	bl	23f6904 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
	  return make_signed_t<__index_type>(this->_M_index);
 23f7098:	7c20      	ldrb	r0, [r4, #16]
      if (__v.index() != _Np)
 23f709a:	2808      	cmp	r0, #8
 23f709c:	d005      	beq.n	23f70aa <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SR_+0x38>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23f709e:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 23f70a2:	4258      	negs	r0, r3
 23f70a4:	4158      	adcs	r0, r3
 23f70a6:	f7ff fb1c 	bl	23f66e2 <_ZSt26__throw_bad_variant_accessb>
      }
 23f70aa:	bd38      	pop	{r3, r4, r5, pc}

023f70ac <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f70ac:	b538      	push	{r3, r4, r5, lr}
 23f70ae:	6804      	ldr	r4, [r0, #0]
 23f70b0:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23f70b2:	7c23      	ldrb	r3, [r4, #16]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23f70b4:	4620      	mov	r0, r4
		if (this->_M_index == __rhs_index)
 23f70b6:	2b07      	cmp	r3, #7
 23f70b8:	d103      	bne.n	23f70c2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SR_+0x16>
      }
 23f70ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23f70be:	f004 b829 	b.w	23fb114 <_ZN6StringaSEOS_>
	      this->_M_reset();
 23f70c2:	f7ff fe29 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23f70c6:	2307      	movs	r3, #7
      ::new ((void*)std::addressof(__storage))
 23f70c8:	4629      	mov	r1, r5
 23f70ca:	4620      	mov	r0, r4
      __v._M_index = _Np;
 23f70cc:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
 23f70ce:	f003 fffc 	bl	23fb0ca <_ZN6StringC1EOS_>
	  return make_signed_t<__index_type>(this->_M_index);
 23f70d2:	7c20      	ldrb	r0, [r4, #16]
      if (__v.index() != _Np)
 23f70d4:	2807      	cmp	r0, #7
 23f70d6:	d005      	beq.n	23f70e4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SR_+0x38>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23f70d8:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 23f70dc:	4258      	negs	r0, r3
 23f70de:	4158      	adcs	r0, r3
 23f70e0:	f7ff faff 	bl	23f66e2 <_ZSt26__throw_bad_variant_accessb>
      }
 23f70e4:	bd38      	pop	{r3, r4, r5, pc}

023f70e6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f70e6:	b538      	push	{r3, r4, r5, lr}
 23f70e8:	6804      	ldr	r4, [r0, #0]
 23f70ea:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23f70ec:	7c23      	ldrb	r3, [r4, #16]
 23f70ee:	2b06      	cmp	r3, #6
 23f70f0:	d104      	bne.n	23f70fc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SR_+0x16>
      ::new ((void*)std::addressof(__storage))
 23f70f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 23f70f6:	e9c4 2300 	strd	r2, r3, [r4]
      }
 23f70fa:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
 23f70fc:	4620      	mov	r0, r4
 23f70fe:	f7ff fe0b 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23f7102:	2306      	movs	r3, #6
 23f7104:	7423      	strb	r3, [r4, #16]
 23f7106:	e7f4      	b.n	23f70f2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SR_+0xc>

023f7108 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f7108:	b538      	push	{r3, r4, r5, lr}
 23f710a:	6804      	ldr	r4, [r0, #0]
 23f710c:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23f710e:	7c23      	ldrb	r3, [r4, #16]
 23f7110:	2b05      	cmp	r3, #5
 23f7112:	d104      	bne.n	23f711e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SR_+0x16>
      ::new ((void*)std::addressof(__storage))
 23f7114:	e9d5 2300 	ldrd	r2, r3, [r5]
 23f7118:	e9c4 2300 	strd	r2, r3, [r4]
      }
 23f711c:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
 23f711e:	4620      	mov	r0, r4
 23f7120:	f7ff fdfa 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23f7124:	2305      	movs	r3, #5
 23f7126:	7423      	strb	r3, [r4, #16]
 23f7128:	e7f4      	b.n	23f7114 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SR_+0xc>

023f712a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f712a:	b538      	push	{r3, r4, r5, lr}
 23f712c:	6804      	ldr	r4, [r0, #0]
 23f712e:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23f7130:	7c23      	ldrb	r3, [r4, #16]
 23f7132:	2b04      	cmp	r3, #4
 23f7134:	d104      	bne.n	23f7140 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SR_+0x16>
      ::new ((void*)std::addressof(__storage))
 23f7136:	e9d5 2300 	ldrd	r2, r3, [r5]
 23f713a:	e9c4 2300 	strd	r2, r3, [r4]
      }
 23f713e:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
 23f7140:	4620      	mov	r0, r4
 23f7142:	f7ff fde9 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23f7146:	2304      	movs	r3, #4
 23f7148:	7423      	strb	r3, [r4, #16]
 23f714a:	e7f4      	b.n	23f7136 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SR_+0xc>

023f714c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f714c:	b538      	push	{r3, r4, r5, lr}
 23f714e:	6804      	ldr	r4, [r0, #0]
 23f7150:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23f7152:	7c23      	ldrb	r3, [r4, #16]
 23f7154:	2b03      	cmp	r3, #3
 23f7156:	d102      	bne.n	23f715e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SR_+0x12>
      ::new ((void*)std::addressof(__storage))
 23f7158:	682b      	ldr	r3, [r5, #0]
 23f715a:	6023      	str	r3, [r4, #0]
      }
 23f715c:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
 23f715e:	4620      	mov	r0, r4
 23f7160:	f7ff fdda 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23f7164:	2303      	movs	r3, #3
 23f7166:	7423      	strb	r3, [r4, #16]
 23f7168:	e7f6      	b.n	23f7158 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SR_+0xc>

023f716a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f716a:	b538      	push	{r3, r4, r5, lr}
 23f716c:	6804      	ldr	r4, [r0, #0]
 23f716e:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23f7170:	7c23      	ldrb	r3, [r4, #16]
 23f7172:	2b02      	cmp	r3, #2
 23f7174:	d102      	bne.n	23f717c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SR_+0x12>
      ::new ((void*)std::addressof(__storage))
 23f7176:	682b      	ldr	r3, [r5, #0]
 23f7178:	6023      	str	r3, [r4, #0]
      }
 23f717a:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
 23f717c:	4620      	mov	r0, r4
 23f717e:	f7ff fdcb 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23f7182:	2302      	movs	r3, #2
 23f7184:	7423      	strb	r3, [r4, #16]
 23f7186:	e7f6      	b.n	23f7176 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SR_+0xc>

023f7188 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f7188:	b538      	push	{r3, r4, r5, lr}
 23f718a:	6804      	ldr	r4, [r0, #0]
 23f718c:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23f718e:	7c23      	ldrb	r3, [r4, #16]
 23f7190:	2b01      	cmp	r3, #1
 23f7192:	d102      	bne.n	23f719a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SR_+0x12>
      ::new ((void*)std::addressof(__storage))
 23f7194:	782b      	ldrb	r3, [r5, #0]
 23f7196:	7023      	strb	r3, [r4, #0]
      }
 23f7198:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
 23f719a:	4620      	mov	r0, r4
 23f719c:	f7ff fdbc 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23f71a0:	2301      	movs	r3, #1
 23f71a2:	7423      	strb	r3, [r4, #16]
 23f71a4:	e7f6      	b.n	23f7194 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SR_+0xc>

023f71a6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f71a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f71a8:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f71aa:	4605      	mov	r5, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23f71ac:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f71ae:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23f71b0:	2b06      	cmp	r3, #6
 23f71b2:	d108      	bne.n	23f71c6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_+0x20>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f71b4:	e9d4 2300 	ldrd	r2, r3, [r4]
      __a = _GLIBCXX_MOVE(__b);
 23f71b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f71bc:	e9c4 0100 	strd	r0, r1, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f71c0:	e9c6 2300 	strd	r2, r3, [r6]
      }
 23f71c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23f71c6:	2bff      	cmp	r3, #255	; 0xff
 23f71c8:	d00e      	beq.n	23f71e8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_+0x42>
			auto __tmp(std::move(__rhs_mem));
 23f71ca:	e9d1 6700 	ldrd	r6, r7, [r1]
      _Variant_base& operator=(_Variant_base&&) = default;
 23f71ce:	6840      	ldr	r0, [r0, #4]
 23f71d0:	4621      	mov	r1, r4
 23f71d2:	f7ff f97b 	bl	23f64cc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f71d6:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
 23f71d8:	4620      	mov	r0, r4
 23f71da:	f7ff fd9d 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23f71de:	2306      	movs	r3, #6
        ::new (__storage)
 23f71e0:	e9c4 6700 	strd	r6, r7, [r4]
	  this->_M_index = __rhs_index;
 23f71e4:	7423      	strb	r3, [r4, #16]
 23f71e6:	e7ed      	b.n	23f71c4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_+0x1e>
	  this->_M_reset();
 23f71e8:	4620      	mov	r0, r4
 23f71ea:	f7ff fd95 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23f71ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 23f71f2:	e9c4 2300 	strd	r2, r3, [r4]
	  this->_M_index = __rhs_index;
 23f71f6:	2306      	movs	r3, #6
 23f71f8:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23f71fa:	6868      	ldr	r0, [r5, #4]
 23f71fc:	f7ff fd8c 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23f7200:	e7e0      	b.n	23f71c4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_+0x1e>

023f7202 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f7202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f7204:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f7206:	4605      	mov	r5, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23f7208:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f720a:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23f720c:	2b05      	cmp	r3, #5
 23f720e:	d108      	bne.n	23f7222 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_+0x20>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7210:	e9d4 2300 	ldrd	r2, r3, [r4]
      __a = _GLIBCXX_MOVE(__b);
 23f7214:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f7218:	e9c4 0100 	strd	r0, r1, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f721c:	e9c6 2300 	strd	r2, r3, [r6]
      }
 23f7220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23f7222:	2bff      	cmp	r3, #255	; 0xff
 23f7224:	d00e      	beq.n	23f7244 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_+0x42>
			auto __tmp(std::move(__rhs_mem));
 23f7226:	e9d1 6700 	ldrd	r6, r7, [r1]
      _Variant_base& operator=(_Variant_base&&) = default;
 23f722a:	6840      	ldr	r0, [r0, #4]
 23f722c:	4621      	mov	r1, r4
 23f722e:	f7ff f94d 	bl	23f64cc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f7232:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
 23f7234:	4620      	mov	r0, r4
 23f7236:	f7ff fd6f 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23f723a:	2305      	movs	r3, #5
        ::new (__storage)
 23f723c:	e9c4 6700 	strd	r6, r7, [r4]
	  this->_M_index = __rhs_index;
 23f7240:	7423      	strb	r3, [r4, #16]
 23f7242:	e7ed      	b.n	23f7220 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_+0x1e>
	  this->_M_reset();
 23f7244:	4620      	mov	r0, r4
 23f7246:	f7ff fd67 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23f724a:	e9d6 2300 	ldrd	r2, r3, [r6]
 23f724e:	e9c4 2300 	strd	r2, r3, [r4]
	  this->_M_index = __rhs_index;
 23f7252:	2305      	movs	r3, #5
 23f7254:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23f7256:	6868      	ldr	r0, [r5, #4]
 23f7258:	f7ff fd5e 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23f725c:	e7e0      	b.n	23f7220 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_+0x1e>

023f725e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f725e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f7260:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f7262:	4605      	mov	r5, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23f7264:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f7266:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23f7268:	2b04      	cmp	r3, #4
 23f726a:	d108      	bne.n	23f727e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_+0x20>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f726c:	e9d4 2300 	ldrd	r2, r3, [r4]
      __a = _GLIBCXX_MOVE(__b);
 23f7270:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f7274:	e9c4 0100 	strd	r0, r1, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7278:	e9c6 2300 	strd	r2, r3, [r6]
      }
 23f727c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23f727e:	2bff      	cmp	r3, #255	; 0xff
 23f7280:	d00e      	beq.n	23f72a0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_+0x42>
			auto __tmp(std::move(__rhs_mem));
 23f7282:	e9d1 6700 	ldrd	r6, r7, [r1]
      _Variant_base& operator=(_Variant_base&&) = default;
 23f7286:	6840      	ldr	r0, [r0, #4]
 23f7288:	4621      	mov	r1, r4
 23f728a:	f7ff f91f 	bl	23f64cc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f728e:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
 23f7290:	4620      	mov	r0, r4
 23f7292:	f7ff fd41 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23f7296:	2304      	movs	r3, #4
        ::new (__storage)
 23f7298:	e9c4 6700 	strd	r6, r7, [r4]
	  this->_M_index = __rhs_index;
 23f729c:	7423      	strb	r3, [r4, #16]
 23f729e:	e7ed      	b.n	23f727c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_+0x1e>
	  this->_M_reset();
 23f72a0:	4620      	mov	r0, r4
 23f72a2:	f7ff fd39 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23f72a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 23f72aa:	e9c4 2300 	strd	r2, r3, [r4]
	  this->_M_index = __rhs_index;
 23f72ae:	2304      	movs	r3, #4
 23f72b0:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23f72b2:	6868      	ldr	r0, [r5, #4]
 23f72b4:	f7ff fd30 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23f72b8:	e7e0      	b.n	23f727c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_+0x1e>

023f72ba <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f72ba:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f72bc:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f72be:	4606      	mov	r6, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23f72c0:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f72c2:	460d      	mov	r5, r1
		if (this->index() == __rhs_index)
 23f72c4:	2b09      	cmp	r3, #9
 23f72c6:	d10d      	bne.n	23f72e4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_+0x2a>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f72c8:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f72ca:	680a      	ldr	r2, [r1, #0]
 23f72cc:	6022      	str	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f72ce:	600b      	str	r3, [r1, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f72d0:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f72d2:	684a      	ldr	r2, [r1, #4]
 23f72d4:	6062      	str	r2, [r4, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f72d6:	604b      	str	r3, [r1, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f72d8:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f72da:	688a      	ldr	r2, [r1, #8]
 23f72dc:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f72de:	608b      	str	r3, [r1, #8]
      }
 23f72e0:	b004      	add	sp, #16
 23f72e2:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23f72e4:	2bff      	cmp	r3, #255	; 0xff
 23f72e6:	d014      	beq.n	23f7312 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_+0x58>
			auto __tmp(std::move(__rhs_mem));
 23f72e8:	a801      	add	r0, sp, #4
 23f72ea:	f7ff fb2f 	bl	23f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
      _Variant_base& operator=(_Variant_base&&) = default;
 23f72ee:	e9d6 1000 	ldrd	r1, r0, [r6]
 23f72f2:	f7ff f8eb 	bl	23f64cc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f72f6:	6834      	ldr	r4, [r6, #0]
	  this->_M_reset();
 23f72f8:	4620      	mov	r0, r4
 23f72fa:	f7ff fd0d 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23f72fe:	4620      	mov	r0, r4
 23f7300:	a901      	add	r1, sp, #4
 23f7302:	f7ff fb23 	bl	23f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  this->_M_index = __rhs_index;
 23f7306:	2309      	movs	r3, #9
			auto __tmp(std::move(__rhs_mem));
 23f7308:	a801      	add	r0, sp, #4
	  this->_M_index = __rhs_index;
 23f730a:	7423      	strb	r3, [r4, #16]
			auto __tmp(std::move(__rhs_mem));
 23f730c:	f7ff fd83 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
 23f7310:	e7e6      	b.n	23f72e0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_+0x26>
	  this->_M_reset();
 23f7312:	4620      	mov	r0, r4
 23f7314:	f7ff fd00 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23f7318:	4629      	mov	r1, r5
 23f731a:	4620      	mov	r0, r4
 23f731c:	f7ff fb16 	bl	23f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  this->_M_index = __rhs_index;
 23f7320:	2309      	movs	r3, #9
 23f7322:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23f7324:	6870      	ldr	r0, [r6, #4]
 23f7326:	f7ff fcf7 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23f732a:	e7d9      	b.n	23f72e0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_+0x26>

023f732c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f732c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f732e:	6805      	ldr	r5, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f7330:	4604      	mov	r4, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23f7332:	7c2b      	ldrb	r3, [r5, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f7334:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23f7336:	2b08      	cmp	r3, #8
 23f7338:	d110      	bne.n	23f735c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_+0x30>
 23f733a:	4629      	mov	r1, r5
 23f733c:	a801      	add	r0, sp, #4
 23f733e:	f7ff fae1 	bl	23f6904 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 23f7342:	4631      	mov	r1, r6
 23f7344:	4628      	mov	r0, r5
 23f7346:	f7ff faec 	bl	23f6922 <_ZN8particle6BufferaSEOS0_.isra.0>
      __b = _GLIBCXX_MOVE(__tmp);
 23f734a:	4630      	mov	r0, r6
 23f734c:	a901      	add	r1, sp, #4
 23f734e:	f7ff fae8 	bl	23f6922 <_ZN8particle6BufferaSEOS0_.isra.0>
    ::free(ptr);
 23f7352:	9801      	ldr	r0, [sp, #4]
 23f7354:	f001 fc96 	bl	23f8c84 <free>
      }
 23f7358:	b004      	add	sp, #16
 23f735a:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23f735c:	2bff      	cmp	r3, #255	; 0xff
 23f735e:	d011      	beq.n	23f7384 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_+0x58>
 23f7360:	a801      	add	r0, sp, #4
 23f7362:	f7ff facf 	bl	23f6904 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
      _Variant_base& operator=(_Variant_base&&) = default;
 23f7366:	e9d4 1000 	ldrd	r1, r0, [r4]
 23f736a:	f7ff f8af 	bl	23f64cc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f736e:	6824      	ldr	r4, [r4, #0]
	  this->_M_reset();
 23f7370:	4620      	mov	r0, r4
 23f7372:	f7ff fcd1 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f7376:	4620      	mov	r0, r4
 23f7378:	a901      	add	r1, sp, #4
 23f737a:	f7ff fac3 	bl	23f6904 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
	  this->_M_index = __rhs_index;
 23f737e:	2308      	movs	r3, #8
 23f7380:	7423      	strb	r3, [r4, #16]
 23f7382:	e7e6      	b.n	23f7352 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_+0x26>
	  this->_M_reset();
 23f7384:	4628      	mov	r0, r5
 23f7386:	f7ff fcc7 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f738a:	4631      	mov	r1, r6
 23f738c:	4628      	mov	r0, r5
 23f738e:	f7ff fab9 	bl	23f6904 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
	  this->_M_index = __rhs_index;
 23f7392:	2308      	movs	r3, #8
 23f7394:	742b      	strb	r3, [r5, #16]
			__rhs._M_reset();
 23f7396:	6860      	ldr	r0, [r4, #4]
 23f7398:	f7ff fcbe 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23f739c:	e7dc      	b.n	23f7358 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_+0x2c>

023f739e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f739e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f73a0:	6805      	ldr	r5, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f73a2:	4604      	mov	r4, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23f73a4:	7c2b      	ldrb	r3, [r5, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f73a6:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23f73a8:	2b07      	cmp	r3, #7
 23f73aa:	d110      	bne.n	23f73ce <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_+0x30>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f73ac:	4629      	mov	r1, r5
 23f73ae:	4668      	mov	r0, sp
 23f73b0:	f003 fe8b 	bl	23fb0ca <_ZN6StringC1EOS_>
      __a = _GLIBCXX_MOVE(__b);
 23f73b4:	4631      	mov	r1, r6
 23f73b6:	4628      	mov	r0, r5
 23f73b8:	f003 feac 	bl	23fb114 <_ZN6StringaSEOS_>
      __b = _GLIBCXX_MOVE(__tmp);
 23f73bc:	4669      	mov	r1, sp
 23f73be:	4630      	mov	r0, r6
 23f73c0:	f003 fea8 	bl	23fb114 <_ZN6StringaSEOS_>
			auto __tmp(std::move(__rhs_mem));
 23f73c4:	4668      	mov	r0, sp
 23f73c6:	f003 fdf7 	bl	23fafb8 <_ZN6StringD1Ev>
      }
 23f73ca:	b004      	add	sp, #16
 23f73cc:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23f73ce:	2bff      	cmp	r3, #255	; 0xff
 23f73d0:	d011      	beq.n	23f73f6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_+0x58>
			auto __tmp(std::move(__rhs_mem));
 23f73d2:	4668      	mov	r0, sp
 23f73d4:	f003 fe79 	bl	23fb0ca <_ZN6StringC1EOS_>
      _Variant_base& operator=(_Variant_base&&) = default;
 23f73d8:	e9d4 1000 	ldrd	r1, r0, [r4]
 23f73dc:	f7ff f876 	bl	23f64cc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f73e0:	6824      	ldr	r4, [r4, #0]
	  this->_M_reset();
 23f73e2:	4620      	mov	r0, r4
 23f73e4:	f7ff fc98 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23f73e8:	4669      	mov	r1, sp
 23f73ea:	4620      	mov	r0, r4
 23f73ec:	f003 fe6d 	bl	23fb0ca <_ZN6StringC1EOS_>
	  this->_M_index = __rhs_index;
 23f73f0:	2307      	movs	r3, #7
 23f73f2:	7423      	strb	r3, [r4, #16]
 23f73f4:	e7e6      	b.n	23f73c4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_+0x26>
	  this->_M_reset();
 23f73f6:	4628      	mov	r0, r5
 23f73f8:	f7ff fc8e 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23f73fc:	4631      	mov	r1, r6
 23f73fe:	4628      	mov	r0, r5
 23f7400:	f003 fe63 	bl	23fb0ca <_ZN6StringC1EOS_>
	  this->_M_index = __rhs_index;
 23f7404:	2307      	movs	r3, #7
 23f7406:	742b      	strb	r3, [r5, #16]
			__rhs._M_reset();
 23f7408:	6860      	ldr	r0, [r4, #4]
 23f740a:	f7ff fc85 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23f740e:	e7dc      	b.n	23f73ca <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_+0x2c>

023f7410 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>:
    get(variant<_Types...>& __v)
 23f7410:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23f7412:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
 23f7414:	2b0a      	cmp	r3, #10
 23f7416:	d004      	beq.n	23f7422 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23f7418:	3bff      	subs	r3, #255	; 0xff
 23f741a:	4258      	negs	r0, r3
 23f741c:	4158      	adcs	r0, r3
 23f741e:	f7ff f960 	bl	23f66e2 <_ZSt26__throw_bad_variant_accessb>
    }
 23f7422:	bd08      	pop	{r3, pc}

023f7424 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f7424:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f7426:	6806      	ldr	r6, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f7428:	4605      	mov	r5, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23f742a:	7c33      	ldrb	r3, [r6, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f742c:	460c      	mov	r4, r1
		if (this->index() == __rhs_index)
 23f742e:	2b0a      	cmp	r3, #10
 23f7430:	d110      	bne.n	23f7454 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_+0x30>
		      std::get<__rhs_index>(*this);
 23f7432:	4630      	mov	r0, r6
 23f7434:	f7ff ffec 	bl	23f7410 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
      __a = _GLIBCXX_MOVE(__b);
 23f7438:	6822      	ldr	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f743a:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f743c:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f743e:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7440:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f7442:	6862      	ldr	r2, [r4, #4]
 23f7444:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7446:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7448:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f744a:	68a2      	ldr	r2, [r4, #8]
 23f744c:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f744e:	60a3      	str	r3, [r4, #8]
      }
 23f7450:	b004      	add	sp, #16
 23f7452:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23f7454:	2bff      	cmp	r3, #255	; 0xff
 23f7456:	d014      	beq.n	23f7482 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_+0x5e>
			auto __tmp(std::move(__rhs_mem));
 23f7458:	4668      	mov	r0, sp
 23f745a:	f7ff fa86 	bl	23f696a <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
      _Variant_base& operator=(_Variant_base&&) = default;
 23f745e:	e9d5 1000 	ldrd	r1, r0, [r5]
 23f7462:	f7ff f833 	bl	23f64cc <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23f7466:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
 23f7468:	4620      	mov	r0, r4
 23f746a:	f7ff fc55 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23f746e:	4669      	mov	r1, sp
 23f7470:	4620      	mov	r0, r4
 23f7472:	f7ff fa7a 	bl	23f696a <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  this->_M_index = __rhs_index;
 23f7476:	230a      	movs	r3, #10
 23f7478:	4668      	mov	r0, sp
 23f747a:	7423      	strb	r3, [r4, #16]
 23f747c:	f7ff fc68 	bl	23f6d50 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
 23f7480:	e7e6      	b.n	23f7450 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_+0x2c>
	  this->_M_reset();
 23f7482:	4630      	mov	r0, r6
 23f7484:	f7ff fc48 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23f7488:	4621      	mov	r1, r4
 23f748a:	4630      	mov	r0, r6
 23f748c:	f7ff fa6d 	bl	23f696a <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  this->_M_index = __rhs_index;
 23f7490:	230a      	movs	r3, #10
 23f7492:	7433      	strb	r3, [r6, #16]
			__rhs._M_reset();
 23f7494:	6868      	ldr	r0, [r5, #4]
 23f7496:	f7ff fc3f 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23f749a:	e7d9      	b.n	23f7450 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_+0x2c>

023f749c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f749c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 23f749e:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f74a0:	4605      	mov	r5, r0
		if (this->_M_index == __rhs_index)
 23f74a2:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f74a4:	460e      	mov	r6, r1
		if (this->_M_index == __rhs_index)
 23f74a6:	2b0a      	cmp	r3, #10
 23f74a8:	d114      	bne.n	23f74d4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SR_+0x38>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23f74aa:	4668      	mov	r0, sp
 23f74ac:	f7ff fa5d 	bl	23f696a <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 23f74b0:	682b      	ldr	r3, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f74b2:	9900      	ldr	r1, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f74b4:	681a      	ldr	r2, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f74b6:	6019      	str	r1, [r3, #0]
 23f74b8:	9901      	ldr	r1, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f74ba:	9200      	str	r2, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f74bc:	685a      	ldr	r2, [r3, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f74be:	6059      	str	r1, [r3, #4]
 23f74c0:	9902      	ldr	r1, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f74c2:	9201      	str	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f74c4:	689a      	ldr	r2, [r3, #8]
 23f74c6:	4668      	mov	r0, sp
      __a = _GLIBCXX_MOVE(__b);
 23f74c8:	6099      	str	r1, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f74ca:	9202      	str	r2, [sp, #8]
 23f74cc:	f7ff fc40 	bl	23f6d50 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
      }
 23f74d0:	b004      	add	sp, #16
 23f74d2:	bd70      	pop	{r4, r5, r6, pc}
	      this->_M_reset();
 23f74d4:	4620      	mov	r0, r4
 23f74d6:	f7ff fc1f 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23f74da:	230a      	movs	r3, #10
      ::new ((void*)std::addressof(__storage))
 23f74dc:	4631      	mov	r1, r6
 23f74de:	4620      	mov	r0, r4
      __v._M_index = _Np;
 23f74e0:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
 23f74e2:	f7ff fa42 	bl	23f696a <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  return std::get<_Np>(*this);
 23f74e6:	4620      	mov	r0, r4
 23f74e8:	f7ff ff92 	bl	23f7410 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
      }
 23f74ec:	e7f0      	b.n	23f74d0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SR_+0x34>

023f74ee <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>:
    T& as() {
 23f74ee:	b510      	push	{r4, lr}
        if (!is<T>()) {
 23f74f0:	7c03      	ldrb	r3, [r0, #16]
    T& as() {
 23f74f2:	4604      	mov	r4, r0
        if (!is<T>()) {
 23f74f4:	2b0a      	cmp	r3, #10
    T& as() {
 23f74f6:	b088      	sub	sp, #32
        if (!is<T>()) {
 23f74f8:	d01f      	beq.n	23f753a <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v+0x4c>
            v_ = to<T>();
 23f74fa:	4601      	mov	r1, r0
 23f74fc:	4668      	mov	r0, sp
 23f74fe:	f7ff fa7b 	bl	23f69f8 <_ZNK8particle7Variant2toINS_3MapI6StringS0_St4lessIS3_EEEEET_v>
	  if (index() == __index)
 23f7502:	7c23      	ldrb	r3, [r4, #16]
 23f7504:	2b0a      	cmp	r3, #10
 23f7506:	d11d      	bne.n	23f7544 <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v+0x56>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 23f7508:	4669      	mov	r1, sp
 23f750a:	a804      	add	r0, sp, #16
 23f750c:	f7ff fa2d 	bl	23f696a <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
 23f7510:	4620      	mov	r0, r4
 23f7512:	f7ff ff7d 	bl	23f7410 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
      __a = _GLIBCXX_MOVE(__b);
 23f7516:	9a04      	ldr	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7518:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f751a:	6002      	str	r2, [r0, #0]
 23f751c:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 23f751e:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7520:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f7522:	6042      	str	r2, [r0, #4]
 23f7524:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7526:	9305      	str	r3, [sp, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7528:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f752a:	6082      	str	r2, [r0, #8]
 23f752c:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 23f752e:	9306      	str	r3, [sp, #24]
 23f7530:	f7ff fc0e 	bl	23f6d50 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
 23f7534:	4668      	mov	r0, sp
 23f7536:	f7ff fc0b 	bl	23f6d50 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 23f753a:	4620      	mov	r0, r4
 23f753c:	f7ff ff68 	bl	23f7410 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
    }
 23f7540:	b008      	add	sp, #32
 23f7542:	bd10      	pop	{r4, pc}
	      this->_M_reset();
 23f7544:	4620      	mov	r0, r4
 23f7546:	f7ff fbe7 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23f754a:	230a      	movs	r3, #10
      ::new ((void*)std::addressof(__storage))
 23f754c:	4669      	mov	r1, sp
 23f754e:	4620      	mov	r0, r4
      __v._M_index = _Np;
 23f7550:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
 23f7552:	f7ff fa0a 	bl	23f696a <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  return std::get<_Np>(*this);
 23f7556:	4620      	mov	r0, r4
 23f7558:	f7ff ff5a 	bl	23f7410 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
 23f755c:	e7ea      	b.n	23f7534 <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v+0x46>
	...

023f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>:
      swap(variant& __rhs)
 23f7560:	b507      	push	{r0, r1, r2, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23f7562:	f991 3010 	ldrsb.w	r3, [r1, #16]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23f7566:	4a05      	ldr	r2, [pc, #20]	; (23f757c <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_+0x1c>)
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 23f7568:	3301      	adds	r3, #1
	__detail::__variant::__raw_idx_visit(
 23f756a:	e9cd 0100 	strd	r0, r1, [sp]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23f756e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23f7572:	4668      	mov	r0, sp
 23f7574:	4798      	blx	r3
      }
 23f7576:	b003      	add	sp, #12
 23f7578:	f85d fb04 	ldr.w	pc, [sp], #4
 23f757c:	023ff4b8 	.word	0x023ff4b8

023f7580 <_ZN18DeviceConfigLedger5setupEv>:
void DeviceConfigLedger::setup() {
 23f7580:	b530      	push	{r4, r5, lr}
    if (configDefaultLedgerEnabled) {
 23f7582:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
void DeviceConfigLedger::setup() {
 23f7586:	4604      	mov	r4, r0
 23f7588:	b087      	sub	sp, #28
    if (configDefaultLedgerEnabled) {
 23f758a:	b323      	cbz	r3, 23f75d6 <_ZN18DeviceConfigLedger5setupEv+0x56>
        configDefaultLedger = Particle.ledger(configDefaultLedgerName);
 23f758c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 23f758e:	4668      	mov	r0, sp
 23f7590:	f001 fc9e 	bl	23f8ed0 <_ZN10CloudClass6ledgerEPKc>
      __a = _GLIBCXX_MOVE(__b);
 23f7594:	9a00      	ldr	r2, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7596:	6f23      	ldr	r3, [r4, #112]	; 0x70
 23f7598:	4668      	mov	r0, sp
      __a = _GLIBCXX_MOVE(__b);
 23f759a:	6722      	str	r2, [r4, #112]	; 0x70
      __b = _GLIBCXX_MOVE(__tmp);
 23f759c:	9300      	str	r3, [sp, #0]
 23f759e:	f7ff f8b4 	bl	23f670a <_ZN8particle6LedgerD1Ev>
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 23f75a2:	4b22      	ldr	r3, [pc, #136]	; (23f762c <_ZN18DeviceConfigLedger5setupEv+0xac>)
 23f75a4:	f104 0570 	add.w	r5, r4, #112	; 0x70
 23f75a8:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f75aa:	4b21      	ldr	r3, [pc, #132]	; (23f7630 <_ZN18DeviceConfigLedger5setupEv+0xb0>)
        configDefaultLedger.onSync([this](Ledger ledger) {
 23f75ac:	4669      	mov	r1, sp
 23f75ae:	4628      	mov	r0, r5
 23f75b0:	9302      	str	r3, [sp, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f75b2:	9400      	str	r4, [sp, #0]
 23f75b4:	f002 fba4 	bl	23f9d00 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE>
    class function<_Res(_ArgTypes...)>
 23f75b8:	4668      	mov	r0, sp
 23f75ba:	f7ff f82e 	bl	23f661a <_ZNSt14_Function_baseD1Ev>
        defaultConfig = configDefaultLedger.get();
 23f75be:	4629      	mov	r1, r5
 23f75c0:	4668      	mov	r0, sp
 23f75c2:	f002 fb0b 	bl	23f9bdc <_ZNK8particle6Ledger3getEv>
    { __lhs.swap(__rhs); }
 23f75c6:	f104 0008 	add.w	r0, r4, #8
 23f75ca:	4669      	mov	r1, sp
 23f75cc:	f7ff ffc8 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23f75d0:	4668      	mov	r0, sp
 23f75d2:	f7ff fba1 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    if (configDeviceLedgerEnabled) {
 23f75d6:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 23f75da:	b323      	cbz	r3, 23f7626 <_ZN18DeviceConfigLedger5setupEv+0xa6>
        configDeviceLedger = Particle.ledger(configDeviceLedgerName);
 23f75dc:	6e21      	ldr	r1, [r4, #96]	; 0x60
 23f75de:	4668      	mov	r0, sp
 23f75e0:	f001 fc76 	bl	23f8ed0 <_ZN10CloudClass6ledgerEPKc>
      __a = _GLIBCXX_MOVE(__b);
 23f75e4:	9a00      	ldr	r2, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f75e6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 23f75e8:	4668      	mov	r0, sp
      __a = _GLIBCXX_MOVE(__b);
 23f75ea:	6762      	str	r2, [r4, #116]	; 0x74
      __b = _GLIBCXX_MOVE(__tmp);
 23f75ec:	9300      	str	r3, [sp, #0]
 23f75ee:	f7ff f88c 	bl	23f670a <_ZN8particle6LedgerD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
 23f75f2:	4b10      	ldr	r3, [pc, #64]	; (23f7634 <_ZN18DeviceConfigLedger5setupEv+0xb4>)
 23f75f4:	f104 0574 	add.w	r5, r4, #116	; 0x74
 23f75f8:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f75fa:	4b0f      	ldr	r3, [pc, #60]	; (23f7638 <_ZN18DeviceConfigLedger5setupEv+0xb8>)
        configDeviceLedger.onSync([this](Ledger ledger) {
 23f75fc:	4669      	mov	r1, sp
 23f75fe:	4628      	mov	r0, r5
 23f7600:	9302      	str	r3, [sp, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f7602:	9400      	str	r4, [sp, #0]
 23f7604:	f002 fb7c 	bl	23f9d00 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE>
    class function<_Res(_ArgTypes...)>
 23f7608:	4668      	mov	r0, sp
 23f760a:	f7ff f806 	bl	23f661a <_ZNSt14_Function_baseD1Ev>
        deviceConfig = configDeviceLedger.get();
 23f760e:	4629      	mov	r1, r5
 23f7610:	4668      	mov	r0, sp
 23f7612:	f002 fae3 	bl	23f9bdc <_ZNK8particle6Ledger3getEv>
    { __lhs.swap(__rhs); }
 23f7616:	f104 0038 	add.w	r0, r4, #56	; 0x38
 23f761a:	4669      	mov	r1, sp
 23f761c:	f7ff ffa0 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23f7620:	4668      	mov	r0, sp
 23f7622:	f7ff fb79 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
 23f7626:	b007      	add	sp, #28
 23f7628:	bd30      	pop	{r4, r5, pc}
 23f762a:	bf00      	nop
 23f762c:	023f763d 	.word	0x023f763d
 23f7630:	023f6515 	.word	0x023f6515
 23f7634:	023f766d 	.word	0x023f766d
 23f7638:	023f6501 	.word	0x023f6501

023f763c <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f763c:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 23f763e:	680b      	ldr	r3, [r1, #0]
 23f7640:	b088      	sub	sp, #32
 23f7642:	9301      	str	r3, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7644:	2300      	movs	r3, #0
 23f7646:	4604      	mov	r4, r0
 23f7648:	600b      	str	r3, [r1, #0]
            defaultConfig = ledger.get();
 23f764a:	a802      	add	r0, sp, #8
 23f764c:	a901      	add	r1, sp, #4
 23f764e:	f002 fac5 	bl	23f9bdc <_ZNK8particle6Ledger3getEv>
        swap(var1.v_, var2.v_);
 23f7652:	6820      	ldr	r0, [r4, #0]
    { __lhs.swap(__rhs); }
 23f7654:	a902      	add	r1, sp, #8
 23f7656:	3008      	adds	r0, #8
 23f7658:	f7ff ff82 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23f765c:	a802      	add	r0, sp, #8
 23f765e:	f7ff fb5b 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f7662:	a801      	add	r0, sp, #4
 23f7664:	f7ff f851 	bl	23f670a <_ZN8particle6LedgerD1Ev>
      }
 23f7668:	b008      	add	sp, #32
 23f766a:	bd10      	pop	{r4, pc}

023f766c <_ZNSt17_Function_handlerIFvN8particle6LedgerEEZN18DeviceConfigLedger5setupEvEUlS1_E0_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f766c:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 23f766e:	680b      	ldr	r3, [r1, #0]
 23f7670:	b088      	sub	sp, #32
 23f7672:	9301      	str	r3, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7674:	2300      	movs	r3, #0
 23f7676:	4604      	mov	r4, r0
 23f7678:	600b      	str	r3, [r1, #0]
            deviceConfig = ledger.get();
 23f767a:	a802      	add	r0, sp, #8
 23f767c:	a901      	add	r1, sp, #4
 23f767e:	f002 faad 	bl	23f9bdc <_ZNK8particle6Ledger3getEv>
 23f7682:	6820      	ldr	r0, [r4, #0]
    { __lhs.swap(__rhs); }
 23f7684:	a902      	add	r1, sp, #8
 23f7686:	3038      	adds	r0, #56	; 0x38
 23f7688:	f7ff ff6a 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23f768c:	a802      	add	r0, sp, #8
 23f768e:	f7ff fb43 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f7692:	a801      	add	r0, sp, #4
 23f7694:	f7ff f839 	bl	23f670a <_ZN8particle6LedgerD1Ev>
      }
 23f7698:	b008      	add	sp, #32
 23f769a:	bd10      	pop	{r4, pc}

023f769c <_ZN8particle7VariantC1EOS0_>:
	_M_index{_Np}
 23f769c:	2300      	movs	r3, #0
    Variant(Variant&& var) :
 23f769e:	b510      	push	{r4, lr}
 23f76a0:	4604      	mov	r4, r0
 23f76a2:	7403      	strb	r3, [r0, #16]
    { __lhs.swap(__rhs); }
 23f76a4:	f7ff ff5c 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
    }
 23f76a8:	4620      	mov	r0, r4
 23f76aa:	bd10      	pop	{r4, pc}

023f76ac <_ZN8particle10LedgerDataC1ENS_7VariantE>:
	_M_index{_Np}
 23f76ac:	2300      	movs	r3, #0
     *
     * If the `Variant` is not a map, empty ledger data is constructed.
     *
     * @param var `Variant` value.
     */
    LedgerData(Variant var) {
 23f76ae:	b510      	push	{r4, lr}
 23f76b0:	7403      	strb	r3, [r0, #16]
        if (var.isMap()) {
 23f76b2:	7c0b      	ldrb	r3, [r1, #16]
    LedgerData(Variant var) {
 23f76b4:	4604      	mov	r4, r0
        if (var.isMap()) {
 23f76b6:	2b0a      	cmp	r3, #10
    LedgerData(Variant var) {
 23f76b8:	b08a      	sub	sp, #40	; 0x28
        if (var.isMap()) {
 23f76ba:	d10c      	bne.n	23f76d6 <_ZN8particle10LedgerDataC1ENS_7VariantE+0x2a>
            v_ = std::move(var);
 23f76bc:	a804      	add	r0, sp, #16
 23f76be:	f7ff ffed 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
    { __lhs.swap(__rhs); }
 23f76c2:	4620      	mov	r0, r4
 23f76c4:	a904      	add	r1, sp, #16
 23f76c6:	f7ff ff4b 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23f76ca:	a804      	add	r0, sp, #16
 23f76cc:	f7ff fb24 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        } else {
            v_ = var.toMap();
        }
    }
 23f76d0:	4620      	mov	r0, r4
 23f76d2:	b00a      	add	sp, #40	; 0x28
 23f76d4:	bd10      	pop	{r4, pc}
        return to<VariantMap>();
 23f76d6:	4668      	mov	r0, sp
 23f76d8:	f7ff f98e 	bl	23f69f8 <_ZNK8particle7Variant2toINS_3MapI6StringS0_St4lessIS3_EEEEET_v>
	  ::new ((void*)std::addressof(_M_storage))
 23f76dc:	4669      	mov	r1, sp
 23f76de:	a804      	add	r0, sp, #16
 23f76e0:	f7ff f943 	bl	23f696a <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	_M_index{_Np}
 23f76e4:	230a      	movs	r3, #10
    { __lhs.swap(__rhs); }
 23f76e6:	4620      	mov	r0, r4
 23f76e8:	a904      	add	r1, sp, #16
	_M_index{_Np}
 23f76ea:	f88d 3020 	strb.w	r3, [sp, #32]
    { __lhs.swap(__rhs); }
 23f76ee:	f7ff ff37 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23f76f2:	a804      	add	r0, sp, #16
 23f76f4:	f7ff fb10 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f76f8:	4668      	mov	r0, sp
 23f76fa:	f7ff fb29 	bl	23f6d50 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
 23f76fe:	e7e7      	b.n	23f76d0 <_ZN8particle10LedgerDataC1ENS_7VariantE+0x24>

023f7700 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_>:
        capacity_(0) {
 23f7700:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f7702:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
 23f7706:	e9c0 3300 	strd	r3, r3, [r0]
 23f770a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f770c:	f8d1 9004 	ldr.w	r9, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f7710:	4606      	mov	r6, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f7712:	4599      	cmp	r9, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f7714:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f7716:	dd57      	ble.n	23f77c8 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xc8>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f7718:	f04f 0a28 	mov.w	sl, #40	; 0x28
    return ::malloc(size);
 23f771c:	fb0a f009 	mul.w	r0, sl, r9
 23f7720:	f001 faa2 	bl	23f8c68 <malloc>
            if (!d) {
 23f7724:	4607      	mov	r7, r0
 23f7726:	2800      	cmp	r0, #0
 23f7728:	d04e      	beq.n	23f77c8 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xc8>
            move(d, data_, data_ + size_);
 23f772a:	e9d6 4500 	ldrd	r4, r5, [r6]
        if (dest > p && dest < end) {
 23f772e:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
 23f7730:	fb0a 4505 	mla	r5, sl, r5, r4
        if (dest > p && dest < end) {
 23f7734:	d919      	bls.n	23f776a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x6a>
 23f7736:	42a8      	cmp	r0, r5
 23f7738:	d218      	bcs.n	23f776c <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x6c>
            --end;
 23f773a:	3d28      	subs	r5, #40	; 0x28
            dest += end - p - 1;
 23f773c:	f1a4 0a28 	sub.w	sl, r4, #40	; 0x28
 23f7740:	1b2c      	subs	r4, r5, r4
 23f7742:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 23f7744:	45aa      	cmp	sl, r5
 23f7746:	d028      	beq.n	23f779a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x9a>
                new(dest) T(std::move(*end));
 23f7748:	b14c      	cbz	r4, 23f775e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x5e>
      constexpr pair(pair&&) = default;		///< Move constructor
 23f774a:	4629      	mov	r1, r5
 23f774c:	4620      	mov	r0, r4
 23f774e:	f003 fcd6 	bl	23fb0fe <_ZN6StringC1ERKS_>
 23f7752:	f105 0110 	add.w	r1, r5, #16
 23f7756:	f104 0010 	add.w	r0, r4, #16
 23f775a:	f7ff ff9f 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
                end->~T();
 23f775e:	4628      	mov	r0, r5
 23f7760:	f7ff faec 	bl	23f6d3c <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
            for (; end != p; --end, --dest) {
 23f7764:	3d28      	subs	r5, #40	; 0x28
 23f7766:	3c28      	subs	r4, #40	; 0x28
 23f7768:	e7ec      	b.n	23f7744 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x44>
        } else if (dest != p) {
 23f776a:	d016      	beq.n	23f779a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x9a>
 23f776c:	46ba      	mov	sl, r7
            for (; p != end; ++p, ++dest) {
 23f776e:	42a5      	cmp	r5, r4
 23f7770:	d013      	beq.n	23f779a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x9a>
                new(dest) T(std::move(*p));
 23f7772:	f1ba 0f00 	cmp.w	sl, #0
 23f7776:	d009      	beq.n	23f778c <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x8c>
 23f7778:	4621      	mov	r1, r4
 23f777a:	4650      	mov	r0, sl
 23f777c:	f003 fcbf 	bl	23fb0fe <_ZN6StringC1ERKS_>
 23f7780:	f104 0110 	add.w	r1, r4, #16
 23f7784:	f10a 0010 	add.w	r0, sl, #16
 23f7788:	f7ff ff88 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
                p->~T();
 23f778c:	4620      	mov	r0, r4
 23f778e:	f7ff fad5 	bl	23f6d3c <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
            for (; p != end; ++p, ++dest) {
 23f7792:	3428      	adds	r4, #40	; 0x28
 23f7794:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 23f7798:	e7e9      	b.n	23f776e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x6e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f779a:	2528      	movs	r5, #40	; 0x28
    ::free(ptr);
 23f779c:	6830      	ldr	r0, [r6, #0]
 23f779e:	f001 fa71 	bl	23f8c84 <free>
        data_ = d;
 23f77a2:	6037      	str	r7, [r6, #0]
        capacity_ = n;
 23f77a4:	f8c6 9008 	str.w	r9, [r6, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f77a8:	e9d8 4300 	ldrd	r4, r3, [r8]
 23f77ac:	fb05 4503 	mla	r5, r5, r3, r4
        for (; it != end; ++it, ++dest) {
 23f77b0:	42a5      	cmp	r5, r4
 23f77b2:	d006      	beq.n	23f77c2 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xc2>
            new(dest) T(*it);
 23f77b4:	4621      	mov	r1, r4
 23f77b6:	4638      	mov	r0, r7
 23f77b8:	f7ff f8fa 	bl	23f69b0 <_ZNSt4pairIK6StringN8particle7VariantEEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
 23f77bc:	3428      	adds	r4, #40	; 0x28
 23f77be:	3728      	adds	r7, #40	; 0x28
 23f77c0:	e7f6      	b.n	23f77b0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xb0>
        size_ = vector.size_;
 23f77c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23f77c6:	6073      	str	r3, [r6, #4]
}
 23f77c8:	4630      	mov	r0, r6
 23f77ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f77ce <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESE_SO_>:
        ok = true;
 23f77ce:	2301      	movs	r3, #1
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f77d0:	b510      	push	{r4, lr}
 23f77d2:	4604      	mov	r4, r0
 23f77d4:	700b      	strb	r3, [r1, #0]
            cmp_(map.cmp_) {
 23f77d6:	4611      	mov	r1, r2
 23f77d8:	f7ff ff92 	bl	23f7700 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_>
      }
 23f77dc:	4620      	mov	r0, r4
 23f77de:	bd10      	pop	{r4, pc}

023f77e0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESU_SY_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f77e0:	b508      	push	{r3, lr}
 23f77e2:	6800      	ldr	r0, [r0, #0]
 23f77e4:	f7ff ff8c 	bl	23f7700 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_>
      }
 23f77e8:	bd08      	pop	{r3, pc}
	...

023f77ec <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 23f77ec:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 23f77f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f77f4:	4688      	mov	r8, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f77f6:	e9d0 7900 	ldrd	r7, r9, [r0]
 23f77fa:	4611      	mov	r1, r2
 23f77fc:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
 23f7800:	ebb3 1f22 	cmp.w	r3, r2, asr #4
 23f7804:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f7806:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 23f780a:	d102      	bne.n	23f7812 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 23f780c:	481b      	ldr	r0, [pc, #108]	; (23f787c <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x90>)
 23f780e:	f005 fbaf 	bl	23fcf70 <_ZSt20__throw_length_errorPKc>
 23f7812:	2c01      	cmp	r4, #1
 23f7814:	4622      	mov	r2, r4
 23f7816:	bf38      	it	cc
 23f7818:	2201      	movcc	r2, #1
 23f781a:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 23f781c:	eba8 0a07 	sub.w	sl, r8, r7

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23f7820:	d228      	bcs.n	23f7874 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23f7822:	b34c      	cbz	r4, 23f7878 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>
 23f7824:	429c      	cmp	r4, r3
 23f7826:	bf28      	it	cs
 23f7828:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23f782a:	0120      	lsls	r0, r4, #4
 23f782c:	9101      	str	r1, [sp, #4]
 23f782e:	f7fe fbaa 	bl	23f5f86 <_Znwj>
 23f7832:	4605      	mov	r5, r0
 23f7834:	9901      	ldr	r1, [sp, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23f7836:	eb15 000a 	adds.w	r0, r5, sl
 23f783a:	d001      	beq.n	23f7840 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x54>
 23f783c:	f7ff f853 	bl	23f68e6 <_ZNSt8functionIFvvEEC1ERKS1_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 23f7840:	4641      	mov	r1, r8
 23f7842:	462a      	mov	r2, r5
 23f7844:	4638      	mov	r0, r7
 23f7846:	f7fe fef1 	bl	23f662c <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
 23f784a:	4649      	mov	r1, r9
 23f784c:	f100 0210 	add.w	r2, r0, #16
 23f7850:	4640      	mov	r0, r8
 23f7852:	f7fe feeb 	bl	23f662c <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
 23f7856:	4680      	mov	r8, r0
	if (__p)
 23f7858:	b127      	cbz	r7, 23f7864 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 23f785a:	68b1      	ldr	r1, [r6, #8]
	::operator delete(__p
 23f785c:	4638      	mov	r0, r7
 23f785e:	1bc9      	subs	r1, r1, r7
 23f7860:	f7fe fb97 	bl	23f5f92 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23f7864:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
 23f7868:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23f786c:	60b4      	str	r4, [r6, #8]
    }
 23f786e:	b002      	add	sp, #8
 23f7870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23f7874:	461c      	mov	r4, r3
 23f7876:	e7d8      	b.n	23f782a <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23f7878:	4625      	mov	r5, r4
 23f787a:	e7dc      	b.n	23f7836 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4a>
 23f787c:	023ff305 	.word	0x023ff305

023f7880 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23f7880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
 23f7882:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23f7884:	4605      	mov	r5, r0
        if (n > 0) {
 23f7886:	dd13      	ble.n	23f78b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f7888:	2714      	movs	r7, #20
    return ::malloc(size);
 23f788a:	fb07 f006 	mul.w	r0, r7, r6
 23f788e:	f001 f9eb 	bl	23f8c68 <malloc>
            if (!d) {
 23f7892:	4604      	mov	r4, r0
 23f7894:	b158      	cbz	r0, 23f78ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
 23f7896:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f789a:	fb07 1202 	mla	r2, r7, r2, r1
 23f789e:	f7fe fc13 	bl	23f60c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f78a2:	6828      	ldr	r0, [r5, #0]
 23f78a4:	f001 f9ee 	bl	23f8c84 <free>
        return true;
 23f78a8:	2001      	movs	r0, #1
        data_ = d;
 23f78aa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23f78ac:	60ae      	str	r6, [r5, #8]
    }
 23f78ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
 23f78b0:	2400      	movs	r4, #0
 23f78b2:	e7f6      	b.n	23f78a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>

023f78b4 <_ZN26DeviceInfoLedgerLogHandlerC1E8LogLevelN5spark6VectorINS1_17LogCategoryFilterENS1_16DefaultAllocatorEEE>:
DeviceInfoLedgerLogHandler::DeviceInfoLedgerLogHandler(LogLevel level, LogCategoryFilters filters) : StreamLogHandler(*this, level, filters) {
 23f78b4:	b570      	push	{r4, r5, r6, lr}
 23f78b6:	4604      	mov	r4, r0
        filter_(level, filters) {
 23f78b8:	4625      	mov	r5, r4
 23f78ba:	460e      	mov	r6, r1
 23f78bc:	b08a      	sub	sp, #40	; 0x28
 23f78be:	4611      	mov	r1, r2
 23f78c0:	a801      	add	r0, sp, #4
 23f78c2:	f7fe fc2f 	bl	23f6124 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23f78c6:	a901      	add	r1, sp, #4
 23f78c8:	a804      	add	r0, sp, #16
 23f78ca:	f7fe fc2b 	bl	23f6124 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f78ce:	4b12      	ldr	r3, [pc, #72]	; (23f7918 <_ZN26DeviceInfoLedgerLogHandlerC1E8LogLevelN5spark6VectorINS1_17LogCategoryFilterENS1_16DefaultAllocatorEEE+0x64>)
 23f78d0:	a904      	add	r1, sp, #16
 23f78d2:	f845 3b04 	str.w	r3, [r5], #4
 23f78d6:	a807      	add	r0, sp, #28
 23f78d8:	f7fe fc24 	bl	23f6124 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f78dc:	4631      	mov	r1, r6
 23f78de:	aa07      	add	r2, sp, #28
 23f78e0:	4628      	mov	r0, r5
 23f78e2:	f002 ff0b 	bl	23fa6fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f78e6:	a807      	add	r0, sp, #28
 23f78e8:	f7fe fbdb 	bl	23f60a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f78ec:	a804      	add	r0, sp, #16
 23f78ee:	f7fe fbd8 	bl	23f60a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f78f2:	4623      	mov	r3, r4
 23f78f4:	4a09      	ldr	r2, [pc, #36]	; (23f791c <_ZN26DeviceInfoLedgerLogHandlerC1E8LogLevelN5spark6VectorINS1_17LogCategoryFilterENS1_16DefaultAllocatorEEE+0x68>)
 23f78f6:	a801      	add	r0, sp, #4
 23f78f8:	f843 2b24 	str.w	r2, [r3], #36
 23f78fc:	6223      	str	r3, [r4, #32]
 23f78fe:	f7fe fbd0 	bl	23f60a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>

  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
 23f7902:	2300      	movs	r3, #0
}
 23f7904:	4620      	mov	r0, r4
 23f7906:	62a3      	str	r3, [r4, #40]	; 0x28
DeviceInfoLedgerLogHandler::DeviceInfoLedgerLogHandler(LogLevel level, LogCategoryFilters filters) : StreamLogHandler(*this, level, filters) {
 23f7908:	4b05      	ldr	r3, [pc, #20]	; (23f7920 <_ZN26DeviceInfoLedgerLogHandlerC1E8LogLevelN5spark6VectorINS1_17LogCategoryFilterENS1_16DefaultAllocatorEEE+0x6c>)
 23f790a:	f103 0208 	add.w	r2, r3, #8
 23f790e:	3324      	adds	r3, #36	; 0x24
 23f7910:	6022      	str	r2, [r4, #0]
 23f7912:	6263      	str	r3, [r4, #36]	; 0x24
}
 23f7914:	b00a      	add	sp, #40	; 0x28
 23f7916:	bd70      	pop	{r4, r5, r6, pc}
 23f7918:	023ff240 	.word	0x023ff240
 23f791c:	023ffa6c 	.word	0x023ffa6c
 23f7920:	023ff7ac 	.word	0x023ff7ac

023f7924 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23f7924:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f7926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f7928:	4604      	mov	r4, r0
 23f792a:	460d      	mov	r5, r1
 23f792c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f792e:	d914      	bls.n	23f795a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23f7930:	4290      	cmp	r0, r2
 23f7932:	d213      	bcs.n	23f795c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23f7934:	f1a2 0618 	sub.w	r6, r2, #24
            dest += end - p - 1;
 23f7938:	1a75      	subs	r5, r6, r1
 23f793a:	f1a1 0718 	sub.w	r7, r1, #24
 23f793e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f7940:	42b7      	cmp	r7, r6
 23f7942:	d018      	beq.n	23f7976 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23f7944:	b11c      	cbz	r4, 23f794e <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23f7946:	4631      	mov	r1, r6
 23f7948:	4620      	mov	r0, r4
 23f794a:	f7ff fea7 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
      { _M_reset(); }
 23f794e:	4630      	mov	r0, r6
 23f7950:	f7ff f9e2 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            for (; end != p; --end, --dest) {
 23f7954:	3e18      	subs	r6, #24
 23f7956:	3c18      	subs	r4, #24
 23f7958:	e7f2      	b.n	23f7940 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23f795a:	d00c      	beq.n	23f7976 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23f795c:	42b5      	cmp	r5, r6
 23f795e:	d00a      	beq.n	23f7976 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23f7960:	b11c      	cbz	r4, 23f796a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23f7962:	4629      	mov	r1, r5
 23f7964:	4620      	mov	r0, r4
 23f7966:	f7ff fe99 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23f796a:	4628      	mov	r0, r5
 23f796c:	f7ff f9d4 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            for (; p != end; ++p, ++dest) {
 23f7970:	3518      	adds	r5, #24
 23f7972:	3418      	adds	r4, #24
 23f7974:	e7f2      	b.n	23f795c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23f7976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f7978 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23f7978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
 23f797a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23f797c:	4605      	mov	r5, r0
        if (n > 0) {
 23f797e:	dd13      	ble.n	23f79a8 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f7980:	2718      	movs	r7, #24
    return ::malloc(size);
 23f7982:	fb07 f006 	mul.w	r0, r7, r6
 23f7986:	f001 f96f 	bl	23f8c68 <malloc>
            if (!d) {
 23f798a:	4604      	mov	r4, r0
 23f798c:	b158      	cbz	r0, 23f79a6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
 23f798e:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f7992:	fb07 1202 	mla	r2, r7, r2, r1
 23f7996:	f7ff ffc5 	bl	23f7924 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23f799a:	6828      	ldr	r0, [r5, #0]
 23f799c:	f001 f972 	bl	23f8c84 <free>
        return true;
 23f79a0:	2001      	movs	r0, #1
        data_ = d;
 23f79a2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23f79a4:	60ae      	str	r6, [r5, #8]
    }
 23f79a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
 23f79a8:	2400      	movs	r4, #0
 23f79aa:	e7f6      	b.n	23f799a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

023f79ac <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23f79ac:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f79ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f79b2:	e9c0 3300 	strd	r3, r3, [r0]
 23f79b6:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f79b8:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f79ba:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f79bc:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f79be:	4299      	cmp	r1, r3
 23f79c0:	dd15      	ble.n	23f79ee <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x42>
 23f79c2:	f7ff ffd9 	bl	23f7978 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23f79c6:	b190      	cbz	r0, 23f79ee <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x42>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f79c8:	e9d5 6300 	ldrd	r6, r3, [r5]
 23f79cc:	f04f 0818 	mov.w	r8, #24
 23f79d0:	fb08 6803 	mla	r8, r8, r3, r6
 23f79d4:	6827      	ldr	r7, [r4, #0]
        for (; it != end; ++it, ++dest) {
 23f79d6:	45b0      	cmp	r8, r6
 23f79d8:	d007      	beq.n	23f79ea <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
            new(dest) T(*it);
 23f79da:	b11f      	cbz	r7, 23f79e4 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x38>
      _Move_ctor_base(const _Move_ctor_base&) = default;
 23f79dc:	4631      	mov	r1, r6
 23f79de:	4638      	mov	r0, r7
 23f79e0:	f7fe ffd2 	bl	23f6988 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
        for (; it != end; ++it, ++dest) {
 23f79e4:	3618      	adds	r6, #24
 23f79e6:	3718      	adds	r7, #24
 23f79e8:	e7f5      	b.n	23f79d6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x2a>
        size_ = vector.size_;
 23f79ea:	686b      	ldr	r3, [r5, #4]
 23f79ec:	6063      	str	r3, [r4, #4]
}
 23f79ee:	4620      	mov	r0, r4
 23f79f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f79f4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESU_SY_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23f79f4:	b508      	push	{r3, lr}
        ::new (__storage)
 23f79f6:	6800      	ldr	r0, [r0, #0]
 23f79f8:	f7ff ffd8 	bl	23f79ac <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_>
      }
 23f79fc:	bd08      	pop	{r3, pc}

023f79fe <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0>:

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f79fe:	b530      	push	{r4, r5, lr}
 23f7a00:	4604      	mov	r4, r0
 23f7a02:	b087      	sub	sp, #28
    return insert(size_, std::move(value));
 23f7a04:	6845      	ldr	r5, [r0, #4]
 23f7a06:	4668      	mov	r0, sp
 23f7a08:	f7ff fe48 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f7a0c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23f7a10:	4299      	cmp	r1, r3
 23f7a12:	da10      	bge.n	23f7a36 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0+0x38>
        return false;
    }
    T* const p = data_ + i;
 23f7a14:	2218      	movs	r2, #24
 23f7a16:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23f7a18:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
 23f7a1a:	fb02 3505 	mla	r5, r2, r5, r3
    move(p + 1, p, data_ + size_);
 23f7a1e:	fb02 3201 	mla	r2, r2, r1, r3
 23f7a22:	f105 0018 	add.w	r0, r5, #24
 23f7a26:	4629      	mov	r1, r5
 23f7a28:	f7ff ff7c 	bl	23f7924 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23f7a2c:	b975      	cbnz	r5, 23f7a4c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0+0x4e>
    ++size_;
 23f7a2e:	6863      	ldr	r3, [r4, #4]
 23f7a30:	3301      	adds	r3, #1
 23f7a32:	6063      	str	r3, [r4, #4]
    return true;
 23f7a34:	e005      	b.n	23f7a42 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f7a36:	4620      	mov	r0, r4
 23f7a38:	3101      	adds	r1, #1
 23f7a3a:	f7ff ff9d 	bl	23f7978 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23f7a3e:	2800      	cmp	r0, #0
 23f7a40:	d1e8      	bne.n	23f7a14 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0+0x16>
      { _M_reset(); }
 23f7a42:	4668      	mov	r0, sp
 23f7a44:	f7ff f968 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
 23f7a48:	b007      	add	sp, #28
 23f7a4a:	bd30      	pop	{r4, r5, pc}
    new(p) T(std::move(value));
 23f7a4c:	4669      	mov	r1, sp
 23f7a4e:	4628      	mov	r0, r5
 23f7a50:	f7ff fe24 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23f7a54:	e7eb      	b.n	23f7a2e <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0+0x30>

023f7a56 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE>:
Variant DeviceConfigLedger::getConfigVariant(const char *key, Variant defaultValue) const {
 23f7a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f7a5a:	460c      	mov	r4, r1
 23f7a5c:	b09a      	sub	sp, #104	; 0x68
 23f7a5e:	4615      	mov	r5, r2
    Variant result;
 23f7a60:	2100      	movs	r1, #0
 23f7a62:	2218      	movs	r2, #24
Variant DeviceConfigLedger::getConfigVariant(const char *key, Variant defaultValue) const {
 23f7a64:	4606      	mov	r6, r0
    Variant result;
 23f7a66:	f005 fba6 	bl	23fd1b6 <memset>
        capacity_(0) {
 23f7a6a:	2300      	movs	r3, #0
     *
     * @param name Entry name.
     * @return `true` if the entry exists, otherwise `false`.
     */
    bool has(const char* name) const {
        return v_.has(name);
 23f7a6c:	f104 0720 	add.w	r7, r4, #32
 23f7a70:	4629      	mov	r1, r5
 23f7a72:	4638      	mov	r0, r7
 23f7a74:	e9cd 3301 	strd	r3, r3, [sp, #4]
 23f7a78:	9303      	str	r3, [sp, #12]
 23f7a7a:	f004 f9dd 	bl	23fbe38 <_ZNK8particle7Variant3hasEPKc>
    if (localConfig.has(key)) {
 23f7a7e:	b158      	cbz	r0, 23f7a98 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x42>
        return v_.get(name);
 23f7a80:	462a      	mov	r2, r5
 23f7a82:	4639      	mov	r1, r7
 23f7a84:	a810      	add	r0, sp, #64	; 0x40
 23f7a86:	f004 f9ee 	bl	23fbe66 <_ZNK8particle7Variant3getEPKc>
        sources.append(localConfig.get(key));
 23f7a8a:	a801      	add	r0, sp, #4
 23f7a8c:	a910      	add	r1, sp, #64	; 0x40
 23f7a8e:	f7ff ffb6 	bl	23f79fe <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0>
 23f7a92:	a810      	add	r0, sp, #64	; 0x40
 23f7a94:	f7ff f940 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        return v_.has(name);
 23f7a98:	f104 0708 	add.w	r7, r4, #8
 23f7a9c:	4629      	mov	r1, r5
 23f7a9e:	4638      	mov	r0, r7
 23f7aa0:	f004 f9ca 	bl	23fbe38 <_ZNK8particle7Variant3hasEPKc>
    if (defaultConfig.has(key)) {
 23f7aa4:	b158      	cbz	r0, 23f7abe <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x68>
        return v_.get(name);
 23f7aa6:	462a      	mov	r2, r5
 23f7aa8:	4639      	mov	r1, r7
 23f7aaa:	a810      	add	r0, sp, #64	; 0x40
 23f7aac:	f004 f9db 	bl	23fbe66 <_ZNK8particle7Variant3getEPKc>
        sources.append(defaultConfig.get(key));
 23f7ab0:	a801      	add	r0, sp, #4
 23f7ab2:	a910      	add	r1, sp, #64	; 0x40
 23f7ab4:	f7ff ffa3 	bl	23f79fe <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0>
 23f7ab8:	a810      	add	r0, sp, #64	; 0x40
 23f7aba:	f7ff f92d 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        return v_.has(name);
 23f7abe:	3438      	adds	r4, #56	; 0x38
 23f7ac0:	4629      	mov	r1, r5
 23f7ac2:	4620      	mov	r0, r4
 23f7ac4:	f004 f9b8 	bl	23fbe38 <_ZNK8particle7Variant3hasEPKc>
    if (deviceConfig.has(key)) {
 23f7ac8:	b158      	cbz	r0, 23f7ae2 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x8c>
        return v_.get(name);
 23f7aca:	462a      	mov	r2, r5
 23f7acc:	4621      	mov	r1, r4
 23f7ace:	a810      	add	r0, sp, #64	; 0x40
 23f7ad0:	f004 f9c9 	bl	23fbe66 <_ZNK8particle7Variant3getEPKc>
        sources.append(deviceConfig.get(key));
 23f7ad4:	a801      	add	r0, sp, #4
 23f7ad6:	a910      	add	r1, sp, #64	; 0x40
 23f7ad8:	f7ff ff91 	bl	23f79fe <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_.isra.0>
 23f7adc:	a810      	add	r0, sp, #64	; 0x40
 23f7ade:	f7ff f91b 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    return data_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::Iterator spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 23f7ae2:	e9dd 5701 	ldrd	r5, r7, [sp, #4]
 23f7ae6:	2318      	movs	r3, #24
 23f7ae8:	fb03 5707 	mla	r7, r3, r7, r5
    for(Variant source : sources) {
 23f7aec:	42af      	cmp	r7, r5
 23f7aee:	d04d      	beq.n	23f7b8c <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x136>
      _Move_ctor_base(const _Move_ctor_base&) = default;
 23f7af0:	4629      	mov	r1, r5
 23f7af2:	a804      	add	r0, sp, #16
 23f7af4:	f7fe ff48 	bl	23f6988 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
	  return make_signed_t<__index_type>(this->_M_index);
 23f7af8:	f89d 3020 	ldrb.w	r3, [sp, #32]
        if (source.isMap()) {
 23f7afc:	2b0a      	cmp	r3, #10
 23f7afe:	d11f      	bne.n	23f7b40 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0xea>
        return as<VariantMap>();
 23f7b00:	a804      	add	r0, sp, #16
 23f7b02:	f7ff fcf4 	bl	23f74ee <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23f7b06:	f04f 0828 	mov.w	r8, #40	; 0x28
 23f7b0a:	e9d0 4300 	ldrd	r4, r3, [r0]
 23f7b0e:	fb08 4803 	mla	r8, r8, r3, r4
            for(Map<String,Variant>::Entry entry : source.asMap().entries()) {
 23f7b12:	4544      	cmp	r4, r8
 23f7b14:	d035      	beq.n	23f7b82 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x12c>
 23f7b16:	4621      	mov	r1, r4
 23f7b18:	a810      	add	r0, sp, #64	; 0x40
 23f7b1a:	f7fe ff49 	bl	23f69b0 <_ZNSt4pairIK6StringN8particle7VariantEEC1ERKS4_>
      _Move_ctor_base(const _Move_ctor_base&) = default;
 23f7b1e:	a914      	add	r1, sp, #80	; 0x50
 23f7b20:	a80a      	add	r0, sp, #40	; 0x28
 23f7b22:	f7fe ff31 	bl	23f6988 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
                result.set(entry.first, entry.second);
 23f7b26:	aa0a      	add	r2, sp, #40	; 0x28
 23f7b28:	a910      	add	r1, sp, #64	; 0x40
 23f7b2a:	4630      	mov	r0, r6
 23f7b2c:	f004 fac2 	bl	23fc0b4 <_ZN8particle7Variant3setERK6StringS0_>
      { _M_reset(); }
 23f7b30:	a80a      	add	r0, sp, #40	; 0x28
 23f7b32:	f7ff f8f1 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            for(Map<String,Variant>::Entry entry : source.asMap().entries()) {
 23f7b36:	a810      	add	r0, sp, #64	; 0x40
 23f7b38:	f7ff f900 	bl	23f6d3c <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
 23f7b3c:	3428      	adds	r4, #40	; 0x28
 23f7b3e:	e7e8      	b.n	23f7b12 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0xbc>
        if (source.isArray()) {
 23f7b40:	2b09      	cmp	r3, #9
 23f7b42:	d113      	bne.n	23f7b6c <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x116>
            for(int ii = 0; ii < source.size(); ii++) {
 23f7b44:	2400      	movs	r4, #0
 23f7b46:	a804      	add	r0, sp, #16
 23f7b48:	f003 ff84 	bl	23fba54 <_ZNK8particle7Variant4sizeEv>
 23f7b4c:	42a0      	cmp	r0, r4
 23f7b4e:	dd18      	ble.n	23f7b82 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x12c>
                result.append(source.at(ii));
 23f7b50:	4622      	mov	r2, r4
 23f7b52:	a904      	add	r1, sp, #16
 23f7b54:	a810      	add	r0, sp, #64	; 0x40
 23f7b56:	f003 fed5 	bl	23fb904 <_ZNK8particle7Variant2atEi>
 23f7b5a:	a910      	add	r1, sp, #64	; 0x40
 23f7b5c:	4630      	mov	r0, r6
 23f7b5e:	f004 f905 	bl	23fbd6c <_ZN8particle7Variant6appendES0_>
 23f7b62:	a810      	add	r0, sp, #64	; 0x40
 23f7b64:	f7ff f8d8 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            for(int ii = 0; ii < source.size(); ii++) {
 23f7b68:	3401      	adds	r4, #1
 23f7b6a:	e7ec      	b.n	23f7b46 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0xf0>
      _Move_ctor_base(const _Move_ctor_base&) = default;
 23f7b6c:	a904      	add	r1, sp, #16
 23f7b6e:	a810      	add	r0, sp, #64	; 0x40
 23f7b70:	f7fe ff0a 	bl	23f6988 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
    { __lhs.swap(__rhs); }
 23f7b74:	4630      	mov	r0, r6
 23f7b76:	a910      	add	r1, sp, #64	; 0x40
 23f7b78:	f7ff fcf2 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23f7b7c:	a810      	add	r0, sp, #64	; 0x40
 23f7b7e:	f7ff f8cb 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f7b82:	a804      	add	r0, sp, #16
 23f7b84:	f7ff f8c8 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    for(Variant source : sources) {
 23f7b88:	3518      	adds	r5, #24
 23f7b8a:	e7af      	b.n	23f7aec <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE+0x96>
    Vector<Variant> sources;
 23f7b8c:	a801      	add	r0, sp, #4
 23f7b8e:	f7ff f942 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
}
 23f7b92:	4630      	mov	r0, r6
 23f7b94:	b01a      	add	sp, #104	; 0x68
 23f7b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023f7b9c <_ZNK18DeviceConfigLedger12getConfigIntEPKci>:
	_M_index{_Np}
 23f7b9c:	2302      	movs	r3, #2
    int getConfigInt(const char *key, int defaultValue = 0) const { return getConfigVariant(key, Variant(defaultValue)).toInt(); };
 23f7b9e:	b510      	push	{r4, lr}
 23f7ba0:	b08e      	sub	sp, #56	; 0x38
	: _M_storage(std::forward<_Args>(__args)...)
 23f7ba2:	9202      	str	r2, [sp, #8]
	_M_index{_Np}
 23f7ba4:	f88d 3018 	strb.w	r3, [sp, #24]
 23f7ba8:	460a      	mov	r2, r1
 23f7baa:	ab02      	add	r3, sp, #8
 23f7bac:	4601      	mov	r1, r0
 23f7bae:	a808      	add	r0, sp, #32
 23f7bb0:	f7ff ff51 	bl	23f7a56 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE>
        return std::visit(ConvertToVisitor<T>(), v_);
 23f7bb4:	2300      	movs	r3, #0
 23f7bb6:	f88d 3004 	strb.w	r3, [sp, #4]
	return this->_M_index != __index_type(variant_npos);
 23f7bba:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
      if ((__variants.valueless_by_exception() || ...))
 23f7bbe:	2bff      	cmp	r3, #255	; 0xff
 23f7bc0:	d101      	bne.n	23f7bc6 <_ZNK18DeviceConfigLedger12getConfigIntEPKci+0x2a>
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 23f7bc2:	f001 f897 	bl	23f8cf4 <abort>
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23f7bc6:	4a08      	ldr	r2, [pc, #32]	; (23f7be8 <_ZNK18DeviceConfigLedger12getConfigIntEPKci+0x4c>)
	  return make_signed_t<__index_type>(this->_M_index);
 23f7bc8:	b25b      	sxtb	r3, r3
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23f7bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23f7bce:	a908      	add	r1, sp, #32
 23f7bd0:	a801      	add	r0, sp, #4
 23f7bd2:	4798      	blx	r3
 23f7bd4:	4604      	mov	r4, r0
      { _M_reset(); }
 23f7bd6:	a808      	add	r0, sp, #32
 23f7bd8:	f7ff f89e 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f7bdc:	a802      	add	r0, sp, #8
 23f7bde:	f7ff f89b 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f7be2:	4620      	mov	r0, r4
 23f7be4:	b00e      	add	sp, #56	; 0x38
 23f7be6:	bd10      	pop	{r4, pc}
 23f7be8:	023ff59c 	.word	0x023ff59c

023f7bec <_ZNK18DeviceConfigLedger15getConfigStringEPKcS1_>:
    String getConfigString(const char *key, const char *defaultValue = "") const { return getConfigVariant(key, Variant(defaultValue)).toString(); };
 23f7bec:	b530      	push	{r4, r5, lr}
 23f7bee:	460d      	mov	r5, r1
 23f7bf0:	4604      	mov	r4, r0
 23f7bf2:	b08f      	sub	sp, #60	; 0x3c
 23f7bf4:	4619      	mov	r1, r3
 23f7bf6:	a802      	add	r0, sp, #8
 23f7bf8:	9201      	str	r2, [sp, #4]
 23f7bfa:	f7fe fd75 	bl	23f66e8 <_ZN8particle7VariantC1EPKc>
 23f7bfe:	9a01      	ldr	r2, [sp, #4]
 23f7c00:	ab02      	add	r3, sp, #8
 23f7c02:	4629      	mov	r1, r5
 23f7c04:	a808      	add	r0, sp, #32
 23f7c06:	f7ff ff26 	bl	23f7a56 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE>
        return to<String>();
 23f7c0a:	a908      	add	r1, sp, #32
 23f7c0c:	4620      	mov	r0, r4
 23f7c0e:	f7fe fedd 	bl	23f69cc <_ZNK8particle7Variant2toI6StringEET_v>
 23f7c12:	a808      	add	r0, sp, #32
 23f7c14:	f7ff f880 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f7c18:	a802      	add	r0, sp, #8
 23f7c1a:	f7ff f87d 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f7c1e:	4620      	mov	r0, r4
 23f7c20:	b00f      	add	sp, #60	; 0x3c
 23f7c22:	bd30      	pop	{r4, r5, pc}

023f7c24 <_ZNK19DeviceConfigWrapper13getConfigBoolEPKcb.isra.0>:
    bool getConfigBool(const char *key, bool defaultValue = false) const { return DeviceConfigLedger::instance().getConfigBool(key, defaultValue); };
 23f7c24:	b510      	push	{r4, lr}
 23f7c26:	b090      	sub	sp, #64	; 0x40
 23f7c28:	460c      	mov	r4, r1
 23f7c2a:	9001      	str	r0, [sp, #4]
 23f7c2c:	f7ff f8de 	bl	23f6dec <_ZN18DeviceConfigLedger8instanceEv>
	_M_index{_Np}
 23f7c30:	2301      	movs	r3, #1
 23f7c32:	4601      	mov	r1, r0
 23f7c34:	f88d 3020 	strb.w	r3, [sp, #32]
    bool getConfigBool(const char *key, bool defaultValue = false) const { return getConfigVariant(key, Variant(defaultValue)).toBool(); };
 23f7c38:	9a01      	ldr	r2, [sp, #4]
 23f7c3a:	ab04      	add	r3, sp, #16
 23f7c3c:	a80a      	add	r0, sp, #40	; 0x28
	: _M_storage(std::forward<_Args>(__args)...)
 23f7c3e:	f88d 4010 	strb.w	r4, [sp, #16]
 23f7c42:	f7ff ff08 	bl	23f7a56 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE>
        return std::visit(ConvertToVisitor<T>(), v_);
 23f7c46:	2300      	movs	r3, #0
 23f7c48:	f88d 300c 	strb.w	r3, [sp, #12]
	return this->_M_index != __index_type(variant_npos);
 23f7c4c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
      if ((__variants.valueless_by_exception() || ...))
 23f7c50:	2bff      	cmp	r3, #255	; 0xff
 23f7c52:	d101      	bne.n	23f7c58 <_ZNK19DeviceConfigWrapper13getConfigBoolEPKcb.isra.0+0x34>
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 23f7c54:	f001 f84e 	bl	23f8cf4 <abort>
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23f7c58:	4a08      	ldr	r2, [pc, #32]	; (23f7c7c <_ZNK19DeviceConfigWrapper13getConfigBoolEPKcb.isra.0+0x58>)
	  return make_signed_t<__index_type>(this->_M_index);
 23f7c5a:	b25b      	sxtb	r3, r3
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23f7c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23f7c60:	a90a      	add	r1, sp, #40	; 0x28
 23f7c62:	a803      	add	r0, sp, #12
 23f7c64:	4798      	blx	r3
 23f7c66:	4604      	mov	r4, r0
      { _M_reset(); }
 23f7c68:	a80a      	add	r0, sp, #40	; 0x28
 23f7c6a:	f7ff f855 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f7c6e:	a804      	add	r0, sp, #16
 23f7c70:	f7ff f852 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    bool getConfigBool(const char *key, bool defaultValue = false) const { return DeviceConfigLedger::instance().getConfigBool(key, defaultValue); };
 23f7c74:	4620      	mov	r0, r4
 23f7c76:	b010      	add	sp, #64	; 0x40
 23f7c78:	bd10      	pop	{r4, pc}
 23f7c7a:	bf00      	nop
 23f7c7c:	023ff5c8 	.word	0x023ff5c8

023f7c80 <_ZN16DeviceInfoLedger17onCloudConnectionEv>:
    Variant data;
 23f7c80:	2218      	movs	r2, #24
void DeviceInfoLedger::onCloudConnection() {
 23f7c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f7c84:	4605      	mov	r5, r0
 23f7c86:	b09b      	sub	sp, #108	; 0x6c
    Variant data;
 23f7c88:	2100      	movs	r1, #0
 23f7c8a:	eb0d 0002 	add.w	r0, sp, r2
 23f7c8e:	f005 fa92 	bl	23fd1b6 <memset>
	return __atomic_load_n(&_M_i, int(__m));
 23f7c92:	f105 0328 	add.w	r3, r5, #40	; 0x28
 23f7c96:	e8d3 7faf 	lda	r7, [r3]
    if (offset) {
 23f7c9a:	b387      	cbz	r7, 23f7cfe <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x7e>
        if (size > connectionLogSize) {
 23f7c9c:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 23f7c9e:	42be      	cmp	r6, r7
 23f7ca0:	bf28      	it	cs
 23f7ca2:	463e      	movcs	r6, r7
        char *buf = new char[size + 1];
 23f7ca4:	1c70      	adds	r0, r6, #1
 23f7ca6:	f7fe f970 	bl	23f5f8a <_Znaj>
        if (buf) {
 23f7caa:	4604      	mov	r4, r0
 23f7cac:	b1f8      	cbz	r0, 23f7cee <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x6e>
 23f7cae:	1bbb      	subs	r3, r7, r6
 23f7cb0:	1e41      	subs	r1, r0, #1
            for(size_t ii = 0; ii < size; ii++) {
 23f7cb2:	42bb      	cmp	r3, r7
 23f7cb4:	d00a      	beq.n	23f7ccc <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x4c>
                buf[ii] = (char) connectionLogBuffer[(offset - size + ii) % connectionLogSize];
 23f7cb6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23f7cb8:	fbb3 f2f0 	udiv	r2, r3, r0
 23f7cbc:	fb00 3212 	mls	r2, r0, r2, r3
 23f7cc0:	6a28      	ldr	r0, [r5, #32]
 23f7cc2:	3301      	adds	r3, #1
 23f7cc4:	5c82      	ldrb	r2, [r0, r2]
 23f7cc6:	f801 2f01 	strb.w	r2, [r1, #1]!
            for(size_t ii = 0; ii < size; ii++) {
 23f7cca:	e7f2      	b.n	23f7cb2 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x32>
            buf[size] = 0;
 23f7ccc:	2300      	movs	r3, #0
            data.set("connLog", buf);
 23f7cce:	4621      	mov	r1, r4
            buf[size] = 0;
 23f7cd0:	55a3      	strb	r3, [r4, r6]
            data.set("connLog", buf);
 23f7cd2:	a812      	add	r0, sp, #72	; 0x48
 23f7cd4:	f7fe fd08 	bl	23f66e8 <_ZN8particle7VariantC1EPKc>
 23f7cd8:	498a      	ldr	r1, [pc, #552]	; (23f7f04 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x284>)
 23f7cda:	aa12      	add	r2, sp, #72	; 0x48
 23f7cdc:	a806      	add	r0, sp, #24
 23f7cde:	f004 f97b 	bl	23fbfd8 <_ZN8particle7Variant3setEPKcS0_>
 23f7ce2:	a812      	add	r0, sp, #72	; 0x48
 23f7ce4:	f7ff f818 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            delete[] buf;
 23f7ce8:	4620      	mov	r0, r4
 23f7cea:	f7fe f950 	bl	23f5f8e <_ZdaPv>
        writeToConnectionLog = false;
 23f7cee:	2300      	movs	r3, #0
 23f7cf0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	__atomic_store_n(&_M_i, __i, int(__m));
 23f7cf4:	2200      	movs	r2, #0
 23f7cf6:	f105 0328 	add.w	r3, r5, #40	; 0x28
 23f7cfa:	e8c3 2faf 	stl	r2, [r3]
    if (lastRunLog) {
 23f7cfe:	69e9      	ldr	r1, [r5, #28]
 23f7d00:	b151      	cbz	r1, 23f7d18 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x98>
        data.set("lastRun", lastRunLog);
 23f7d02:	a812      	add	r0, sp, #72	; 0x48
 23f7d04:	f7fe fcf0 	bl	23f66e8 <_ZN8particle7VariantC1EPKc>
 23f7d08:	497f      	ldr	r1, [pc, #508]	; (23f7f08 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x288>)
 23f7d0a:	aa12      	add	r2, sp, #72	; 0x48
 23f7d0c:	a806      	add	r0, sp, #24
 23f7d0e:	f004 f963 	bl	23fbfd8 <_ZN8particle7Variant3setEPKcS0_>
 23f7d12:	a812      	add	r0, sp, #72	; 0x48
 23f7d14:	f7ff f800 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    if (resetReason != RESET_REASON_NONE) {
 23f7d18:	6cab      	ldr	r3, [r5, #72]	; 0x48
 23f7d1a:	b1db      	cbz	r3, 23f7d54 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0xd4>
	: _M_storage(std::forward<_Args>(__args)...)
 23f7d1c:	9312      	str	r3, [sp, #72]	; 0x48
	_M_index{_Np}
 23f7d1e:	2302      	movs	r3, #2
        data.set("resetReason", resetReason);
 23f7d20:	497a      	ldr	r1, [pc, #488]	; (23f7f0c <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x28c>)
 23f7d22:	aa12      	add	r2, sp, #72	; 0x48
 23f7d24:	a806      	add	r0, sp, #24
 23f7d26:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 23f7d2a:	f004 f955 	bl	23fbfd8 <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
 23f7d2e:	a812      	add	r0, sp, #72	; 0x48
 23f7d30:	f7fe fff2 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        if (resetReason ==  RESET_REASON_USER) {
 23f7d34:	6cab      	ldr	r3, [r5, #72]	; 0x48
 23f7d36:	2b8c      	cmp	r3, #140	; 0x8c
 23f7d38:	d10c      	bne.n	23f7d54 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0xd4>
            data.set("resetReasonData", resetReasonData);
 23f7d3a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 23f7d3c:	4974      	ldr	r1, [pc, #464]	; (23f7f10 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x290>)
	: _M_storage(std::forward<_Args>(__args)...)
 23f7d3e:	9312      	str	r3, [sp, #72]	; 0x48
	_M_index{_Np}
 23f7d40:	2303      	movs	r3, #3
 23f7d42:	aa12      	add	r2, sp, #72	; 0x48
 23f7d44:	a806      	add	r0, sp, #24
 23f7d46:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 23f7d4a:	f004 f945 	bl	23fbfd8 <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
 23f7d4e:	a812      	add	r0, sp, #72	; 0x48
 23f7d50:	f7fe ffe2 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    bool getConfigIncludeDiag() const { return getConfigBool("includeDiag", false); };
 23f7d54:	2100      	movs	r1, #0
 23f7d56:	486f      	ldr	r0, [pc, #444]	; (23f7f14 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x294>)
 23f7d58:	f7ff ff64 	bl	23f7c24 <_ZNK19DeviceConfigWrapper13getConfigBoolEPKcb.isra.0>
 23f7d5c:	ac0c      	add	r4, sp, #48	; 0x30
    if (getConfigIncludeDiag()) {
 23f7d5e:	b1f8      	cbz	r0, 23f7da0 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x120>
    	String jsonStr;
 23f7d60:	496d      	ldr	r1, [pc, #436]	; (23f7f18 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x298>)
 23f7d62:	4620      	mov	r0, r4
 23f7d64:	f003 f973 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
	    jsonStr.reserve(256);
 23f7d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 23f7d6c:	4620      	mov	r0, r4
 23f7d6e:	f003 f941 	bl	23faff4 <_ZN6String7reserveEj>
        system_format_diag_data(nullptr, 0, 0, Callback.appender, &jsonStr, nullptr);
 23f7d72:	2200      	movs	r2, #0
 23f7d74:	4b69      	ldr	r3, [pc, #420]	; (23f7f1c <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x29c>)
 23f7d76:	4611      	mov	r1, r2
 23f7d78:	4610      	mov	r0, r2
 23f7d7a:	e9cd 4200 	strd	r4, r2, [sp]
 23f7d7e:	f000 fda5 	bl	23f88cc <system_format_diag_data>
        data.set("diag", Variant::fromJSON(jsonStr));
 23f7d82:	990c      	ldr	r1, [sp, #48]	; 0x30
 23f7d84:	a812      	add	r0, sp, #72	; 0x48
 23f7d86:	f004 fc12 	bl	23fc5ae <_ZN8particle7Variant8fromJSONEPKc>
 23f7d8a:	4965      	ldr	r1, [pc, #404]	; (23f7f20 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2a0>)
 23f7d8c:	aa12      	add	r2, sp, #72	; 0x48
 23f7d8e:	a806      	add	r0, sp, #24
 23f7d90:	f004 f922 	bl	23fbfd8 <_ZN8particle7Variant3setEPKcS0_>
 23f7d94:	a812      	add	r0, sp, #72	; 0x48
 23f7d96:	f7fe ffbf 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    	String jsonStr;
 23f7d9a:	4620      	mov	r0, r4
 23f7d9c:	f003 f90c 	bl	23fafb8 <_ZN6StringD1Ev>
    bool getConfigIncludeTower() const { return getConfigBool("includeTower", false); };
 23f7da0:	2100      	movs	r1, #0
 23f7da2:	4860      	ldr	r0, [pc, #384]	; (23f7f24 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2a4>)
 23f7da4:	f7ff ff3e 	bl	23f7c24 <_ZNK19DeviceConfigWrapper13getConfigBoolEPKcb.isra.0>
    if (getConfigIncludeTower()) {
 23f7da8:	2800      	cmp	r0, #0
 23f7daa:	d064      	beq.n	23f7e76 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x1f6>
        CellularGlobalIdentity cgi = {0};
 23f7dac:	2610      	movs	r6, #16
 23f7dae:	2100      	movs	r1, #0
 23f7db0:	4632      	mov	r2, r6
 23f7db2:	a802      	add	r0, sp, #8
 23f7db4:	f005 f9ff 	bl	23fd1b6 <memset>
        cellular_result_t res = cellular_global_identity(&cgi, NULL);
 23f7db8:	2100      	movs	r1, #0
 23f7dba:	a802      	add	r0, sp, #8
        cgi.size = sizeof(CellularGlobalIdentity);
 23f7dbc:	f8ad 6008 	strh.w	r6, [sp, #8]
        cellular_result_t res = cellular_global_identity(&cgi, NULL);
 23f7dc0:	f000 fb2a 	bl	23f8418 <cellular_global_identity>
        if (res == SYSTEM_ERROR_NONE) {
 23f7dc4:	4601      	mov	r1, r0
 23f7dc6:	2800      	cmp	r0, #0
 23f7dc8:	f040 8096 	bne.w	23f7ef8 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x278>
	_M_index{_Np}
 23f7dcc:	2602      	movs	r6, #2
            Variant tower;
 23f7dce:	2218      	movs	r2, #24
 23f7dd0:	4620      	mov	r0, r4
 23f7dd2:	f005 f9f0 	bl	23fd1b6 <memset>
            tower.set("mcc", cgi.mobile_country_code);
 23f7dd6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 23f7dda:	4953      	ldr	r1, [pc, #332]	; (23f7f28 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2a8>)
 23f7ddc:	aa12      	add	r2, sp, #72	; 0x48
 23f7dde:	4620      	mov	r0, r4
	: _M_storage(std::forward<_Args>(__args)...)
 23f7de0:	9312      	str	r3, [sp, #72]	; 0x48
	_M_index{_Np}
 23f7de2:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
 23f7de6:	f004 f8f7 	bl	23fbfd8 <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
 23f7dea:	a812      	add	r0, sp, #72	; 0x48
 23f7dec:	f7fe ff94 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            tower.set("mnc", cgi.mobile_network_code);
 23f7df0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 23f7df4:	494d      	ldr	r1, [pc, #308]	; (23f7f2c <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2ac>)
 23f7df6:	aa12      	add	r2, sp, #72	; 0x48
 23f7df8:	4620      	mov	r0, r4
	: _M_storage(std::forward<_Args>(__args)...)
 23f7dfa:	9312      	str	r3, [sp, #72]	; 0x48
	_M_index{_Np}
 23f7dfc:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
 23f7e00:	f004 f8ea 	bl	23fbfd8 <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
 23f7e04:	a812      	add	r0, sp, #72	; 0x48
 23f7e06:	f7fe ff87 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            tower.set("cid", cgi.cell_id);
 23f7e0a:	9b05      	ldr	r3, [sp, #20]
 23f7e0c:	4948      	ldr	r1, [pc, #288]	; (23f7f30 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2b0>)
	: _M_storage(std::forward<_Args>(__args)...)
 23f7e0e:	9312      	str	r3, [sp, #72]	; 0x48
	_M_index{_Np}
 23f7e10:	2303      	movs	r3, #3
 23f7e12:	aa12      	add	r2, sp, #72	; 0x48
 23f7e14:	4620      	mov	r0, r4
 23f7e16:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 23f7e1a:	f004 f8dd 	bl	23fbfd8 <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
 23f7e1e:	a812      	add	r0, sp, #72	; 0x48
 23f7e20:	f7fe ff7a 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            tower.set("lac", cgi.location_area_code);
 23f7e24:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 23f7e28:	aa12      	add	r2, sp, #72	; 0x48
 23f7e2a:	4942      	ldr	r1, [pc, #264]	; (23f7f34 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2b4>)
 23f7e2c:	4620      	mov	r0, r4
	: _M_storage(std::forward<_Args>(__args)...)
 23f7e2e:	9312      	str	r3, [sp, #72]	; 0x48
	_M_index{_Np}
 23f7e30:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
 23f7e34:	f004 f8d0 	bl	23fbfd8 <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
 23f7e38:	a812      	add	r0, sp, #72	; 0x48
 23f7e3a:	f7fe ff6d 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      _Move_ctor_base(const _Move_ctor_base&) = default;
 23f7e3e:	4621      	mov	r1, r4
 23f7e40:	a812      	add	r0, sp, #72	; 0x48
 23f7e42:	f7fe fda1 	bl	23f6988 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
            data.set("tower", tower);
 23f7e46:	493c      	ldr	r1, [pc, #240]	; (23f7f38 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2b8>)
 23f7e48:	aa12      	add	r2, sp, #72	; 0x48
 23f7e4a:	a806      	add	r0, sp, #24
 23f7e4c:	f004 f8c4 	bl	23fbfd8 <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
 23f7e50:	a812      	add	r0, sp, #72	; 0x48
 23f7e52:	f7fe ff61 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            _deviceInfoLog.trace("Cellular Info: cid=%lu lac=%u mcc=%u mnc=%u", cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);
 23f7e56:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 23f7e5a:	4838      	ldr	r0, [pc, #224]	; (23f7f3c <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2bc>)
 23f7e5c:	9301      	str	r3, [sp, #4]
 23f7e5e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 23f7e62:	9a05      	ldr	r2, [sp, #20]
 23f7e64:	9300      	str	r3, [sp, #0]
 23f7e66:	4936      	ldr	r1, [pc, #216]	; (23f7f40 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2c0>)
 23f7e68:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 23f7e6c:	f7fe fc09 	bl	23f6682 <_ZNK5spark6Logger5traceEPKcz>
 23f7e70:	4620      	mov	r0, r4
 23f7e72:	f7fe ff51 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    bool getConfigIncludeGeneral() const { return getConfigBool("includeGeneral", false); };
 23f7e76:	2100      	movs	r1, #0
 23f7e78:	4832      	ldr	r0, [pc, #200]	; (23f7f44 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2c4>)
 23f7e7a:	f7ff fed3 	bl	23f7c24 <_ZNK19DeviceConfigWrapper13getConfigBoolEPKcb.isra.0>
    if (getConfigIncludeGeneral()) {
 23f7e7e:	b1f0      	cbz	r0, 23f7ebe <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x23e>
        SystemVersionInfo info = {};
 23f7e80:	261c      	movs	r6, #28
 23f7e82:	2100      	movs	r1, #0
 23f7e84:	4632      	mov	r2, r6
 23f7e86:	a812      	add	r0, sp, #72	; 0x48
 23f7e88:	f005 f995 	bl	23fd1b6 <memset>
        system_version_info(&info, nullptr);
 23f7e8c:	2100      	movs	r1, #0
 23f7e8e:	a812      	add	r0, sp, #72	; 0x48
        info.size = sizeof(SystemVersionInfo);
 23f7e90:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
        system_version_info(&info, nullptr);
 23f7e94:	f000 fcfe 	bl	23f8894 <system_version_info>
        return String(info.versionString);
 23f7e98:	a914      	add	r1, sp, #80	; 0x50
 23f7e9a:	4620      	mov	r0, r4
 23f7e9c:	f003 f8d7 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
        data.set("sysver", System.version().c_str());        
 23f7ea0:	990c      	ldr	r1, [sp, #48]	; 0x30
 23f7ea2:	a812      	add	r0, sp, #72	; 0x48
 23f7ea4:	f7fe fc20 	bl	23f66e8 <_ZN8particle7VariantC1EPKc>
 23f7ea8:	4927      	ldr	r1, [pc, #156]	; (23f7f48 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2c8>)
 23f7eaa:	aa12      	add	r2, sp, #72	; 0x48
 23f7eac:	a806      	add	r0, sp, #24
 23f7eae:	f004 f893 	bl	23fbfd8 <_ZN8particle7Variant3setEPKcS0_>
 23f7eb2:	a812      	add	r0, sp, #72	; 0x48
 23f7eb4:	f7fe ff30 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f7eb8:	4620      	mov	r0, r4
 23f7eba:	f003 f87d 	bl	23fafb8 <_ZN6StringD1Ev>
      _Move_ctor_base(const _Move_ctor_base&) = default;
 23f7ebe:	a906      	add	r1, sp, #24
 23f7ec0:	4620      	mov	r0, r4
 23f7ec2:	f7fe fd61 	bl	23f6988 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
    infoLedger.set(data, Ledger::REPLACE); // Ledger::REPLACE Ledger::MERGE
 23f7ec6:	4621      	mov	r1, r4
 23f7ec8:	a812      	add	r0, sp, #72	; 0x48
 23f7eca:	f7ff fbef 	bl	23f76ac <_ZN8particle10LedgerDataC1ENS_7VariantE>
 23f7ece:	2200      	movs	r2, #0
 23f7ed0:	a912      	add	r1, sp, #72	; 0x48
 23f7ed2:	f105 0050 	add.w	r0, r5, #80	; 0x50
 23f7ed6:	f001 fea3 	bl	23f9c20 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE>
      { _M_reset(); }
 23f7eda:	a812      	add	r0, sp, #72	; 0x48
 23f7edc:	f7fe ff1c 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f7ee0:	4620      	mov	r0, r4
 23f7ee2:	f7fe ff19 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    _deviceInfoLog.trace("infoLedger updated");
 23f7ee6:	4919      	ldr	r1, [pc, #100]	; (23f7f4c <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2cc>)
 23f7ee8:	4814      	ldr	r0, [pc, #80]	; (23f7f3c <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2bc>)
 23f7eea:	f7fe fbca 	bl	23f6682 <_ZNK5spark6Logger5traceEPKcz>
 23f7eee:	a806      	add	r0, sp, #24
 23f7ef0:	f7fe ff12 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
 23f7ef4:	b01b      	add	sp, #108	; 0x6c
 23f7ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _deviceInfoLog.info("cellular_global_identity failed %d", res);
 23f7ef8:	4602      	mov	r2, r0
 23f7efa:	4915      	ldr	r1, [pc, #84]	; (23f7f50 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2d0>)
 23f7efc:	480f      	ldr	r0, [pc, #60]	; (23f7f3c <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x2bc>)
 23f7efe:	f7fe fbd8 	bl	23f66b2 <_ZNK5spark6Logger4infoEPKcz>
 23f7f02:	e7b8      	b.n	23f7e76 <_ZN16DeviceInfoLedger17onCloudConnectionEv+0x1f6>
 23f7f04:	023ff31f 	.word	0x023ff31f
 23f7f08:	023ff327 	.word	0x023ff327
 23f7f0c:	023ff32f 	.word	0x023ff32f
 23f7f10:	023ff33b 	.word	0x023ff33b
 23f7f14:	023ff34b 	.word	0x023ff34b
 23f7f18:	023ffa36 	.word	0x023ffa36
 23f7f1c:	023f6471 	.word	0x023f6471
 23f7f20:	023ff357 	.word	0x023ff357
 23f7f24:	023ff35c 	.word	0x023ff35c
 23f7f28:	023ff369 	.word	0x023ff369
 23f7f2c:	023ff36d 	.word	0x023ff36d
 23f7f30:	023ff371 	.word	0x023ff371
 23f7f34:	023ff375 	.word	0x023ff375
 23f7f38:	023ff379 	.word	0x023ff379
 23f7f3c:	1007ae4c 	.word	0x1007ae4c
 23f7f40:	023ff37f 	.word	0x023ff37f
 23f7f44:	023ff3ce 	.word	0x023ff3ce
 23f7f48:	023ff3dd 	.word	0x023ff3dd
 23f7f4c:	023ff3e4 	.word	0x023ff3e4
 23f7f50:	023ff3ab 	.word	0x023ff3ab

023f7f54 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE>:
void DeviceInfoLedger::getLogLevelFilters(LogLevel &level, LogCategoryFilters &filters) const {
 23f7f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f7f58:	b0a4      	sub	sp, #144	; 0x90
 23f7f5a:	460d      	mov	r5, r1
 23f7f5c:	4614      	mov	r4, r2
 23f7f5e:	4607      	mov	r7, r0
    String getConfigString(const char *key, const char *defaultValue = "") const { return DeviceConfigLedger::instance().getConfigString(key, defaultValue); };
 23f7f60:	f7fe ff44 	bl	23f6dec <_ZN18DeviceConfigLedger8instanceEv>
 23f7f64:	4b51      	ldr	r3, [pc, #324]	; (23f80ac <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x158>)
 23f7f66:	4601      	mov	r1, r0
 23f7f68:	4a51      	ldr	r2, [pc, #324]	; (23f80b0 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x15c>)
 23f7f6a:	a81a      	add	r0, sp, #104	; 0x68
 23f7f6c:	f7ff fe3e 	bl	23f7bec <_ZNK18DeviceConfigLedger15getConfigStringEPKcS1_>
    level = stringToLogLevel(getConfigString("logLevel").c_str());
 23f7f70:	991a      	ldr	r1, [sp, #104]	; 0x68
 23f7f72:	4638      	mov	r0, r7
 23f7f74:	f7fe fc1c 	bl	23f67b0 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc>
    destruct(data_, data_ + size_);
 23f7f78:	2614      	movs	r6, #20
 23f7f7a:	7028      	strb	r0, [r5, #0]
 23f7f7c:	a81a      	add	r0, sp, #104	; 0x68
 23f7f7e:	f003 f81b 	bl	23fafb8 <_ZN6StringD1Ev>
 23f7f82:	e9d4 5300 	ldrd	r5, r3, [r4]
 23f7f86:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f7f8a:	42ae      	cmp	r6, r5
 23f7f8c:	d004      	beq.n	23f7f98 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x44>
class LogCategoryFilter {
 23f7f8e:	4628      	mov	r0, r5
 23f7f90:	f003 f812 	bl	23fafb8 <_ZN6StringD1Ev>
 23f7f94:	3514      	adds	r5, #20
 23f7f96:	e7f8      	b.n	23f7f8a <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x36>
    size_ = 0;
 23f7f98:	2300      	movs	r3, #0
 23f7f9a:	6063      	str	r3, [r4, #4]
    Variant logFilters = getConfigVariant("logFilters");
 23f7f9c:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
	_M_index{_Np}
 23f7fa0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    Variant getConfigVariant(const char *key, Variant defaultValue = {}) const { return DeviceConfigLedger::instance().getConfigVariant(key, defaultValue);};
 23f7fa4:	f7fe ff22 	bl	23f6dec <_ZN18DeviceConfigLedger8instanceEv>
 23f7fa8:	4605      	mov	r5, r0
      _Move_ctor_base(const _Move_ctor_base&) = default;
 23f7faa:	a914      	add	r1, sp, #80	; 0x50
 23f7fac:	a81a      	add	r0, sp, #104	; 0x68
 23f7fae:	f7fe fceb 	bl	23f6988 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
 23f7fb2:	ab1a      	add	r3, sp, #104	; 0x68
 23f7fb4:	4629      	mov	r1, r5
 23f7fb6:	4a3f      	ldr	r2, [pc, #252]	; (23f80b4 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x160>)
 23f7fb8:	a80e      	add	r0, sp, #56	; 0x38
 23f7fba:	f7ff fd4c 	bl	23f7a56 <_ZNK18DeviceConfigLedger16getConfigVariantEPKcN8particle7VariantE>
      { _M_reset(); }
 23f7fbe:	a81a      	add	r0, sp, #104	; 0x68
 23f7fc0:	f7fe feaa 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f7fc4:	a814      	add	r0, sp, #80	; 0x50
 23f7fc6:	f7fe fea7 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    if (logFilters.isMap()) {
 23f7fca:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 23f7fce:	2b0a      	cmp	r3, #10
 23f7fd0:	d165      	bne.n	23f809e <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x14a>
        return as<VariantMap>();
 23f7fd2:	a80e      	add	r0, sp, #56	; 0x38
 23f7fd4:	f7ff fa8b 	bl	23f74ee <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
    return data_ + size_;
 23f7fd8:	f04f 0828 	mov.w	r8, #40	; 0x28
 23f7fdc:	e9d0 5300 	ldrd	r5, r3, [r0]
 23f7fe0:	fb08 5803 	mla	r8, r8, r3, r5
        for(Map<String,Variant>::Entry entry : logFilters.asMap().entries()) {
 23f7fe4:	4545      	cmp	r5, r8
 23f7fe6:	d05a      	beq.n	23f809e <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x14a>
 23f7fe8:	4629      	mov	r1, r5
 23f7fea:	a81a      	add	r0, sp, #104	; 0x68
 23f7fec:	f7fe fce0 	bl	23f69b0 <_ZNSt4pairIK6StringN8particle7VariantEEC1ERKS4_>
            String category = entry.first;
 23f7ff0:	a91a      	add	r1, sp, #104	; 0x68
 23f7ff2:	a801      	add	r0, sp, #4
 23f7ff4:	f003 f883 	bl	23fb0fe <_ZN6StringC1ERKS_>
        return to<String>();
 23f7ff8:	a91e      	add	r1, sp, #120	; 0x78
 23f7ffa:	a814      	add	r0, sp, #80	; 0x50
 23f7ffc:	f7fe fce6 	bl	23f69cc <_ZNK8particle7Variant2toI6StringEET_v>
            LogLevel level = stringToLogLevel(entry.second.toString().c_str());    
 23f8000:	9914      	ldr	r1, [sp, #80]	; 0x50
 23f8002:	4638      	mov	r0, r7
 23f8004:	f7fe fbd4 	bl	23f67b0 <_ZNK16DeviceInfoLedger16stringToLogLevelEPKc>
 23f8008:	4606      	mov	r6, r0
 23f800a:	a814      	add	r0, sp, #80	; 0x50
 23f800c:	f002 ffd4 	bl	23fafb8 <_ZN6StringD1Ev>
            filters.append(LogCategoryFilter(category, level));         
 23f8010:	a901      	add	r1, sp, #4
 23f8012:	a805      	add	r0, sp, #20
 23f8014:	f003 f873 	bl	23fb0fe <_ZN6StringC1ERKS_>
        level_(level) {
 23f8018:	a905      	add	r1, sp, #20
 23f801a:	a809      	add	r0, sp, #36	; 0x24
 23f801c:	f003 f86f 	bl	23fb0fe <_ZN6StringC1ERKS_>
class LogCategoryFilter {
 23f8020:	a909      	add	r1, sp, #36	; 0x24
 23f8022:	a814      	add	r0, sp, #80	; 0x50
        level_(level) {
 23f8024:	f88d 6034 	strb.w	r6, [sp, #52]	; 0x34
    return insert(size_, std::move(value));
 23f8028:	6866      	ldr	r6, [r4, #4]
class LogCategoryFilter {
 23f802a:	f003 f84e 	bl	23fb0ca <_ZN6StringC1EOS_>
 23f802e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 23f8032:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f8036:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23f803a:	4299      	cmp	r1, r3
 23f803c:	da10      	bge.n	23f8060 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x10c>
    T* const p = data_ + i;
 23f803e:	2214      	movs	r2, #20
 23f8040:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23f8042:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
 23f8044:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
 23f8048:	fb02 3201 	mla	r2, r2, r1, r3
 23f804c:	f106 0014 	add.w	r0, r6, #20
 23f8050:	4631      	mov	r1, r6
 23f8052:	f7fe f839 	bl	23f60c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23f8056:	b9d6      	cbnz	r6, 23f808e <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x13a>
    ++size_;
 23f8058:	6863      	ldr	r3, [r4, #4]
 23f805a:	3301      	adds	r3, #1
 23f805c:	6063      	str	r3, [r4, #4]
    return true;
 23f805e:	e005      	b.n	23f806c <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x118>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f8060:	4620      	mov	r0, r4
 23f8062:	3101      	adds	r1, #1
 23f8064:	f7ff fc0c 	bl	23f7880 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23f8068:	2800      	cmp	r0, #0
 23f806a:	d1e8      	bne.n	23f803e <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xea>
 23f806c:	a814      	add	r0, sp, #80	; 0x50
 23f806e:	f002 ffa3 	bl	23fafb8 <_ZN6StringD1Ev>
 23f8072:	a809      	add	r0, sp, #36	; 0x24
 23f8074:	f002 ffa0 	bl	23fafb8 <_ZN6StringD1Ev>
 23f8078:	a805      	add	r0, sp, #20
 23f807a:	f002 ff9d 	bl	23fafb8 <_ZN6StringD1Ev>
            String category = entry.first;
 23f807e:	a801      	add	r0, sp, #4
 23f8080:	f002 ff9a 	bl	23fafb8 <_ZN6StringD1Ev>
        for(Map<String,Variant>::Entry entry : logFilters.asMap().entries()) {
 23f8084:	a81a      	add	r0, sp, #104	; 0x68
 23f8086:	f7fe fe59 	bl	23f6d3c <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
 23f808a:	3528      	adds	r5, #40	; 0x28
 23f808c:	e7aa      	b.n	23f7fe4 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x90>
 23f808e:	4630      	mov	r0, r6
 23f8090:	a914      	add	r1, sp, #80	; 0x50
 23f8092:	f003 f81a 	bl	23fb0ca <_ZN6StringC1EOS_>
 23f8096:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 23f809a:	7433      	strb	r3, [r6, #16]
 23f809c:	e7dc      	b.n	23f8058 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0x104>
 23f809e:	a80e      	add	r0, sp, #56	; 0x38
 23f80a0:	f7fe fe3a 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
 23f80a4:	b024      	add	sp, #144	; 0x90
 23f80a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f80aa:	bf00      	nop
 23f80ac:	023ffa36 	.word	0x023ffa36
 23f80b0:	023ff2f1 	.word	0x023ff2f1
 23f80b4:	023ff2fa 	.word	0x023ff2fa

023f80b8 <_ZN16DeviceInfoLedger19configureLogHandlerEv>:
void DeviceInfoLedger::configureLogHandler() {
 23f80b8:	b530      	push	{r4, r5, lr}
    if (logHandler) {
 23f80ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
void DeviceInfoLedger::configureLogHandler() {
 23f80bc:	4604      	mov	r4, r0
 23f80be:	b089      	sub	sp, #36	; 0x24
    if (logHandler) {
 23f80c0:	b15b      	cbz	r3, 23f80da <_ZN16DeviceInfoLedger19configureLogHandlerEv+0x22>
        LogManager::instance()->removeHandler(logHandler);
 23f80c2:	f002 f82f 	bl	23fa124 <_ZN5spark10LogManager8instanceEv>
 23f80c6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f80c8:	f002 fa78 	bl	23fa5bc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        delete logHandler;
 23f80cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 23f80ce:	b110      	cbz	r0, 23f80d6 <_ZN16DeviceInfoLedger19configureLogHandlerEv+0x1e>
 23f80d0:	6803      	ldr	r3, [r0, #0]
 23f80d2:	685b      	ldr	r3, [r3, #4]
 23f80d4:	4798      	blx	r3
        logHandler = nullptr;
 23f80d6:	2300      	movs	r3, #0
 23f80d8:	6563      	str	r3, [r4, #84]	; 0x54
        capacity_(0) {
 23f80da:	2300      	movs	r3, #0
    getLogLevelFilters(level, filters);
 23f80dc:	aa02      	add	r2, sp, #8
 23f80de:	4620      	mov	r0, r4
 23f80e0:	f10d 0107 	add.w	r1, sp, #7
 23f80e4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 23f80e8:	9304      	str	r3, [sp, #16]
 23f80ea:	f7ff ff33 	bl	23f7f54 <_ZNK16DeviceInfoLedger18getLogLevelFiltersER8LogLevelRN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE>
    logHandler = new DeviceInfoLedgerLogHandler(level, filters);
 23f80ee:	a902      	add	r1, sp, #8
 23f80f0:	a805      	add	r0, sp, #20
 23f80f2:	f7fe f817 	bl	23f6124 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f80f6:	202c      	movs	r0, #44	; 0x2c
 23f80f8:	f7fd ff45 	bl	23f5f86 <_Znwj>
 23f80fc:	4605      	mov	r5, r0
 23f80fe:	b120      	cbz	r0, 23f810a <_ZN16DeviceInfoLedger19configureLogHandlerEv+0x52>
 23f8100:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23f8104:	aa05      	add	r2, sp, #20
 23f8106:	f7ff fbd5 	bl	23f78b4 <_ZN26DeviceInfoLedgerLogHandlerC1E8LogLevelN5spark6VectorINS1_17LogCategoryFilterENS1_16DefaultAllocatorEEE>
 23f810a:	6565      	str	r5, [r4, #84]	; 0x54
 23f810c:	a805      	add	r0, sp, #20
 23f810e:	f7fd ffc8 	bl	23f60a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
	LogManager::instance()->addHandler(logHandler);
 23f8112:	f002 f807 	bl	23fa124 <_ZN5spark10LogManager8instanceEv>
 23f8116:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f8118:	f002 fa0a 	bl	23fa530 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
    LogCategoryFilters filters;
 23f811c:	a802      	add	r0, sp, #8
 23f811e:	f7fd ffc0 	bl	23f60a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23f8122:	b009      	add	sp, #36	; 0x24
 23f8124:	bd30      	pop	{r4, r5, pc}
	...

023f8128 <_ZN16DeviceInfoLedger12updateConfigEv>:
void DeviceInfoLedger::updateConfig() {
 23f8128:	b570      	push	{r4, r5, r6, lr}
 23f812a:	b086      	sub	sp, #24
 23f812c:	4604      	mov	r4, r0
        DeviceInfoLedger::instance().getConfigLastRunLog(),
 23f812e:	f7fe fb2f 	bl	23f6790 <_ZN16DeviceInfoLedger8instanceEv>
    int getConfigInt(const char *key, int defaultValue = 0) const { return DeviceConfigLedger::instance().getConfigInt(key, defaultValue); };
 23f8132:	f7fe fe5b 	bl	23f6dec <_ZN18DeviceConfigLedger8instanceEv>
 23f8136:	2200      	movs	r2, #0
 23f8138:	491f      	ldr	r1, [pc, #124]	; (23f81b8 <_ZN16DeviceInfoLedger12updateConfigEv+0x90>)
 23f813a:	f7ff fd2f 	bl	23f7b9c <_ZNK18DeviceConfigLedger12getConfigIntEPKci>
 23f813e:	4605      	mov	r5, r0
        DeviceInfoLedger::instance().getConfigConnectionLog(),
 23f8140:	f7fe fb26 	bl	23f6790 <_ZN16DeviceInfoLedger8instanceEv>
 23f8144:	f7fe fe52 	bl	23f6dec <_ZN18DeviceConfigLedger8instanceEv>
 23f8148:	2200      	movs	r2, #0
 23f814a:	491c      	ldr	r1, [pc, #112]	; (23f81bc <_ZN16DeviceInfoLedger12updateConfigEv+0x94>)
 23f814c:	f7ff fd26 	bl	23f7b9c <_ZNK18DeviceConfigLedger12getConfigIntEPKci>
 23f8150:	4606      	mov	r6, r0
        DeviceInfoLedger::instance().getConfigString("logLevel").c_str());
 23f8152:	f7fe fb1d 	bl	23f6790 <_ZN16DeviceInfoLedger8instanceEv>
    String getConfigString(const char *key, const char *defaultValue = "") const { return DeviceConfigLedger::instance().getConfigString(key, defaultValue); };
 23f8156:	f7fe fe49 	bl	23f6dec <_ZN18DeviceConfigLedger8instanceEv>
 23f815a:	4b19      	ldr	r3, [pc, #100]	; (23f81c0 <_ZN16DeviceInfoLedger12updateConfigEv+0x98>)
 23f815c:	4601      	mov	r1, r0
 23f815e:	4a19      	ldr	r2, [pc, #100]	; (23f81c4 <_ZN16DeviceInfoLedger12updateConfigEv+0x9c>)
 23f8160:	a802      	add	r0, sp, #8
 23f8162:	f7ff fd43 	bl	23f7bec <_ZNK18DeviceConfigLedger15getConfigStringEPKcS1_>
    _deviceInfoLog.info("updateConfig lastRunLog=%d connectionLog=%d logLevel=%s", 
 23f8166:	9b02      	ldr	r3, [sp, #8]
 23f8168:	462a      	mov	r2, r5
 23f816a:	4917      	ldr	r1, [pc, #92]	; (23f81c8 <_ZN16DeviceInfoLedger12updateConfigEv+0xa0>)
 23f816c:	4817      	ldr	r0, [pc, #92]	; (23f81cc <_ZN16DeviceInfoLedger12updateConfigEv+0xa4>)
 23f816e:	9300      	str	r3, [sp, #0]
 23f8170:	4633      	mov	r3, r6
 23f8172:	f7fe fa9e 	bl	23f66b2 <_ZNK5spark6Logger4infoEPKcz>
        DeviceInfoLedger::instance().getConfigString("logLevel").c_str());
 23f8176:	a802      	add	r0, sp, #8
 23f8178:	f002 ff1e 	bl	23fafb8 <_ZN6StringD1Ev>
    configureLogHandler();
 23f817c:	4620      	mov	r0, r4
 23f817e:	f7ff ff9b 	bl	23f80b8 <_ZN16DeviceInfoLedger19configureLogHandlerEv>
    connectionLogSize = DeviceInfoLedger::instance().getConfigConnectionLog();
 23f8182:	f7fe fb05 	bl	23f6790 <_ZN16DeviceInfoLedger8instanceEv>
    int getConfigInt(const char *key, int defaultValue = 0) const { return DeviceConfigLedger::instance().getConfigInt(key, defaultValue); };
 23f8186:	f7fe fe31 	bl	23f6dec <_ZN18DeviceConfigLedger8instanceEv>
 23f818a:	2200      	movs	r2, #0
 23f818c:	490b      	ldr	r1, [pc, #44]	; (23f81bc <_ZN16DeviceInfoLedger12updateConfigEv+0x94>)
 23f818e:	f7ff fd05 	bl	23f7b9c <_ZNK18DeviceConfigLedger12getConfigIntEPKci>
 23f8192:	6260      	str	r0, [r4, #36]	; 0x24
    if (connectionLogBuffer) {
 23f8194:	6a20      	ldr	r0, [r4, #32]
 23f8196:	b118      	cbz	r0, 23f81a0 <_ZN16DeviceInfoLedger12updateConfigEv+0x78>
        delete[] connectionLogBuffer;
 23f8198:	f7fd fef9 	bl	23f5f8e <_ZdaPv>
        connectionLogBuffer = nullptr;
 23f819c:	2300      	movs	r3, #0
 23f819e:	6223      	str	r3, [r4, #32]
    if (connectionLogSize) {
 23f81a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f81a2:	b110      	cbz	r0, 23f81aa <_ZN16DeviceInfoLedger12updateConfigEv+0x82>
        connectionLogBuffer = new uint8_t[connectionLogSize];
 23f81a4:	f7fd fef1 	bl	23f5f8a <_Znaj>
 23f81a8:	6220      	str	r0, [r4, #32]
 23f81aa:	2200      	movs	r2, #0
 23f81ac:	f104 0328 	add.w	r3, r4, #40	; 0x28
 23f81b0:	e8c3 2faf 	stl	r2, [r3]
}
 23f81b4:	b006      	add	sp, #24
 23f81b6:	bd70      	pop	{r4, r5, r6, pc}
 23f81b8:	023ff3f7 	.word	0x023ff3f7
 23f81bc:	023ff402 	.word	0x023ff402
 23f81c0:	023ffa36 	.word	0x023ffa36
 23f81c4:	023ff2f1 	.word	0x023ff2f1
 23f81c8:	023ff410 	.word	0x023ff410
 23f81cc:	1007ae4c 	.word	0x1007ae4c

023f81d0 <_ZN16DeviceInfoLedger5setupEv>:
void DeviceInfoLedger::setup() {
 23f81d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (setupComplete) {
 23f81d2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
void DeviceInfoLedger::setup() {
 23f81d6:	4604      	mov	r4, r0
 23f81d8:	b085      	sub	sp, #20
    if (setupComplete) {
 23f81da:	2b00      	cmp	r3, #0
 23f81dc:	f040 8095 	bne.w	23f830a <_ZN16DeviceInfoLedger5setupEv+0x13a>
    DeviceConfigLedger::instance().withUpdateCallback([this]() { updateConfig(); });
 23f81e0:	f7fe fe04 	bl	23f6dec <_ZN18DeviceConfigLedger8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
 23f81e4:	4b55      	ldr	r3, [pc, #340]	; (23f833c <_ZN16DeviceInfoLedger5setupEv+0x16c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f81e6:	9400      	str	r4, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f81e8:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f81ea:	4b55      	ldr	r3, [pc, #340]	; (23f8340 <_ZN16DeviceInfoLedger5setupEv+0x170>)
 23f81ec:	4605      	mov	r5, r0
 23f81ee:	9302      	str	r3, [sp, #8]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 23f81f0:	e9d0 0320 	ldrd	r0, r3, [r0, #128]	; 0x80
 23f81f4:	4298      	cmp	r0, r3
 23f81f6:	d077      	beq.n	23f82e8 <_ZN16DeviceInfoLedger5setupEv+0x118>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23f81f8:	b110      	cbz	r0, 23f8200 <_ZN16DeviceInfoLedger5setupEv+0x30>
 23f81fa:	4669      	mov	r1, sp
 23f81fc:	f7fe fb73 	bl	23f68e6 <_ZNSt8functionIFvvEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
 23f8200:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 23f8204:	3310      	adds	r3, #16
 23f8206:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    class function<_Res(_ArgTypes...)>
 23f820a:	4668      	mov	r0, sp
 23f820c:	f7fe fa05 	bl	23f661a <_ZNSt14_Function_baseD1Ev>
        int reason = RESET_REASON_NONE;
 23f8210:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23f8212:	4668      	mov	r0, sp
 23f8214:	4611      	mov	r1, r2
        int reason = RESET_REASON_NONE;
 23f8216:	9200      	str	r2, [sp, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23f8218:	f000 f944 	bl	23f84a4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 23f821c:	9b00      	ldr	r3, [sp, #0]
    if (resetReason ==  RESET_REASON_USER) {
 23f821e:	2200      	movs	r2, #0
 23f8220:	2b8c      	cmp	r3, #140	; 0x8c
    resetReason = System.resetReason();
 23f8222:	64a3      	str	r3, [r4, #72]	; 0x48
    if (resetReason ==  RESET_REASON_USER) {
 23f8224:	d106      	bne.n	23f8234 <_ZN16DeviceInfoLedger5setupEv+0x64>
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23f8226:	4669      	mov	r1, sp
 23f8228:	4610      	mov	r0, r2
        uint32_t data = 0;
 23f822a:	9200      	str	r2, [sp, #0]
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23f822c:	f000 f93a 	bl	23f84a4 <HAL_Core_Get_Last_Reset_Info>
        return data;
 23f8230:	9b00      	ldr	r3, [sp, #0]
        resetReasonData = System.resetReasonData();
 23f8232:	64e3      	str	r3, [r4, #76]	; 0x4c
    infoLedger = Particle.ledger(infoLedgerName);
 23f8234:	6861      	ldr	r1, [r4, #4]
 23f8236:	4668      	mov	r0, sp
 23f8238:	f000 fe4a 	bl	23f8ed0 <_ZN10CloudClass6ledgerEPKc>
      __a = _GLIBCXX_MOVE(__b);
 23f823c:	9a00      	ldr	r2, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f823e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23f8240:	4668      	mov	r0, sp
      __a = _GLIBCXX_MOVE(__b);
 23f8242:	6522      	str	r2, [r4, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 23f8244:	9300      	str	r3, [sp, #0]
 23f8246:	f7fe fa60 	bl	23f670a <_ZN8particle6LedgerD1Ev>
    updateConfig();
 23f824a:	4620      	mov	r0, r4
 23f824c:	f7ff ff6c 	bl	23f8128 <_ZN16DeviceInfoLedger12updateConfigEv>
    if (retainedBuffer && retainedBufferSize && retainedBufferSize > sizeof(RetainedBufferHeader)) {
 23f8250:	6963      	ldr	r3, [r4, #20]
 23f8252:	2b00      	cmp	r3, #0
 23f8254:	d06d      	beq.n	23f8332 <_ZN16DeviceInfoLedger5setupEv+0x162>
 23f8256:	69a2      	ldr	r2, [r4, #24]
 23f8258:	2a0c      	cmp	r2, #12
 23f825a:	d96a      	bls.n	23f8332 <_ZN16DeviceInfoLedger5setupEv+0x162>
        retainedData = &retainedBuffer[sizeof(RetainedBufferHeader)];
 23f825c:	f103 010c 	add.w	r1, r3, #12
 23f8260:	6421      	str	r1, [r4, #64]	; 0x40
        retainedDataSize = retainedBufferSize - sizeof(RetainedBufferHeader);
 23f8262:	f1a2 010c 	sub.w	r1, r2, #12
        retainedHdr = (RetainedBufferHeader *)retainedBuffer;
 23f8266:	63e3      	str	r3, [r4, #60]	; 0x3c
        retainedDataSize = retainedBufferSize - sizeof(RetainedBufferHeader);
 23f8268:	6461      	str	r1, [r4, #68]	; 0x44
        if (retainedHdr->magic == retainedMagicBytes && retainedHdr->size == retainedBufferSize && retainedHdr->headerSize == sizeof(RetainedBufferHeader)) {
 23f826a:	4d36      	ldr	r5, [pc, #216]	; (23f8344 <_ZN16DeviceInfoLedger5setupEv+0x174>)
 23f826c:	6819      	ldr	r1, [r3, #0]
 23f826e:	42a9      	cmp	r1, r5
 23f8270:	d14d      	bne.n	23f830e <_ZN16DeviceInfoLedger5setupEv+0x13e>
 23f8272:	8899      	ldrh	r1, [r3, #4]
 23f8274:	428a      	cmp	r2, r1
 23f8276:	d14a      	bne.n	23f830e <_ZN16DeviceInfoLedger5setupEv+0x13e>
 23f8278:	799b      	ldrb	r3, [r3, #6]
 23f827a:	2b0c      	cmp	r3, #12
 23f827c:	d147      	bne.n	23f830e <_ZN16DeviceInfoLedger5setupEv+0x13e>
            _deviceInfoLog.info("retained buffer valid");
 23f827e:	4932      	ldr	r1, [pc, #200]	; (23f8348 <_ZN16DeviceInfoLedger5setupEv+0x178>)
 23f8280:	4832      	ldr	r0, [pc, #200]	; (23f834c <_ZN16DeviceInfoLedger5setupEv+0x17c>)
 23f8282:	f7fe fa16 	bl	23f66b2 <_ZNK5spark6Logger4infoEPKcz>
	return __atomic_load_n(&_M_i, int(__m));
 23f8286:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f8288:	3308      	adds	r3, #8
 23f828a:	e8d3 3faf 	lda	r3, [r3]
            if (retainedHdr->offset > 0) {
 23f828e:	2b00      	cmp	r3, #0
 23f8290:	d038      	beq.n	23f8304 <_ZN16DeviceInfoLedger5setupEv+0x134>
 23f8292:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f8294:	3308      	adds	r3, #8
 23f8296:	e8d3 7faf 	lda	r7, [r3]
                if (size > retainedDataSize) {
 23f829a:	6c66      	ldr	r6, [r4, #68]	; 0x44
 23f829c:	f7fe fda6 	bl	23f6dec <_ZN18DeviceConfigLedger8instanceEv>
 23f82a0:	2200      	movs	r2, #0
 23f82a2:	492b      	ldr	r1, [pc, #172]	; (23f8350 <_ZN16DeviceInfoLedger5setupEv+0x180>)
 23f82a4:	f7ff fc7a 	bl	23f7b9c <_ZNK18DeviceConfigLedger12getConfigIntEPKci>
                if (lastRunLogConfig > 0) {
 23f82a8:	1e05      	subs	r5, r0, #0
 23f82aa:	dd26      	ble.n	23f82fa <_ZN16DeviceInfoLedger5setupEv+0x12a>
                    if (size > (size_t)lastRunLogConfig) {
 23f82ac:	42be      	cmp	r6, r7
 23f82ae:	bf28      	it	cs
 23f82b0:	463e      	movcs	r6, r7
 23f82b2:	42b5      	cmp	r5, r6
 23f82b4:	bf28      	it	cs
 23f82b6:	4635      	movcs	r5, r6
                    lastRunLog = new char[size + 1];
 23f82b8:	1c68      	adds	r0, r5, #1
 23f82ba:	f7fd fe66 	bl	23f5f8a <_Znaj>
 23f82be:	61e0      	str	r0, [r4, #28]
                    if (lastRunLog) {
 23f82c0:	b1d8      	cbz	r0, 23f82fa <_ZN16DeviceInfoLedger5setupEv+0x12a>
 23f82c2:	426b      	negs	r3, r5
 23f82c4:	18e8      	adds	r0, r5, r3
                        for(size_t ii = 0; ii < size; ii++) {
 23f82c6:	b1b3      	cbz	r3, 23f82f6 <_ZN16DeviceInfoLedger5setupEv+0x126>
 23f82c8:	e9d4 260f 	ldrd	r2, r6, [r4, #60]	; 0x3c
 23f82cc:	3208      	adds	r2, #8
 23f82ce:	e8d2 2faf 	lda	r2, [r2]
                            lastRunLog[ii] = retainedData[(retainedHdr->offset - size + ii) % retainedDataSize];
 23f82d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 23f82d4:	441a      	add	r2, r3
 23f82d6:	fbb2 f7f1 	udiv	r7, r2, r1
 23f82da:	fb01 2217 	mls	r2, r1, r7, r2
 23f82de:	5cb1      	ldrb	r1, [r6, r2]
 23f82e0:	69e2      	ldr	r2, [r4, #28]
 23f82e2:	3301      	adds	r3, #1
 23f82e4:	5411      	strb	r1, [r2, r0]
                        for(size_t ii = 0; ii < size; ii++) {
 23f82e6:	e7ed      	b.n	23f82c4 <_ZN16DeviceInfoLedger5setupEv+0xf4>
	  _M_realloc_insert(end(), __x);
 23f82e8:	4601      	mov	r1, r0
 23f82ea:	466a      	mov	r2, sp
 23f82ec:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 23f82f0:	f7ff fa7c 	bl	23f77ec <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
 23f82f4:	e789      	b.n	23f820a <_ZN16DeviceInfoLedger5setupEv+0x3a>
                        lastRunLog[size] = 0;
 23f82f6:	69e2      	ldr	r2, [r4, #28]
 23f82f8:	5553      	strb	r3, [r2, r5]
	__atomic_store_n(&_M_i, __i, int(__m));
 23f82fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f82fc:	2200      	movs	r2, #0
 23f82fe:	3308      	adds	r3, #8
 23f8300:	e8c3 2faf 	stl	r2, [r3]
    setupComplete = true;
 23f8304:	2301      	movs	r3, #1
 23f8306:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 23f830a:	b005      	add	sp, #20
 23f830c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _deviceInfoLog.info("retained buffer reinitialized");
 23f830e:	4911      	ldr	r1, [pc, #68]	; (23f8354 <_ZN16DeviceInfoLedger5setupEv+0x184>)
 23f8310:	480e      	ldr	r0, [pc, #56]	; (23f834c <_ZN16DeviceInfoLedger5setupEv+0x17c>)
 23f8312:	f7fe f9ce 	bl	23f66b2 <_ZNK5spark6Logger4infoEPKcz>
            retainedHdr->magic = retainedMagicBytes;
 23f8316:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f8318:	601d      	str	r5, [r3, #0]
            retainedHdr->size = retainedBufferSize;
 23f831a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f831c:	69a2      	ldr	r2, [r4, #24]
 23f831e:	809a      	strh	r2, [r3, #4]
            retainedHdr->headerSize = sizeof(RetainedBufferHeader);
 23f8320:	220c      	movs	r2, #12
 23f8322:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f8324:	719a      	strb	r2, [r3, #6]
            retainedHdr->reserved1 = 0;
 23f8326:	2200      	movs	r2, #0
 23f8328:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f832a:	71da      	strb	r2, [r3, #7]
 23f832c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f832e:	3308      	adds	r3, #8
 23f8330:	e7e6      	b.n	23f8300 <_ZN16DeviceInfoLedger5setupEv+0x130>
        retainedBuffer = nullptr;
 23f8332:	2300      	movs	r3, #0
        retainedBufferSize = 0;
 23f8334:	e9c4 3305 	strd	r3, r3, [r4, #20]
 23f8338:	e7e4      	b.n	23f8304 <_ZN16DeviceInfoLedger5setupEv+0x134>
 23f833a:	bf00      	nop
 23f833c:	023f8359 	.word	0x023f8359
 23f8340:	023f64ed 	.word	0x023f64ed
 23f8344:	de8e46cc 	.word	0xde8e46cc
 23f8348:	023ff448 	.word	0x023ff448
 23f834c:	1007ae4c 	.word	0x1007ae4c
 23f8350:	023ff3f7 	.word	0x023ff3f7
 23f8354:	023ff45e 	.word	0x023ff45e

023f8358 <_ZNSt17_Function_handlerIFvvEZN16DeviceInfoLedger5setupEvEUlvE_E9_M_invokeERKSt9_Any_data>:
    DeviceConfigLedger::instance().withUpdateCallback([this]() { updateConfig(); });
 23f8358:	6800      	ldr	r0, [r0, #0]
 23f835a:	f7ff bee5 	b.w	23f8128 <_ZN16DeviceInfoLedger12updateConfigEv>
	...

023f8360 <_GLOBAL__sub_I__ZN18DeviceConfigLedger9_instanceE>:
        name_(name) {
 23f8360:	4b01      	ldr	r3, [pc, #4]	; (23f8368 <_GLOBAL__sub_I__ZN18DeviceConfigLedger9_instanceE+0x8>)
 23f8362:	4a02      	ldr	r2, [pc, #8]	; (23f836c <_GLOBAL__sub_I__ZN18DeviceConfigLedger9_instanceE+0xc>)
 23f8364:	601a      	str	r2, [r3, #0]
}
 23f8366:	4770      	bx	lr
 23f8368:	1007ae4c 	.word	0x1007ae4c
 23f836c:	023ff47c 	.word	0x023ff47c

023f8370 <_ZN16DeviceInfoLedger4loopEv>:
void DeviceInfoLedger::loop() {
 23f8370:	b510      	push	{r4, lr}
 23f8372:	4604      	mov	r4, r0
    if (Network.ready()) {
 23f8374:	4825      	ldr	r0, [pc, #148]	; (23f840c <_ZN16DeviceInfoLedger4loopEv+0x9c>)
 23f8376:	f002 fce8 	bl	23fad4a <_ZN5spark12NetworkClass5readyEv>
 23f837a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 23f837e:	b378      	cbz	r0, 23f83e0 <_ZN16DeviceInfoLedger4loopEv+0x70>
        if (!isNetworkConnected) {
 23f8380:	b913      	cbnz	r3, 23f8388 <_ZN16DeviceInfoLedger4loopEv+0x18>
            isNetworkConnected = true;
 23f8382:	2301      	movs	r3, #1
 23f8384:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 23f8388:	2200      	movs	r2, #0
 23f838a:	4b21      	ldr	r3, [pc, #132]	; (23f8410 <_ZN16DeviceInfoLedger4loopEv+0xa0>)
 23f838c:	4611      	mov	r1, r2
 23f838e:	6858      	ldr	r0, [r3, #4]
 23f8390:	f000 fbd0 	bl	23f8b34 <network_ready>
 23f8394:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    if (Cellular.ready()) {
 23f8398:	b338      	cbz	r0, 23f83ea <_ZN16DeviceInfoLedger4loopEv+0x7a>
        if (!isCellularConnected) {
 23f839a:	b913      	cbnz	r3, 23f83a2 <_ZN16DeviceInfoLedger4loopEv+0x32>
            isCellularConnected = true;
 23f839c:	2301      	movs	r3, #1
 23f839e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f83a2:	2200      	movs	r2, #0
 23f83a4:	4b1b      	ldr	r3, [pc, #108]	; (23f8414 <_ZN16DeviceInfoLedger4loopEv+0xa4>)
 23f83a6:	4611      	mov	r1, r2
 23f83a8:	6858      	ldr	r0, [r3, #4]
 23f83aa:	f000 fbc3 	bl	23f8b34 <network_ready>
 23f83ae:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    if (WiFi.ready()) {
 23f83b2:	b1f8      	cbz	r0, 23f83f4 <_ZN16DeviceInfoLedger4loopEv+0x84>
        if (!isWiFiConnected) {
 23f83b4:	b913      	cbnz	r3, 23f83bc <_ZN16DeviceInfoLedger4loopEv+0x4c>
            isWiFiConnected = true;
 23f83b6:	2301      	movs	r3, #1
 23f83b8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f83bc:	f000 facc 	bl	23f8958 <spark_cloud_flag_connected>
 23f83c0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    if (Particle.connected()) {
 23f83c4:	b1d8      	cbz	r0, 23f83fe <_ZN16DeviceInfoLedger4loopEv+0x8e>
        if (!isCloudConnected) {
 23f83c6:	bb03      	cbnz	r3, 23f840a <_ZN16DeviceInfoLedger4loopEv+0x9a>
            isCloudConnected = true;
 23f83c8:	2301      	movs	r3, #1
 23f83ca:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
            connectionCount++;
 23f83ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
            onCloudConnection();
 23f83d0:	4620      	mov	r0, r4
            connectionCount++;
 23f83d2:	3301      	adds	r3, #1
 23f83d4:	6363      	str	r3, [r4, #52]	; 0x34
            onCloudConnection();
 23f83d6:	6823      	ldr	r3, [r4, #0]
}
 23f83d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            onCloudConnection();
 23f83dc:	689b      	ldr	r3, [r3, #8]
 23f83de:	4718      	bx	r3
        if (isNetworkConnected) {
 23f83e0:	2b00      	cmp	r3, #0
 23f83e2:	d0d1      	beq.n	23f8388 <_ZN16DeviceInfoLedger4loopEv+0x18>
            isNetworkConnected = false;
 23f83e4:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
 23f83e8:	e7ce      	b.n	23f8388 <_ZN16DeviceInfoLedger4loopEv+0x18>
        if (isCellularConnected) {
 23f83ea:	2b00      	cmp	r3, #0
 23f83ec:	d0d9      	beq.n	23f83a2 <_ZN16DeviceInfoLedger4loopEv+0x32>
            isCellularConnected = false;
 23f83ee:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 23f83f2:	e7d6      	b.n	23f83a2 <_ZN16DeviceInfoLedger4loopEv+0x32>
        if (isWiFiConnected) {
 23f83f4:	2b00      	cmp	r3, #0
 23f83f6:	d0e1      	beq.n	23f83bc <_ZN16DeviceInfoLedger4loopEv+0x4c>
            isWiFiConnected = false;
 23f83f8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 23f83fc:	e7de      	b.n	23f83bc <_ZN16DeviceInfoLedger4loopEv+0x4c>
        if (isCloudConnected) {
 23f83fe:	b123      	cbz	r3, 23f840a <_ZN16DeviceInfoLedger4loopEv+0x9a>
            writeToConnectionLog = true;
 23f8400:	2301      	movs	r3, #1
            isCloudConnected = false;
 23f8402:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
            writeToConnectionLog = true;
 23f8406:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 23f840a:	bd10      	pop	{r4, pc}
 23f840c:	1007aee0 	.word	0x1007aee0
 23f8410:	1007ae5c 	.word	0x1007ae5c
 23f8414:	1007af24 	.word	0x1007af24

023f8418 <cellular_global_identity>:
DYNALIB_FN(32, hal_cellular, cellular_unlock, void(void*))
DYNALIB_FN(33, hal_cellular, cellular_set_power_mode, void(int mode, void* reserved))
DYNALIB_FN(34, hal_cellular, cellular_set_active_sim, cellular_result_t(int, void*))
DYNALIB_FN(35, hal_cellular, cellular_get_active_sim, cellular_result_t(int*, void*))
DYNALIB_FN(36, hal_cellular, cellular_credentials_clear, int(void*))
DYNALIB_FN(37, hal_cellular, cellular_global_identity, cellular_result_t(CellularGlobalIdentity*, void*))
 23f8418:	b509      	push	{r0, r3, lr}
 23f841a:	4804      	ldr	r0, [pc, #16]	; (23f842c <cellular_global_identity+0x14>)
 23f841c:	6800      	ldr	r0, [r0, #0]
 23f841e:	4b04      	ldr	r3, [pc, #16]	; (23f8430 <cellular_global_identity+0x18>)
 23f8420:	4403      	add	r3, r0
 23f8422:	681b      	ldr	r3, [r3, #0]
 23f8424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f8428:	9302      	str	r3, [sp, #8]
 23f842a:	bd09      	pop	{r0, r3, pc}
 23f842c:	1007ac34 	.word	0x1007ac34
 23f8430:	0000006c 	.word	0x0000006c

023f8434 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f8434:	b509      	push	{r0, r3, lr}
 23f8436:	4804      	ldr	r0, [pc, #16]	; (23f8448 <os_mutex_recursive_create+0x14>)
 23f8438:	6800      	ldr	r0, [r0, #0]
 23f843a:	4b04      	ldr	r3, [pc, #16]	; (23f844c <os_mutex_recursive_create+0x18>)
 23f843c:	4403      	add	r3, r0
 23f843e:	681b      	ldr	r3, [r3, #0]
 23f8440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f8442:	9302      	str	r3, [sp, #8]
 23f8444:	bd09      	pop	{r0, r3, pc}
 23f8446:	0000      	.short	0x0000
 23f8448:	1007ac34 	.word	0x1007ac34
 23f844c:	00000030 	.word	0x00000030

023f8450 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23f8450:	b509      	push	{r0, r3, lr}
 23f8452:	4804      	ldr	r0, [pc, #16]	; (23f8464 <os_mutex_recursive_destroy+0x14>)
 23f8454:	6800      	ldr	r0, [r0, #0]
 23f8456:	4b04      	ldr	r3, [pc, #16]	; (23f8468 <os_mutex_recursive_destroy+0x18>)
 23f8458:	4403      	add	r3, r0
 23f845a:	681b      	ldr	r3, [r3, #0]
 23f845c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f845e:	9302      	str	r3, [sp, #8]
 23f8460:	bd09      	pop	{r0, r3, pc}
 23f8462:	0000      	.short	0x0000
 23f8464:	1007ac34 	.word	0x1007ac34
 23f8468:	00000030 	.word	0x00000030

023f846c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23f846c:	b509      	push	{r0, r3, lr}
 23f846e:	4804      	ldr	r0, [pc, #16]	; (23f8480 <os_mutex_recursive_lock+0x14>)
 23f8470:	6800      	ldr	r0, [r0, #0]
 23f8472:	4b04      	ldr	r3, [pc, #16]	; (23f8484 <os_mutex_recursive_lock+0x18>)
 23f8474:	4403      	add	r3, r0
 23f8476:	681b      	ldr	r3, [r3, #0]
 23f8478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f847a:	9302      	str	r3, [sp, #8]
 23f847c:	bd09      	pop	{r0, r3, pc}
 23f847e:	0000      	.short	0x0000
 23f8480:	1007ac34 	.word	0x1007ac34
 23f8484:	00000030 	.word	0x00000030

023f8488 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23f8488:	b509      	push	{r0, r3, lr}
 23f848a:	4804      	ldr	r0, [pc, #16]	; (23f849c <os_mutex_recursive_unlock+0x14>)
 23f848c:	6800      	ldr	r0, [r0, #0]
 23f848e:	4b04      	ldr	r3, [pc, #16]	; (23f84a0 <os_mutex_recursive_unlock+0x18>)
 23f8490:	4403      	add	r3, r0
 23f8492:	681b      	ldr	r3, [r3, #0]
 23f8494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f8496:	9302      	str	r3, [sp, #8]
 23f8498:	bd09      	pop	{r0, r3, pc}
 23f849a:	0000      	.short	0x0000
 23f849c:	1007ac34 	.word	0x1007ac34
 23f84a0:	00000030 	.word	0x00000030

023f84a4 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 23f84a4:	b509      	push	{r0, r3, lr}
 23f84a6:	4804      	ldr	r0, [pc, #16]	; (23f84b8 <HAL_Core_Get_Last_Reset_Info+0x14>)
 23f84a8:	6800      	ldr	r0, [r0, #0]
 23f84aa:	4b04      	ldr	r3, [pc, #16]	; (23f84bc <HAL_Core_Get_Last_Reset_Info+0x18>)
 23f84ac:	4403      	add	r3, r0
 23f84ae:	681b      	ldr	r3, [r3, #0]
 23f84b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f84b2:	9302      	str	r3, [sp, #8]
 23f84b4:	bd09      	pop	{r0, r3, pc}
 23f84b6:	0000      	.short	0x0000
 23f84b8:	1007ac34 	.word	0x1007ac34
 23f84bc:	0000001c 	.word	0x0000001c

023f84c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f84c0:	b509      	push	{r0, r3, lr}
 23f84c2:	4804      	ldr	r0, [pc, #16]	; (23f84d4 <HAL_RNG_GetRandomNumber+0x14>)
 23f84c4:	6800      	ldr	r0, [r0, #0]
 23f84c6:	4b04      	ldr	r3, [pc, #16]	; (23f84d8 <HAL_RNG_GetRandomNumber+0x18>)
 23f84c8:	4403      	add	r3, r0
 23f84ca:	681b      	ldr	r3, [r3, #0]
 23f84cc:	685b      	ldr	r3, [r3, #4]
 23f84ce:	9302      	str	r3, [sp, #8]
 23f84d0:	bd09      	pop	{r0, r3, pc}
 23f84d2:	0000      	.short	0x0000
 23f84d4:	1007ac34 	.word	0x1007ac34
 23f84d8:	00000000 	.word	0x00000000

023f84dc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f84dc:	b509      	push	{r0, r3, lr}
 23f84de:	4804      	ldr	r0, [pc, #16]	; (23f84f0 <HAL_Delay_Microseconds+0x14>)
 23f84e0:	6800      	ldr	r0, [r0, #0]
 23f84e2:	4b04      	ldr	r3, [pc, #16]	; (23f84f4 <HAL_Delay_Microseconds+0x18>)
 23f84e4:	4403      	add	r3, r0
 23f84e6:	681b      	ldr	r3, [r3, #0]
 23f84e8:	68db      	ldr	r3, [r3, #12]
 23f84ea:	9302      	str	r3, [sp, #8]
 23f84ec:	bd09      	pop	{r0, r3, pc}
 23f84ee:	0000      	.short	0x0000
 23f84f0:	1007ac34 	.word	0x1007ac34
 23f84f4:	00000000 	.word	0x00000000

023f84f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f84f8:	b509      	push	{r0, r3, lr}
 23f84fa:	4804      	ldr	r0, [pc, #16]	; (23f850c <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f84fc:	6800      	ldr	r0, [r0, #0]
 23f84fe:	4b04      	ldr	r3, [pc, #16]	; (23f8510 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f8500:	4403      	add	r3, r0
 23f8502:	681b      	ldr	r3, [r3, #0]
 23f8504:	695b      	ldr	r3, [r3, #20]
 23f8506:	9302      	str	r3, [sp, #8]
 23f8508:	bd09      	pop	{r0, r3, pc}
 23f850a:	0000      	.short	0x0000
 23f850c:	1007ac34 	.word	0x1007ac34
 23f8510:	00000000 	.word	0x00000000

023f8514 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23f8514:	b509      	push	{r0, r3, lr}
 23f8516:	4804      	ldr	r0, [pc, #16]	; (23f8528 <hal_timer_millis+0x14>)
 23f8518:	6800      	ldr	r0, [r0, #0]
 23f851a:	4b04      	ldr	r3, [pc, #16]	; (23f852c <hal_timer_millis+0x18>)
 23f851c:	4403      	add	r3, r0
 23f851e:	681b      	ldr	r3, [r3, #0]
 23f8520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f8522:	9302      	str	r3, [sp, #8]
 23f8524:	bd09      	pop	{r0, r3, pc}
 23f8526:	0000      	.short	0x0000
 23f8528:	1007ac34 	.word	0x1007ac34
 23f852c:	00000000 	.word	0x00000000

023f8530 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f8530:	b509      	push	{r0, r3, lr}
 23f8532:	4804      	ldr	r0, [pc, #16]	; (23f8544 <inet_inet_ntop+0x14>)
 23f8534:	6800      	ldr	r0, [r0, #0]
 23f8536:	4b04      	ldr	r3, [pc, #16]	; (23f8548 <inet_inet_ntop+0x18>)
 23f8538:	4403      	add	r3, r0
 23f853a:	681b      	ldr	r3, [r3, #0]
 23f853c:	695b      	ldr	r3, [r3, #20]
 23f853e:	9302      	str	r3, [sp, #8]
 23f8540:	bd09      	pop	{r0, r3, pc}
 23f8542:	0000      	.short	0x0000
 23f8544:	1007ac34 	.word	0x1007ac34
 23f8548:	0000004c 	.word	0x0000004c

023f854c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f854c:	b509      	push	{r0, r3, lr}
 23f854e:	4804      	ldr	r0, [pc, #16]	; (23f8560 <netdb_freeaddrinfo+0x14>)
 23f8550:	6800      	ldr	r0, [r0, #0]
 23f8552:	4b04      	ldr	r3, [pc, #16]	; (23f8564 <netdb_freeaddrinfo+0x18>)
 23f8554:	4403      	add	r3, r0
 23f8556:	681b      	ldr	r3, [r3, #0]
 23f8558:	689b      	ldr	r3, [r3, #8]
 23f855a:	9302      	str	r3, [sp, #8]
 23f855c:	bd09      	pop	{r0, r3, pc}
 23f855e:	0000      	.short	0x0000
 23f8560:	1007ac34 	.word	0x1007ac34
 23f8564:	00000050 	.word	0x00000050

023f8568 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23f8568:	b509      	push	{r0, r3, lr}
 23f856a:	4804      	ldr	r0, [pc, #16]	; (23f857c <netdb_getaddrinfo+0x14>)
 23f856c:	6800      	ldr	r0, [r0, #0]
 23f856e:	4b04      	ldr	r3, [pc, #16]	; (23f8580 <netdb_getaddrinfo+0x18>)
 23f8570:	4403      	add	r3, r0
 23f8572:	681b      	ldr	r3, [r3, #0]
 23f8574:	68db      	ldr	r3, [r3, #12]
 23f8576:	9302      	str	r3, [sp, #8]
 23f8578:	bd09      	pop	{r0, r3, pc}
 23f857a:	0000      	.short	0x0000
 23f857c:	1007ac34 	.word	0x1007ac34
 23f8580:	00000050 	.word	0x00000050

023f8584 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23f8584:	b509      	push	{r0, r3, lr}
 23f8586:	4804      	ldr	r0, [pc, #16]	; (23f8598 <hal_usart_end+0x14>)
 23f8588:	6800      	ldr	r0, [r0, #0]
 23f858a:	4b04      	ldr	r3, [pc, #16]	; (23f859c <hal_usart_end+0x18>)
 23f858c:	4403      	add	r3, r0
 23f858e:	681b      	ldr	r3, [r3, #0]
 23f8590:	689b      	ldr	r3, [r3, #8]
 23f8592:	9302      	str	r3, [sp, #8]
 23f8594:	bd09      	pop	{r0, r3, pc}
 23f8596:	0000      	.short	0x0000
 23f8598:	1007ac34 	.word	0x1007ac34
 23f859c:	00000024 	.word	0x00000024

023f85a0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f85a0:	b509      	push	{r0, r3, lr}
 23f85a2:	4804      	ldr	r0, [pc, #16]	; (23f85b4 <hal_usart_write+0x14>)
 23f85a4:	6800      	ldr	r0, [r0, #0]
 23f85a6:	4b04      	ldr	r3, [pc, #16]	; (23f85b8 <hal_usart_write+0x18>)
 23f85a8:	4403      	add	r3, r0
 23f85aa:	681b      	ldr	r3, [r3, #0]
 23f85ac:	68db      	ldr	r3, [r3, #12]
 23f85ae:	9302      	str	r3, [sp, #8]
 23f85b0:	bd09      	pop	{r0, r3, pc}
 23f85b2:	0000      	.short	0x0000
 23f85b4:	1007ac34 	.word	0x1007ac34
 23f85b8:	00000024 	.word	0x00000024

023f85bc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f85bc:	b509      	push	{r0, r3, lr}
 23f85be:	4804      	ldr	r0, [pc, #16]	; (23f85d0 <hal_usart_available+0x14>)
 23f85c0:	6800      	ldr	r0, [r0, #0]
 23f85c2:	4b04      	ldr	r3, [pc, #16]	; (23f85d4 <hal_usart_available+0x18>)
 23f85c4:	4403      	add	r3, r0
 23f85c6:	681b      	ldr	r3, [r3, #0]
 23f85c8:	691b      	ldr	r3, [r3, #16]
 23f85ca:	9302      	str	r3, [sp, #8]
 23f85cc:	bd09      	pop	{r0, r3, pc}
 23f85ce:	0000      	.short	0x0000
 23f85d0:	1007ac34 	.word	0x1007ac34
 23f85d4:	00000024 	.word	0x00000024

023f85d8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f85d8:	b509      	push	{r0, r3, lr}
 23f85da:	4804      	ldr	r0, [pc, #16]	; (23f85ec <hal_usart_read+0x14>)
 23f85dc:	6800      	ldr	r0, [r0, #0]
 23f85de:	4b04      	ldr	r3, [pc, #16]	; (23f85f0 <hal_usart_read+0x18>)
 23f85e0:	4403      	add	r3, r0
 23f85e2:	681b      	ldr	r3, [r3, #0]
 23f85e4:	695b      	ldr	r3, [r3, #20]
 23f85e6:	9302      	str	r3, [sp, #8]
 23f85e8:	bd09      	pop	{r0, r3, pc}
 23f85ea:	0000      	.short	0x0000
 23f85ec:	1007ac34 	.word	0x1007ac34
 23f85f0:	00000024 	.word	0x00000024

023f85f4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f85f4:	b509      	push	{r0, r3, lr}
 23f85f6:	4804      	ldr	r0, [pc, #16]	; (23f8608 <hal_usart_peek+0x14>)
 23f85f8:	6800      	ldr	r0, [r0, #0]
 23f85fa:	4b04      	ldr	r3, [pc, #16]	; (23f860c <hal_usart_peek+0x18>)
 23f85fc:	4403      	add	r3, r0
 23f85fe:	681b      	ldr	r3, [r3, #0]
 23f8600:	699b      	ldr	r3, [r3, #24]
 23f8602:	9302      	str	r3, [sp, #8]
 23f8604:	bd09      	pop	{r0, r3, pc}
 23f8606:	0000      	.short	0x0000
 23f8608:	1007ac34 	.word	0x1007ac34
 23f860c:	00000024 	.word	0x00000024

023f8610 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f8610:	b509      	push	{r0, r3, lr}
 23f8612:	4804      	ldr	r0, [pc, #16]	; (23f8624 <hal_usart_flush+0x14>)
 23f8614:	6800      	ldr	r0, [r0, #0]
 23f8616:	4b04      	ldr	r3, [pc, #16]	; (23f8628 <hal_usart_flush+0x18>)
 23f8618:	4403      	add	r3, r0
 23f861a:	681b      	ldr	r3, [r3, #0]
 23f861c:	69db      	ldr	r3, [r3, #28]
 23f861e:	9302      	str	r3, [sp, #8]
 23f8620:	bd09      	pop	{r0, r3, pc}
 23f8622:	0000      	.short	0x0000
 23f8624:	1007ac34 	.word	0x1007ac34
 23f8628:	00000024 	.word	0x00000024

023f862c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f862c:	b509      	push	{r0, r3, lr}
 23f862e:	4804      	ldr	r0, [pc, #16]	; (23f8640 <hal_usart_is_enabled+0x14>)
 23f8630:	6800      	ldr	r0, [r0, #0]
 23f8632:	4b04      	ldr	r3, [pc, #16]	; (23f8644 <hal_usart_is_enabled+0x18>)
 23f8634:	4403      	add	r3, r0
 23f8636:	681b      	ldr	r3, [r3, #0]
 23f8638:	6a1b      	ldr	r3, [r3, #32]
 23f863a:	9302      	str	r3, [sp, #8]
 23f863c:	bd09      	pop	{r0, r3, pc}
 23f863e:	0000      	.short	0x0000
 23f8640:	1007ac34 	.word	0x1007ac34
 23f8644:	00000024 	.word	0x00000024

023f8648 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f8648:	b509      	push	{r0, r3, lr}
 23f864a:	4804      	ldr	r0, [pc, #16]	; (23f865c <hal_usart_available_data_for_write+0x14>)
 23f864c:	6800      	ldr	r0, [r0, #0]
 23f864e:	4b04      	ldr	r3, [pc, #16]	; (23f8660 <hal_usart_available_data_for_write+0x18>)
 23f8650:	4403      	add	r3, r0
 23f8652:	681b      	ldr	r3, [r3, #0]
 23f8654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f8656:	9302      	str	r3, [sp, #8]
 23f8658:	bd09      	pop	{r0, r3, pc}
 23f865a:	0000      	.short	0x0000
 23f865c:	1007ac34 	.word	0x1007ac34
 23f8660:	00000024 	.word	0x00000024

023f8664 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23f8664:	b509      	push	{r0, r3, lr}
 23f8666:	4804      	ldr	r0, [pc, #16]	; (23f8678 <hal_usart_begin_config+0x14>)
 23f8668:	6800      	ldr	r0, [r0, #0]
 23f866a:	4b04      	ldr	r3, [pc, #16]	; (23f867c <hal_usart_begin_config+0x18>)
 23f866c:	4403      	add	r3, r0
 23f866e:	681b      	ldr	r3, [r3, #0]
 23f8670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f8672:	9302      	str	r3, [sp, #8]
 23f8674:	bd09      	pop	{r0, r3, pc}
 23f8676:	0000      	.short	0x0000
 23f8678:	1007ac34 	.word	0x1007ac34
 23f867c:	00000024 	.word	0x00000024

023f8680 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f8680:	b509      	push	{r0, r3, lr}
 23f8682:	4804      	ldr	r0, [pc, #16]	; (23f8694 <hal_usart_init_ex+0x14>)
 23f8684:	6800      	ldr	r0, [r0, #0]
 23f8686:	4b04      	ldr	r3, [pc, #16]	; (23f8698 <hal_usart_init_ex+0x18>)
 23f8688:	4403      	add	r3, r0
 23f868a:	681b      	ldr	r3, [r3, #0]
 23f868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f868e:	9302      	str	r3, [sp, #8]
 23f8690:	bd09      	pop	{r0, r3, pc}
 23f8692:	0000      	.short	0x0000
 23f8694:	1007ac34 	.word	0x1007ac34
 23f8698:	00000024 	.word	0x00000024

023f869c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f869c:	b509      	push	{r0, r3, lr}
 23f869e:	4804      	ldr	r0, [pc, #16]	; (23f86b0 <HAL_USB_USART_Init+0x14>)
 23f86a0:	6800      	ldr	r0, [r0, #0]
 23f86a2:	4b04      	ldr	r3, [pc, #16]	; (23f86b4 <HAL_USB_USART_Init+0x18>)
 23f86a4:	4403      	add	r3, r0
 23f86a6:	681b      	ldr	r3, [r3, #0]
 23f86a8:	681b      	ldr	r3, [r3, #0]
 23f86aa:	9302      	str	r3, [sp, #8]
 23f86ac:	bd09      	pop	{r0, r3, pc}
 23f86ae:	0000      	.short	0x0000
 23f86b0:	1007ac34 	.word	0x1007ac34
 23f86b4:	00000034 	.word	0x00000034

023f86b8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f86b8:	b509      	push	{r0, r3, lr}
 23f86ba:	4804      	ldr	r0, [pc, #16]	; (23f86cc <HAL_USB_USART_Begin+0x14>)
 23f86bc:	6800      	ldr	r0, [r0, #0]
 23f86be:	4b04      	ldr	r3, [pc, #16]	; (23f86d0 <HAL_USB_USART_Begin+0x18>)
 23f86c0:	4403      	add	r3, r0
 23f86c2:	681b      	ldr	r3, [r3, #0]
 23f86c4:	685b      	ldr	r3, [r3, #4]
 23f86c6:	9302      	str	r3, [sp, #8]
 23f86c8:	bd09      	pop	{r0, r3, pc}
 23f86ca:	0000      	.short	0x0000
 23f86cc:	1007ac34 	.word	0x1007ac34
 23f86d0:	00000034 	.word	0x00000034

023f86d4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23f86d4:	b509      	push	{r0, r3, lr}
 23f86d6:	4804      	ldr	r0, [pc, #16]	; (23f86e8 <HAL_USB_USART_End+0x14>)
 23f86d8:	6800      	ldr	r0, [r0, #0]
 23f86da:	4b04      	ldr	r3, [pc, #16]	; (23f86ec <HAL_USB_USART_End+0x18>)
 23f86dc:	4403      	add	r3, r0
 23f86de:	681b      	ldr	r3, [r3, #0]
 23f86e0:	689b      	ldr	r3, [r3, #8]
 23f86e2:	9302      	str	r3, [sp, #8]
 23f86e4:	bd09      	pop	{r0, r3, pc}
 23f86e6:	0000      	.short	0x0000
 23f86e8:	1007ac34 	.word	0x1007ac34
 23f86ec:	00000034 	.word	0x00000034

023f86f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
 23f86f0:	b509      	push	{r0, r3, lr}
 23f86f2:	4804      	ldr	r0, [pc, #16]	; (23f8704 <HAL_USB_USART_Available_Data+0x14>)
 23f86f4:	6800      	ldr	r0, [r0, #0]
 23f86f6:	4b04      	ldr	r3, [pc, #16]	; (23f8708 <HAL_USB_USART_Available_Data+0x18>)
 23f86f8:	4403      	add	r3, r0
 23f86fa:	681b      	ldr	r3, [r3, #0]
 23f86fc:	691b      	ldr	r3, [r3, #16]
 23f86fe:	9302      	str	r3, [sp, #8]
 23f8700:	bd09      	pop	{r0, r3, pc}
 23f8702:	0000      	.short	0x0000
 23f8704:	1007ac34 	.word	0x1007ac34
 23f8708:	00000034 	.word	0x00000034

023f870c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
 23f870c:	b509      	push	{r0, r3, lr}
 23f870e:	4804      	ldr	r0, [pc, #16]	; (23f8720 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f8710:	6800      	ldr	r0, [r0, #0]
 23f8712:	4b04      	ldr	r3, [pc, #16]	; (23f8724 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f8714:	4403      	add	r3, r0
 23f8716:	681b      	ldr	r3, [r3, #0]
 23f8718:	695b      	ldr	r3, [r3, #20]
 23f871a:	9302      	str	r3, [sp, #8]
 23f871c:	bd09      	pop	{r0, r3, pc}
 23f871e:	0000      	.short	0x0000
 23f8720:	1007ac34 	.word	0x1007ac34
 23f8724:	00000034 	.word	0x00000034

023f8728 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f8728:	b509      	push	{r0, r3, lr}
 23f872a:	4804      	ldr	r0, [pc, #16]	; (23f873c <HAL_USB_USART_Receive_Data+0x14>)
 23f872c:	6800      	ldr	r0, [r0, #0]
 23f872e:	4b04      	ldr	r3, [pc, #16]	; (23f8740 <HAL_USB_USART_Receive_Data+0x18>)
 23f8730:	4403      	add	r3, r0
 23f8732:	681b      	ldr	r3, [r3, #0]
 23f8734:	699b      	ldr	r3, [r3, #24]
 23f8736:	9302      	str	r3, [sp, #8]
 23f8738:	bd09      	pop	{r0, r3, pc}
 23f873a:	0000      	.short	0x0000
 23f873c:	1007ac34 	.word	0x1007ac34
 23f8740:	00000034 	.word	0x00000034

023f8744 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f8744:	b509      	push	{r0, r3, lr}
 23f8746:	4804      	ldr	r0, [pc, #16]	; (23f8758 <HAL_USB_USART_Send_Data+0x14>)
 23f8748:	6800      	ldr	r0, [r0, #0]
 23f874a:	4b04      	ldr	r3, [pc, #16]	; (23f875c <HAL_USB_USART_Send_Data+0x18>)
 23f874c:	4403      	add	r3, r0
 23f874e:	681b      	ldr	r3, [r3, #0]
 23f8750:	69db      	ldr	r3, [r3, #28]
 23f8752:	9302      	str	r3, [sp, #8]
 23f8754:	bd09      	pop	{r0, r3, pc}
 23f8756:	0000      	.short	0x0000
 23f8758:	1007ac34 	.word	0x1007ac34
 23f875c:	00000034 	.word	0x00000034

023f8760 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
 23f8760:	b509      	push	{r0, r3, lr}
 23f8762:	4804      	ldr	r0, [pc, #16]	; (23f8774 <HAL_USB_USART_Flush_Data+0x14>)
 23f8764:	6800      	ldr	r0, [r0, #0]
 23f8766:	4b04      	ldr	r3, [pc, #16]	; (23f8778 <HAL_USB_USART_Flush_Data+0x18>)
 23f8768:	4403      	add	r3, r0
 23f876a:	681b      	ldr	r3, [r3, #0]
 23f876c:	6a1b      	ldr	r3, [r3, #32]
 23f876e:	9302      	str	r3, [sp, #8]
 23f8770:	bd09      	pop	{r0, r3, pc}
 23f8772:	0000      	.short	0x0000
 23f8774:	1007ac34 	.word	0x1007ac34
 23f8778:	00000034 	.word	0x00000034

023f877c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23f877c:	b509      	push	{r0, r3, lr}
 23f877e:	4804      	ldr	r0, [pc, #16]	; (23f8790 <HAL_USB_USART_Is_Connected+0x14>)
 23f8780:	6800      	ldr	r0, [r0, #0]
 23f8782:	4b04      	ldr	r3, [pc, #16]	; (23f8794 <HAL_USB_USART_Is_Connected+0x18>)
 23f8784:	4403      	add	r3, r0
 23f8786:	681b      	ldr	r3, [r3, #0]
 23f8788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f878a:	9302      	str	r3, [sp, #8]
 23f878c:	bd09      	pop	{r0, r3, pc}
 23f878e:	0000      	.short	0x0000
 23f8790:	1007ac34 	.word	0x1007ac34
 23f8794:	00000034 	.word	0x00000034

023f8798 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23f8798:	b509      	push	{r0, r3, lr}
 23f879a:	4804      	ldr	r0, [pc, #16]	; (23f87ac <panic_+0x14>)
 23f879c:	6800      	ldr	r0, [r0, #0]
 23f879e:	4b04      	ldr	r3, [pc, #16]	; (23f87b0 <panic_+0x18>)
 23f87a0:	4403      	add	r3, r0
 23f87a2:	681b      	ldr	r3, [r3, #0]
 23f87a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f87a6:	9302      	str	r3, [sp, #8]
 23f87a8:	bd09      	pop	{r0, r3, pc}
 23f87aa:	0000      	.short	0x0000
 23f87ac:	1007ac34 	.word	0x1007ac34
 23f87b0:	00000048 	.word	0x00000048

023f87b4 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
 23f87b4:	b509      	push	{r0, r3, lr}
 23f87b6:	4804      	ldr	r0, [pc, #16]	; (23f87c8 <jsmn_init+0x14>)
 23f87b8:	6800      	ldr	r0, [r0, #0]
 23f87ba:	4b04      	ldr	r3, [pc, #16]	; (23f87cc <jsmn_init+0x18>)
 23f87bc:	4403      	add	r3, r0
 23f87be:	681b      	ldr	r3, [r3, #0]
 23f87c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f87c2:	9302      	str	r3, [sp, #8]
 23f87c4:	bd09      	pop	{r0, r3, pc}
 23f87c6:	0000      	.short	0x0000
 23f87c8:	1007ac34 	.word	0x1007ac34
 23f87cc:	00000048 	.word	0x00000048

023f87d0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23f87d0:	b509      	push	{r0, r3, lr}
 23f87d2:	4804      	ldr	r0, [pc, #16]	; (23f87e4 <log_message+0x14>)
 23f87d4:	6800      	ldr	r0, [r0, #0]
 23f87d6:	4b04      	ldr	r3, [pc, #16]	; (23f87e8 <log_message+0x18>)
 23f87d8:	4403      	add	r3, r0
 23f87da:	681b      	ldr	r3, [r3, #0]
 23f87dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f87de:	9302      	str	r3, [sp, #8]
 23f87e0:	bd09      	pop	{r0, r3, pc}
 23f87e2:	0000      	.short	0x0000
 23f87e4:	1007ac34 	.word	0x1007ac34
 23f87e8:	00000048 	.word	0x00000048

023f87ec <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23f87ec:	b509      	push	{r0, r3, lr}
 23f87ee:	4804      	ldr	r0, [pc, #16]	; (23f8800 <log_message_v+0x14>)
 23f87f0:	6800      	ldr	r0, [r0, #0]
 23f87f2:	4b04      	ldr	r3, [pc, #16]	; (23f8804 <log_message_v+0x18>)
 23f87f4:	4403      	add	r3, r0
 23f87f6:	681b      	ldr	r3, [r3, #0]
 23f87f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f87fa:	9302      	str	r3, [sp, #8]
 23f87fc:	bd09      	pop	{r0, r3, pc}
 23f87fe:	0000      	.short	0x0000
 23f8800:	1007ac34 	.word	0x1007ac34
 23f8804:	00000048 	.word	0x00000048

023f8808 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23f8808:	b509      	push	{r0, r3, lr}
 23f880a:	4804      	ldr	r0, [pc, #16]	; (23f881c <log_level_name+0x14>)
 23f880c:	6800      	ldr	r0, [r0, #0]
 23f880e:	4b04      	ldr	r3, [pc, #16]	; (23f8820 <log_level_name+0x18>)
 23f8810:	4403      	add	r3, r0
 23f8812:	681b      	ldr	r3, [r3, #0]
 23f8814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f8816:	9302      	str	r3, [sp, #8]
 23f8818:	bd09      	pop	{r0, r3, pc}
 23f881a:	0000      	.short	0x0000
 23f881c:	1007ac34 	.word	0x1007ac34
 23f8820:	00000048 	.word	0x00000048

023f8824 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23f8824:	b509      	push	{r0, r3, lr}
 23f8826:	4804      	ldr	r0, [pc, #16]	; (23f8838 <log_set_callbacks+0x14>)
 23f8828:	6800      	ldr	r0, [r0, #0]
 23f882a:	4b04      	ldr	r3, [pc, #16]	; (23f883c <log_set_callbacks+0x18>)
 23f882c:	4403      	add	r3, r0
 23f882e:	681b      	ldr	r3, [r3, #0]
 23f8830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23f8832:	9302      	str	r3, [sp, #8]
 23f8834:	bd09      	pop	{r0, r3, pc}
 23f8836:	0000      	.short	0x0000
 23f8838:	1007ac34 	.word	0x1007ac34
 23f883c:	00000048 	.word	0x00000048

023f8840 <jsmn_parse>:
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
DYNALIB_FN(39, services, diag_command, int(int, void*, void*))
DYNALIB_FN(40, services, set_system_error_message, void(const char*, ...))
DYNALIB_FN(41, services, clear_system_error_message, void())
DYNALIB_FN(42, services, get_system_error_message, const char*(int))
DYNALIB_FN(43, services, jsmn_parse, int(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
 23f8840:	b509      	push	{r0, r3, lr}
 23f8842:	4804      	ldr	r0, [pc, #16]	; (23f8854 <jsmn_parse+0x14>)
 23f8844:	6800      	ldr	r0, [r0, #0]
 23f8846:	4b04      	ldr	r3, [pc, #16]	; (23f8858 <jsmn_parse+0x18>)
 23f8848:	4403      	add	r3, r0
 23f884a:	681b      	ldr	r3, [r3, #0]
 23f884c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 23f8850:	9302      	str	r3, [sp, #8]
 23f8852:	bd09      	pop	{r0, r3, pc}
 23f8854:	1007ac34 	.word	0x1007ac34
 23f8858:	00000048 	.word	0x00000048

023f885c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f885c:	b509      	push	{r0, r3, lr}
 23f885e:	4804      	ldr	r0, [pc, #16]	; (23f8870 <set_system_mode+0x14>)
 23f8860:	6800      	ldr	r0, [r0, #0]
 23f8862:	4b04      	ldr	r3, [pc, #16]	; (23f8874 <set_system_mode+0x18>)
 23f8864:	4403      	add	r3, r0
 23f8866:	681b      	ldr	r3, [r3, #0]
 23f8868:	685b      	ldr	r3, [r3, #4]
 23f886a:	9302      	str	r3, [sp, #8]
 23f886c:	bd09      	pop	{r0, r3, pc}
 23f886e:	0000      	.short	0x0000
 23f8870:	1007ac34 	.word	0x1007ac34
 23f8874:	00000008 	.word	0x00000008

023f8878 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f8878:	b509      	push	{r0, r3, lr}
 23f887a:	4804      	ldr	r0, [pc, #16]	; (23f888c <system_thread_set_state+0x14>)
 23f887c:	6800      	ldr	r0, [r0, #0]
 23f887e:	4b04      	ldr	r3, [pc, #16]	; (23f8890 <system_thread_set_state+0x18>)
 23f8880:	4403      	add	r3, r0
 23f8882:	681b      	ldr	r3, [r3, #0]
 23f8884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f8886:	9302      	str	r3, [sp, #8]
 23f8888:	bd09      	pop	{r0, r3, pc}
 23f888a:	0000      	.short	0x0000
 23f888c:	1007ac34 	.word	0x1007ac34
 23f8890:	00000008 	.word	0x00000008

023f8894 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 23f8894:	b509      	push	{r0, r3, lr}
 23f8896:	4804      	ldr	r0, [pc, #16]	; (23f88a8 <system_version_info+0x14>)
 23f8898:	6800      	ldr	r0, [r0, #0]
 23f889a:	4b04      	ldr	r3, [pc, #16]	; (23f88ac <system_version_info+0x18>)
 23f889c:	4403      	add	r3, r0
 23f889e:	681b      	ldr	r3, [r3, #0]
 23f88a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f88a2:	9302      	str	r3, [sp, #8]
 23f88a4:	bd09      	pop	{r0, r3, pc}
 23f88a6:	0000      	.short	0x0000
 23f88a8:	1007ac34 	.word	0x1007ac34
 23f88ac:	00000008 	.word	0x00000008

023f88b0 <application_thread_invoke>:
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23f88b0:	b509      	push	{r0, r3, lr}
 23f88b2:	4804      	ldr	r0, [pc, #16]	; (23f88c4 <application_thread_invoke+0x14>)
 23f88b4:	6800      	ldr	r0, [r0, #0]
 23f88b6:	4b04      	ldr	r3, [pc, #16]	; (23f88c8 <application_thread_invoke+0x18>)
 23f88b8:	4403      	add	r3, r0
 23f88ba:	681b      	ldr	r3, [r3, #0]
 23f88bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f88be:	9302      	str	r3, [sp, #8]
 23f88c0:	bd09      	pop	{r0, r3, pc}
 23f88c2:	0000      	.short	0x0000
 23f88c4:	1007ac34 	.word	0x1007ac34
 23f88c8:	00000008 	.word	0x00000008

023f88cc <system_format_diag_data>:
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))
 23f88cc:	b509      	push	{r0, r3, lr}
 23f88ce:	4804      	ldr	r0, [pc, #16]	; (23f88e0 <system_format_diag_data+0x14>)
 23f88d0:	6800      	ldr	r0, [r0, #0]
 23f88d2:	4b04      	ldr	r3, [pc, #16]	; (23f88e4 <system_format_diag_data+0x18>)
 23f88d4:	4403      	add	r3, r0
 23f88d6:	681b      	ldr	r3, [r3, #0]
 23f88d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 23f88dc:	9302      	str	r3, [sp, #8]
 23f88de:	bd09      	pop	{r0, r3, pc}
 23f88e0:	1007ac34 	.word	0x1007ac34
 23f88e4:	00000008 	.word	0x00000008

023f88e8 <system_ctrl_set_app_request_handler>:

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f88e8:	b509      	push	{r0, r3, lr}
 23f88ea:	4804      	ldr	r0, [pc, #16]	; (23f88fc <system_ctrl_set_app_request_handler+0x14>)
 23f88ec:	6800      	ldr	r0, [r0, #0]
 23f88ee:	4b04      	ldr	r3, [pc, #16]	; (23f8900 <system_ctrl_set_app_request_handler+0x18>)
 23f88f0:	4403      	add	r3, r0
 23f88f2:	681b      	ldr	r3, [r3, #0]
 23f88f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f88f8:	9302      	str	r3, [sp, #8]
 23f88fa:	bd09      	pop	{r0, r3, pc}
 23f88fc:	1007ac34 	.word	0x1007ac34
 23f8900:	00000008 	.word	0x00000008

023f8904 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f8904:	b509      	push	{r0, r3, lr}
 23f8906:	4804      	ldr	r0, [pc, #16]	; (23f8918 <system_ctrl_set_result+0x14>)
 23f8908:	6800      	ldr	r0, [r0, #0]
 23f890a:	4b04      	ldr	r3, [pc, #16]	; (23f891c <system_ctrl_set_result+0x18>)
 23f890c:	4403      	add	r3, r0
 23f890e:	681b      	ldr	r3, [r3, #0]
 23f8910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f8914:	9302      	str	r3, [sp, #8]
 23f8916:	bd09      	pop	{r0, r3, pc}
 23f8918:	1007ac34 	.word	0x1007ac34
 23f891c:	00000008 	.word	0x00000008

023f8920 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f8920:	b509      	push	{r0, r3, lr}
 23f8922:	4804      	ldr	r0, [pc, #16]	; (23f8934 <spark_process+0x14>)
 23f8924:	6800      	ldr	r0, [r0, #0]
 23f8926:	4b04      	ldr	r3, [pc, #16]	; (23f8938 <spark_process+0x18>)
 23f8928:	4403      	add	r3, r0
 23f892a:	681b      	ldr	r3, [r3, #0]
 23f892c:	689b      	ldr	r3, [r3, #8]
 23f892e:	9302      	str	r3, [sp, #8]
 23f8930:	bd09      	pop	{r0, r3, pc}
 23f8932:	0000      	.short	0x0000
 23f8934:	1007ac34 	.word	0x1007ac34
 23f8938:	0000002c 	.word	0x0000002c

023f893c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23f893c:	b509      	push	{r0, r3, lr}
 23f893e:	4804      	ldr	r0, [pc, #16]	; (23f8950 <spark_cloud_flag_connect+0x14>)
 23f8940:	6800      	ldr	r0, [r0, #0]
 23f8942:	4b04      	ldr	r3, [pc, #16]	; (23f8954 <spark_cloud_flag_connect+0x18>)
 23f8944:	4403      	add	r3, r0
 23f8946:	681b      	ldr	r3, [r3, #0]
 23f8948:	68db      	ldr	r3, [r3, #12]
 23f894a:	9302      	str	r3, [sp, #8]
 23f894c:	bd09      	pop	{r0, r3, pc}
 23f894e:	0000      	.short	0x0000
 23f8950:	1007ac34 	.word	0x1007ac34
 23f8954:	0000002c 	.word	0x0000002c

023f8958 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23f8958:	b509      	push	{r0, r3, lr}
 23f895a:	4804      	ldr	r0, [pc, #16]	; (23f896c <spark_cloud_flag_connected+0x14>)
 23f895c:	6800      	ldr	r0, [r0, #0]
 23f895e:	4b04      	ldr	r3, [pc, #16]	; (23f8970 <spark_cloud_flag_connected+0x18>)
 23f8960:	4403      	add	r3, r0
 23f8962:	681b      	ldr	r3, [r3, #0]
 23f8964:	695b      	ldr	r3, [r3, #20]
 23f8966:	9302      	str	r3, [sp, #8]
 23f8968:	bd09      	pop	{r0, r3, pc}
 23f896a:	0000      	.short	0x0000
 23f896c:	1007ac34 	.word	0x1007ac34
 23f8970:	0000002c 	.word	0x0000002c

023f8974 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f8974:	b509      	push	{r0, r3, lr}
 23f8976:	4804      	ldr	r0, [pc, #16]	; (23f8988 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f8978:	6800      	ldr	r0, [r0, #0]
 23f897a:	4b04      	ldr	r3, [pc, #16]	; (23f898c <spark_set_random_seed_from_cloud_handler+0x18>)
 23f897c:	4403      	add	r3, r0
 23f897e:	681b      	ldr	r3, [r3, #0]
 23f8980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f8982:	9302      	str	r3, [sp, #8]
 23f8984:	bd09      	pop	{r0, r3, pc}
 23f8986:	0000      	.short	0x0000
 23f8988:	1007ac34 	.word	0x1007ac34
 23f898c:	0000002c 	.word	0x0000002c

023f8990 <ledger_get_instance>:
#include "system_ledger.h"
#endif

DYNALIB_BEGIN(system_ledger)

DYNALIB_FN(0, system_ledger, ledger_get_instance, int(ledger_instance**, const char*, void*))
 23f8990:	b509      	push	{r0, r3, lr}
 23f8992:	4804      	ldr	r0, [pc, #16]	; (23f89a4 <ledger_get_instance+0x14>)
 23f8994:	6800      	ldr	r0, [r0, #0]
 23f8996:	4b04      	ldr	r3, [pc, #16]	; (23f89a8 <ledger_get_instance+0x18>)
 23f8998:	4403      	add	r3, r0
 23f899a:	681b      	ldr	r3, [r3, #0]
 23f899c:	681b      	ldr	r3, [r3, #0]
 23f899e:	9302      	str	r3, [sp, #8]
 23f89a0:	bd09      	pop	{r0, r3, pc}
 23f89a2:	0000      	.short	0x0000
 23f89a4:	1007ac34 	.word	0x1007ac34
 23f89a8:	0000007c 	.word	0x0000007c

023f89ac <ledger_add_ref>:
DYNALIB_FN(1, system_ledger, ledger_add_ref, void(ledger_instance*, void*))
 23f89ac:	b509      	push	{r0, r3, lr}
 23f89ae:	4804      	ldr	r0, [pc, #16]	; (23f89c0 <ledger_add_ref+0x14>)
 23f89b0:	6800      	ldr	r0, [r0, #0]
 23f89b2:	4b04      	ldr	r3, [pc, #16]	; (23f89c4 <ledger_add_ref+0x18>)
 23f89b4:	4403      	add	r3, r0
 23f89b6:	681b      	ldr	r3, [r3, #0]
 23f89b8:	685b      	ldr	r3, [r3, #4]
 23f89ba:	9302      	str	r3, [sp, #8]
 23f89bc:	bd09      	pop	{r0, r3, pc}
 23f89be:	0000      	.short	0x0000
 23f89c0:	1007ac34 	.word	0x1007ac34
 23f89c4:	0000007c 	.word	0x0000007c

023f89c8 <ledger_release>:
DYNALIB_FN(2, system_ledger, ledger_release, void(ledger_instance*, void*))
 23f89c8:	b509      	push	{r0, r3, lr}
 23f89ca:	4804      	ldr	r0, [pc, #16]	; (23f89dc <ledger_release+0x14>)
 23f89cc:	6800      	ldr	r0, [r0, #0]
 23f89ce:	4b04      	ldr	r3, [pc, #16]	; (23f89e0 <ledger_release+0x18>)
 23f89d0:	4403      	add	r3, r0
 23f89d2:	681b      	ldr	r3, [r3, #0]
 23f89d4:	689b      	ldr	r3, [r3, #8]
 23f89d6:	9302      	str	r3, [sp, #8]
 23f89d8:	bd09      	pop	{r0, r3, pc}
 23f89da:	0000      	.short	0x0000
 23f89dc:	1007ac34 	.word	0x1007ac34
 23f89e0:	0000007c 	.word	0x0000007c

023f89e4 <ledger_lock>:
DYNALIB_FN(3, system_ledger, ledger_lock, void(ledger_instance*, void*))
 23f89e4:	b509      	push	{r0, r3, lr}
 23f89e6:	4804      	ldr	r0, [pc, #16]	; (23f89f8 <ledger_lock+0x14>)
 23f89e8:	6800      	ldr	r0, [r0, #0]
 23f89ea:	4b04      	ldr	r3, [pc, #16]	; (23f89fc <ledger_lock+0x18>)
 23f89ec:	4403      	add	r3, r0
 23f89ee:	681b      	ldr	r3, [r3, #0]
 23f89f0:	68db      	ldr	r3, [r3, #12]
 23f89f2:	9302      	str	r3, [sp, #8]
 23f89f4:	bd09      	pop	{r0, r3, pc}
 23f89f6:	0000      	.short	0x0000
 23f89f8:	1007ac34 	.word	0x1007ac34
 23f89fc:	0000007c 	.word	0x0000007c

023f8a00 <ledger_unlock>:
DYNALIB_FN(4, system_ledger, ledger_unlock, void(ledger_instance*, void*))
 23f8a00:	b509      	push	{r0, r3, lr}
 23f8a02:	4804      	ldr	r0, [pc, #16]	; (23f8a14 <ledger_unlock+0x14>)
 23f8a04:	6800      	ldr	r0, [r0, #0]
 23f8a06:	4b04      	ldr	r3, [pc, #16]	; (23f8a18 <ledger_unlock+0x18>)
 23f8a08:	4403      	add	r3, r0
 23f8a0a:	681b      	ldr	r3, [r3, #0]
 23f8a0c:	691b      	ldr	r3, [r3, #16]
 23f8a0e:	9302      	str	r3, [sp, #8]
 23f8a10:	bd09      	pop	{r0, r3, pc}
 23f8a12:	0000      	.short	0x0000
 23f8a14:	1007ac34 	.word	0x1007ac34
 23f8a18:	0000007c 	.word	0x0000007c

023f8a1c <ledger_set_callbacks>:
DYNALIB_FN(5, system_ledger, ledger_set_callbacks, void(ledger_instance*, const ledger_callbacks*, void*))
 23f8a1c:	b509      	push	{r0, r3, lr}
 23f8a1e:	4804      	ldr	r0, [pc, #16]	; (23f8a30 <ledger_set_callbacks+0x14>)
 23f8a20:	6800      	ldr	r0, [r0, #0]
 23f8a22:	4b04      	ldr	r3, [pc, #16]	; (23f8a34 <ledger_set_callbacks+0x18>)
 23f8a24:	4403      	add	r3, r0
 23f8a26:	681b      	ldr	r3, [r3, #0]
 23f8a28:	695b      	ldr	r3, [r3, #20]
 23f8a2a:	9302      	str	r3, [sp, #8]
 23f8a2c:	bd09      	pop	{r0, r3, pc}
 23f8a2e:	0000      	.short	0x0000
 23f8a30:	1007ac34 	.word	0x1007ac34
 23f8a34:	0000007c 	.word	0x0000007c

023f8a38 <ledger_set_app_data>:
DYNALIB_FN(6, system_ledger, ledger_set_app_data, void(ledger_instance*, void*, ledger_destroy_app_data_callback, void*))
 23f8a38:	b509      	push	{r0, r3, lr}
 23f8a3a:	4804      	ldr	r0, [pc, #16]	; (23f8a4c <ledger_set_app_data+0x14>)
 23f8a3c:	6800      	ldr	r0, [r0, #0]
 23f8a3e:	4b04      	ldr	r3, [pc, #16]	; (23f8a50 <ledger_set_app_data+0x18>)
 23f8a40:	4403      	add	r3, r0
 23f8a42:	681b      	ldr	r3, [r3, #0]
 23f8a44:	699b      	ldr	r3, [r3, #24]
 23f8a46:	9302      	str	r3, [sp, #8]
 23f8a48:	bd09      	pop	{r0, r3, pc}
 23f8a4a:	0000      	.short	0x0000
 23f8a4c:	1007ac34 	.word	0x1007ac34
 23f8a50:	0000007c 	.word	0x0000007c

023f8a54 <ledger_get_app_data>:
DYNALIB_FN(7, system_ledger, ledger_get_app_data, void*(ledger_instance*, void*))
 23f8a54:	b509      	push	{r0, r3, lr}
 23f8a56:	4804      	ldr	r0, [pc, #16]	; (23f8a68 <ledger_get_app_data+0x14>)
 23f8a58:	6800      	ldr	r0, [r0, #0]
 23f8a5a:	4b04      	ldr	r3, [pc, #16]	; (23f8a6c <ledger_get_app_data+0x18>)
 23f8a5c:	4403      	add	r3, r0
 23f8a5e:	681b      	ldr	r3, [r3, #0]
 23f8a60:	69db      	ldr	r3, [r3, #28]
 23f8a62:	9302      	str	r3, [sp, #8]
 23f8a64:	bd09      	pop	{r0, r3, pc}
 23f8a66:	0000      	.short	0x0000
 23f8a68:	1007ac34 	.word	0x1007ac34
 23f8a6c:	0000007c 	.word	0x0000007c

023f8a70 <ledger_open>:
DYNALIB_FN(8, system_ledger, ledger_get_info, int(ledger_instance*, ledger_info*, void*))
DYNALIB_FN(9, system_ledger, ledger_open, int(ledger_stream**, ledger_instance*, int, void*))
 23f8a70:	b509      	push	{r0, r3, lr}
 23f8a72:	4804      	ldr	r0, [pc, #16]	; (23f8a84 <ledger_open+0x14>)
 23f8a74:	6800      	ldr	r0, [r0, #0]
 23f8a76:	4b04      	ldr	r3, [pc, #16]	; (23f8a88 <ledger_open+0x18>)
 23f8a78:	4403      	add	r3, r0
 23f8a7a:	681b      	ldr	r3, [r3, #0]
 23f8a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f8a7e:	9302      	str	r3, [sp, #8]
 23f8a80:	bd09      	pop	{r0, r3, pc}
 23f8a82:	0000      	.short	0x0000
 23f8a84:	1007ac34 	.word	0x1007ac34
 23f8a88:	0000007c 	.word	0x0000007c

023f8a8c <ledger_close>:
DYNALIB_FN(10, system_ledger, ledger_close, int(ledger_stream*, int, void*))
 23f8a8c:	b509      	push	{r0, r3, lr}
 23f8a8e:	4804      	ldr	r0, [pc, #16]	; (23f8aa0 <ledger_close+0x14>)
 23f8a90:	6800      	ldr	r0, [r0, #0]
 23f8a92:	4b04      	ldr	r3, [pc, #16]	; (23f8aa4 <ledger_close+0x18>)
 23f8a94:	4403      	add	r3, r0
 23f8a96:	681b      	ldr	r3, [r3, #0]
 23f8a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f8a9a:	9302      	str	r3, [sp, #8]
 23f8a9c:	bd09      	pop	{r0, r3, pc}
 23f8a9e:	0000      	.short	0x0000
 23f8aa0:	1007ac34 	.word	0x1007ac34
 23f8aa4:	0000007c 	.word	0x0000007c

023f8aa8 <ledger_read>:
DYNALIB_FN(11, system_ledger, ledger_read, int(ledger_stream*, char*, size_t, void*))
 23f8aa8:	b509      	push	{r0, r3, lr}
 23f8aaa:	4804      	ldr	r0, [pc, #16]	; (23f8abc <ledger_read+0x14>)
 23f8aac:	6800      	ldr	r0, [r0, #0]
 23f8aae:	4b04      	ldr	r3, [pc, #16]	; (23f8ac0 <ledger_read+0x18>)
 23f8ab0:	4403      	add	r3, r0
 23f8ab2:	681b      	ldr	r3, [r3, #0]
 23f8ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f8ab6:	9302      	str	r3, [sp, #8]
 23f8ab8:	bd09      	pop	{r0, r3, pc}
 23f8aba:	0000      	.short	0x0000
 23f8abc:	1007ac34 	.word	0x1007ac34
 23f8ac0:	0000007c 	.word	0x0000007c

023f8ac4 <ledger_write>:
DYNALIB_FN(12, system_ledger, ledger_write, int(ledger_stream*, const char*, size_t, void*))
 23f8ac4:	b509      	push	{r0, r3, lr}
 23f8ac6:	4804      	ldr	r0, [pc, #16]	; (23f8ad8 <ledger_write+0x14>)
 23f8ac8:	6800      	ldr	r0, [r0, #0]
 23f8aca:	4b04      	ldr	r3, [pc, #16]	; (23f8adc <ledger_write+0x18>)
 23f8acc:	4403      	add	r3, r0
 23f8ace:	681b      	ldr	r3, [r3, #0]
 23f8ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f8ad2:	9302      	str	r3, [sp, #8]
 23f8ad4:	bd09      	pop	{r0, r3, pc}
 23f8ad6:	0000      	.short	0x0000
 23f8ad8:	1007ac34 	.word	0x1007ac34
 23f8adc:	0000007c 	.word	0x0000007c

023f8ae0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f8ae0:	b509      	push	{r0, r3, lr}
 23f8ae2:	4804      	ldr	r0, [pc, #16]	; (23f8af4 <network_connect+0x14>)
 23f8ae4:	6800      	ldr	r0, [r0, #0]
 23f8ae6:	4b04      	ldr	r3, [pc, #16]	; (23f8af8 <network_connect+0x18>)
 23f8ae8:	4403      	add	r3, r0
 23f8aea:	681b      	ldr	r3, [r3, #0]
 23f8aec:	685b      	ldr	r3, [r3, #4]
 23f8aee:	9302      	str	r3, [sp, #8]
 23f8af0:	bd09      	pop	{r0, r3, pc}
 23f8af2:	0000      	.short	0x0000
 23f8af4:	1007ac34 	.word	0x1007ac34
 23f8af8:	00000028 	.word	0x00000028

023f8afc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f8afc:	b509      	push	{r0, r3, lr}
 23f8afe:	4804      	ldr	r0, [pc, #16]	; (23f8b10 <network_connecting+0x14>)
 23f8b00:	6800      	ldr	r0, [r0, #0]
 23f8b02:	4b04      	ldr	r3, [pc, #16]	; (23f8b14 <network_connecting+0x18>)
 23f8b04:	4403      	add	r3, r0
 23f8b06:	681b      	ldr	r3, [r3, #0]
 23f8b08:	689b      	ldr	r3, [r3, #8]
 23f8b0a:	9302      	str	r3, [sp, #8]
 23f8b0c:	bd09      	pop	{r0, r3, pc}
 23f8b0e:	0000      	.short	0x0000
 23f8b10:	1007ac34 	.word	0x1007ac34
 23f8b14:	00000028 	.word	0x00000028

023f8b18 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f8b18:	b509      	push	{r0, r3, lr}
 23f8b1a:	4804      	ldr	r0, [pc, #16]	; (23f8b2c <network_disconnect+0x14>)
 23f8b1c:	6800      	ldr	r0, [r0, #0]
 23f8b1e:	4b04      	ldr	r3, [pc, #16]	; (23f8b30 <network_disconnect+0x18>)
 23f8b20:	4403      	add	r3, r0
 23f8b22:	681b      	ldr	r3, [r3, #0]
 23f8b24:	68db      	ldr	r3, [r3, #12]
 23f8b26:	9302      	str	r3, [sp, #8]
 23f8b28:	bd09      	pop	{r0, r3, pc}
 23f8b2a:	0000      	.short	0x0000
 23f8b2c:	1007ac34 	.word	0x1007ac34
 23f8b30:	00000028 	.word	0x00000028

023f8b34 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f8b34:	b509      	push	{r0, r3, lr}
 23f8b36:	4804      	ldr	r0, [pc, #16]	; (23f8b48 <network_ready+0x14>)
 23f8b38:	6800      	ldr	r0, [r0, #0]
 23f8b3a:	4b04      	ldr	r3, [pc, #16]	; (23f8b4c <network_ready+0x18>)
 23f8b3c:	4403      	add	r3, r0
 23f8b3e:	681b      	ldr	r3, [r3, #0]
 23f8b40:	691b      	ldr	r3, [r3, #16]
 23f8b42:	9302      	str	r3, [sp, #8]
 23f8b44:	bd09      	pop	{r0, r3, pc}
 23f8b46:	0000      	.short	0x0000
 23f8b48:	1007ac34 	.word	0x1007ac34
 23f8b4c:	00000028 	.word	0x00000028

023f8b50 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f8b50:	b509      	push	{r0, r3, lr}
 23f8b52:	4804      	ldr	r0, [pc, #16]	; (23f8b64 <network_on+0x14>)
 23f8b54:	6800      	ldr	r0, [r0, #0]
 23f8b56:	4b04      	ldr	r3, [pc, #16]	; (23f8b68 <network_on+0x18>)
 23f8b58:	4403      	add	r3, r0
 23f8b5a:	681b      	ldr	r3, [r3, #0]
 23f8b5c:	695b      	ldr	r3, [r3, #20]
 23f8b5e:	9302      	str	r3, [sp, #8]
 23f8b60:	bd09      	pop	{r0, r3, pc}
 23f8b62:	0000      	.short	0x0000
 23f8b64:	1007ac34 	.word	0x1007ac34
 23f8b68:	00000028 	.word	0x00000028

023f8b6c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f8b6c:	b509      	push	{r0, r3, lr}
 23f8b6e:	4804      	ldr	r0, [pc, #16]	; (23f8b80 <network_off+0x14>)
 23f8b70:	6800      	ldr	r0, [r0, #0]
 23f8b72:	4b04      	ldr	r3, [pc, #16]	; (23f8b84 <network_off+0x18>)
 23f8b74:	4403      	add	r3, r0
 23f8b76:	681b      	ldr	r3, [r3, #0]
 23f8b78:	699b      	ldr	r3, [r3, #24]
 23f8b7a:	9302      	str	r3, [sp, #8]
 23f8b7c:	bd09      	pop	{r0, r3, pc}
 23f8b7e:	0000      	.short	0x0000
 23f8b80:	1007ac34 	.word	0x1007ac34
 23f8b84:	00000028 	.word	0x00000028

023f8b88 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f8b88:	b509      	push	{r0, r3, lr}
 23f8b8a:	4804      	ldr	r0, [pc, #16]	; (23f8b9c <network_listen+0x14>)
 23f8b8c:	6800      	ldr	r0, [r0, #0]
 23f8b8e:	4b04      	ldr	r3, [pc, #16]	; (23f8ba0 <network_listen+0x18>)
 23f8b90:	4403      	add	r3, r0
 23f8b92:	681b      	ldr	r3, [r3, #0]
 23f8b94:	69db      	ldr	r3, [r3, #28]
 23f8b96:	9302      	str	r3, [sp, #8]
 23f8b98:	bd09      	pop	{r0, r3, pc}
 23f8b9a:	0000      	.short	0x0000
 23f8b9c:	1007ac34 	.word	0x1007ac34
 23f8ba0:	00000028 	.word	0x00000028

023f8ba4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f8ba4:	b509      	push	{r0, r3, lr}
 23f8ba6:	4804      	ldr	r0, [pc, #16]	; (23f8bb8 <network_listening+0x14>)
 23f8ba8:	6800      	ldr	r0, [r0, #0]
 23f8baa:	4b04      	ldr	r3, [pc, #16]	; (23f8bbc <network_listening+0x18>)
 23f8bac:	4403      	add	r3, r0
 23f8bae:	681b      	ldr	r3, [r3, #0]
 23f8bb0:	6a1b      	ldr	r3, [r3, #32]
 23f8bb2:	9302      	str	r3, [sp, #8]
 23f8bb4:	bd09      	pop	{r0, r3, pc}
 23f8bb6:	0000      	.short	0x0000
 23f8bb8:	1007ac34 	.word	0x1007ac34
 23f8bbc:	00000028 	.word	0x00000028

023f8bc0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f8bc0:	b509      	push	{r0, r3, lr}
 23f8bc2:	4804      	ldr	r0, [pc, #16]	; (23f8bd4 <network_set_listen_timeout+0x14>)
 23f8bc4:	6800      	ldr	r0, [r0, #0]
 23f8bc6:	4b04      	ldr	r3, [pc, #16]	; (23f8bd8 <network_set_listen_timeout+0x18>)
 23f8bc8:	4403      	add	r3, r0
 23f8bca:	681b      	ldr	r3, [r3, #0]
 23f8bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f8bce:	9302      	str	r3, [sp, #8]
 23f8bd0:	bd09      	pop	{r0, r3, pc}
 23f8bd2:	0000      	.short	0x0000
 23f8bd4:	1007ac34 	.word	0x1007ac34
 23f8bd8:	00000028 	.word	0x00000028

023f8bdc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f8bdc:	b509      	push	{r0, r3, lr}
 23f8bde:	4804      	ldr	r0, [pc, #16]	; (23f8bf0 <network_get_listen_timeout+0x14>)
 23f8be0:	6800      	ldr	r0, [r0, #0]
 23f8be2:	4b04      	ldr	r3, [pc, #16]	; (23f8bf4 <network_get_listen_timeout+0x18>)
 23f8be4:	4403      	add	r3, r0
 23f8be6:	681b      	ldr	r3, [r3, #0]
 23f8be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f8bea:	9302      	str	r3, [sp, #8]
 23f8bec:	bd09      	pop	{r0, r3, pc}
 23f8bee:	0000      	.short	0x0000
 23f8bf0:	1007ac34 	.word	0x1007ac34
 23f8bf4:	00000028 	.word	0x00000028

023f8bf8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f8bf8:	b509      	push	{r0, r3, lr}
 23f8bfa:	4804      	ldr	r0, [pc, #16]	; (23f8c0c <network_is_on+0x14>)
 23f8bfc:	6800      	ldr	r0, [r0, #0]
 23f8bfe:	4b04      	ldr	r3, [pc, #16]	; (23f8c10 <network_is_on+0x18>)
 23f8c00:	4403      	add	r3, r0
 23f8c02:	681b      	ldr	r3, [r3, #0]
 23f8c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f8c06:	9302      	str	r3, [sp, #8]
 23f8c08:	bd09      	pop	{r0, r3, pc}
 23f8c0a:	0000      	.short	0x0000
 23f8c0c:	1007ac34 	.word	0x1007ac34
 23f8c10:	00000028 	.word	0x00000028

023f8c14 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f8c14:	b509      	push	{r0, r3, lr}
 23f8c16:	4804      	ldr	r0, [pc, #16]	; (23f8c28 <network_is_off+0x14>)
 23f8c18:	6800      	ldr	r0, [r0, #0]
 23f8c1a:	4b04      	ldr	r3, [pc, #16]	; (23f8c2c <network_is_off+0x18>)
 23f8c1c:	4403      	add	r3, r0
 23f8c1e:	681b      	ldr	r3, [r3, #0]
 23f8c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f8c22:	9302      	str	r3, [sp, #8]
 23f8c24:	bd09      	pop	{r0, r3, pc}
 23f8c26:	0000      	.short	0x0000
 23f8c28:	1007ac34 	.word	0x1007ac34
 23f8c2c:	00000028 	.word	0x00000028

023f8c30 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23f8c30:	b509      	push	{r0, r3, lr}
 23f8c32:	4804      	ldr	r0, [pc, #16]	; (23f8c44 <network_prefer+0x14>)
 23f8c34:	6800      	ldr	r0, [r0, #0]
 23f8c36:	4b04      	ldr	r3, [pc, #16]	; (23f8c48 <network_prefer+0x18>)
 23f8c38:	4403      	add	r3, r0
 23f8c3a:	681b      	ldr	r3, [r3, #0]
 23f8c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f8c3e:	9302      	str	r3, [sp, #8]
 23f8c40:	bd09      	pop	{r0, r3, pc}
 23f8c42:	0000      	.short	0x0000
 23f8c44:	1007ac34 	.word	0x1007ac34
 23f8c48:	00000028 	.word	0x00000028

023f8c4c <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23f8c4c:	b509      	push	{r0, r3, lr}
 23f8c4e:	4804      	ldr	r0, [pc, #16]	; (23f8c60 <network_is_preferred+0x14>)
 23f8c50:	6800      	ldr	r0, [r0, #0]
 23f8c52:	4b04      	ldr	r3, [pc, #16]	; (23f8c64 <network_is_preferred+0x18>)
 23f8c54:	4403      	add	r3, r0
 23f8c56:	681b      	ldr	r3, [r3, #0]
 23f8c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f8c5a:	9302      	str	r3, [sp, #8]
 23f8c5c:	bd09      	pop	{r0, r3, pc}
 23f8c5e:	0000      	.short	0x0000
 23f8c60:	1007ac34 	.word	0x1007ac34
 23f8c64:	00000028 	.word	0x00000028

023f8c68 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f8c68:	b509      	push	{r0, r3, lr}
 23f8c6a:	4804      	ldr	r0, [pc, #16]	; (23f8c7c <malloc+0x14>)
 23f8c6c:	6800      	ldr	r0, [r0, #0]
 23f8c6e:	4b04      	ldr	r3, [pc, #16]	; (23f8c80 <malloc+0x18>)
 23f8c70:	4403      	add	r3, r0
 23f8c72:	681b      	ldr	r3, [r3, #0]
 23f8c74:	681b      	ldr	r3, [r3, #0]
 23f8c76:	9302      	str	r3, [sp, #8]
 23f8c78:	bd09      	pop	{r0, r3, pc}
 23f8c7a:	0000      	.short	0x0000
 23f8c7c:	1007ac34 	.word	0x1007ac34
 23f8c80:	00000004 	.word	0x00000004

023f8c84 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f8c84:	b509      	push	{r0, r3, lr}
 23f8c86:	4804      	ldr	r0, [pc, #16]	; (23f8c98 <free+0x14>)
 23f8c88:	6800      	ldr	r0, [r0, #0]
 23f8c8a:	4b04      	ldr	r3, [pc, #16]	; (23f8c9c <free+0x18>)
 23f8c8c:	4403      	add	r3, r0
 23f8c8e:	681b      	ldr	r3, [r3, #0]
 23f8c90:	685b      	ldr	r3, [r3, #4]
 23f8c92:	9302      	str	r3, [sp, #8]
 23f8c94:	bd09      	pop	{r0, r3, pc}
 23f8c96:	0000      	.short	0x0000
 23f8c98:	1007ac34 	.word	0x1007ac34
 23f8c9c:	00000004 	.word	0x00000004

023f8ca0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f8ca0:	b509      	push	{r0, r3, lr}
 23f8ca2:	4804      	ldr	r0, [pc, #16]	; (23f8cb4 <realloc+0x14>)
 23f8ca4:	6800      	ldr	r0, [r0, #0]
 23f8ca6:	4b04      	ldr	r3, [pc, #16]	; (23f8cb8 <realloc+0x18>)
 23f8ca8:	4403      	add	r3, r0
 23f8caa:	681b      	ldr	r3, [r3, #0]
 23f8cac:	689b      	ldr	r3, [r3, #8]
 23f8cae:	9302      	str	r3, [sp, #8]
 23f8cb0:	bd09      	pop	{r0, r3, pc}
 23f8cb2:	0000      	.short	0x0000
 23f8cb4:	1007ac34 	.word	0x1007ac34
 23f8cb8:	00000004 	.word	0x00000004

023f8cbc <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 23f8cbc:	b509      	push	{r0, r3, lr}
 23f8cbe:	4804      	ldr	r0, [pc, #16]	; (23f8cd0 <snprintf+0x14>)
 23f8cc0:	6800      	ldr	r0, [r0, #0]
 23f8cc2:	4b04      	ldr	r3, [pc, #16]	; (23f8cd4 <snprintf+0x18>)
 23f8cc4:	4403      	add	r3, r0
 23f8cc6:	681b      	ldr	r3, [r3, #0]
 23f8cc8:	69db      	ldr	r3, [r3, #28]
 23f8cca:	9302      	str	r3, [sp, #8]
 23f8ccc:	bd09      	pop	{r0, r3, pc}
 23f8cce:	0000      	.short	0x0000
 23f8cd0:	1007ac34 	.word	0x1007ac34
 23f8cd4:	00000004 	.word	0x00000004

023f8cd8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f8cd8:	b509      	push	{r0, r3, lr}
 23f8cda:	4804      	ldr	r0, [pc, #16]	; (23f8cec <vsnprintf+0x14>)
 23f8cdc:	6800      	ldr	r0, [r0, #0]
 23f8cde:	4b04      	ldr	r3, [pc, #16]	; (23f8cf0 <vsnprintf+0x18>)
 23f8ce0:	4403      	add	r3, r0
 23f8ce2:	681b      	ldr	r3, [r3, #0]
 23f8ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f8ce6:	9302      	str	r3, [sp, #8]
 23f8ce8:	bd09      	pop	{r0, r3, pc}
 23f8cea:	0000      	.short	0x0000
 23f8cec:	1007ac34 	.word	0x1007ac34
 23f8cf0:	00000004 	.word	0x00000004

023f8cf4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f8cf4:	b509      	push	{r0, r3, lr}
 23f8cf6:	4804      	ldr	r0, [pc, #16]	; (23f8d08 <abort+0x14>)
 23f8cf8:	6800      	ldr	r0, [r0, #0]
 23f8cfa:	4b04      	ldr	r3, [pc, #16]	; (23f8d0c <abort+0x18>)
 23f8cfc:	4403      	add	r3, r0
 23f8cfe:	681b      	ldr	r3, [r3, #0]
 23f8d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f8d02:	9302      	str	r3, [sp, #8]
 23f8d04:	bd09      	pop	{r0, r3, pc}
 23f8d06:	0000      	.short	0x0000
 23f8d08:	1007ac34 	.word	0x1007ac34
 23f8d0c:	00000004 	.word	0x00000004

023f8d10 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f8d10:	b509      	push	{r0, r3, lr}
 23f8d12:	4804      	ldr	r0, [pc, #16]	; (23f8d24 <_malloc_r+0x14>)
 23f8d14:	6800      	ldr	r0, [r0, #0]
 23f8d16:	4b04      	ldr	r3, [pc, #16]	; (23f8d28 <_malloc_r+0x18>)
 23f8d18:	4403      	add	r3, r0
 23f8d1a:	681b      	ldr	r3, [r3, #0]
 23f8d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f8d1e:	9302      	str	r3, [sp, #8]
 23f8d20:	bd09      	pop	{r0, r3, pc}
 23f8d22:	0000      	.short	0x0000
 23f8d24:	1007ac34 	.word	0x1007ac34
 23f8d28:	00000004 	.word	0x00000004

023f8d2c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f8d2c:	b509      	push	{r0, r3, lr}
 23f8d2e:	4804      	ldr	r0, [pc, #16]	; (23f8d40 <__errno+0x14>)
 23f8d30:	6800      	ldr	r0, [r0, #0]
 23f8d32:	4b04      	ldr	r3, [pc, #16]	; (23f8d44 <__errno+0x18>)
 23f8d34:	4403      	add	r3, r0
 23f8d36:	681b      	ldr	r3, [r3, #0]
 23f8d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f8d3a:	9302      	str	r3, [sp, #8]
 23f8d3c:	bd09      	pop	{r0, r3, pc}
 23f8d3e:	0000      	.short	0x0000
 23f8d40:	1007ac34 	.word	0x1007ac34
 23f8d44:	00000004 	.word	0x00000004

023f8d48 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f8d48:	b509      	push	{r0, r3, lr}
 23f8d4a:	4804      	ldr	r0, [pc, #16]	; (23f8d5c <__assert_func+0x14>)
 23f8d4c:	6800      	ldr	r0, [r0, #0]
 23f8d4e:	4b04      	ldr	r3, [pc, #16]	; (23f8d60 <__assert_func+0x18>)
 23f8d50:	4403      	add	r3, r0
 23f8d52:	681b      	ldr	r3, [r3, #0]
 23f8d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f8d56:	9302      	str	r3, [sp, #8]
 23f8d58:	bd09      	pop	{r0, r3, pc}
 23f8d5a:	0000      	.short	0x0000
 23f8d5c:	1007ac34 	.word	0x1007ac34
 23f8d60:	00000004 	.word	0x00000004

023f8d64 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f8d64:	b509      	push	{r0, r3, lr}
 23f8d66:	4804      	ldr	r0, [pc, #16]	; (23f8d78 <newlib_impure_ptr_callback+0x14>)
 23f8d68:	6800      	ldr	r0, [r0, #0]
 23f8d6a:	4b04      	ldr	r3, [pc, #16]	; (23f8d7c <newlib_impure_ptr_callback+0x18>)
 23f8d6c:	4403      	add	r3, r0
 23f8d6e:	681b      	ldr	r3, [r3, #0]
 23f8d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f8d72:	9302      	str	r3, [sp, #8]
 23f8d74:	bd09      	pop	{r0, r3, pc}
 23f8d76:	0000      	.short	0x0000
 23f8d78:	1007ac34 	.word	0x1007ac34
 23f8d7c:	00000004 	.word	0x00000004

023f8d80 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f8d80:	b510      	push	{r4, lr}
 23f8d82:	4604      	mov	r4, r0
    ::free(ptr);
 23f8d84:	6800      	ldr	r0, [r0, #0]
 23f8d86:	f7ff ff7d 	bl	23f8c84 <free>
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 23f8d8a:	4620      	mov	r0, r4
 23f8d8c:	bd10      	pop	{r4, pc}

023f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23f8d8e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23f8d90:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23f8d92:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23f8d94:	b17c      	cbz	r4, 23f8db6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23f8d96:	6863      	ldr	r3, [r4, #4]
 23f8d98:	3b01      	subs	r3, #1
 23f8d9a:	6063      	str	r3, [r4, #4]
 23f8d9c:	b95b      	cbnz	r3, 23f8db6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23f8d9e:	6823      	ldr	r3, [r4, #0]
 23f8da0:	4620      	mov	r0, r4
 23f8da2:	689b      	ldr	r3, [r3, #8]
 23f8da4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f8da6:	68a3      	ldr	r3, [r4, #8]
 23f8da8:	3b01      	subs	r3, #1
 23f8daa:	60a3      	str	r3, [r4, #8]
 23f8dac:	b91b      	cbnz	r3, 23f8db6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23f8dae:	6823      	ldr	r3, [r4, #0]
 23f8db0:	4620      	mov	r0, r4
 23f8db2:	68db      	ldr	r3, [r3, #12]
 23f8db4:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23f8db6:	4628      	mov	r0, r5
 23f8db8:	bd38      	pop	{r3, r4, r5, pc}

023f8dba <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>:
    bool realloc(int n) {
 23f8dba:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23f8dbc:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23f8dbe:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23f8dc0:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23f8dc2:	dd03      	ble.n	23f8dcc <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x12>
    return ::realloc(ptr, size);
 23f8dc4:	f7ff ff6c 	bl	23f8ca0 <realloc>
            if (!d) {
 23f8dc8:	b918      	cbnz	r0, 23f8dd2 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x18>
    }
 23f8dca:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23f8dcc:	f7ff ff5a 	bl	23f8c84 <free>
        T* d = nullptr;
 23f8dd0:	2000      	movs	r0, #0
        data_ = d;
 23f8dd2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23f8dd4:	60a5      	str	r5, [r4, #8]
        return true;
 23f8dd6:	2001      	movs	r0, #1
 23f8dd8:	e7f7      	b.n	23f8dca <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x10>

023f8dda <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23f8dda:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23f8ddc:	6843      	ldr	r3, [r0, #4]
    {
 23f8dde:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23f8de0:	3b01      	subs	r3, #1
 23f8de2:	6043      	str	r3, [r0, #4]
 23f8de4:	b963      	cbnz	r3, 23f8e00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23f8de6:	6803      	ldr	r3, [r0, #0]
 23f8de8:	689b      	ldr	r3, [r3, #8]
 23f8dea:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f8dec:	68a3      	ldr	r3, [r4, #8]
 23f8dee:	3b01      	subs	r3, #1
 23f8df0:	60a3      	str	r3, [r4, #8]
 23f8df2:	b92b      	cbnz	r3, 23f8e00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23f8df4:	6823      	ldr	r3, [r4, #0]
 23f8df6:	4620      	mov	r0, r4
    }
 23f8df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23f8dfc:	68db      	ldr	r3, [r3, #12]
 23f8dfe:	4718      	bx	r3
    }
 23f8e00:	bd10      	pop	{r4, pc}

023f8e02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f8e02:	b570      	push	{r4, r5, r6, lr}
 23f8e04:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f8e06:	e9d0 5300 	ldrd	r5, r3, [r0]
 23f8e0a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23f8e0e:	42ae      	cmp	r6, r5
 23f8e10:	d004      	beq.n	23f8e1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23f8e12:	4628      	mov	r0, r5
 23f8e14:	f002 f8d0 	bl	23fafb8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23f8e18:	3510      	adds	r5, #16
 23f8e1a:	e7f8      	b.n	23f8e0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23f8e1c:	6820      	ldr	r0, [r4, #0]
 23f8e1e:	f7ff ff31 	bl	23f8c84 <free>
}
 23f8e22:	4620      	mov	r0, r4
 23f8e24:	bd70      	pop	{r4, r5, r6, pc}
	...

023f8e28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23f8e28:	2300      	movs	r3, #0
 23f8e2a:	4802      	ldr	r0, [pc, #8]	; (23f8e34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23f8e2c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23f8e2e:	f7ff bb01 	b.w	23f8434 <os_mutex_recursive_create>
 23f8e32:	bf00      	nop
 23f8e34:	1007ae58 	.word	0x1007ae58

023f8e38 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 23f8e38:	2200      	movs	r2, #0
 23f8e3a:	6840      	ldr	r0, [r0, #4]
 23f8e3c:	4611      	mov	r1, r2
 23f8e3e:	f7ff be79 	b.w	23f8b34 <network_ready>

023f8e42 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 23f8e42:	2200      	movs	r2, #0
 23f8e44:	6840      	ldr	r0, [r0, #4]
 23f8e46:	4611      	mov	r1, r2
 23f8e48:	f7ff beac 	b.w	23f8ba4 <network_listening>

023f8e4c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f8e4c:	2200      	movs	r2, #0
 23f8e4e:	6840      	ldr	r0, [r0, #4]
 23f8e50:	4611      	mov	r1, r2
 23f8e52:	f7ff bec3 	b.w	23f8bdc <network_get_listen_timeout>

023f8e56 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f8e56:	2200      	movs	r2, #0
 23f8e58:	6840      	ldr	r0, [r0, #4]
 23f8e5a:	f7ff beb1 	b.w	23f8bc0 <network_set_listen_timeout>

023f8e5e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f8e5e:	2200      	movs	r2, #0
 23f8e60:	6840      	ldr	r0, [r0, #4]
 23f8e62:	f081 0101 	eor.w	r1, r1, #1
 23f8e66:	f7ff be8f 	b.w	23f8b88 <network_listen>

023f8e6a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f8e6a:	2300      	movs	r3, #0
 23f8e6c:	6840      	ldr	r0, [r0, #4]
 23f8e6e:	461a      	mov	r2, r3
 23f8e70:	4619      	mov	r1, r3
 23f8e72:	f7ff be7b 	b.w	23f8b6c <network_off>

023f8e76 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f8e76:	2300      	movs	r3, #0
 23f8e78:	6840      	ldr	r0, [r0, #4]
 23f8e7a:	461a      	mov	r2, r3
 23f8e7c:	4619      	mov	r1, r3
 23f8e7e:	f7ff be67 	b.w	23f8b50 <network_on>

023f8e82 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f8e82:	2200      	movs	r2, #0
 23f8e84:	6840      	ldr	r0, [r0, #4]
 23f8e86:	4611      	mov	r1, r2
 23f8e88:	f7ff be38 	b.w	23f8afc <network_connecting>

023f8e8c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f8e8c:	2200      	movs	r2, #0
 23f8e8e:	2102      	movs	r1, #2
 23f8e90:	6840      	ldr	r0, [r0, #4]
 23f8e92:	f7ff be41 	b.w	23f8b18 <network_disconnect>

023f8e96 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f8e96:	2300      	movs	r3, #0
 23f8e98:	6840      	ldr	r0, [r0, #4]
 23f8e9a:	461a      	mov	r2, r3
 23f8e9c:	f7ff be20 	b.w	23f8ae0 <network_connect>

023f8ea0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 23f8ea0:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 23f8ea2:	2428      	movs	r4, #40	; 0x28
 23f8ea4:	4b07      	ldr	r3, [pc, #28]	; (23f8ec4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 23f8ea6:	4622      	mov	r2, r4
 23f8ea8:	4618      	mov	r0, r3
 23f8eaa:	2100      	movs	r1, #0
 23f8eac:	f004 f983 	bl	23fd1b6 <memset>
        cid = -1;
 23f8eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f8eb4:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23f8eb6:	2204      	movs	r2, #4
 23f8eb8:	4b03      	ldr	r3, [pc, #12]	; (23f8ec8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 23f8eba:	8004      	strh	r4, [r0, #0]
 23f8ebc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 23f8ebe:	4a03      	ldr	r2, [pc, #12]	; (23f8ecc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 23f8ec0:	601a      	str	r2, [r3, #0]
 23f8ec2:	bd10      	pop	{r4, pc}
 23f8ec4:	1007ae64 	.word	0x1007ae64
 23f8ec8:	1007ae5c 	.word	0x1007ae5c
 23f8ecc:	023ff7e8 	.word	0x023ff7e8

023f8ed0 <_ZN10CloudClass6ledgerEPKc>:
    return size;
}

#if Wiring_Ledger

Ledger CloudClass::ledger(const char* name) {
 23f8ed0:	b530      	push	{r4, r5, lr}
    ledger_instance* instance = nullptr;
 23f8ed2:	2500      	movs	r5, #0
Ledger CloudClass::ledger(const char* name) {
 23f8ed4:	b08d      	sub	sp, #52	; 0x34
 23f8ed6:	4604      	mov	r4, r0
    int r = ledger_get_instance(&instance, name, nullptr);
 23f8ed8:	462a      	mov	r2, r5
 23f8eda:	a803      	add	r0, sp, #12
    ledger_instance* instance = nullptr;
 23f8edc:	9503      	str	r5, [sp, #12]
    int r = ledger_get_instance(&instance, name, nullptr);
 23f8ede:	f7ff fd57 	bl	23f8990 <ledger_get_instance>
    if (r < 0) {
 23f8ee2:	2800      	cmp	r0, #0
 23f8ee4:	da0f      	bge.n	23f8f06 <_ZN10CloudClass6ledgerEPKc+0x36>
        LOG(ERROR, "ledger_get_instance() failed: %d", r);
 23f8ee6:	2320      	movs	r3, #32
 23f8ee8:	e9cd 3504 	strd	r3, r5, [sp, #16]
 23f8eec:	4b07      	ldr	r3, [pc, #28]	; (23f8f0c <_ZN10CloudClass6ledgerEPKc+0x3c>)
 23f8eee:	9001      	str	r0, [sp, #4]
 23f8ef0:	9300      	str	r3, [sp, #0]
 23f8ef2:	2032      	movs	r0, #50	; 0x32
 23f8ef4:	462b      	mov	r3, r5
 23f8ef6:	4906      	ldr	r1, [pc, #24]	; (23f8f10 <_ZN10CloudClass6ledgerEPKc+0x40>)
 23f8ef8:	aa04      	add	r2, sp, #16
 23f8efa:	f7ff fc69 	bl	23f87d0 <log_message>
            Ledger(nullptr) {
    }

    // This constructor is for internal use only
    explicit Ledger(ledger_instance* instance, bool addRef = true) :
            instance_(instance) {
 23f8efe:	6025      	str	r5, [r4, #0]
        return Ledger();
    }
    return Ledger(instance, false /* addRef */);
}
 23f8f00:	4620      	mov	r0, r4
 23f8f02:	b00d      	add	sp, #52	; 0x34
 23f8f04:	bd30      	pop	{r4, r5, pc}
 23f8f06:	9b03      	ldr	r3, [sp, #12]
 23f8f08:	6023      	str	r3, [r4, #0]
        if (instance_ && addRef) {
 23f8f0a:	e7f9      	b.n	23f8f00 <_ZN10CloudClass6ledgerEPKc+0x30>
 23f8f0c:	023ff844 	.word	0x023ff844
 23f8f10:	023ff824 	.word	0x023ff824

023f8f14 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f8f14:	2200      	movs	r2, #0
 23f8f16:	6840      	ldr	r0, [r0, #4]
 23f8f18:	4611      	mov	r1, r2
 23f8f1a:	f7ff be43 	b.w	23f8ba4 <network_listening>

023f8f1e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f8f1e:	2200      	movs	r2, #0
 23f8f20:	6840      	ldr	r0, [r0, #4]
 23f8f22:	4611      	mov	r1, r2
 23f8f24:	f7ff be5a 	b.w	23f8bdc <network_get_listen_timeout>

023f8f28 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f8f28:	2200      	movs	r2, #0
 23f8f2a:	6840      	ldr	r0, [r0, #4]
 23f8f2c:	f7ff be48 	b.w	23f8bc0 <network_set_listen_timeout>

023f8f30 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f8f30:	2200      	movs	r2, #0
 23f8f32:	6840      	ldr	r0, [r0, #4]
 23f8f34:	f081 0101 	eor.w	r1, r1, #1
 23f8f38:	f7ff be26 	b.w	23f8b88 <network_listen>

023f8f3c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f8f3c:	2300      	movs	r3, #0
 23f8f3e:	6840      	ldr	r0, [r0, #4]
 23f8f40:	461a      	mov	r2, r3
 23f8f42:	4619      	mov	r1, r3
 23f8f44:	f7ff be12 	b.w	23f8b6c <network_off>

023f8f48 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f8f48:	2300      	movs	r3, #0
 23f8f4a:	6840      	ldr	r0, [r0, #4]
 23f8f4c:	461a      	mov	r2, r3
 23f8f4e:	4619      	mov	r1, r3
 23f8f50:	f7ff bdfe 	b.w	23f8b50 <network_on>

023f8f54 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23f8f54:	2200      	movs	r2, #0
 23f8f56:	6840      	ldr	r0, [r0, #4]
 23f8f58:	4611      	mov	r1, r2
 23f8f5a:	f7ff bdeb 	b.w	23f8b34 <network_ready>

023f8f5e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f8f5e:	2200      	movs	r2, #0
 23f8f60:	6840      	ldr	r0, [r0, #4]
 23f8f62:	4611      	mov	r1, r2
 23f8f64:	f7ff bdca 	b.w	23f8afc <network_connecting>

023f8f68 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f8f68:	2200      	movs	r2, #0
 23f8f6a:	2102      	movs	r1, #2
 23f8f6c:	6840      	ldr	r0, [r0, #4]
 23f8f6e:	f7ff bdd3 	b.w	23f8b18 <network_disconnect>

023f8f72 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f8f72:	2300      	movs	r3, #0
 23f8f74:	6840      	ldr	r0, [r0, #4]
 23f8f76:	461a      	mov	r2, r3
 23f8f78:	f7ff bdb2 	b.w	23f8ae0 <network_connect>

023f8f7c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23f8f7c:	2203      	movs	r2, #3
 23f8f7e:	4b02      	ldr	r3, [pc, #8]	; (23f8f88 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23f8f80:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23f8f82:	4a02      	ldr	r2, [pc, #8]	; (23f8f8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23f8f84:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23f8f86:	4770      	bx	lr
 23f8f88:	1007ae8c 	.word	0x1007ae8c
 23f8f8c:	023ff870 	.word	0x023ff870

023f8f90 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS},
        buffer_(nullptr) {
 23f8f90:	21ff      	movs	r1, #255	; 0xff
 23f8f92:	2200      	movs	r2, #0
      : address_{address},
 23f8f94:	4b04      	ldr	r3, [pc, #16]	; (23f8fa8 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23f8f96:	2001      	movs	r0, #1
 23f8f98:	e9c3 1200 	strd	r1, r2, [r3]
 23f8f9c:	2164      	movs	r1, #100	; 0x64
 23f8f9e:	611a      	str	r2, [r3, #16]
 23f8fa0:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23f8fa4:	4770      	bx	lr
 23f8fa6:	bf00      	nop
 23f8fa8:	1007ae94 	.word	0x1007ae94

023f8fac <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23f8fac:	4770      	bx	lr

023f8fae <_ZN9IPAddressD0Ev>:
 23f8fae:	b510      	push	{r4, lr}
 23f8fb0:	4604      	mov	r4, r0
 23f8fb2:	2118      	movs	r1, #24
 23f8fb4:	f7fc ffed 	bl	23f5f92 <_ZdlPvj>
 23f8fb8:	4620      	mov	r0, r4
 23f8fba:	bd10      	pop	{r4, pc}

023f8fbc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23f8fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23f8fbe:	7d03      	ldrb	r3, [r0, #20]
{
 23f8fc0:	460e      	mov	r6, r1
	if (address.v==6) {
 23f8fc2:	2b06      	cmp	r3, #6
 23f8fc4:	f04f 0400 	mov.w	r4, #0
{
 23f8fc8:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f8fca:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23f8fce:	d012      	beq.n	23f8ff6 <_ZNK9IPAddress7printToER5Print+0x3a>
 23f8fd0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f8fd4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23f8fd8:	220a      	movs	r2, #10
 23f8fda:	4630      	mov	r0, r6
 23f8fdc:	f001 ff9d 	bl	23faf1a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23f8fe0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23f8fe2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23f8fe4:	d019      	beq.n	23f901a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23f8fe6:	2c00      	cmp	r4, #0
 23f8fe8:	d0f4      	beq.n	23f8fd4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23f8fea:	212e      	movs	r1, #46	; 0x2e
 23f8fec:	4630      	mov	r0, r6
 23f8fee:	f001 ff91 	bl	23faf14 <_ZN5Print5printEc>
 23f8ff2:	4404      	add	r4, r0
 23f8ff4:	e7ee      	b.n	23f8fd4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f8ff6:	232f      	movs	r3, #47	; 0x2f
 23f8ff8:	466a      	mov	r2, sp
 23f8ffa:	4639      	mov	r1, r7
 23f8ffc:	200a      	movs	r0, #10
		buf[0] = 0;
 23f8ffe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f9002:	f7ff fa95 	bl	23f8530 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23f9006:	4668      	mov	r0, sp
 23f9008:	f7fc ff80 	bl	23f5f0c <strlen>
 23f900c:	6833      	ldr	r3, [r6, #0]
 23f900e:	4602      	mov	r2, r0
 23f9010:	4669      	mov	r1, sp
 23f9012:	4630      	mov	r0, r6
 23f9014:	68db      	ldr	r3, [r3, #12]
 23f9016:	4798      	blx	r3
 23f9018:	4604      	mov	r4, r0
    }
    return n;
}
 23f901a:	4620      	mov	r0, r4
 23f901c:	b00d      	add	sp, #52	; 0x34
 23f901e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f9020 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23f9020:	b510      	push	{r4, lr}
 23f9022:	4604      	mov	r4, r0
 23f9024:	4b04      	ldr	r3, [pc, #16]	; (23f9038 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23f9026:	2211      	movs	r2, #17
 23f9028:	2100      	movs	r1, #0
 23f902a:	f840 3b04 	str.w	r3, [r0], #4
 23f902e:	f004 f8c2 	bl	23fd1b6 <memset>
}
 23f9032:	4620      	mov	r0, r4
 23f9034:	bd10      	pop	{r4, pc}
 23f9036:	bf00      	nop
 23f9038:	023ff8b4 	.word	0x023ff8b4

023f903c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23f903c:	4603      	mov	r3, r0
 23f903e:	4a07      	ldr	r2, [pc, #28]	; (23f905c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23f9040:	b510      	push	{r4, lr}
 23f9042:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23f9046:	f101 0210 	add.w	r2, r1, #16
 23f904a:	f851 4b04 	ldr.w	r4, [r1], #4
 23f904e:	4291      	cmp	r1, r2
 23f9050:	f843 4b04 	str.w	r4, [r3], #4
 23f9054:	d1f9      	bne.n	23f904a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23f9056:	780a      	ldrb	r2, [r1, #0]
 23f9058:	701a      	strb	r2, [r3, #0]
}
 23f905a:	bd10      	pop	{r4, pc}
 23f905c:	023ff8b4 	.word	0x023ff8b4

023f9060 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23f9060:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23f9062:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23f9066:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23f906a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23f906e:	2304      	movs	r3, #4
 23f9070:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23f9074:	6041      	str	r1, [r0, #4]
 23f9076:	7503      	strb	r3, [r0, #20]
}
 23f9078:	bd10      	pop	{r4, pc}
	...

023f907c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23f907c:	b507      	push	{r0, r1, r2, lr}
 23f907e:	4b06      	ldr	r3, [pc, #24]	; (23f9098 <_ZN9IPAddressC1EPKh+0x1c>)
 23f9080:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23f9082:	78cb      	ldrb	r3, [r1, #3]
 23f9084:	9300      	str	r3, [sp, #0]
 23f9086:	788b      	ldrb	r3, [r1, #2]
 23f9088:	784a      	ldrb	r2, [r1, #1]
 23f908a:	7809      	ldrb	r1, [r1, #0]
 23f908c:	f7ff ffe8 	bl	23f9060 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23f9090:	b003      	add	sp, #12
 23f9092:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9096:	bf00      	nop
 23f9098:	023ff8b4 	.word	0x023ff8b4

023f909c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23f909c:	2201      	movs	r2, #1
 23f909e:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23f90a2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23f90a6:	4618      	mov	r0, r3
 23f90a8:	2901      	cmp	r1, #1
 23f90aa:	d108      	bne.n	23f90be <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23f90ac:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23f90b0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23f90b4:	3a01      	subs	r2, #1
 23f90b6:	f103 0310 	add.w	r3, r3, #16
 23f90ba:	d1f2      	bne.n	23f90a2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23f90bc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23f90be:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23f90c0:	bf04      	itt	eq
 23f90c2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23f90c6:	1852      	addeq	r2, r2, r1
 23f90c8:	e7f4      	b.n	23f90b4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023f90ca <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23f90ca:	4770      	bx	lr

023f90cc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23f90cc:	2000      	movs	r0, #0
 23f90ce:	4770      	bx	lr

023f90d0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23f90d0:	b510      	push	{r4, lr}
 23f90d2:	4604      	mov	r4, r0
 23f90d4:	2110      	movs	r1, #16
 23f90d6:	f7fc ff5c 	bl	23f5f92 <_ZdlPvj>
 23f90da:	4620      	mov	r0, r4
 23f90dc:	bd10      	pop	{r4, pc}

023f90de <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23f90de:	b508      	push	{r3, lr}
      { delete this; }
 23f90e0:	f7ff fff6 	bl	23f90d0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23f90e4:	bd08      	pop	{r3, pc}

023f90e6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23f90e6:	b40e      	push	{r1, r2, r3}
 23f90e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f90ea:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f90ec:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23f90ee:	af00      	add	r7, sp, #0
 23f90f0:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23f90f4:	f855 2b04 	ldr.w	r2, [r5], #4
 23f90f8:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f90fa:	462b      	mov	r3, r5
 23f90fc:	1878      	adds	r0, r7, r1
 23f90fe:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23f9100:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f9102:	f7ff fde9 	bl	23f8cd8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23f9106:	280f      	cmp	r0, #15
 23f9108:	687a      	ldr	r2, [r7, #4]
 23f910a:	d91a      	bls.n	23f9142 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23f910c:	f100 0308 	add.w	r3, r0, #8
 23f9110:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23f9114:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23f9116:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f911a:	1c41      	adds	r1, r0, #1
 23f911c:	462b      	mov	r3, r5
 23f911e:	4668      	mov	r0, sp
        va_start(args, fmt);
 23f9120:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f9122:	f7ff fdd9 	bl	23f8cd8 <vsnprintf>
        if (n > 0) {
 23f9126:	1e02      	subs	r2, r0, #0
 23f9128:	dd04      	ble.n	23f9134 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23f912a:	6823      	ldr	r3, [r4, #0]
 23f912c:	4669      	mov	r1, sp
 23f912e:	4620      	mov	r0, r4
 23f9130:	689b      	ldr	r3, [r3, #8]
 23f9132:	4798      	blx	r3
 23f9134:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23f9136:	3720      	adds	r7, #32
 23f9138:	46bd      	mov	sp, r7
 23f913a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f913e:	b003      	add	sp, #12
 23f9140:	4770      	bx	lr
    } else if (n > 0) {
 23f9142:	2800      	cmp	r0, #0
 23f9144:	d0f7      	beq.n	23f9136 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23f9146:	6823      	ldr	r3, [r4, #0]
 23f9148:	4602      	mov	r2, r0
 23f914a:	689b      	ldr	r3, [r3, #8]
 23f914c:	4620      	mov	r0, r4
 23f914e:	f107 0110 	add.w	r1, r7, #16
 23f9152:	4798      	blx	r3
}
 23f9154:	e7ef      	b.n	23f9136 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023f9156 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23f9156:	b510      	push	{r4, lr}
      { delete _M_ptr; }
 23f9158:	68c4      	ldr	r4, [r0, #12]
 23f915a:	b17c      	cbz	r4, 23f917c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
        delete[] tokens;
 23f915c:	6820      	ldr	r0, [r4, #0]
 23f915e:	b108      	cbz	r0, 23f9164 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
 23f9160:	f7fc ff15 	bl	23f5f8e <_ZdaPv>
        if (freeJson) {
 23f9164:	7a23      	ldrb	r3, [r4, #8]
 23f9166:	b11b      	cbz	r3, 23f9170 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
 23f9168:	6860      	ldr	r0, [r4, #4]
            delete[] json;
 23f916a:	b108      	cbz	r0, 23f9170 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
 23f916c:	f7fc ff0f 	bl	23f5f8e <_ZdaPv>
 23f9170:	4620      	mov	r0, r4
 23f9172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f9176:	210c      	movs	r1, #12
 23f9178:	f7fc bf0b 	b.w	23f5f92 <_ZdlPvj>
 23f917c:	bd10      	pop	{r4, pc}

023f917e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f917e:	b538      	push	{r3, r4, r5, lr}
 23f9180:	680b      	ldr	r3, [r1, #0]
 23f9182:	4604      	mov	r4, r0
 23f9184:	6003      	str	r3, [r0, #0]
 23f9186:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23f9188:	6843      	ldr	r3, [r0, #4]
 23f918a:	429d      	cmp	r5, r3
 23f918c:	d008      	beq.n	23f91a0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23f918e:	b115      	cbz	r5, 23f9196 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23f9190:	686b      	ldr	r3, [r5, #4]
 23f9192:	3301      	adds	r3, #1
 23f9194:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23f9196:	6860      	ldr	r0, [r4, #4]
 23f9198:	b108      	cbz	r0, 23f919e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23f919a:	f7ff fe1e 	bl	23f8dda <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23f919e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f91a0:	bd38      	pop	{r3, r4, r5, pc}

023f91a2 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23f91a2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f91a4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23f91a6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f91aa:	2201      	movs	r2, #1
 23f91ac:	689b      	ldr	r3, [r3, #8]
 23f91ae:	f10d 0107 	add.w	r1, sp, #7
 23f91b2:	4798      	blx	r3
}
 23f91b4:	b003      	add	sp, #12
 23f91b6:	f85d fb04 	ldr.w	pc, [sp], #4

023f91ba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f91ba:	460b      	mov	r3, r1
 23f91bc:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23f91be:	2200      	movs	r2, #0
 23f91c0:	b510      	push	{r4, lr}
 23f91c2:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f91c4:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23f91c8:	6083      	str	r3, [r0, #8]
    if (t) {
 23f91ca:	b90b      	cbnz	r3, 23f91d0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23f91cc:	4620      	mov	r0, r4
 23f91ce:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23f91d0:	f7ff ffd5 	bl	23f917e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23f91d4:	e7fa      	b.n	23f91cc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023f91d6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23f91d6:	6883      	ldr	r3, [r0, #8]
 23f91d8:	b1eb      	cbz	r3, 23f9216 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23f91da:	781a      	ldrb	r2, [r3, #0]
 23f91dc:	2a03      	cmp	r2, #3
 23f91de:	d81a      	bhi.n	23f9216 <_ZNK5spark9JSONValue4typeEv+0x40>
 23f91e0:	e8df f002 	tbb	[pc, r2]
 23f91e4:	1b021704 	.word	0x1b021704
 23f91e8:	2005      	movs	r0, #5
 23f91ea:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23f91ec:	6802      	ldr	r2, [r0, #0]
 23f91ee:	685b      	ldr	r3, [r3, #4]
 23f91f0:	6852      	ldr	r2, [r2, #4]
 23f91f2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23f91f4:	282d      	cmp	r0, #45	; 0x2d
 23f91f6:	d012      	beq.n	23f921e <_ZNK5spark9JSONValue4typeEv+0x48>
 23f91f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23f91fc:	2b09      	cmp	r3, #9
 23f91fe:	d90e      	bls.n	23f921e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23f9200:	2874      	cmp	r0, #116	; 0x74
 23f9202:	d00e      	beq.n	23f9222 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23f9204:	2866      	cmp	r0, #102	; 0x66
 23f9206:	d00c      	beq.n	23f9222 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23f9208:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23f920c:	4258      	negs	r0, r3
 23f920e:	4158      	adcs	r0, r3
 23f9210:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23f9212:	2006      	movs	r0, #6
 23f9214:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23f9216:	2000      	movs	r0, #0
 23f9218:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23f921a:	2004      	movs	r0, #4
 23f921c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23f921e:	2003      	movs	r0, #3
 23f9220:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23f9222:	2002      	movs	r0, #2
}
 23f9224:	4770      	bx	lr
	...

023f9228 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
 23f9228:	b510      	push	{r4, lr}
 23f922a:	4604      	mov	r4, r0
    switch (type()) {
 23f922c:	f7ff ffd3 	bl	23f91d6 <_ZNK5spark9JSONValue4typeEv>
 23f9230:	2803      	cmp	r0, #3
 23f9232:	d00d      	beq.n	23f9250 <_ZNK5spark9JSONValue6toBoolEv+0x28>
 23f9234:	2804      	cmp	r0, #4
 23f9236:	d01e      	beq.n	23f9276 <_ZNK5spark9JSONValue6toBoolEv+0x4e>
 23f9238:	2802      	cmp	r0, #2
 23f923a:	d12b      	bne.n	23f9294 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
 23f923c:	6822      	ldr	r2, [r4, #0]
 23f923e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23f9240:	6852      	ldr	r2, [r2, #4]
 23f9242:	685b      	ldr	r3, [r3, #4]
 23f9244:	5cd0      	ldrb	r0, [r2, r3]
 23f9246:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23f924a:	4258      	negs	r0, r3
 23f924c:	4158      	adcs	r0, r3
}
 23f924e:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
 23f9250:	68a3      	ldr	r3, [r4, #8]
 23f9252:	6822      	ldr	r2, [r4, #0]
 23f9254:	685b      	ldr	r3, [r3, #4]
 23f9256:	6854      	ldr	r4, [r2, #4]
 23f9258:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
 23f925a:	4620      	mov	r0, r4
 23f925c:	490e      	ldr	r1, [pc, #56]	; (23f9298 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
 23f925e:	f7fc fe4b 	bl	23f5ef8 <strcmp>
 23f9262:	2800      	cmp	r0, #0
 23f9264:	d0f3      	beq.n	23f924e <_ZNK5spark9JSONValue6toBoolEv+0x26>
 23f9266:	4620      	mov	r0, r4
 23f9268:	490c      	ldr	r1, [pc, #48]	; (23f929c <_ZNK5spark9JSONValue6toBoolEv+0x74>)
 23f926a:	f7fc fe45 	bl	23f5ef8 <strcmp>
 23f926e:	3800      	subs	r0, #0
 23f9270:	bf18      	it	ne
 23f9272:	2001      	movne	r0, #1
 23f9274:	e7eb      	b.n	23f924e <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
 23f9276:	6822      	ldr	r2, [r4, #0]
 23f9278:	68a3      	ldr	r3, [r4, #8]
 23f927a:	6852      	ldr	r2, [r2, #4]
 23f927c:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
 23f927e:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
 23f9280:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
 23f9282:	2800      	cmp	r0, #0
 23f9284:	d0e3      	beq.n	23f924e <_ZNK5spark9JSONValue6toBoolEv+0x26>
 23f9286:	4620      	mov	r0, r4
 23f9288:	4905      	ldr	r1, [pc, #20]	; (23f92a0 <_ZNK5spark9JSONValue6toBoolEv+0x78>)
 23f928a:	f7fc fe35 	bl	23f5ef8 <strcmp>
 23f928e:	2800      	cmp	r0, #0
 23f9290:	d1e3      	bne.n	23f925a <_ZNK5spark9JSONValue6toBoolEv+0x32>
 23f9292:	e7dc      	b.n	23f924e <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
 23f9294:	2000      	movs	r0, #0
 23f9296:	e7da      	b.n	23f924e <_ZNK5spark9JSONValue6toBoolEv+0x26>
 23f9298:	023ff8c2 	.word	0x023ff8c2
 23f929c:	023ff8c0 	.word	0x023ff8c0
 23f92a0:	023ff26d 	.word	0x023ff26d

023f92a4 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23f92a4:	b510      	push	{r4, lr}
 23f92a6:	4604      	mov	r4, r0
    switch (type()) {
 23f92a8:	f7ff ff95 	bl	23f91d6 <_ZNK5spark9JSONValue4typeEv>
 23f92ac:	2802      	cmp	r0, #2
 23f92ae:	d00e      	beq.n	23f92ce <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23f92b0:	1ec3      	subs	r3, r0, #3
 23f92b2:	b2db      	uxtb	r3, r3
 23f92b4:	2b01      	cmp	r3, #1
 23f92b6:	d814      	bhi.n	23f92e2 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23f92b8:	6822      	ldr	r2, [r4, #0]
 23f92ba:	68a3      	ldr	r3, [r4, #8]
 23f92bc:	6850      	ldr	r0, [r2, #4]
 23f92be:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23f92c0:	220a      	movs	r2, #10
}
 23f92c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23f92c6:	2100      	movs	r1, #0
 23f92c8:	4418      	add	r0, r3
 23f92ca:	f004 beb5 	b.w	23fe038 <strtol>
        const char* const s = d_->json + t_->start;
 23f92ce:	6822      	ldr	r2, [r4, #0]
 23f92d0:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23f92d2:	6852      	ldr	r2, [r2, #4]
 23f92d4:	685b      	ldr	r3, [r3, #4]
 23f92d6:	5cd0      	ldrb	r0, [r2, r3]
 23f92d8:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23f92dc:	4258      	negs	r0, r3
 23f92de:	4158      	adcs	r0, r3
}
 23f92e0:	bd10      	pop	{r4, pc}
    switch (type()) {
 23f92e2:	2000      	movs	r0, #0
 23f92e4:	e7fc      	b.n	23f92e0 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

023f92e8 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
 23f92e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f92ec:	4607      	mov	r7, r0
 23f92ee:	4688      	mov	r8, r1
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
 23f92f0:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
 23f92f2:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
 23f92f4:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
 23f92f6:	b086      	sub	sp, #24
    jsmn_init(&parser, nullptr);
 23f92f8:	2100      	movs	r1, #0
 23f92fa:	a802      	add	r0, sp, #8
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
 23f92fc:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
 23f92fe:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
 23f9300:	f7ff fa58 	bl	23f87b4 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
 23f9304:	4623      	mov	r3, r4
 23f9306:	4642      	mov	r2, r8
 23f9308:	4639      	mov	r1, r7
 23f930a:	e9cd 4400 	strd	r4, r4, [sp]
 23f930e:	a802      	add	r0, sp, #8
 23f9310:	f7ff fa96 	bl	23f8840 <jsmn_parse>
    if (n <= 0) {
 23f9314:	1e06      	subs	r6, r0, #0
 23f9316:	dd25      	ble.n	23f9364 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7c>
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
 23f9318:	f1b6 6f00 	cmp.w	r6, #134217728	; 0x8000000
 23f931c:	bfa8      	it	ge
 23f931e:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
 23f9322:	4911      	ldr	r1, [pc, #68]	; (23f9368 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x80>)
 23f9324:	bfb8      	it	lt
 23f9326:	0130      	lsllt	r0, r6, #4
 23f9328:	f003 fe20 	bl	23fcf6c <_ZnajRKSt9nothrow_t>
    if (!t) {
 23f932c:	4605      	mov	r5, r0
 23f932e:	b198      	cbz	r0, 23f9358 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x70>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
 23f9330:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
 23f9332:	2100      	movs	r1, #0
 23f9334:	a802      	add	r0, sp, #8
 23f9336:	f7ff fa3d 	bl	23f87b4 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
 23f933a:	462b      	mov	r3, r5
 23f933c:	4642      	mov	r2, r8
 23f933e:	4639      	mov	r1, r7
 23f9340:	e9cd 6400 	strd	r6, r4, [sp]
 23f9344:	a802      	add	r0, sp, #8
 23f9346:	f7ff fa7b 	bl	23f8840 <jsmn_parse>
 23f934a:	42a0      	cmp	r0, r4
 23f934c:	dd07      	ble.n	23f935e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x76>
    return true;
 23f934e:	2001      	movs	r0, #1
    *tokens = t.release();
 23f9350:	f8ca 5000 	str.w	r5, [sl]
    *count = n;
 23f9354:	f8c9 6000 	str.w	r6, [r9]
}
 23f9358:	b006      	add	sp, #24
 23f935a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
	{
	  static_assert(sizeof(_Tp)>0,
			"can't delete pointer to incomplete type");
	  delete [] __ptr;
 23f935e:	4628      	mov	r0, r5
 23f9360:	f7fc fe15 	bl	23f5f8e <_ZdaPv>
	}
 23f9364:	4620      	mov	r0, r4
 23f9366:	e7f7      	b.n	23f9358 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x70>
 23f9368:	023ffc10 	.word	0x023ffc10

023f936c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
 23f936c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
 23f9370:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
 23f9372:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
 23f9374:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
 23f9376:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
 23f9378:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
 23f937a:	4607      	mov	r7, r0
    const char *s = s1;
 23f937c:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
 23f937e:	4619      	mov	r1, r3
                    *str = 0x0d;
 23f9380:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
 23f9384:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
 23f9388:	42b4      	cmp	r4, r6
 23f938a:	d063      	beq.n	23f9454 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
            ++s;
 23f938c:	4625      	mov	r5, r4
        if (*s == '\\') {
 23f938e:	f815 2b01 	ldrb.w	r2, [r5], #1
 23f9392:	2a5c      	cmp	r2, #92	; 0x5c
 23f9394:	d12b      	bne.n	23f93ee <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
 23f9396:	42a1      	cmp	r1, r4
 23f9398:	d007      	beq.n	23f93aa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
 23f939a:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
 23f939e:	4618      	mov	r0, r3
 23f93a0:	465a      	mov	r2, fp
 23f93a2:	f003 feee 	bl	23fd182 <memmove>
 23f93a6:	4603      	mov	r3, r0
                str += n;
 23f93a8:	445b      	add	r3, fp
            if (s == end) {
 23f93aa:	42b5      	cmp	r5, r6
 23f93ac:	d039      	beq.n	23f9422 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
 23f93ae:	7862      	ldrb	r2, [r4, #1]
 23f93b0:	2a75      	cmp	r2, #117	; 0x75
 23f93b2:	d12a      	bne.n	23f940a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
 23f93b4:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
 23f93b6:	1ab2      	subs	r2, r6, r2
 23f93b8:	2a03      	cmp	r2, #3
 23f93ba:	dd32      	ble.n	23f9422 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    uint32_t v = 0;
 23f93bc:	f04f 0c00 	mov.w	ip, #0
    const char* const end = s + size;
 23f93c0:	1da0      	adds	r0, r4, #6
 23f93c2:	f104 0e05 	add.w	lr, r4, #5
    while (s != end) {
 23f93c6:	45ae      	cmp	lr, r5
 23f93c8:	d053      	beq.n	23f9472 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
 23f93ca:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
 23f93ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 23f93d2:	fa5f fb82 	uxtb.w	fp, r2
 23f93d6:	f1bb 0f09 	cmp.w	fp, #9
 23f93da:	d905      	bls.n	23f93e8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
 23f93dc:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 23f93e0:	2a05      	cmp	r2, #5
 23f93e2:	d807      	bhi.n	23f93f4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
 23f93e4:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
 23f93e8:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
 23f93ec:	e7eb      	b.n	23f93c6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
            ++s;
 23f93ee:	4628      	mov	r0, r5
 23f93f0:	4604      	mov	r4, r0
 23f93f2:	e7c9      	b.n	23f9388 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
 23f93f4:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 23f93f8:	2a05      	cmp	r2, #5
 23f93fa:	d812      	bhi.n	23f9422 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
 23f93fc:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
 23f9400:	e7f2      	b.n	23f93e8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    s1 += 6; // Skip escaped sequence
 23f9402:	4601      	mov	r1, r0
                    *str = u;
 23f9404:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
 23f9408:	e7f2      	b.n	23f93f0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
 23f940a:	2a6e      	cmp	r2, #110	; 0x6e
 23f940c:	d01c      	beq.n	23f9448 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
 23f940e:	d80e      	bhi.n	23f942e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
 23f9410:	2a62      	cmp	r2, #98	; 0x62
 23f9412:	d013      	beq.n	23f943c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
 23f9414:	d807      	bhi.n	23f9426 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
 23f9416:	2a2f      	cmp	r2, #47	; 0x2f
 23f9418:	d011      	beq.n	23f943e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
 23f941a:	2a5c      	cmp	r2, #92	; 0x5c
 23f941c:	d00f      	beq.n	23f943e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
 23f941e:	2a22      	cmp	r2, #34	; 0x22
 23f9420:	d00d      	beq.n	23f943e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
 23f9422:	2000      	movs	r0, #0
 23f9424:	e023      	b.n	23f946e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
 23f9426:	2a66      	cmp	r2, #102	; 0x66
 23f9428:	d1fb      	bne.n	23f9422 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
 23f942a:	220c      	movs	r2, #12
 23f942c:	e007      	b.n	23f943e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
 23f942e:	2a72      	cmp	r2, #114	; 0x72
 23f9430:	d00d      	beq.n	23f944e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
 23f9432:	2a74      	cmp	r2, #116	; 0x74
 23f9434:	d1f5      	bne.n	23f9422 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
 23f9436:	f883 a000 	strb.w	sl, [r3]
                    break;
 23f943a:	e001      	b.n	23f9440 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
 23f943c:	2208      	movs	r2, #8
 23f943e:	701a      	strb	r2, [r3, #0]
                ++s;
 23f9440:	1ca1      	adds	r1, r4, #2
 23f9442:	4608      	mov	r0, r1
                ++str;
 23f9444:	3301      	adds	r3, #1
                s1 = s; // Skip escaped sequence
 23f9446:	e7d3      	b.n	23f93f0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
 23f9448:	f04f 020a 	mov.w	r2, #10
 23f944c:	e7f7      	b.n	23f943e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
 23f944e:	f883 9000 	strb.w	r9, [r3]
                    break;
 23f9452:	e7f5      	b.n	23f9440 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
    if (s != s1) {
 23f9454:	42a1      	cmp	r1, r4
 23f9456:	d006      	beq.n	23f9466 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
 23f9458:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
 23f945a:	4618      	mov	r0, r3
 23f945c:	4622      	mov	r2, r4
 23f945e:	f003 fe90 	bl	23fd182 <memmove>
 23f9462:	4603      	mov	r3, r0
        str += n;
 23f9464:	4423      	add	r3, r4
    return true;
 23f9466:	2001      	movs	r0, #1
    t->end = str - json; // Update string length
 23f9468:	eba3 0308 	sub.w	r3, r3, r8
 23f946c:	60bb      	str	r3, [r7, #8]
}
 23f946e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
 23f9472:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
 23f9476:	d9c4      	bls.n	23f9402 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
 23f9478:	4621      	mov	r1, r4
 23f947a:	e7b9      	b.n	23f93f0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

023f947c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
 23f947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f947e:	4604      	mov	r4, r0
 23f9480:	4615      	mov	r5, r2
            json[t->end] = '\0';
 23f9482:	2700      	movs	r7, #0
    const jsmntok_t* const end = t + count;
 23f9484:	eb00 1601 	add.w	r6, r0, r1, lsl #4
    while (t != end) {
 23f9488:	42b4      	cmp	r4, r6
 23f948a:	d010      	beq.n	23f94ae <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
 23f948c:	7823      	ldrb	r3, [r4, #0]
 23f948e:	2b03      	cmp	r3, #3
 23f9490:	d108      	bne.n	23f94a4 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
 23f9492:	4629      	mov	r1, r5
 23f9494:	4620      	mov	r0, r4
 23f9496:	f7ff ff69 	bl	23f936c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
 23f949a:	b148      	cbz	r0, 23f94b0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
 23f949c:	68a3      	ldr	r3, [r4, #8]
 23f949e:	54ef      	strb	r7, [r5, r3]
        ++t;
 23f94a0:	3410      	adds	r4, #16
    while (t != end) {
 23f94a2:	e7f1      	b.n	23f9488 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
 23f94a4:	2b00      	cmp	r3, #0
 23f94a6:	d1fb      	bne.n	23f94a0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
 23f94a8:	68a2      	ldr	r2, [r4, #8]
 23f94aa:	54ab      	strb	r3, [r5, r2]
 23f94ac:	e7f8      	b.n	23f94a0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
 23f94ae:	2001      	movs	r0, #1
}
 23f94b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

023f94b4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f94b4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f94b6:	2300      	movs	r3, #0
 23f94b8:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f94ba:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23f94be:	480e      	ldr	r0, [pc, #56]	; (23f94f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23f94c0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23f94c4:	b1a9      	cbz	r1, 23f94f2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23f94c6:	780b      	ldrb	r3, [r1, #0]
 23f94c8:	2b03      	cmp	r3, #3
 23f94ca:	d006      	beq.n	23f94da <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23f94cc:	b98b      	cbnz	r3, 23f94f2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23f94ce:	6813      	ldr	r3, [r2, #0]
 23f94d0:	6858      	ldr	r0, [r3, #4]
 23f94d2:	684b      	ldr	r3, [r1, #4]
 23f94d4:	5cc3      	ldrb	r3, [r0, r3]
 23f94d6:	2b6e      	cmp	r3, #110	; 0x6e
 23f94d8:	d007      	beq.n	23f94ea <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23f94da:	6813      	ldr	r3, [r2, #0]
 23f94dc:	684d      	ldr	r5, [r1, #4]
 23f94de:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23f94e0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23f94e2:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23f94e4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23f94e6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23f94e8:	60e3      	str	r3, [r4, #12]
 23f94ea:	4611      	mov	r1, r2
 23f94ec:	4620      	mov	r0, r4
 23f94ee:	f7ff fe46 	bl	23f917e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f94f2:	4620      	mov	r0, r4
 23f94f4:	bd38      	pop	{r3, r4, r5, pc}
 23f94f6:	bf00      	nop
 23f94f8:	023ffa36 	.word	0x023ffa36

023f94fc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f94fc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f94fe:	2500      	movs	r5, #0
 23f9500:	460b      	mov	r3, r1
 23f9502:	4604      	mov	r4, r0
 23f9504:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23f9506:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23f950a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23f950e:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23f9512:	b14b      	cbz	r3, 23f9528 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23f9514:	781a      	ldrb	r2, [r3, #0]
 23f9516:	2a01      	cmp	r2, #1
 23f9518:	d106      	bne.n	23f9528 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23f951a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23f951e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23f9520:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23f9522:	6143      	str	r3, [r0, #20]
 23f9524:	f7ff fe2b 	bl	23f917e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f9528:	4620      	mov	r0, r4
 23f952a:	bd38      	pop	{r3, r4, r5, pc}

023f952c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23f952c:	b510      	push	{r4, lr}
    if (!n_) {
 23f952e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23f9530:	4604      	mov	r4, r0
    if (!n_) {
 23f9532:	b163      	cbz	r3, 23f954e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23f9534:	6880      	ldr	r0, [r0, #8]
    --n_;
 23f9536:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23f9538:	60e0      	str	r0, [r4, #12]
    ++t_;
 23f953a:	3010      	adds	r0, #16
 23f953c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23f953e:	6120      	str	r0, [r4, #16]
    --n_;
 23f9540:	6163      	str	r3, [r4, #20]
    if (n_) {
 23f9542:	b113      	cbz	r3, 23f954a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23f9544:	f7ff fdaa 	bl	23f909c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23f9548:	60a0      	str	r0, [r4, #8]
    return true;
 23f954a:	2001      	movs	r0, #1
 23f954c:	e000      	b.n	23f9550 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23f954e:	4618      	mov	r0, r3
}
 23f9550:	bd10      	pop	{r4, pc}

023f9552 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONArrayIterator::JSONArrayIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f9552:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f9554:	2500      	movs	r5, #0
 23f9556:	460b      	mov	r3, r1
 23f9558:	4604      	mov	r4, r0
 23f955a:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23f955c:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23f9560:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23f9564:	6105      	str	r5, [r0, #16]
    if (t && t->type == JSMN_ARRAY) {
 23f9566:	b14b      	cbz	r3, 23f957c <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 23f9568:	781a      	ldrb	r2, [r3, #0]
 23f956a:	2a02      	cmp	r2, #2
 23f956c:	d106      	bne.n	23f957c <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
        t_ = t + 1; // First element
 23f956e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of elements
 23f9572:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First element
 23f9574:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of elements
 23f9576:	6103      	str	r3, [r0, #16]
 23f9578:	f7ff fe01 	bl	23f917e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f957c:	4620      	mov	r0, r4
 23f957e:	bd38      	pop	{r3, r4, r5, pc}

023f9580 <_ZN5spark17JSONArrayIterator4nextEv>:
bool spark::JSONArrayIterator::next() {
 23f9580:	b510      	push	{r4, lr}
    if (!n_) {
 23f9582:	6903      	ldr	r3, [r0, #16]
bool spark::JSONArrayIterator::next() {
 23f9584:	4604      	mov	r4, r0
    if (!n_) {
 23f9586:	b14b      	cbz	r3, 23f959c <_ZN5spark17JSONArrayIterator4nextEv+0x1c>
    v_ = t_;
 23f9588:	6880      	ldr	r0, [r0, #8]
    --n_;
 23f958a:	3b01      	subs	r3, #1
    v_ = t_;
 23f958c:	60e0      	str	r0, [r4, #12]
    --n_;
 23f958e:	6123      	str	r3, [r4, #16]
    if (n_) {
 23f9590:	b113      	cbz	r3, 23f9598 <_ZN5spark17JSONArrayIterator4nextEv+0x18>
        t_ = skipToken(t_);
 23f9592:	f7ff fd83 	bl	23f909c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23f9596:	60a0      	str	r0, [r4, #8]
    return true;
 23f9598:	2001      	movs	r0, #1
 23f959a:	e000      	b.n	23f959e <_ZN5spark17JSONArrayIterator4nextEv+0x1e>
        return false;
 23f959c:	4618      	mov	r0, r3
}
 23f959e:	bd10      	pop	{r4, pc}

023f95a0 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f95a0:	b510      	push	{r4, lr}
    write('}');
 23f95a2:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f95a4:	4604      	mov	r4, r0
    write('}');
 23f95a6:	f7ff fdfc 	bl	23f91a2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23f95aa:	2301      	movs	r3, #1
}
 23f95ac:	4620      	mov	r0, r4
    state_ = NEXT;
 23f95ae:	7123      	strb	r3, [r4, #4]
}
 23f95b0:	bd10      	pop	{r4, pc}

023f95b2 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23f95b2:	b508      	push	{r3, lr}
    switch (state_) {
 23f95b4:	7903      	ldrb	r3, [r0, #4]
 23f95b6:	2b01      	cmp	r3, #1
 23f95b8:	d002      	beq.n	23f95c0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23f95ba:	2b02      	cmp	r3, #2
 23f95bc:	d004      	beq.n	23f95c8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23f95be:	bd08      	pop	{r3, pc}
        write(',');
 23f95c0:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23f95c2:	f7ff fdee 	bl	23f91a2 <_ZN5spark10JSONWriter5writeEc>
}
 23f95c6:	e7fa      	b.n	23f95be <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23f95c8:	213a      	movs	r1, #58	; 0x3a
 23f95ca:	e7fa      	b.n	23f95c2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023f95cc <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23f95cc:	b510      	push	{r4, lr}
 23f95ce:	4604      	mov	r4, r0
    writeSeparator();
 23f95d0:	f7ff ffef 	bl	23f95b2 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23f95d4:	4620      	mov	r0, r4
 23f95d6:	217b      	movs	r1, #123	; 0x7b
 23f95d8:	f7ff fde3 	bl	23f91a2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23f95dc:	2300      	movs	r3, #0
}
 23f95de:	4620      	mov	r0, r4
    state_ = BEGIN;
 23f95e0:	7123      	strb	r3, [r4, #4]
}
 23f95e2:	bd10      	pop	{r4, pc}

023f95e4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23f95e4:	b513      	push	{r0, r1, r4, lr}
 23f95e6:	4604      	mov	r4, r0
 23f95e8:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f95ea:	f7ff ffe2 	bl	23f95b2 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23f95ee:	6823      	ldr	r3, [r4, #0]
 23f95f0:	4620      	mov	r0, r4
 23f95f2:	68db      	ldr	r3, [r3, #12]
 23f95f4:	9a01      	ldr	r2, [sp, #4]
 23f95f6:	4903      	ldr	r1, [pc, #12]	; (23f9604 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23f95f8:	4798      	blx	r3
    state_ = NEXT;
 23f95fa:	2301      	movs	r3, #1
}
 23f95fc:	4620      	mov	r0, r4
    state_ = NEXT;
 23f95fe:	7123      	strb	r3, [r4, #4]
}
 23f9600:	b002      	add	sp, #8
 23f9602:	bd10      	pop	{r4, pc}
 23f9604:	023ff841 	.word	0x023ff841

023f9608 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23f9608:	b513      	push	{r0, r1, r4, lr}
 23f960a:	4604      	mov	r4, r0
 23f960c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f960e:	f7ff ffd0 	bl	23f95b2 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23f9612:	6823      	ldr	r3, [r4, #0]
 23f9614:	4620      	mov	r0, r4
 23f9616:	68db      	ldr	r3, [r3, #12]
 23f9618:	9a01      	ldr	r2, [sp, #4]
 23f961a:	4903      	ldr	r1, [pc, #12]	; (23f9628 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23f961c:	4798      	blx	r3
    state_ = NEXT;
 23f961e:	2301      	movs	r3, #1
}
 23f9620:	4620      	mov	r0, r4
    state_ = NEXT;
 23f9622:	7123      	strb	r3, [r4, #4]
}
 23f9624:	b002      	add	sp, #8
 23f9626:	bd10      	pop	{r4, pc}
 23f9628:	023ff3a8 	.word	0x023ff3a8

023f962c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f962c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f9630:	460d      	mov	r5, r1
 23f9632:	4690      	mov	r8, r2
    write('"');
 23f9634:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f9636:	4604      	mov	r4, r0
 23f9638:	462f      	mov	r7, r5
    write('"');
 23f963a:	f7ff fdb2 	bl	23f91a2 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23f963e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23f96e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23f9642:	44a8      	add	r8, r5
    while (s != end) {
 23f9644:	4547      	cmp	r7, r8
 23f9646:	46ba      	mov	sl, r7
 23f9648:	d03d      	beq.n	23f96c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23f964a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23f964e:	2e22      	cmp	r6, #34	; 0x22
 23f9650:	d006      	beq.n	23f9660 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f9652:	2e5c      	cmp	r6, #92	; 0x5c
 23f9654:	d004      	beq.n	23f9660 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f9656:	4630      	mov	r0, r6
 23f9658:	f003 fd76 	bl	23fd148 <isprint>
 23f965c:	2800      	cmp	r0, #0
 23f965e:	d1f1      	bne.n	23f9644 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23f9660:	6823      	ldr	r3, [r4, #0]
 23f9662:	4629      	mov	r1, r5
 23f9664:	4620      	mov	r0, r4
 23f9666:	689b      	ldr	r3, [r3, #8]
 23f9668:	ebaa 0205 	sub.w	r2, sl, r5
 23f966c:	4798      	blx	r3
            write('\\');
 23f966e:	215c      	movs	r1, #92	; 0x5c
 23f9670:	4620      	mov	r0, r4
 23f9672:	f7ff fd96 	bl	23f91a2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23f9676:	2e0d      	cmp	r6, #13
 23f9678:	d80a      	bhi.n	23f9690 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23f967a:	2e07      	cmp	r6, #7
 23f967c:	d91c      	bls.n	23f96b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f967e:	f1a6 0308 	sub.w	r3, r6, #8
 23f9682:	2b05      	cmp	r3, #5
 23f9684:	d818      	bhi.n	23f96b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f9686:	e8df f003 	tbb	[pc, r3]
 23f968a:	0f0d      	.short	0x0f0d
 23f968c:	15131711 	.word	0x15131711
 23f9690:	2e22      	cmp	r6, #34	; 0x22
 23f9692:	d001      	beq.n	23f9698 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23f9694:	2e5c      	cmp	r6, #92	; 0x5c
 23f9696:	d10f      	bne.n	23f96b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23f9698:	4631      	mov	r1, r6
                write('b');
 23f969a:	4620      	mov	r0, r4
 23f969c:	f7ff fd81 	bl	23f91a2 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23f96a0:	463d      	mov	r5, r7
    while (s != end) {
 23f96a2:	e7cf      	b.n	23f9644 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23f96a4:	2162      	movs	r1, #98	; 0x62
 23f96a6:	e7f8      	b.n	23f969a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23f96a8:	2174      	movs	r1, #116	; 0x74
 23f96aa:	e7f6      	b.n	23f969a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23f96ac:	216e      	movs	r1, #110	; 0x6e
 23f96ae:	e7f4      	b.n	23f969a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23f96b0:	2166      	movs	r1, #102	; 0x66
 23f96b2:	e7f2      	b.n	23f969a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23f96b4:	2172      	movs	r1, #114	; 0x72
 23f96b6:	e7f0      	b.n	23f969a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23f96b8:	6823      	ldr	r3, [r4, #0]
 23f96ba:	4632      	mov	r2, r6
 23f96bc:	4649      	mov	r1, r9
 23f96be:	4620      	mov	r0, r4
 23f96c0:	68db      	ldr	r3, [r3, #12]
 23f96c2:	4798      	blx	r3
                break;
 23f96c4:	e7ec      	b.n	23f96a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23f96c6:	42bd      	cmp	r5, r7
 23f96c8:	d005      	beq.n	23f96d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23f96ca:	6823      	ldr	r3, [r4, #0]
 23f96cc:	4629      	mov	r1, r5
 23f96ce:	4620      	mov	r0, r4
 23f96d0:	689b      	ldr	r3, [r3, #8]
 23f96d2:	1b7a      	subs	r2, r7, r5
 23f96d4:	4798      	blx	r3
    }
    write('"');
 23f96d6:	2122      	movs	r1, #34	; 0x22
 23f96d8:	4620      	mov	r0, r4
 23f96da:	f7ff fd62 	bl	23f91a2 <_ZN5spark10JSONWriter5writeEc>
}
 23f96de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f96e2:	bf00      	nop
 23f96e4:	023ff8c4 	.word	0x023ff8c4

023f96e8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23f96e8:	b513      	push	{r0, r1, r4, lr}
 23f96ea:	4604      	mov	r4, r0
 23f96ec:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f96f0:	f7ff ff5f 	bl	23f95b2 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23f96f4:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f96f8:	4620      	mov	r0, r4
 23f96fa:	f7ff ff97 	bl	23f962c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23f96fe:	2302      	movs	r3, #2
}
 23f9700:	4620      	mov	r0, r4
    state_ = VALUE;
 23f9702:	7123      	strb	r3, [r4, #4]
}
 23f9704:	b002      	add	sp, #8
 23f9706:	bd10      	pop	{r4, pc}

023f9708 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23f9708:	b513      	push	{r0, r1, r4, lr}
 23f970a:	4604      	mov	r4, r0
 23f970c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f9710:	f7ff ff4f 	bl	23f95b2 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23f9714:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f9718:	4620      	mov	r0, r4
 23f971a:	f7ff ff87 	bl	23f962c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23f971e:	2301      	movs	r3, #1
}
 23f9720:	4620      	mov	r0, r4
    state_ = NEXT;
 23f9722:	7123      	strb	r3, [r4, #4]
}
 23f9724:	b002      	add	sp, #8
 23f9726:	bd10      	pop	{r4, pc}

023f9728 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23f9728:	b538      	push	{r3, r4, r5, lr}
 23f972a:	2300      	movs	r3, #0
 23f972c:	4604      	mov	r4, r0
 23f972e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f9730:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23f9732:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f9734:	f7fc fc27 	bl	23f5f86 <_Znwj>
 23f9738:	b128      	cbz	r0, 23f9746 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23f973a:	2301      	movs	r3, #1
 23f973c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23f9740:	4b02      	ldr	r3, [pc, #8]	; (23f974c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
 23f9742:	60c5      	str	r5, [r0, #12]
 23f9744:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f9746:	6020      	str	r0, [r4, #0]
	}
 23f9748:	4620      	mov	r0, r4
 23f974a:	bd38      	pop	{r3, r4, r5, pc}
 23f974c:	023ff8d4 	.word	0x023ff8d4

023f9750 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
 23f9750:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f9752:	4604      	mov	r4, r0
 23f9754:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
 23f9756:	200c      	movs	r0, #12
 23f9758:	4927      	ldr	r1, [pc, #156]	; (23f97f8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
 23f975a:	b087      	sub	sp, #28
 23f975c:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
 23f975e:	f003 fc03 	bl	23fcf68 <_ZnwjRKSt9nothrow_t>
 23f9762:	4601      	mov	r1, r0
 23f9764:	b118      	cbz	r0, 23f976e <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
 23f9766:	2300      	movs	r3, #0
 23f9768:	e9c0 3300 	strd	r3, r3, [r0]
 23f976c:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
 23f976e:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f9770:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
 23f9772:	f7ff ffd9 	bl	23f9728 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const // never throws
      { return _M_ptr == 0 ? false : true; }
 23f9776:	9a02      	ldr	r2, [sp, #8]
    if (!d) {
 23f9778:	b942      	cbnz	r2, 23f978c <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
 23f977a:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
 23f977e:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
 23f9780:	a803      	add	r0, sp, #12
 23f9782:	f7ff fb04 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f9786:	4620      	mov	r0, r4
 23f9788:	b007      	add	sp, #28
 23f978a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
 23f978c:	2300      	movs	r3, #0
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
 23f978e:	4629      	mov	r1, r5
    size_t tokenCount = 0;
 23f9790:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
 23f9792:	4630      	mov	r0, r6
 23f9794:	ab01      	add	r3, sp, #4
 23f9796:	f7ff fda7 	bl	23f92e8 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
 23f979a:	b918      	cbnz	r0, 23f97a4 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
 23f979c:	e9c4 0000 	strd	r0, r0, [r4]
 23f97a0:	60a0      	str	r0, [r4, #8]
}
 23f97a2:	e7ed      	b.n	23f9780 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
 23f97a4:	4914      	ldr	r1, [pc, #80]	; (23f97f8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
 23f97a6:	1c68      	adds	r0, r5, #1
 23f97a8:	f003 fbe0 	bl	23fcf6c <_ZnajRKSt9nothrow_t>
      { return _M_ptr; }
 23f97ac:	9f02      	ldr	r7, [sp, #8]
 23f97ae:	6078      	str	r0, [r7, #4]
    if (!d->json) {
 23f97b0:	b918      	cbnz	r0, 23f97ba <_ZN5spark9JSONValue9parseCopyEPKcj+0x6a>
      constexpr __shared_count() noexcept : _M_pi(0)
 23f97b2:	e9c4 0000 	strd	r0, r0, [r4]
        t_(nullptr) {
 23f97b6:	60a0      	str	r0, [r4, #8]
}
 23f97b8:	e7e2      	b.n	23f9780 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    memcpy(d->json, json, size); // TODO: Copy only token data
 23f97ba:	462a      	mov	r2, r5
 23f97bc:	4631      	mov	r1, r6
 23f97be:	f003 fcd3 	bl	23fd168 <memcpy>
    d->freeJson = true;
 23f97c2:	2301      	movs	r3, #1
    if (!stringize(d->tokens, tokenCount, d->json)) {
 23f97c4:	687a      	ldr	r2, [r7, #4]
 23f97c6:	9901      	ldr	r1, [sp, #4]
 23f97c8:	6838      	ldr	r0, [r7, #0]
    d->freeJson = true;
 23f97ca:	723b      	strb	r3, [r7, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
 23f97cc:	f7ff fe56 	bl	23f947c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
 23f97d0:	2800      	cmp	r0, #0
 23f97d2:	d0e3      	beq.n	23f979c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
      { return _M_ptr; }
 23f97d4:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
 23f97d6:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f97d8:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
 23f97da:	9b03      	ldr	r3, [sp, #12]
 23f97dc:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
 23f97de:	b113      	cbz	r3, 23f97e6 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
 23f97e0:	685a      	ldr	r2, [r3, #4]
 23f97e2:	3201      	adds	r2, #1
 23f97e4:	605a      	str	r2, [r3, #4]
 23f97e6:	4620      	mov	r0, r4
 23f97e8:	aa04      	add	r2, sp, #16
 23f97ea:	f7ff fce6 	bl	23f91ba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23f97ee:	a805      	add	r0, sp, #20
 23f97f0:	f7ff facd 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f97f4:	e7c4      	b.n	23f9780 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
 23f97f6:	bf00      	nop
 23f97f8:	023ffc10 	.word	0x023ffc10

023f97fc <_ZN8particle12_GLOBAL__N_112LedgerStream4peekEv>:
        return r;
    }

    int available() override {
        return -1; // Not supported
    }
 23f97fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f9800:	4770      	bx	lr

023f9802 <_ZN8particle12_GLOBAL__N_112LedgerStream5flushEv>:
    int peek() override {
        return -1; // Not supported
    }

    void flush() override {
    }
 23f9802:	4770      	bx	lr

023f9804 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj>:
    size_t readBytes(char* data, size_t size) override {
 23f9804:	b530      	push	{r4, r5, lr}
 23f9806:	4605      	mov	r5, r0
        if (!stream_ || error() < 0) {
 23f9808:	6940      	ldr	r0, [r0, #20]
    size_t readBytes(char* data, size_t size) override {
 23f980a:	b08b      	sub	sp, #44	; 0x2c
        if (!stream_ || error() < 0) {
 23f980c:	b1f8      	cbz	r0, 23f984e <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x4a>
 23f980e:	686b      	ldr	r3, [r5, #4]
 23f9810:	2b00      	cmp	r3, #0
 23f9812:	db16      	blt.n	23f9842 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x3e>
        int r = ledger_read(stream_, data, size, nullptr);
 23f9814:	2300      	movs	r3, #0
 23f9816:	f7ff f947 	bl	23f8aa8 <ledger_read>
        if (r < 0) {
 23f981a:	1e04      	subs	r4, r0, #0
 23f981c:	da13      	bge.n	23f9846 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x42>
            if (r != Error::END_OF_STREAM || bytesRead_ > 0) {
 23f981e:	f114 0fc9 	cmn.w	r4, #201	; 0xc9
 23f9822:	d101      	bne.n	23f9828 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x24>
 23f9824:	69ab      	ldr	r3, [r5, #24]
 23f9826:	b15b      	cbz	r3, 23f9840 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x3c>
                LOG(ERROR, "ledger_read() failed: %d", r);
 23f9828:	2220      	movs	r2, #32
 23f982a:	2300      	movs	r3, #0
 23f982c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23f9830:	4a08      	ldr	r2, [pc, #32]	; (23f9854 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x50>)
 23f9832:	2032      	movs	r0, #50	; 0x32
 23f9834:	9200      	str	r2, [sp, #0]
 23f9836:	4908      	ldr	r1, [pc, #32]	; (23f9858 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x54>)
 23f9838:	9401      	str	r4, [sp, #4]
 23f983a:	aa02      	add	r2, sp, #8
 23f983c:	f7fe ffc8 	bl	23f87d0 <log_message>
    void setWriteError(int err = 1) { write_error = err; }
 23f9840:	606c      	str	r4, [r5, #4]
            return 0;
 23f9842:	2000      	movs	r0, #0
 23f9844:	e003      	b.n	23f984e <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj+0x4a>
        bytesRead_ += r;
 23f9846:	4620      	mov	r0, r4
 23f9848:	69ab      	ldr	r3, [r5, #24]
 23f984a:	4423      	add	r3, r4
 23f984c:	61ab      	str	r3, [r5, #24]
    }
 23f984e:	b00b      	add	sp, #44	; 0x2c
 23f9850:	bd30      	pop	{r4, r5, pc}
 23f9852:	bf00      	nop
 23f9854:	023ff8e8 	.word	0x023ff8e8
 23f9858:	023ff824 	.word	0x023ff824

023f985c <_ZN8particle12_GLOBAL__N_112LedgerStream4readEv>:
    int read() override {
 23f985c:	b507      	push	{r0, r1, r2, lr}
        size_t n = readBytes((char*)&b, 1);
 23f985e:	2201      	movs	r2, #1
 23f9860:	f10d 0107 	add.w	r1, sp, #7
 23f9864:	f7ff ffce 	bl	23f9804 <_ZN8particle12_GLOBAL__N_112LedgerStream9readBytesEPcj>
        if (n != 1) {
 23f9868:	2801      	cmp	r0, #1
            return -1;
 23f986a:	bf14      	ite	ne
 23f986c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
        return b;
 23f9870:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    }
 23f9874:	b003      	add	sp, #12
 23f9876:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f987c <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj>:
    size_t write(const uint8_t* data, size_t size) override {
 23f987c:	b570      	push	{r4, r5, r6, lr}
 23f987e:	4605      	mov	r5, r0
        if (!stream_ || error() < 0) {
 23f9880:	6940      	ldr	r0, [r0, #20]
    size_t write(const uint8_t* data, size_t size) override {
 23f9882:	b08a      	sub	sp, #40	; 0x28
        if (!stream_ || error() < 0) {
 23f9884:	b1d8      	cbz	r0, 23f98be <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj+0x42>
 23f9886:	686b      	ldr	r3, [r5, #4]
 23f9888:	2b00      	cmp	r3, #0
 23f988a:	db12      	blt.n	23f98b2 <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj+0x36>
        int r = ledger_write(stream_, (const char*)data, size, nullptr);
 23f988c:	2300      	movs	r3, #0
 23f988e:	f7ff f919 	bl	23f8ac4 <ledger_write>
        if (r < 0) {
 23f9892:	1e04      	subs	r4, r0, #0
 23f9894:	da0f      	bge.n	23f98b6 <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj+0x3a>
            LOG(ERROR, "ledger_write() failed: %d", r);
 23f9896:	2320      	movs	r3, #32
 23f9898:	2600      	movs	r6, #0
 23f989a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 23f989e:	4b09      	ldr	r3, [pc, #36]	; (23f98c4 <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj+0x48>)
 23f98a0:	2032      	movs	r0, #50	; 0x32
 23f98a2:	9300      	str	r3, [sp, #0]
 23f98a4:	4908      	ldr	r1, [pc, #32]	; (23f98c8 <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj+0x4c>)
 23f98a6:	4633      	mov	r3, r6
 23f98a8:	9401      	str	r4, [sp, #4]
 23f98aa:	aa02      	add	r2, sp, #8
 23f98ac:	f7fe ff90 	bl	23f87d0 <log_message>
 23f98b0:	606c      	str	r4, [r5, #4]
            return 0;
 23f98b2:	2000      	movs	r0, #0
 23f98b4:	e003      	b.n	23f98be <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj+0x42>
        bytesWritten_ += r;
 23f98b6:	4620      	mov	r0, r4
 23f98b8:	69eb      	ldr	r3, [r5, #28]
 23f98ba:	4423      	add	r3, r4
 23f98bc:	61eb      	str	r3, [r5, #28]
    }
 23f98be:	b00a      	add	sp, #40	; 0x28
 23f98c0:	bd70      	pop	{r4, r5, r6, pc}
 23f98c2:	bf00      	nop
 23f98c4:	023ff901 	.word	0x023ff901
 23f98c8:	023ff824 	.word	0x023ff824

023f98cc <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEh>:
    size_t write(uint8_t b) override {
 23f98cc:	b507      	push	{r0, r1, r2, lr}
        return write(&b, 1);
 23f98ce:	2201      	movs	r2, #1
    size_t write(uint8_t b) override {
 23f98d0:	f88d 1007 	strb.w	r1, [sp, #7]
        return write(&b, 1);
 23f98d4:	f10d 0107 	add.w	r1, sp, #7
 23f98d8:	f7ff ffd0 	bl	23f987c <_ZN8particle12_GLOBAL__N_112LedgerStream5writeEPKhj>
    }
 23f98dc:	b003      	add	sp, #12
 23f98de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f98e4 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi>:
            return r;
        }
        return 0;
    }

    int close(int flags = 0) {
 23f98e4:	b530      	push	{r4, r5, lr}
 23f98e6:	4605      	mov	r5, r0
        if (!stream_) {
 23f98e8:	6940      	ldr	r0, [r0, #20]
    int close(int flags = 0) {
 23f98ea:	b08b      	sub	sp, #44	; 0x2c
        if (!stream_) {
 23f98ec:	b1c0      	cbz	r0, 23f9920 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi+0x3c>
            return 0;
        }
        int r = ledger_close(stream_, flags, nullptr);
 23f98ee:	2200      	movs	r2, #0
 23f98f0:	f7ff f8cc 	bl	23f8a8c <ledger_close>
        if (r < 0) {
 23f98f4:	1e04      	subs	r4, r0, #0
 23f98f6:	da0b      	bge.n	23f9910 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi+0x2c>
            LOG(ERROR, "ledger_close() failed: %d", r);
 23f98f8:	2220      	movs	r2, #32
 23f98fa:	2300      	movs	r3, #0
 23f98fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23f9900:	4a08      	ldr	r2, [pc, #32]	; (23f9924 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi+0x40>)
 23f9902:	2032      	movs	r0, #50	; 0x32
 23f9904:	9200      	str	r2, [sp, #0]
 23f9906:	4908      	ldr	r1, [pc, #32]	; (23f9928 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi+0x44>)
 23f9908:	9401      	str	r4, [sp, #4]
 23f990a:	aa02      	add	r2, sp, #8
 23f990c:	f7fe ff60 	bl	23f87d0 <log_message>
 23f9910:	2300      	movs	r3, #0
        }
        clearWriteError();
        stream_ = nullptr;
        bytesRead_ = 0;
 23f9912:	e9c5 3305 	strd	r3, r3, [r5, #20]
 23f9916:	606b      	str	r3, [r5, #4]
        bytesWritten_ = 0;
 23f9918:	61eb      	str	r3, [r5, #28]
        return r;
    }
 23f991a:	4620      	mov	r0, r4
 23f991c:	b00b      	add	sp, #44	; 0x2c
 23f991e:	bd30      	pop	{r4, r5, pc}
            return 0;
 23f9920:	4604      	mov	r4, r0
 23f9922:	e7fa      	b.n	23f991a <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi+0x36>
 23f9924:	023ff91b 	.word	0x023ff91b
 23f9928:	023ff824 	.word	0x023ff824

023f992c <_ZN8particle12_GLOBAL__N_112LedgerStreamD1Ev>:
    ~LedgerStream() {
 23f992c:	b510      	push	{r4, lr}
 23f992e:	4604      	mov	r4, r0
 23f9930:	4b03      	ldr	r3, [pc, #12]	; (23f9940 <_ZN8particle12_GLOBAL__N_112LedgerStreamD1Ev+0x14>)
        close(LEDGER_STREAM_CLOSE_DISCARD);
 23f9932:	2101      	movs	r1, #1
    ~LedgerStream() {
 23f9934:	6003      	str	r3, [r0, #0]
        close(LEDGER_STREAM_CLOSE_DISCARD);
 23f9936:	f7ff ffd5 	bl	23f98e4 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi>
    }
 23f993a:	4620      	mov	r0, r4
 23f993c:	bd10      	pop	{r4, pc}
 23f993e:	bf00      	nop
 23f9940:	023ff9b8 	.word	0x023ff9b8

023f9944 <_ZN8particle12_GLOBAL__N_112LedgerStreamD0Ev>:
    ~LedgerStream() {
 23f9944:	b510      	push	{r4, lr}
 23f9946:	4604      	mov	r4, r0
    }
 23f9948:	f7ff fff0 	bl	23f992c <_ZN8particle12_GLOBAL__N_112LedgerStreamD1Ev>
 23f994c:	4620      	mov	r0, r4
 23f994e:	2120      	movs	r1, #32
 23f9950:	f7fc fb1f 	bl	23f5f92 <_ZdlPvj>
 23f9954:	4620      	mov	r0, r4
 23f9956:	bd10      	pop	{r4, pc}

023f9958 <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi>:
    int open(int mode) {
 23f9958:	b510      	push	{r4, lr}
 23f995a:	4604      	mov	r4, r0
 23f995c:	b08c      	sub	sp, #48	; 0x30
 23f995e:	9103      	str	r1, [sp, #12]
        close(LEDGER_STREAM_CLOSE_DISCARD);
 23f9960:	2101      	movs	r1, #1
 23f9962:	f7ff ffbf 	bl	23f98e4 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi>
        int r = ledger_open(&stream_, ledger_, mode, nullptr);
 23f9966:	2300      	movs	r3, #0
 23f9968:	6921      	ldr	r1, [r4, #16]
 23f996a:	f104 0014 	add.w	r0, r4, #20
 23f996e:	9a03      	ldr	r2, [sp, #12]
 23f9970:	f7ff f87e 	bl	23f8a70 <ledger_open>
        if (r < 0) {
 23f9974:	1e04      	subs	r4, r0, #0
 23f9976:	f04f 0300 	mov.w	r3, #0
 23f997a:	da0d      	bge.n	23f9998 <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi+0x40>
            LOG(ERROR, "ledger_open() failed: %d", r);
 23f997c:	2220      	movs	r2, #32
 23f997e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23f9982:	4a06      	ldr	r2, [pc, #24]	; (23f999c <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi+0x44>)
 23f9984:	2032      	movs	r0, #50	; 0x32
 23f9986:	9200      	str	r2, [sp, #0]
 23f9988:	4905      	ldr	r1, [pc, #20]	; (23f99a0 <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi+0x48>)
 23f998a:	9401      	str	r4, [sp, #4]
 23f998c:	aa04      	add	r2, sp, #16
 23f998e:	f7fe ff1f 	bl	23f87d0 <log_message>
    }
 23f9992:	4620      	mov	r0, r4
 23f9994:	b00c      	add	sp, #48	; 0x30
 23f9996:	bd10      	pop	{r4, pc}
        return 0;
 23f9998:	461c      	mov	r4, r3
 23f999a:	e7fa      	b.n	23f9992 <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi+0x3a>
 23f999c:	023ff935 	.word	0x023ff935
 23f99a0:	023ff824 	.word	0x023ff824

023f99a4 <_ZN8particle12_GLOBAL__N_118syncCallbackSystemEP15ledger_instancePv>:
        appData->onSync(Ledger(ledger));
    }
}

// Callback wrapper executed in the system thread
void syncCallbackSystem(ledger_instance* ledger, void* appData) {
 23f99a4:	b510      	push	{r4, lr}
 23f99a6:	4604      	mov	r4, r0
    // Dispatch the callback to the application thread
    ledger_add_ref(ledger, nullptr);
 23f99a8:	2100      	movs	r1, #0
 23f99aa:	f7fe ffff 	bl	23f89ac <ledger_add_ref>
    int r = application_thread_invoke(syncCallbackApp, ledger, nullptr);
 23f99ae:	2200      	movs	r2, #0
 23f99b0:	4621      	mov	r1, r4
 23f99b2:	4805      	ldr	r0, [pc, #20]	; (23f99c8 <_ZN8particle12_GLOBAL__N_118syncCallbackSystemEP15ledger_instancePv+0x24>)
 23f99b4:	f7fe ff7c 	bl	23f88b0 <application_thread_invoke>
    if (r != 0) { // FIXME: application_thread_invoke() doesn't really handle errors as of now
 23f99b8:	b128      	cbz	r0, 23f99c6 <_ZN8particle12_GLOBAL__N_118syncCallbackSystemEP15ledger_instancePv+0x22>
        ledger_release(ledger, nullptr);
 23f99ba:	4620      	mov	r0, r4
    }
}
 23f99bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ledger_release(ledger, nullptr);
 23f99c0:	2100      	movs	r1, #0
 23f99c2:	f7ff b801 	b.w	23f89c8 <ledger_release>
}
 23f99c6:	bd10      	pop	{r4, pc}
 23f99c8:	023f9ab1 	.word	0x023f9ab1

023f99cc <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance>:
LedgerAppData* getLedgerAppData(ledger_instance* ledger) {
 23f99cc:	b538      	push	{r3, r4, r5, lr}
    auto appData = static_cast<LedgerAppData*>(ledger_get_app_data(ledger, nullptr));
 23f99ce:	2100      	movs	r1, #0
LedgerAppData* getLedgerAppData(ledger_instance* ledger) {
 23f99d0:	4605      	mov	r5, r0
    auto appData = static_cast<LedgerAppData*>(ledger_get_app_data(ledger, nullptr));
 23f99d2:	f7ff f83f 	bl	23f8a54 <ledger_get_app_data>
    if (!appData) {
 23f99d6:	4604      	mov	r4, r0
 23f99d8:	b9d0      	cbnz	r0, 23f9a10 <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance+0x44>
        ledger_lock(ledger, nullptr);
 23f99da:	4601      	mov	r1, r0
 23f99dc:	4628      	mov	r0, r5
 23f99de:	f7ff f801 	bl	23f89e4 <ledger_lock>
        appData = static_cast<LedgerAppData*>(ledger_get_app_data(ledger, nullptr));
 23f99e2:	4621      	mov	r1, r4
 23f99e4:	4628      	mov	r0, r5
 23f99e6:	f7ff f835 	bl	23f8a54 <ledger_get_app_data>
        if (!appData) {
 23f99ea:	4604      	mov	r4, r0
 23f99ec:	b960      	cbnz	r0, 23f9a08 <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance+0x3c>
            appData = new(std::nothrow) LedgerAppData();
 23f99ee:	2010      	movs	r0, #16
 23f99f0:	4908      	ldr	r1, [pc, #32]	; (23f9a14 <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance+0x48>)
 23f99f2:	f003 fab9 	bl	23fcf68 <_ZnwjRKSt9nothrow_t>
 23f99f6:	4604      	mov	r4, r0
 23f99f8:	b130      	cbz	r0, 23f9a08 <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance+0x3c>
    _Function_base() : _M_manager(nullptr) { }
 23f99fa:	2300      	movs	r3, #0
                ledger_set_app_data(ledger, appData, destroyLedgerAppData, nullptr);
 23f99fc:	4601      	mov	r1, r0
 23f99fe:	6083      	str	r3, [r0, #8]
 23f9a00:	4a05      	ldr	r2, [pc, #20]	; (23f9a18 <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance+0x4c>)
 23f9a02:	4628      	mov	r0, r5
 23f9a04:	f7ff f818 	bl	23f8a38 <ledger_set_app_data>
        SCOPE_GUARD({
 23f9a08:	2100      	movs	r1, #0
 23f9a0a:	4628      	mov	r0, r5
 23f9a0c:	f7fe fff8 	bl	23f8a00 <ledger_unlock>
}
 23f9a10:	4620      	mov	r0, r4
 23f9a12:	bd38      	pop	{r3, r4, r5, pc}
 23f9a14:	023ffc10 	.word	0x023ffc10
 23f9a18:	023f9a99 	.word	0x023f9a99

023f9a1c <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE>:
        return r;
    }
    return 0;
}

int setLedgerData(ledger_instance* ledger, const LedgerData& data) {
 23f9a1c:	b570      	push	{r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23f9a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f9a22:	2500      	movs	r5, #0
 23f9a24:	b092      	sub	sp, #72	; 0x48
 23f9a26:	e9cd 5303 	strd	r5, r3, [sp, #12]
            bytesWritten_(0) {
 23f9a2a:	4b18      	ldr	r3, [pc, #96]	; (23f9a8c <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE+0x70>)
 23f9a2c:	e9cd 0506 	strd	r0, r5, [sp, #24]
int setLedgerData(ledger_instance* ledger, const LedgerData& data) {
 23f9a30:	460e      	mov	r6, r1
    LedgerStream stream(ledger);
    CHECK(stream.open(LEDGER_STREAM_MODE_WRITE));
 23f9a32:	a802      	add	r0, sp, #8
 23f9a34:	2102      	movs	r1, #2
            bytesWritten_(0) {
 23f9a36:	e9cd 5508 	strd	r5, r5, [sp, #32]
 23f9a3a:	9302      	str	r3, [sp, #8]
    CHECK(stream.open(LEDGER_STREAM_MODE_WRITE));
 23f9a3c:	f7ff ff8c 	bl	23f9958 <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi>
 23f9a40:	1e04      	subs	r4, r0, #0
 23f9a42:	db15      	blt.n	23f9a70 <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE+0x54>
    int r = encodeToCBOR(data.variant(), stream);
 23f9a44:	4630      	mov	r0, r6
 23f9a46:	a902      	add	r1, sp, #8
 23f9a48:	f002 f8e3 	bl	23fbc12 <_ZN8particle12encodeToCBORERKNS_7VariantER5Print>
    if (r < 0) {
 23f9a4c:	1e04      	subs	r4, r0, #0
 23f9a4e:	da15      	bge.n	23f9a7c <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE+0x60>
    int getWriteError() const { return write_error; }
 23f9a50:	9b03      	ldr	r3, [sp, #12]
        // encodeToCBOR() can't forward stream errors
        int err = stream.error();
        if (err < 0) {
            r = err;
        }
        LOG(ERROR, "Failed to encode ledger data: %d", r);
 23f9a52:	2032      	movs	r0, #50	; 0x32
        if (err < 0) {
 23f9a54:	42ab      	cmp	r3, r5
 23f9a56:	bfb8      	it	lt
 23f9a58:	461c      	movlt	r4, r3
        LOG(ERROR, "Failed to encode ledger data: %d", r);
 23f9a5a:	2320      	movs	r3, #32
 23f9a5c:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
 23f9a60:	4b0b      	ldr	r3, [pc, #44]	; (23f9a90 <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE+0x74>)
 23f9a62:	490c      	ldr	r1, [pc, #48]	; (23f9a94 <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE+0x78>)
 23f9a64:	9300      	str	r3, [sp, #0]
 23f9a66:	9401      	str	r4, [sp, #4]
 23f9a68:	462b      	mov	r3, r5
 23f9a6a:	aa0a      	add	r2, sp, #40	; 0x28
 23f9a6c:	f7fe feb0 	bl	23f87d0 <log_message>
    LedgerStream stream(ledger);
 23f9a70:	a802      	add	r0, sp, #8
 23f9a72:	f7ff ff5b 	bl	23f992c <_ZN8particle12_GLOBAL__N_112LedgerStreamD1Ev>
        return r;
    }
    CHECK(stream.close()); // Flush the data
    return 0;
}
 23f9a76:	4620      	mov	r0, r4
 23f9a78:	b012      	add	sp, #72	; 0x48
 23f9a7a:	bd70      	pop	{r4, r5, r6, pc}
    CHECK(stream.close()); // Flush the data
 23f9a7c:	4629      	mov	r1, r5
 23f9a7e:	a802      	add	r0, sp, #8
 23f9a80:	f7ff ff30 	bl	23f98e4 <_ZN8particle12_GLOBAL__N_112LedgerStream5closeEi>
 23f9a84:	ea00 74e0 	and.w	r4, r0, r0, asr #31
 23f9a88:	e7f2      	b.n	23f9a70 <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE+0x54>
 23f9a8a:	bf00      	nop
 23f9a8c:	023ff9b8 	.word	0x023ff9b8
 23f9a90:	023ff94e 	.word	0x023ff94e
 23f9a94:	023ff824 	.word	0x023ff824

023f9a98 <_ZN8particle12_GLOBAL__N_120destroyLedgerAppDataEPv>:
void destroyLedgerAppData(void* appData) {
 23f9a98:	b510      	push	{r4, lr}
    delete static_cast<LedgerAppData*>(appData);
 23f9a9a:	4604      	mov	r4, r0
 23f9a9c:	b138      	cbz	r0, 23f9aae <_ZN8particle12_GLOBAL__N_120destroyLedgerAppDataEPv+0x16>
    class function<_Res(_ArgTypes...)>
 23f9a9e:	f7fc fdbc 	bl	23f661a <_ZNSt14_Function_baseD1Ev>
 23f9aa2:	4620      	mov	r0, r4
}
 23f9aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete static_cast<LedgerAppData*>(appData);
 23f9aa8:	2110      	movs	r1, #16
 23f9aaa:	f7fc ba72 	b.w	23f5f92 <_ZdlPvj>
}
 23f9aae:	bd10      	pop	{r4, pc}

023f9ab0 <_ZN8particle12_GLOBAL__N_115syncCallbackAppEPv>:
void syncCallbackApp(void* data) {
 23f9ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f9ab2:	4605      	mov	r5, r0
    auto appData = getLedgerAppData(ledger);
 23f9ab4:	f7ff ff8a 	bl	23f99cc <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance>
    if (appData && appData->onSync) {
 23f9ab8:	4604      	mov	r4, r0
 23f9aba:	b190      	cbz	r0, 23f9ae2 <_ZN8particle12_GLOBAL__N_115syncCallbackAppEPv+0x32>
 23f9abc:	6883      	ldr	r3, [r0, #8]
 23f9abe:	b183      	cbz	r3, 23f9ae2 <_ZN8particle12_GLOBAL__N_115syncCallbackAppEPv+0x32>
            instance_(instance) {
 23f9ac0:	9501      	str	r5, [sp, #4]
        if (instance_ && addRef) {
 23f9ac2:	b13d      	cbz	r5, 23f9ad4 <_ZN8particle12_GLOBAL__N_115syncCallbackAppEPv+0x24>
            ledger_add_ref(instance_, nullptr);
 23f9ac4:	2100      	movs	r1, #0
 23f9ac6:	4628      	mov	r0, r5
 23f9ac8:	f7fe ff70 	bl	23f89ac <ledger_add_ref>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23f9acc:	68a3      	ldr	r3, [r4, #8]
 23f9ace:	b90b      	cbnz	r3, 23f9ad4 <_ZN8particle12_GLOBAL__N_115syncCallbackAppEPv+0x24>
	__throw_bad_function_call();
 23f9ad0:	f003 fa51 	bl	23fcf76 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f9ad4:	4620      	mov	r0, r4
 23f9ad6:	68e3      	ldr	r3, [r4, #12]
 23f9ad8:	a901      	add	r1, sp, #4
 23f9ada:	4798      	blx	r3
        appData->onSync(Ledger(ledger));
 23f9adc:	a801      	add	r0, sp, #4
 23f9ade:	f7fc fe14 	bl	23f670a <_ZN8particle6LedgerD1Ev>
    SCOPE_GUARD({
 23f9ae2:	2100      	movs	r1, #0
 23f9ae4:	4628      	mov	r0, r5
}
 23f9ae6:	b003      	add	sp, #12
 23f9ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SCOPE_GUARD({
 23f9aec:	f7fe bf6c 	b.w	23f89c8 <ledger_release>

023f9af0 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE>:

int getLedgerData(ledger_instance* ledger, LedgerData& data) {
 23f9af0:	b570      	push	{r4, r5, r6, lr}
 23f9af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f9af6:	2500      	movs	r5, #0
 23f9af8:	b09e      	sub	sp, #120	; 0x78
 23f9afa:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
            bytesWritten_(0) {
 23f9afe:	4b32      	ldr	r3, [pc, #200]	; (23f9bc8 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xd8>)
 23f9b00:	e9cd 0512 	strd	r0, r5, [sp, #72]	; 0x48
int getLedgerData(ledger_instance* ledger, LedgerData& data) {
 23f9b04:	460e      	mov	r6, r1
    LedgerStream stream(ledger);
    CHECK(stream.open(LEDGER_STREAM_MODE_READ));
 23f9b06:	a80e      	add	r0, sp, #56	; 0x38
 23f9b08:	2101      	movs	r1, #1
            bytesWritten_(0) {
 23f9b0a:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
 23f9b0e:	930e      	str	r3, [sp, #56]	; 0x38
    CHECK(stream.open(LEDGER_STREAM_MODE_READ));
 23f9b10:	f7ff ff22 	bl	23f9958 <_ZN8particle12_GLOBAL__N_112LedgerStream4openEi>
 23f9b14:	1e04      	subs	r4, r0, #0
 23f9b16:	db2e      	blt.n	23f9b76 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x86>
    Variant v;
 23f9b18:	2218      	movs	r2, #24
 23f9b1a:	4629      	mov	r1, r5
 23f9b1c:	a802      	add	r0, sp, #8
 23f9b1e:	f003 fb4a 	bl	23fd1b6 <memset>
    int r = decodeFromCBOR(v, stream);
 23f9b22:	a90e      	add	r1, sp, #56	; 0x38
 23f9b24:	a802      	add	r0, sp, #8
 23f9b26:	f003 f871 	bl	23fcc0c <_ZN8particle14decodeFromCBORERNS_7VariantER6Stream>
    if (r < 0) {
 23f9b2a:	1e04      	subs	r4, r0, #0
 23f9b2c:	da29      	bge.n	23f9b82 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x92>
 23f9b2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        // decodeFromCBOR() can't forward stream errors
        int err = stream.error();
        if (err < 0) {
 23f9b30:	42ab      	cmp	r3, r5
 23f9b32:	bfb8      	it	lt
 23f9b34:	461c      	movlt	r4, r3
            r = err;
        }
        if (r == Error::END_OF_STREAM && !stream.bytesRead()) {
 23f9b36:	f114 0fc9 	cmn.w	r4, #201	; 0xc9
 23f9b3a:	d10d      	bne.n	23f9b58 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x68>
 23f9b3c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 23f9b3e:	b95d      	cbnz	r5, 23f9b58 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x68>
            // Treat empty data as an empty map
            data = LedgerData();
 23f9b40:	a816      	add	r0, sp, #88	; 0x58
 23f9b42:	f7fd f918 	bl	23f6d76 <_ZN8particle10LedgerDataC1Ev>
    { __lhs.swap(__rhs); }
 23f9b46:	4630      	mov	r0, r6
 23f9b48:	a916      	add	r1, sp, #88	; 0x58
 23f9b4a:	f7fd fd09 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23f9b4e:	a816      	add	r0, sp, #88	; 0x58
 23f9b50:	f7fd f8e2 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    if (!v.isMap()) {
        LOG(ERROR, "Unexpected type of ledger data");
        return Error::BAD_DATA;
    }
    data = std::move(v);
    return 0;
 23f9b54:	462c      	mov	r4, r5
 23f9b56:	e00b      	b.n	23f9b70 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x80>
        LOG(ERROR, "Failed to decode ledger data: %d", r);
 23f9b58:	2220      	movs	r2, #32
 23f9b5a:	2300      	movs	r3, #0
 23f9b5c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 23f9b60:	4a1a      	ldr	r2, [pc, #104]	; (23f9bcc <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xdc>)
 23f9b62:	2032      	movs	r0, #50	; 0x32
 23f9b64:	9200      	str	r2, [sp, #0]
 23f9b66:	491a      	ldr	r1, [pc, #104]	; (23f9bd0 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xe0>)
 23f9b68:	9401      	str	r4, [sp, #4]
 23f9b6a:	aa16      	add	r2, sp, #88	; 0x58
 23f9b6c:	f7fe fe30 	bl	23f87d0 <log_message>
 23f9b70:	a802      	add	r0, sp, #8
 23f9b72:	f7fd f8d1 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    LedgerStream stream(ledger);
 23f9b76:	a80e      	add	r0, sp, #56	; 0x38
 23f9b78:	f7ff fed8 	bl	23f992c <_ZN8particle12_GLOBAL__N_112LedgerStreamD1Ev>
}
 23f9b7c:	4620      	mov	r0, r4
 23f9b7e:	b01e      	add	sp, #120	; 0x78
 23f9b80:	bd70      	pop	{r4, r5, r6, pc}
    if (!v.isMap()) {
 23f9b82:	f89d 3018 	ldrb.w	r3, [sp, #24]
 23f9b86:	2b0a      	cmp	r3, #10
 23f9b88:	d00c      	beq.n	23f9ba4 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xb4>
        LOG(ERROR, "Unexpected type of ledger data");
 23f9b8a:	2320      	movs	r3, #32
 23f9b8c:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
 23f9b90:	4b10      	ldr	r3, [pc, #64]	; (23f9bd4 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xe4>)
 23f9b92:	2032      	movs	r0, #50	; 0x32
 23f9b94:	9300      	str	r3, [sp, #0]
 23f9b96:	490e      	ldr	r1, [pc, #56]	; (23f9bd0 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xe0>)
 23f9b98:	462b      	mov	r3, r5
 23f9b9a:	aa16      	add	r2, sp, #88	; 0x58
 23f9b9c:	f7fe fe18 	bl	23f87d0 <log_message>
        return Error::BAD_DATA;
 23f9ba0:	4c0d      	ldr	r4, [pc, #52]	; (23f9bd8 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0xe8>)
 23f9ba2:	e7e5      	b.n	23f9b70 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x80>
    data = std::move(v);
 23f9ba4:	a902      	add	r1, sp, #8
 23f9ba6:	a808      	add	r0, sp, #32
 23f9ba8:	f7fd fd78 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23f9bac:	a908      	add	r1, sp, #32
 23f9bae:	a816      	add	r0, sp, #88	; 0x58
 23f9bb0:	f7fd fd7c 	bl	23f76ac <_ZN8particle10LedgerDataC1ENS_7VariantE>
    { __lhs.swap(__rhs); }
 23f9bb4:	4630      	mov	r0, r6
 23f9bb6:	a916      	add	r1, sp, #88	; 0x58
 23f9bb8:	f7fd fcd2 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23f9bbc:	a816      	add	r0, sp, #88	; 0x58
 23f9bbe:	f7fd f8ab 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f9bc2:	a808      	add	r0, sp, #32
 23f9bc4:	e7c4      	b.n	23f9b50 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE+0x60>
 23f9bc6:	bf00      	nop
 23f9bc8:	023ff9b8 	.word	0x023ff9b8
 23f9bcc:	023ff96f 	.word	0x023ff96f
 23f9bd0:	023ff824 	.word	0x023ff824
 23f9bd4:	023ff990 	.word	0x023ff990
 23f9bd8:	fffffee8 	.word	0xfffffee8

023f9bdc <_ZNK8particle6Ledger3getEv>:
        CHECK(setLedgerData(instance_, d));
    }
    return 0;
}

LedgerData Ledger::get() const {
 23f9bdc:	b530      	push	{r4, r5, lr}
    if (!isValid()) {
 23f9bde:	680b      	ldr	r3, [r1, #0]
LedgerData Ledger::get() const {
 23f9be0:	4604      	mov	r4, r0
 23f9be2:	460d      	mov	r5, r1
 23f9be4:	b087      	sub	sp, #28
    if (!isValid()) {
 23f9be6:	b923      	cbnz	r3, 23f9bf2 <_ZNK8particle6Ledger3getEv+0x16>
        return LedgerData();
 23f9be8:	f7fd f8c5 	bl	23f6d76 <_ZN8particle10LedgerDataC1Ev>
    LedgerData data;
    if (getLedgerData(instance_, data) < 0) {
        return LedgerData();
    }
    return data;
}
 23f9bec:	4620      	mov	r0, r4
 23f9bee:	b007      	add	sp, #28
 23f9bf0:	bd30      	pop	{r4, r5, pc}
    LedgerData data;
 23f9bf2:	4668      	mov	r0, sp
 23f9bf4:	f7fd f8bf 	bl	23f6d76 <_ZN8particle10LedgerDataC1Ev>
    if (getLedgerData(instance_, data) < 0) {
 23f9bf8:	4669      	mov	r1, sp
 23f9bfa:	6828      	ldr	r0, [r5, #0]
 23f9bfc:	f7ff ff78 	bl	23f9af0 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE>
 23f9c00:	2800      	cmp	r0, #0
        return LedgerData();
 23f9c02:	4620      	mov	r0, r4
    if (getLedgerData(instance_, data) < 0) {
 23f9c04:	da05      	bge.n	23f9c12 <_ZNK8particle6Ledger3getEv+0x36>
        return LedgerData();
 23f9c06:	f7fd f8b6 	bl	23f6d76 <_ZN8particle10LedgerDataC1Ev>
 23f9c0a:	4668      	mov	r0, sp
 23f9c0c:	f7fd f884 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
/**
 * Ledger data.
 *
 * This class provides a subset of methods of the `Variant` class that are relevant to map operations.
 */
class LedgerData {
 23f9c10:	e7ec      	b.n	23f9bec <_ZNK8particle6Ledger3getEv+0x10>
     * Move constructor.
     *
     * @param data Ledger data to move from.
     */
    LedgerData(LedgerData&& data) :
            LedgerData() {
 23f9c12:	f7fd f8b0 	bl	23f6d76 <_ZN8particle10LedgerDataC1Ev>
    { __lhs.swap(__rhs); }
 23f9c16:	4669      	mov	r1, sp
 23f9c18:	4620      	mov	r0, r4
 23f9c1a:	f7fd fca1 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
        swap(*this, data);
    }
 23f9c1e:	e7f4      	b.n	23f9c0a <_ZNK8particle6Ledger3getEv+0x2e>

023f9c20 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE>:
int Ledger::set(const LedgerData& data, SetMode mode) {
 23f9c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f9c22:	4605      	mov	r5, r0
        return instance_;
 23f9c24:	6800      	ldr	r0, [r0, #0]
 23f9c26:	460e      	mov	r6, r1
 23f9c28:	b093      	sub	sp, #76	; 0x4c
    if (!isValid()) {
 23f9c2a:	2800      	cmp	r0, #0
 23f9c2c:	d048      	beq.n	23f9cc0 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0xa0>
    if (mode == Ledger::REPLACE) {
 23f9c2e:	b932      	cbnz	r2, 23f9c3e <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x1e>
        CHECK(setLedgerData(instance_, data));
 23f9c30:	f7ff fef4 	bl	23f9a1c <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE>
 23f9c34:	ea00 74e0 	and.w	r4, r0, r0, asr #31
}
 23f9c38:	4620      	mov	r0, r4
 23f9c3a:	b013      	add	sp, #76	; 0x4c
 23f9c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LedgerData d;
 23f9c3e:	4668      	mov	r0, sp
 23f9c40:	f7fd f899 	bl	23f6d76 <_ZN8particle10LedgerDataC1Ev>
        CHECK(getLedgerData(instance_, d));
 23f9c44:	4669      	mov	r1, sp
 23f9c46:	6828      	ldr	r0, [r5, #0]
 23f9c48:	f7ff ff52 	bl	23f9af0 <_ZN8particle12_GLOBAL__N_113getLedgerDataEP15ledger_instanceRNS_10LedgerDataE>
 23f9c4c:	1e04      	subs	r4, r0, #0
 23f9c4e:	db28      	blt.n	23f9ca2 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x82>
	  return make_signed_t<__index_type>(this->_M_index);
 23f9c50:	7c30      	ldrb	r0, [r6, #16]
      if (__v.index() != _Np)
 23f9c52:	280a      	cmp	r0, #10
 23f9c54:	d005      	beq.n	23f9c62 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x42>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23f9c56:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 23f9c5a:	4258      	negs	r0, r3
 23f9c5c:	4158      	adcs	r0, r3
 23f9c5e:	f7fc fd40 	bl	23f66e2 <_ZSt26__throw_bad_variant_accessb>
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23f9c62:	2328      	movs	r3, #40	; 0x28
 23f9c64:	e9d6 4700 	ldrd	r4, r7, [r6]
 23f9c68:	fb03 4707 	mla	r7, r3, r7, r4
        for (auto& e: data.variantMap()) {
 23f9c6c:	42a7      	cmp	r7, r4
 23f9c6e:	d01c      	beq.n	23f9caa <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x8a>
      _Move_ctor_base(const _Move_ctor_base&) = default;
 23f9c70:	f104 0110 	add.w	r1, r4, #16
 23f9c74:	a806      	add	r0, sp, #24
 23f9c76:	f7fc fe87 	bl	23f6988 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
    bool set(const char* name, Variant val) {
        return v_.set(name, std::move(val));
    }

    bool set(const String& name, Variant val) {
        return v_.set(name, std::move(val));
 23f9c7a:	a906      	add	r1, sp, #24
 23f9c7c:	a80c      	add	r0, sp, #48	; 0x30
 23f9c7e:	f7fd fd0d 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23f9c82:	4621      	mov	r1, r4
 23f9c84:	aa0c      	add	r2, sp, #48	; 0x30
 23f9c86:	4668      	mov	r0, sp
 23f9c88:	f002 fa14 	bl	23fc0b4 <_ZN8particle7Variant3setERK6StringS0_>
 23f9c8c:	4606      	mov	r6, r0
      { _M_reset(); }
 23f9c8e:	a80c      	add	r0, sp, #48	; 0x30
 23f9c90:	f7fd f842 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f9c94:	a806      	add	r0, sp, #24
 23f9c96:	f7fd f83f 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            if (!d.set(e.first, e.second)) {
 23f9c9a:	3428      	adds	r4, #40	; 0x28
 23f9c9c:	2e00      	cmp	r6, #0
 23f9c9e:	d1e5      	bne.n	23f9c6c <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x4c>
                return Error::NO_MEMORY;
 23f9ca0:	4c09      	ldr	r4, [pc, #36]	; (23f9cc8 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0xa8>)
 23f9ca2:	4668      	mov	r0, sp
 23f9ca4:	f7fd f838 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23f9ca8:	e7c6      	b.n	23f9c38 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x18>
        CHECK(setLedgerData(instance_, d));
 23f9caa:	4669      	mov	r1, sp
 23f9cac:	6828      	ldr	r0, [r5, #0]
 23f9cae:	f7ff feb5 	bl	23f9a1c <_ZN8particle12_GLOBAL__N_113setLedgerDataEP15ledger_instanceRKNS_10LedgerDataE>
 23f9cb2:	1e04      	subs	r4, r0, #0
 23f9cb4:	dbf5      	blt.n	23f9ca2 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x82>
 23f9cb6:	4668      	mov	r0, sp
 23f9cb8:	f7fd f82e 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    return 0;
 23f9cbc:	2400      	movs	r4, #0
 23f9cbe:	e7bb      	b.n	23f9c38 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x18>
        return Error::INVALID_STATE;
 23f9cc0:	f06f 04d1 	mvn.w	r4, #209	; 0xd1
 23f9cc4:	e7b8      	b.n	23f9c38 <_ZN8particle6Ledger3setERKNS_10LedgerDataENS0_7SetModeE+0x18>
 23f9cc6:	bf00      	nop
 23f9cc8:	fffffefc 	.word	0xfffffefc

023f9ccc <_ZNSt8functionIFvN8particle6LedgerEEE4swapERS3_>:
      void swap(function& __x) noexcept
 23f9ccc:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f9cce:	466c      	mov	r4, sp
 23f9cd0:	460b      	mov	r3, r1
 23f9cd2:	4602      	mov	r2, r0
 23f9cd4:	e9d0 0100 	ldrd	r0, r1, [r0]
 23f9cd8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f9cdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 23f9ce0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f9ce4:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f9ce8:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f9cec:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f9cee:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f9cf0:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f9cf2:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f9cf4:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f9cf6:	68d8      	ldr	r0, [r3, #12]
 23f9cf8:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f9cfa:	60d9      	str	r1, [r3, #12]
      }
 23f9cfc:	b002      	add	sp, #8
 23f9cfe:	bd10      	pop	{r4, pc}

023f9d00 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE>:
    return onSync([callback, arg](Ledger ledger) {
        callback(std::move(ledger), arg);
    });
}

int Ledger::onSync(OnSyncFunction callback) {
 23f9d00:	4603      	mov	r3, r0
 23f9d02:	b5f0      	push	{r4, r5, r6, r7, lr}
        return instance_;
 23f9d04:	681d      	ldr	r5, [r3, #0]
 23f9d06:	4608      	mov	r0, r1
 23f9d08:	b089      	sub	sp, #36	; 0x24
    if (!isValid()) {
 23f9d0a:	2d00      	cmp	r5, #0
 23f9d0c:	d046      	beq.n	23f9d9c <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x9c>
    _Function_base() : _M_manager(nullptr) { }
 23f9d0e:	2700      	movs	r7, #0
	__x.swap(*this);
 23f9d10:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
 23f9d12:	9702      	str	r7, [sp, #8]
	__x.swap(*this);
 23f9d14:	f7ff ffda 	bl	23f9ccc <_ZNSt8functionIFvN8particle6LedgerEEE4swapERS3_>
    ledger_lock(ledger, nullptr);
 23f9d18:	4639      	mov	r1, r7
 23f9d1a:	4628      	mov	r0, r5
 23f9d1c:	f7fe fe62 	bl	23f89e4 <ledger_lock>
    auto appData = getLedgerAppData(ledger);
 23f9d20:	4628      	mov	r0, r5
 23f9d22:	f7ff fe53 	bl	23f99cc <_ZN8particle12_GLOBAL__N_116getLedgerAppDataEP15ledger_instance>
    if (!appData) {
 23f9d26:	4606      	mov	r6, r0
 23f9d28:	2800      	cmp	r0, #0
 23f9d2a:	d033      	beq.n	23f9d94 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x94>
    bool _M_empty() const { return !_M_manager; }
 23f9d2c:	6884      	ldr	r4, [r0, #8]
	__x.swap(*this);
 23f9d2e:	a904      	add	r1, sp, #16
 23f9d30:	4668      	mov	r0, sp
    _Function_base() : _M_manager(nullptr) { }
 23f9d32:	9706      	str	r7, [sp, #24]
	__x.swap(*this);
 23f9d34:	f7ff ffca 	bl	23f9ccc <_ZNSt8functionIFvN8particle6LedgerEEE4swapERS3_>
	function(std::move(__x)).swap(*this);
 23f9d38:	4631      	mov	r1, r6
 23f9d3a:	a804      	add	r0, sp, #16
 23f9d3c:	f7ff ffc6 	bl	23f9ccc <_ZNSt8functionIFvN8particle6LedgerEEE4swapERS3_>
    class function<_Res(_ArgTypes...)>
 23f9d40:	a804      	add	r0, sp, #16
 23f9d42:	f7fc fc6a 	bl	23f661a <_ZNSt14_Function_baseD1Ev>
    if (appData->onSync) {
 23f9d46:	68b6      	ldr	r6, [r6, #8]
 23f9d48:	b1be      	cbz	r6, 23f9d7a <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x7a>
        if (!hadCallback) {
 23f9d4a:	bb2c      	cbnz	r4, 23f9d98 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x98>
            callbacks.version = LEDGER_API_VERSION;
 23f9d4c:	2301      	movs	r3, #1
 23f9d4e:	9304      	str	r3, [sp, #16]
            callbacks.sync = syncCallbackSystem;
 23f9d50:	4b14      	ldr	r3, [pc, #80]	; (23f9da4 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0xa4>)
            ledger_set_callbacks(ledger, &callbacks, nullptr);
 23f9d52:	4628      	mov	r0, r5
 23f9d54:	a904      	add	r1, sp, #16
 23f9d56:	4622      	mov	r2, r4
            callbacks.sync = syncCallbackSystem;
 23f9d58:	9305      	str	r3, [sp, #20]
            ledger_set_callbacks(ledger, &callbacks, nullptr);
 23f9d5a:	f7fe fe5f 	bl	23f8a1c <ledger_set_callbacks>
            ledger_add_ref(ledger, nullptr);
 23f9d5e:	4621      	mov	r1, r4
 23f9d60:	4628      	mov	r0, r5
 23f9d62:	f7fe fe23 	bl	23f89ac <ledger_add_ref>
    SCOPE_GUARD({
 23f9d66:	4628      	mov	r0, r5
 23f9d68:	2100      	movs	r1, #0
 23f9d6a:	f7fe fe49 	bl	23f8a00 <ledger_unlock>
 23f9d6e:	4668      	mov	r0, sp
 23f9d70:	f7fc fc53 	bl	23f661a <_ZNSt14_Function_baseD1Ev>
        return Error::INVALID_STATE;
    }
    return setSyncCallback(instance_, std::move(callback));
}
 23f9d74:	4620      	mov	r0, r4
 23f9d76:	b009      	add	sp, #36	; 0x24
 23f9d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (hadCallback) {
 23f9d7a:	2c00      	cmp	r4, #0
 23f9d7c:	d0f3      	beq.n	23f9d66 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x66>
        ledger_set_callbacks(ledger, nullptr, nullptr); // Clear the callback
 23f9d7e:	4632      	mov	r2, r6
 23f9d80:	4631      	mov	r1, r6
 23f9d82:	4628      	mov	r0, r5
 23f9d84:	f7fe fe4a 	bl	23f8a1c <ledger_set_callbacks>
        ledger_release(ledger, nullptr);
 23f9d88:	4631      	mov	r1, r6
 23f9d8a:	4628      	mov	r0, r5
 23f9d8c:	f7fe fe1c 	bl	23f89c8 <ledger_release>
    return 0;
 23f9d90:	4634      	mov	r4, r6
 23f9d92:	e7e8      	b.n	23f9d66 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x66>
        return Error::NO_MEMORY;
 23f9d94:	4c04      	ldr	r4, [pc, #16]	; (23f9da8 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0xa8>)
 23f9d96:	e7e6      	b.n	23f9d66 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x66>
    return 0;
 23f9d98:	463c      	mov	r4, r7
 23f9d9a:	e7e4      	b.n	23f9d66 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x66>
        return Error::INVALID_STATE;
 23f9d9c:	f06f 04d1 	mvn.w	r4, #209	; 0xd1
 23f9da0:	e7e8      	b.n	23f9d74 <_ZN8particle6Ledger6onSyncESt8functionIFvS0_EE+0x74>
 23f9da2:	bf00      	nop
 23f9da4:	023f99a5 	.word	0x023f99a5
 23f9da8:	fffffefc 	.word	0xfffffefc

023f9dac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f9dac:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f9dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f9db0:	4604      	mov	r4, r0
 23f9db2:	460d      	mov	r5, r1
 23f9db4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f9db6:	d914      	bls.n	23f9de2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23f9db8:	4290      	cmp	r0, r2
 23f9dba:	d213      	bcs.n	23f9de4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23f9dbc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23f9dc0:	1a75      	subs	r5, r6, r1
 23f9dc2:	f1a1 0710 	sub.w	r7, r1, #16
 23f9dc6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f9dc8:	42b7      	cmp	r7, r6
 23f9dca:	d018      	beq.n	23f9dfe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23f9dcc:	b11c      	cbz	r4, 23f9dd6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23f9dce:	4631      	mov	r1, r6
 23f9dd0:	4620      	mov	r0, r4
 23f9dd2:	f001 f97a 	bl	23fb0ca <_ZN6StringC1EOS_>
                end->~T();
 23f9dd6:	4630      	mov	r0, r6
 23f9dd8:	f001 f8ee 	bl	23fafb8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f9ddc:	3e10      	subs	r6, #16
 23f9dde:	3c10      	subs	r4, #16
 23f9de0:	e7f2      	b.n	23f9dc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f9de2:	d00c      	beq.n	23f9dfe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23f9de4:	42b5      	cmp	r5, r6
 23f9de6:	d00a      	beq.n	23f9dfe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23f9de8:	b11c      	cbz	r4, 23f9df2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23f9dea:	4629      	mov	r1, r5
 23f9dec:	4620      	mov	r0, r4
 23f9dee:	f001 f96c 	bl	23fb0ca <_ZN6StringC1EOS_>
                p->~T();
 23f9df2:	4628      	mov	r0, r5
 23f9df4:	f001 f8e0 	bl	23fafb8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f9df8:	3510      	adds	r5, #16
 23f9dfa:	3410      	adds	r4, #16
 23f9dfc:	e7f2      	b.n	23f9de4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23f9dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f9e00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23f9e00:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23f9e02:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23f9e04:	4605      	mov	r5, r0
        if (n > 0) {
 23f9e06:	dd11      	ble.n	23f9e2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23f9e08:	0130      	lsls	r0, r6, #4
 23f9e0a:	f7fe ff2d 	bl	23f8c68 <malloc>
            if (!d) {
 23f9e0e:	4604      	mov	r4, r0
 23f9e10:	b158      	cbz	r0, 23f9e2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23f9e12:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f9e16:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23f9e1a:	f7ff ffc7 	bl	23f9dac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f9e1e:	6828      	ldr	r0, [r5, #0]
 23f9e20:	f7fe ff30 	bl	23f8c84 <free>
        return true;
 23f9e24:	2001      	movs	r0, #1
        data_ = d;
 23f9e26:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23f9e28:	60ae      	str	r6, [r5, #8]
    }
 23f9e2a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23f9e2c:	2400      	movs	r4, #0
 23f9e2e:	e7f6      	b.n	23f9e1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023f9e30 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
 23f9e30:	b510      	push	{r4, lr}
 23f9e32:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
 23f9e34:	6880      	ldr	r0, [r0, #8]
 23f9e36:	6803      	ldr	r3, [r0, #0]
 23f9e38:	68db      	ldr	r3, [r3, #12]
 23f9e3a:	4798      	blx	r3
 23f9e3c:	68e3      	ldr	r3, [r4, #12]
 23f9e3e:	4418      	add	r0, r3
 23f9e40:	60e0      	str	r0, [r4, #12]
}
 23f9e42:	bd10      	pop	{r4, pc}

023f9e44 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23f9e44:	4770      	bx	lr

023f9e46 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23f9e46:	4608      	mov	r0, r1
 23f9e48:	b111      	cbz	r1, 23f9e50 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23f9e4a:	680b      	ldr	r3, [r1, #0]
 23f9e4c:	685b      	ldr	r3, [r3, #4]
 23f9e4e:	4718      	bx	r3
}
 23f9e50:	4770      	bx	lr

023f9e52 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23f9e52:	4770      	bx	lr

023f9e54 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f9e54:	4770      	bx	lr

023f9e56 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23f9e56:	4770      	bx	lr

023f9e58 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23f9e58:	4770      	bx	lr

023f9e5a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23f9e5a:	b538      	push	{r3, r4, r5, lr}
 23f9e5c:	4604      	mov	r4, r0
 23f9e5e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23f9e60:	6800      	ldr	r0, [r0, #0]
 23f9e62:	212e      	movs	r1, #46	; 0x2e
 23f9e64:	f003 f9eb 	bl	23fd23e <strchrnul>
    size = s - category;
 23f9e68:	6823      	ldr	r3, [r4, #0]
 23f9e6a:	1ac3      	subs	r3, r0, r3
 23f9e6c:	602b      	str	r3, [r5, #0]
    if (size) {
 23f9e6e:	b123      	cbz	r3, 23f9e7a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23f9e70:	7803      	ldrb	r3, [r0, #0]
 23f9e72:	b103      	cbz	r3, 23f9e76 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23f9e74:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23f9e76:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f9e78:	6020      	str	r0, [r4, #0]
}
 23f9e7a:	4618      	mov	r0, r3
 23f9e7c:	bd38      	pop	{r3, r4, r5, pc}

023f9e7e <_ZN5spark16JSONStreamWriterD0Ev>:
 23f9e7e:	b510      	push	{r4, lr}
 23f9e80:	4604      	mov	r4, r0
 23f9e82:	2110      	movs	r1, #16
 23f9e84:	f7fc f885 	bl	23f5f92 <_ZdlPvj>
 23f9e88:	4620      	mov	r0, r4
 23f9e8a:	bd10      	pop	{r4, pc}

023f9e8c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23f9e8c:	b510      	push	{r4, lr}
 23f9e8e:	4604      	mov	r4, r0
 23f9e90:	2104      	movs	r1, #4
 23f9e92:	f7fc f87e 	bl	23f5f92 <_ZdlPvj>
 23f9e96:	4620      	mov	r0, r4
 23f9e98:	bd10      	pop	{r4, pc}

023f9e9a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f9e9a:	b510      	push	{r4, lr}
 23f9e9c:	4604      	mov	r4, r0
 23f9e9e:	2104      	movs	r1, #4
 23f9ea0:	f7fc f877 	bl	23f5f92 <_ZdlPvj>
 23f9ea4:	4620      	mov	r0, r4
 23f9ea6:	bd10      	pop	{r4, pc}

023f9ea8 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23f9ea8:	f7fe bae0 	b.w	23f846c <os_mutex_recursive_lock>

023f9eac <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23f9eac:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23f9eae:	f7fc f823 	bl	23f5ef8 <strcmp>
}
 23f9eb2:	fab0 f080 	clz	r0, r0
 23f9eb6:	0940      	lsrs	r0, r0, #5
 23f9eb8:	bd08      	pop	{r3, pc}

023f9eba <__tcf_1>:
 23f9eba:	4770      	bx	lr

023f9ebc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23f9ebc:	b510      	push	{r4, lr}
 23f9ebe:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23f9ec0:	f001 fa6e 	bl	23fb3a0 <_Z16_fetch_usbserialv>
 23f9ec4:	4284      	cmp	r4, r0
 23f9ec6:	d105      	bne.n	23f9ed4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23f9ec8:	f001 fa6a 	bl	23fb3a0 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23f9ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23f9ed0:	f001 ba58 	b.w	23fb384 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23f9ed4:	f002 ffee 	bl	23fceb4 <_Z22__fetch_global_Serial1v>
 23f9ed8:	4284      	cmp	r4, r0
 23f9eda:	d105      	bne.n	23f9ee8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23f9edc:	f002 ffea 	bl	23fceb4 <_Z22__fetch_global_Serial1v>
}
 23f9ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23f9ee4:	f001 b9f1 	b.w	23fb2ca <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23f9ee8:	b12c      	cbz	r4, 23f9ef6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23f9eea:	6823      	ldr	r3, [r4, #0]
 23f9eec:	4620      	mov	r0, r4
}
 23f9eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f9ef2:	685b      	ldr	r3, [r3, #4]
 23f9ef4:	4718      	bx	r3
 23f9ef6:	bd10      	pop	{r4, pc}

023f9ef8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f9ef8:	680b      	ldr	r3, [r1, #0]
 23f9efa:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23f9efc:	684b      	ldr	r3, [r1, #4]
 23f9efe:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23f9f00:	b113      	cbz	r3, 23f9f08 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23f9f02:	685a      	ldr	r2, [r3, #4]
 23f9f04:	3201      	adds	r2, #1
 23f9f06:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f9f08:	4770      	bx	lr

023f9f0a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23f9f0a:	b513      	push	{r0, r1, r4, lr}
 23f9f0c:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23f9f0e:	4608      	mov	r0, r1
 23f9f10:	9101      	str	r1, [sp, #4]
 23f9f12:	f7fb fffb 	bl	23f5f0c <strlen>
 23f9f16:	4602      	mov	r2, r0
 23f9f18:	4620      	mov	r0, r4
 23f9f1a:	9901      	ldr	r1, [sp, #4]
}
 23f9f1c:	b002      	add	sp, #8
 23f9f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23f9f22:	f7ff bbf1 	b.w	23f9708 <_ZN5spark10JSONWriter5valueEPKcj>

023f9f26 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23f9f26:	b513      	push	{r0, r1, r4, lr}
 23f9f28:	4604      	mov	r4, r0
    write(str, strlen(str));
 23f9f2a:	4608      	mov	r0, r1
 23f9f2c:	9101      	str	r1, [sp, #4]
 23f9f2e:	f7fb ffed 	bl	23f5f0c <strlen>
 23f9f32:	4602      	mov	r2, r0
 23f9f34:	4620      	mov	r0, r4
 23f9f36:	6823      	ldr	r3, [r4, #0]
 23f9f38:	9901      	ldr	r1, [sp, #4]
 23f9f3a:	68db      	ldr	r3, [r3, #12]
}
 23f9f3c:	b002      	add	sp, #8
 23f9f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23f9f42:	4718      	bx	r3

023f9f44 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23f9f44:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f9f46:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23f9f48:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f9f4c:	2201      	movs	r2, #1
 23f9f4e:	68db      	ldr	r3, [r3, #12]
 23f9f50:	f10d 0107 	add.w	r1, sp, #7
 23f9f54:	4798      	blx	r3
}
 23f9f56:	b003      	add	sp, #12
 23f9f58:	f85d fb04 	ldr.w	pc, [sp], #4

023f9f5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f9f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
 23f9f60:	f04f 0a14 	mov.w	sl, #20
 23f9f64:	e9d0 8400 	ldrd	r8, r4, [r0]
 23f9f68:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23f9f6a:	4645      	mov	r5, r8
 23f9f6c:	fb0a f404 	mul.w	r4, sl, r4
 23f9f70:	9300      	str	r3, [sp, #0]
 23f9f72:	4b17      	ldr	r3, [pc, #92]	; (23f9fd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f9f74:	10a4      	asrs	r4, r4, #2
 23f9f76:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23f9f78:	2c00      	cmp	r4, #0
 23f9f7a:	dd21      	ble.n	23f9fc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23f9f7c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23f9f7e:	fb0a f006 	mul.w	r0, sl, r6
 23f9f82:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23f9f86:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23f9f8a:	463a      	mov	r2, r7
 23f9f8c:	455f      	cmp	r7, fp
 23f9f8e:	bf28      	it	cs
 23f9f90:	465a      	movcs	r2, fp
 23f9f92:	5828      	ldr	r0, [r5, r0]
 23f9f94:	9101      	str	r1, [sp, #4]
 23f9f96:	f003 f964 	bl	23fd262 <strncmp>
                if (cmp == 0) {
 23f9f9a:	2800      	cmp	r0, #0
 23f9f9c:	f04f 0301 	mov.w	r3, #1
 23f9fa0:	9901      	ldr	r1, [sp, #4]
 23f9fa2:	d10b      	bne.n	23f9fbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23f9fa4:	455f      	cmp	r7, fp
 23f9fa6:	d103      	bne.n	23f9fb0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23f9fa8:	9a00      	ldr	r2, [sp, #0]
 23f9faa:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f9fac:	4634      	mov	r4, r6
 23f9fae:	e7e3      	b.n	23f9f78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23f9fb0:	d9fc      	bls.n	23f9fac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23f9fb2:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23f9fb4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23f9fb8:	3e01      	subs	r6, #1
 23f9fba:	e7f7      	b.n	23f9fac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23f9fbc:	dbf9      	blt.n	23f9fb2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23f9fbe:	e7f5      	b.n	23f9fac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23f9fc0:	eba5 0508 	sub.w	r5, r5, r8
}
 23f9fc4:	4802      	ldr	r0, [pc, #8]	; (23f9fd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f9fc6:	10ad      	asrs	r5, r5, #2
 23f9fc8:	4368      	muls	r0, r5
 23f9fca:	b003      	add	sp, #12
 23f9fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9fd0:	cccccccd 	.word	0xcccccccd

023f9fd4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f9fd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23f9fd6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23f9fd8:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f9fda:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23f9fdc:	b303      	cbz	r3, 23fa020 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23f9fde:	b1f9      	cbz	r1, 23fa020 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23f9fe0:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23f9fe2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23f9fe6:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23f9fe8:	a903      	add	r1, sp, #12
 23f9fea:	a801      	add	r0, sp, #4
 23f9fec:	f7ff ff35 	bl	23f9e5a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23f9ff0:	4601      	mov	r1, r0
 23f9ff2:	b1a8      	cbz	r0, 23fa020 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23f9ff4:	f10d 030b 	add.w	r3, sp, #11
 23f9ff8:	4620      	mov	r0, r4
 23f9ffa:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23f9ffc:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fa000:	f7ff ffac 	bl	23f9f5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fa004:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fa008:	b153      	cbz	r3, 23fa020 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fa00a:	6823      	ldr	r3, [r4, #0]
 23fa00c:	2414      	movs	r4, #20
 23fa00e:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fa012:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fa016:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fa018:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fa01a:	bfa8      	it	ge
 23fa01c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fa01e:	e7e3      	b.n	23f9fe8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fa020:	4628      	mov	r0, r5
 23fa022:	b004      	add	sp, #16
 23fa024:	bd70      	pop	{r4, r5, r6, pc}

023fa026 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fa026:	b40e      	push	{r1, r2, r3}
 23fa028:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa02a:	b08c      	sub	sp, #48	; 0x30
 23fa02c:	af00      	add	r7, sp, #0
 23fa02e:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fa032:	f855 2b04 	ldr.w	r2, [r5], #4
 23fa036:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa038:	462b      	mov	r3, r5
 23fa03a:	2120      	movs	r1, #32
 23fa03c:	f107 0010 	add.w	r0, r7, #16
 23fa040:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fa042:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa044:	f7fe fe48 	bl	23f8cd8 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fa048:	281f      	cmp	r0, #31
 23fa04a:	687a      	ldr	r2, [r7, #4]
 23fa04c:	d91a      	bls.n	23fa084 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fa04e:	f100 0308 	add.w	r3, r0, #8
 23fa052:	f023 0307 	bic.w	r3, r3, #7
        }
 23fa056:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fa058:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa05c:	1c41      	adds	r1, r0, #1
 23fa05e:	462b      	mov	r3, r5
 23fa060:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fa062:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa064:	f7fe fe38 	bl	23f8cd8 <vsnprintf>
        if (n > 0) {
 23fa068:	1e02      	subs	r2, r0, #0
 23fa06a:	dd04      	ble.n	23fa076 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fa06c:	6823      	ldr	r3, [r4, #0]
 23fa06e:	4669      	mov	r1, sp
 23fa070:	4620      	mov	r0, r4
 23fa072:	68db      	ldr	r3, [r3, #12]
 23fa074:	4798      	blx	r3
 23fa076:	46b5      	mov	sp, r6
}
 23fa078:	3730      	adds	r7, #48	; 0x30
 23fa07a:	46bd      	mov	sp, r7
 23fa07c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fa080:	b003      	add	sp, #12
 23fa082:	4770      	bx	lr
    } else if (n > 0) {
 23fa084:	2800      	cmp	r0, #0
 23fa086:	d0f7      	beq.n	23fa078 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fa088:	6823      	ldr	r3, [r4, #0]
 23fa08a:	4602      	mov	r2, r0
 23fa08c:	68db      	ldr	r3, [r3, #12]
 23fa08e:	4620      	mov	r0, r4
 23fa090:	f107 0110 	add.w	r1, r7, #16
 23fa094:	4798      	blx	r3
}
 23fa096:	e7ef      	b.n	23fa078 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fa098 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fa098:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fa09a:	4c08      	ldr	r4, [pc, #32]	; (23fa0bc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fa09c:	e8d4 3f8f 	ldab	r3, [r4]
 23fa0a0:	07db      	lsls	r3, r3, #31
 23fa0a2:	d409      	bmi.n	23fa0b8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fa0a4:	4620      	mov	r0, r4
 23fa0a6:	f7fb ff83 	bl	23f5fb0 <__cxa_guard_acquire>
 23fa0aa:	b128      	cbz	r0, 23fa0b8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fa0ac:	4620      	mov	r0, r4
 23fa0ae:	f7fb ff84 	bl	23f5fba <__cxa_guard_release>
 23fa0b2:	4803      	ldr	r0, [pc, #12]	; (23fa0c0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fa0b4:	f003 f842 	bl	23fd13c <atexit>
}
 23fa0b8:	4802      	ldr	r0, [pc, #8]	; (23fa0c4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fa0ba:	bd10      	pop	{r4, pc}
 23fa0bc:	1007aeac 	.word	0x1007aeac
 23fa0c0:	023f9e53 	.word	0x023f9e53
 23fa0c4:	1007ac38 	.word	0x1007ac38

023fa0c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fa0c8:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fa0ca:	4c08      	ldr	r4, [pc, #32]	; (23fa0ec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fa0cc:	e8d4 3f8f 	ldab	r3, [r4]
 23fa0d0:	07db      	lsls	r3, r3, #31
 23fa0d2:	d409      	bmi.n	23fa0e8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fa0d4:	4620      	mov	r0, r4
 23fa0d6:	f7fb ff6b 	bl	23f5fb0 <__cxa_guard_acquire>
 23fa0da:	b128      	cbz	r0, 23fa0e8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fa0dc:	4620      	mov	r0, r4
 23fa0de:	f7fb ff6c 	bl	23f5fba <__cxa_guard_release>
 23fa0e2:	4803      	ldr	r0, [pc, #12]	; (23fa0f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fa0e4:	f003 f82a 	bl	23fd13c <atexit>
    return &factory;
}
 23fa0e8:	4802      	ldr	r0, [pc, #8]	; (23fa0f4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fa0ea:	bd10      	pop	{r4, pc}
 23fa0ec:	1007aeb0 	.word	0x1007aeb0
 23fa0f0:	023f9ebb 	.word	0x023f9ebb
 23fa0f4:	1007ac3c 	.word	0x1007ac3c

023fa0f8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fa0f8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fa0fa:	2500      	movs	r5, #0
 23fa0fc:	4604      	mov	r4, r0
 23fa0fe:	e9c0 5500 	strd	r5, r5, [r0]
 23fa102:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fa106:	6085      	str	r5, [r0, #8]
 23fa108:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fa10a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fa10e:	f7fe f991 	bl	23f8434 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fa112:	f7ff ffc1 	bl	23fa098 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fa116:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fa118:	f7ff ffd6 	bl	23fa0c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fa11c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fa11e:	6220      	str	r0, [r4, #32]
}
 23fa120:	4620      	mov	r0, r4
 23fa122:	bd38      	pop	{r3, r4, r5, pc}

023fa124 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fa124:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fa126:	4c0a      	ldr	r4, [pc, #40]	; (23fa150 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fa128:	e8d4 3f8f 	ldab	r3, [r4]
 23fa12c:	07db      	lsls	r3, r3, #31
 23fa12e:	d40c      	bmi.n	23fa14a <_ZN5spark10LogManager8instanceEv+0x26>
 23fa130:	4620      	mov	r0, r4
 23fa132:	f7fb ff3d 	bl	23f5fb0 <__cxa_guard_acquire>
 23fa136:	b140      	cbz	r0, 23fa14a <_ZN5spark10LogManager8instanceEv+0x26>
 23fa138:	4806      	ldr	r0, [pc, #24]	; (23fa154 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fa13a:	f7ff ffdd 	bl	23fa0f8 <_ZN5spark10LogManagerC1Ev>
 23fa13e:	4620      	mov	r0, r4
 23fa140:	f7fb ff3b 	bl	23f5fba <__cxa_guard_release>
 23fa144:	4804      	ldr	r0, [pc, #16]	; (23fa158 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fa146:	f002 fff9 	bl	23fd13c <atexit>
    return &mgr;
}
 23fa14a:	4802      	ldr	r0, [pc, #8]	; (23fa154 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fa14c:	bd10      	pop	{r4, pc}
 23fa14e:	bf00      	nop
 23fa150:	1007aea8 	.word	0x1007aea8
 23fa154:	1007aeb8 	.word	0x1007aeb8
 23fa158:	023fa699 	.word	0x023fa699

023fa15c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fa15c:	2300      	movs	r3, #0
 23fa15e:	4a02      	ldr	r2, [pc, #8]	; (23fa168 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fa160:	4902      	ldr	r1, [pc, #8]	; (23fa16c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fa162:	4803      	ldr	r0, [pc, #12]	; (23fa170 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fa164:	f7fe bb5e 	b.w	23f8824 <log_set_callbacks>
 23fa168:	023fa481 	.word	0x023fa481
 23fa16c:	023fa40d 	.word	0x023fa40d
 23fa170:	023fa38d 	.word	0x023fa38d

023fa174 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fa174:	2300      	movs	r3, #0
 23fa176:	461a      	mov	r2, r3
 23fa178:	4619      	mov	r1, r3
 23fa17a:	4618      	mov	r0, r3
 23fa17c:	f7fe bb52 	b.w	23f8824 <log_set_callbacks>

023fa180 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fa180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa182:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fa184:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fa186:	4668      	mov	r0, sp
 23fa188:	f7ff feb6 	bl	23f9ef8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fa18c:	466a      	mov	r2, sp
 23fa18e:	4629      	mov	r1, r5
 23fa190:	4620      	mov	r0, r4
 23fa192:	f7ff f9b3 	bl	23f94fc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fa196:	a801      	add	r0, sp, #4
 23fa198:	f7fe fdf9 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fa19c:	4620      	mov	r0, r4
 23fa19e:	b003      	add	sp, #12
 23fa1a0:	bd30      	pop	{r4, r5, pc}

023fa1a2 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fa1a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa1a4:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fa1a6:	68cd      	ldr	r5, [r1, #12]
 23fa1a8:	4668      	mov	r0, sp
 23fa1aa:	f7ff fea5 	bl	23f9ef8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fa1ae:	466a      	mov	r2, sp
 23fa1b0:	4629      	mov	r1, r5
 23fa1b2:	4620      	mov	r0, r4
 23fa1b4:	f7ff f97e 	bl	23f94b4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fa1b8:	a801      	add	r0, sp, #4
 23fa1ba:	f7fe fde8 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fa1be:	4620      	mov	r0, r4
 23fa1c0:	b003      	add	sp, #12
 23fa1c2:	bd30      	pop	{r4, r5, pc}

023fa1c4 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fa1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa1c6:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fa1c8:	690d      	ldr	r5, [r1, #16]
 23fa1ca:	4668      	mov	r0, sp
 23fa1cc:	f7ff fe94 	bl	23f9ef8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fa1d0:	466a      	mov	r2, sp
 23fa1d2:	4629      	mov	r1, r5
 23fa1d4:	4620      	mov	r0, r4
 23fa1d6:	f7fe fff0 	bl	23f91ba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fa1da:	a801      	add	r0, sp, #4
 23fa1dc:	f7fe fdd7 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fa1e0:	4620      	mov	r0, r4
 23fa1e2:	b003      	add	sp, #12
 23fa1e4:	bd30      	pop	{r4, r5, pc}
	...

023fa1e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fa1e8:	b570      	push	{r4, r5, r6, lr}
 23fa1ea:	b08a      	sub	sp, #40	; 0x28
 23fa1ec:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fa1ee:	4601      	mov	r1, r0
 23fa1f0:	a804      	add	r0, sp, #16
 23fa1f2:	f7ff ffc5 	bl	23fa180 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fa1f6:	4e14      	ldr	r6, [pc, #80]	; (23fa248 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fa1f8:	a804      	add	r0, sp, #16
 23fa1fa:	f7ff f997 	bl	23f952c <_ZN5spark18JSONObjectIterator4nextEv>
 23fa1fe:	b1e8      	cbz	r0, 23fa23c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fa200:	4668      	mov	r0, sp
 23fa202:	a904      	add	r1, sp, #16
 23fa204:	f7ff ffcd 	bl	23fa1a2 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fa208:	4631      	mov	r1, r6
 23fa20a:	9802      	ldr	r0, [sp, #8]
 23fa20c:	f7ff fe4e 	bl	23f9eac <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fa210:	4604      	mov	r4, r0
 23fa212:	b110      	cbz	r0, 23fa21a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fa214:	1e2c      	subs	r4, r5, #0
 23fa216:	bf18      	it	ne
 23fa218:	2401      	movne	r4, #1
 23fa21a:	a801      	add	r0, sp, #4
 23fa21c:	f7fe fdb7 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fa220:	2c00      	cmp	r4, #0
 23fa222:	d0e9      	beq.n	23fa1f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fa224:	4668      	mov	r0, sp
 23fa226:	a904      	add	r1, sp, #16
 23fa228:	f7ff ffcc 	bl	23fa1c4 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fa22c:	4668      	mov	r0, sp
 23fa22e:	f7ff f839 	bl	23f92a4 <_ZNK5spark9JSONValue5toIntEv>
 23fa232:	6028      	str	r0, [r5, #0]
 23fa234:	a801      	add	r0, sp, #4
 23fa236:	f7fe fdaa 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fa23a:	e7dd      	b.n	23fa1f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fa23c:	a805      	add	r0, sp, #20
 23fa23e:	f7fe fda6 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fa242:	b00a      	add	sp, #40	; 0x28
 23fa244:	bd70      	pop	{r4, r5, r6, pc}
 23fa246:	bf00      	nop
 23fa248:	023ff9dc 	.word	0x023ff9dc

023fa24c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fa24c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa24e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fa250:	4913      	ldr	r1, [pc, #76]	; (23fa2a0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fa252:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fa254:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fa256:	f7fb fe4f 	bl	23f5ef8 <strcmp>
 23fa25a:	b950      	cbnz	r0, 23fa272 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fa25c:	f001 f8a0 	bl	23fb3a0 <_Z16_fetch_usbserialv>
 23fa260:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fa264:	f001 f88a 	bl	23fb37c <_ZN9USBSerial5beginEl>
}
 23fa268:	b003      	add	sp, #12
 23fa26a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fa26e:	f001 b897 	b.w	23fb3a0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fa272:	4620      	mov	r0, r4
 23fa274:	490b      	ldr	r1, [pc, #44]	; (23fa2a4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fa276:	f7fb fe3f 	bl	23f5ef8 <strcmp>
 23fa27a:	b978      	cbnz	r0, 23fa29c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fa27c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fa280:	a901      	add	r1, sp, #4
 23fa282:	4628      	mov	r0, r5
        int baud = 9600;
 23fa284:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fa286:	f7ff ffaf 	bl	23fa1e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fa28a:	f002 fe13 	bl	23fceb4 <_Z22__fetch_global_Serial1v>
 23fa28e:	9901      	ldr	r1, [sp, #4]
 23fa290:	f001 f818 	bl	23fb2c4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fa294:	f002 fe0e 	bl	23fceb4 <_Z22__fetch_global_Serial1v>
}
 23fa298:	b003      	add	sp, #12
 23fa29a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fa29c:	2000      	movs	r0, #0
 23fa29e:	e7fb      	b.n	23fa298 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fa2a0:	023ff9e1 	.word	0x023ff9e1
 23fa2a4:	023ff9e8 	.word	0x023ff9e8

023fa2a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa2a8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fa2aa:	2614      	movs	r6, #20
 23fa2ac:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa2b0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fa2b2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fa2b6:	42ae      	cmp	r6, r5
 23fa2b8:	d005      	beq.n	23fa2c6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fa2ba:	f105 0008 	add.w	r0, r5, #8
 23fa2be:	f7ff fff3 	bl	23fa2a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fa2c2:	3514      	adds	r5, #20
 23fa2c4:	e7f7      	b.n	23fa2b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fa2c6:	6820      	ldr	r0, [r4, #0]
 23fa2c8:	f7fe fcdc 	bl	23f8c84 <free>
}
 23fa2cc:	4620      	mov	r0, r4
 23fa2ce:	bd70      	pop	{r4, r5, r6, pc}

023fa2d0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fa2d0:	b510      	push	{r4, lr}
 23fa2d2:	4604      	mov	r4, r0
 23fa2d4:	300c      	adds	r0, #12
 23fa2d6:	f7ff ffe7 	bl	23fa2a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fa2da:	4620      	mov	r0, r4
 23fa2dc:	f7fe fd91 	bl	23f8e02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fa2e0:	4620      	mov	r0, r4
 23fa2e2:	bd10      	pop	{r4, pc}

023fa2e4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fa2e4:	b510      	push	{r4, lr}
 23fa2e6:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fa2e8:	4b03      	ldr	r3, [pc, #12]	; (23fa2f8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fa2ea:	f840 3b04 	str.w	r3, [r0], #4
 23fa2ee:	f7ff ffef 	bl	23fa2d0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fa2f2:	4620      	mov	r0, r4
 23fa2f4:	bd10      	pop	{r4, pc}
 23fa2f6:	bf00      	nop
 23fa2f8:	023ff240 	.word	0x023ff240

023fa2fc <_ZN5spark16StreamLogHandlerD0Ev>:
 23fa2fc:	b510      	push	{r4, lr}
 23fa2fe:	4604      	mov	r4, r0
 23fa300:	f7ff fff0 	bl	23fa2e4 <_ZN5spark16StreamLogHandlerD1Ev>
 23fa304:	4620      	mov	r0, r4
 23fa306:	2124      	movs	r1, #36	; 0x24
 23fa308:	f7fb fe43 	bl	23f5f92 <_ZdlPvj>
 23fa30c:	4620      	mov	r0, r4
 23fa30e:	bd10      	pop	{r4, pc}

023fa310 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fa310:	b510      	push	{r4, lr}
 23fa312:	4604      	mov	r4, r0
 23fa314:	4b02      	ldr	r3, [pc, #8]	; (23fa320 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fa316:	6003      	str	r3, [r0, #0]
 23fa318:	f7ff ffe4 	bl	23fa2e4 <_ZN5spark16StreamLogHandlerD1Ev>
 23fa31c:	4620      	mov	r0, r4
 23fa31e:	bd10      	pop	{r4, pc}
 23fa320:	023ffa84 	.word	0x023ffa84

023fa324 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fa324:	b510      	push	{r4, lr}
 23fa326:	4604      	mov	r4, r0
 23fa328:	f7ff fff2 	bl	23fa310 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fa32c:	4620      	mov	r0, r4
 23fa32e:	2124      	movs	r1, #36	; 0x24
 23fa330:	f7fb fe2f 	bl	23f5f92 <_ZdlPvj>
 23fa334:	4620      	mov	r0, r4
 23fa336:	bd10      	pop	{r4, pc}

023fa338 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fa338:	680a      	ldr	r2, [r1, #0]
 23fa33a:	b510      	push	{r4, lr}
 23fa33c:	6002      	str	r2, [r0, #0]
 23fa33e:	684a      	ldr	r2, [r1, #4]
 23fa340:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fa342:	2200      	movs	r2, #0
 23fa344:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fa348:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fa34a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa34c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fa34e:	6084      	str	r4, [r0, #8]
 23fa350:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa352:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fa354:	60c4      	str	r4, [r0, #12]
 23fa356:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa358:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fa35a:	6104      	str	r4, [r0, #16]
 23fa35c:	bd10      	pop	{r4, pc}

023fa35e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
 23fa35e:	2200      	movs	r2, #0
 23fa360:	e9c0 2200 	strd	r2, r2, [r0]
 23fa364:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fa366:	b510      	push	{r4, lr}
 23fa368:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa36a:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fa36c:	6004      	str	r4, [r0, #0]
 23fa36e:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa370:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fa372:	6044      	str	r4, [r0, #4]
 23fa374:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa376:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fa378:	6084      	str	r4, [r0, #8]
}
 23fa37a:	bd10      	pop	{r4, pc}

023fa37c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fa37c:	b510      	push	{r4, lr}
 23fa37e:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fa380:	6803      	ldr	r3, [r0, #0]
 23fa382:	6818      	ldr	r0, [r3, #0]
 23fa384:	f7fe f880 	bl	23f8488 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fa388:	4620      	mov	r0, r4
 23fa38a:	bd10      	pop	{r4, pc}

023fa38c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fa38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa390:	b087      	sub	sp, #28
 23fa392:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fa394:	4b1c      	ldr	r3, [pc, #112]	; (23fa408 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fa396:	4680      	mov	r8, r0
 23fa398:	685b      	ldr	r3, [r3, #4]
 23fa39a:	4689      	mov	r9, r1
 23fa39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fa3a0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fa3a2:	b96b      	cbnz	r3, 23fa3c0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fa3a4:	f7ff febe 	bl	23fa124 <_ZN5spark10LogManager8instanceEv>
 23fa3a8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fa3aa:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fa3ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fa3b0:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fa3b2:	f7ff fd79 	bl	23f9ea8 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fa3b6:	7b23      	ldrb	r3, [r4, #12]
 23fa3b8:	b12b      	cbz	r3, 23fa3c6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fa3ba:	a805      	add	r0, sp, #20
 23fa3bc:	f7ff ffde 	bl	23fa37c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fa3c0:	b007      	add	sp, #28
 23fa3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fa3c6:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fa3c8:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fa3cc:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fa3ce:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fa3d2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fa3d6:	45aa      	cmp	sl, r5
 23fa3d8:	d012      	beq.n	23fa400 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fa3da:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fa3de:	4631      	mov	r1, r6
 23fa3e0:	1d38      	adds	r0, r7, #4
 23fa3e2:	f7ff fdf7 	bl	23f9fd4 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fa3e6:	4581      	cmp	r9, r0
 23fa3e8:	d3f5      	bcc.n	23fa3d6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fa3ea:	9a03      	ldr	r2, [sp, #12]
 23fa3ec:	683b      	ldr	r3, [r7, #0]
 23fa3ee:	9200      	str	r2, [sp, #0]
 23fa3f0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fa3f4:	464a      	mov	r2, r9
 23fa3f6:	4633      	mov	r3, r6
 23fa3f8:	4641      	mov	r1, r8
 23fa3fa:	4638      	mov	r0, r7
 23fa3fc:	47d8      	blx	fp
 23fa3fe:	e7ea      	b.n	23fa3d6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fa400:	2300      	movs	r3, #0
 23fa402:	7323      	strb	r3, [r4, #12]
 23fa404:	e7d9      	b.n	23fa3ba <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fa406:	bf00      	nop
 23fa408:	e000ed00 	.word	0xe000ed00

023fa40c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fa40c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa410:	469b      	mov	fp, r3
 23fa412:	4b1a      	ldr	r3, [pc, #104]	; (23fa47c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fa414:	4680      	mov	r8, r0
 23fa416:	685b      	ldr	r3, [r3, #4]
 23fa418:	4689      	mov	r9, r1
 23fa41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fa41e:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fa420:	b96b      	cbnz	r3, 23fa43e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fa422:	f7ff fe7f 	bl	23fa124 <_ZN5spark10LogManager8instanceEv>
 23fa426:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fa428:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fa42c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fa42e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fa430:	f7ff fd3a 	bl	23f9ea8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fa434:	7b23      	ldrb	r3, [r4, #12]
 23fa436:	b12b      	cbz	r3, 23fa444 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fa438:	a801      	add	r0, sp, #4
 23fa43a:	f7ff ff9f 	bl	23fa37c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fa43e:	b003      	add	sp, #12
 23fa440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fa444:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fa446:	b2f6      	uxtb	r6, r6
 23fa448:	7323      	strb	r3, [r4, #12]
 23fa44a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fa44e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fa452:	4555      	cmp	r5, sl
 23fa454:	d00e      	beq.n	23fa474 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fa456:	f855 7b04 	ldr.w	r7, [r5], #4
 23fa45a:	4659      	mov	r1, fp
 23fa45c:	1d38      	adds	r0, r7, #4
 23fa45e:	f7ff fdb9 	bl	23f9fd4 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fa462:	4286      	cmp	r6, r0
 23fa464:	d3f5      	bcc.n	23fa452 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fa466:	683b      	ldr	r3, [r7, #0]
 23fa468:	464a      	mov	r2, r9
 23fa46a:	4641      	mov	r1, r8
 23fa46c:	4638      	mov	r0, r7
 23fa46e:	68db      	ldr	r3, [r3, #12]
 23fa470:	4798      	blx	r3
 23fa472:	e7ee      	b.n	23fa452 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fa474:	2300      	movs	r3, #0
 23fa476:	7323      	strb	r3, [r4, #12]
 23fa478:	e7de      	b.n	23fa438 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fa47a:	bf00      	nop
 23fa47c:	e000ed00 	.word	0xe000ed00

023fa480 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fa480:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fa484:	4b16      	ldr	r3, [pc, #88]	; (23fa4e0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fa486:	4605      	mov	r5, r0
 23fa488:	685b      	ldr	r3, [r3, #4]
 23fa48a:	460f      	mov	r7, r1
 23fa48c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fa490:	bb1b      	cbnz	r3, 23fa4da <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fa492:	f7ff fe47 	bl	23fa124 <_ZN5spark10LogManager8instanceEv>
 23fa496:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fa498:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fa49c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fa49e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fa4a0:	f7ff fd02 	bl	23f9ea8 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fa4a4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fa4a8:	2446      	movs	r4, #70	; 0x46
 23fa4aa:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fa4ae:	45b0      	cmp	r8, r6
 23fa4b0:	d109      	bne.n	23fa4c6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fa4b2:	a801      	add	r0, sp, #4
 23fa4b4:	f7ff ff62 	bl	23fa37c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fa4b8:	42a5      	cmp	r5, r4
 23fa4ba:	bfb4      	ite	lt
 23fa4bc:	2000      	movlt	r0, #0
 23fa4be:	2001      	movge	r0, #1
}
 23fa4c0:	b002      	add	sp, #8
 23fa4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fa4c6:	f856 0b04 	ldr.w	r0, [r6], #4
 23fa4ca:	4639      	mov	r1, r7
 23fa4cc:	3004      	adds	r0, #4
 23fa4ce:	f7ff fd81 	bl	23f9fd4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fa4d2:	4284      	cmp	r4, r0
 23fa4d4:	bfa8      	it	ge
 23fa4d6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fa4d8:	e7e9      	b.n	23fa4ae <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fa4da:	2000      	movs	r0, #0
 23fa4dc:	e7f0      	b.n	23fa4c0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fa4de:	bf00      	nop
 23fa4e0:	e000ed00 	.word	0xe000ed00

023fa4e4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fa4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fa4e6:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fa4ea:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fa4ec:	4604      	mov	r4, r0
 23fa4ee:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fa4f0:	db0d      	blt.n	23fa50e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fa4f2:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fa4f4:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fa4f6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fa4f8:	dd04      	ble.n	23fa504 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fa4fa:	00b9      	lsls	r1, r7, #2
 23fa4fc:	f7fe fbd0 	bl	23f8ca0 <realloc>
            if (!d) {
 23fa500:	b918      	cbnz	r0, 23fa50a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fa502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fa504:	f7fe fbbe 	bl	23f8c84 <free>
        T* d = nullptr;
 23fa508:	2000      	movs	r0, #0
        data_ = d;
 23fa50a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fa50c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fa50e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fa510:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fa512:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fa516:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fa518:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fa51c:	1d08      	adds	r0, r1, #4
 23fa51e:	f002 fe30 	bl	23fd182 <memmove>
    new(p) T(std::move(value));
 23fa522:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fa526:	6863      	ldr	r3, [r4, #4]
    return true;
 23fa528:	2001      	movs	r0, #1
    ++size_;
 23fa52a:	3301      	adds	r3, #1
 23fa52c:	6063      	str	r3, [r4, #4]
    return true;
 23fa52e:	e7e8      	b.n	23fa502 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fa530 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fa530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa532:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fa534:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fa538:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fa53a:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fa53c:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fa53e:	f7ff fcb3 	bl	23f9ea8 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fa542:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fa546:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fa54a:	4293      	cmp	r3, r2
 23fa54c:	4619      	mov	r1, r3
 23fa54e:	d00a      	beq.n	23fa566 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fa550:	6809      	ldr	r1, [r1, #0]
 23fa552:	3304      	adds	r3, #4
 23fa554:	42a9      	cmp	r1, r5
 23fa556:	d1f8      	bne.n	23fa54a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fa558:	a801      	add	r0, sp, #4
 23fa55a:	f7ff ff0f 	bl	23fa37c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fa55e:	2500      	movs	r5, #0
}
 23fa560:	4628      	mov	r0, r5
 23fa562:	b003      	add	sp, #12
 23fa564:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fa566:	4629      	mov	r1, r5
 23fa568:	4620      	mov	r0, r4
 23fa56a:	f7ff ffbb 	bl	23fa4e4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fa56e:	4605      	mov	r5, r0
 23fa570:	2800      	cmp	r0, #0
 23fa572:	d0f1      	beq.n	23fa558 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fa574:	6863      	ldr	r3, [r4, #4]
 23fa576:	2b01      	cmp	r3, #1
 23fa578:	d101      	bne.n	23fa57e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fa57a:	f7ff fdef 	bl	23fa15c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fa57e:	a801      	add	r0, sp, #4
 23fa580:	f7ff fefc 	bl	23fa37c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fa584:	e7ec      	b.n	23fa560 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fa586 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fa586:	460b      	mov	r3, r1
 23fa588:	b570      	push	{r4, r5, r6, lr}
 23fa58a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fa58c:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fa590:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fa594:	4282      	cmp	r2, r0
 23fa596:	d00f      	beq.n	23fa5b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fa598:	4601      	mov	r1, r0
            if (*p == value) {
 23fa59a:	681d      	ldr	r5, [r3, #0]
 23fa59c:	f851 6b04 	ldr.w	r6, [r1], #4
 23fa5a0:	42ae      	cmp	r6, r5
 23fa5a2:	d107      	bne.n	23fa5b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fa5a4:	1a52      	subs	r2, r2, r1
 23fa5a6:	f002 fdec 	bl	23fd182 <memmove>
    return true;
 23fa5aa:	2001      	movs	r0, #1
    --size_;
 23fa5ac:	6863      	ldr	r3, [r4, #4]
 23fa5ae:	3b01      	subs	r3, #1
 23fa5b0:	6063      	str	r3, [r4, #4]
}
 23fa5b2:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fa5b4:	4608      	mov	r0, r1
 23fa5b6:	e7ed      	b.n	23fa594 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fa5b8:	2000      	movs	r0, #0
 23fa5ba:	e7fa      	b.n	23fa5b2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fa5bc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fa5bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fa5be:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fa5c0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fa5c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fa5c6:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fa5c8:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fa5ca:	f7ff fc6d 	bl	23f9ea8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fa5ce:	4620      	mov	r0, r4
 23fa5d0:	a901      	add	r1, sp, #4
 23fa5d2:	f7ff ffd8 	bl	23fa586 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fa5d6:	b118      	cbz	r0, 23fa5e0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fa5d8:	6863      	ldr	r3, [r4, #4]
 23fa5da:	b90b      	cbnz	r3, 23fa5e0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fa5dc:	f7ff fdca 	bl	23fa174 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fa5e0:	a803      	add	r0, sp, #12
 23fa5e2:	f7ff fecb 	bl	23fa37c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fa5e6:	b004      	add	sp, #16
 23fa5e8:	bd10      	pop	{r4, pc}

023fa5ea <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fa5ea:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fa5ec:	b570      	push	{r4, r5, r6, lr}
 23fa5ee:	4604      	mov	r4, r0
 23fa5f0:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fa5f4:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fa5f8:	42ae      	cmp	r6, r5
 23fa5fa:	d015      	beq.n	23fa628 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fa5fc:	4620      	mov	r0, r4
 23fa5fe:	f105 0110 	add.w	r1, r5, #16
 23fa602:	f7ff ffc0 	bl	23fa586 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fa606:	6863      	ldr	r3, [r4, #4]
 23fa608:	b90b      	cbnz	r3, 23fa60e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fa60a:	f7ff fdb3 	bl	23fa174 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fa60e:	69e0      	ldr	r0, [r4, #28]
 23fa610:	6929      	ldr	r1, [r5, #16]
 23fa612:	6803      	ldr	r3, [r0, #0]
 23fa614:	68db      	ldr	r3, [r3, #12]
 23fa616:	4798      	blx	r3
        if (h.stream) {
 23fa618:	6969      	ldr	r1, [r5, #20]
 23fa61a:	b119      	cbz	r1, 23fa624 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fa61c:	6a20      	ldr	r0, [r4, #32]
 23fa61e:	6803      	ldr	r3, [r0, #0]
 23fa620:	68db      	ldr	r3, [r3, #12]
 23fa622:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fa624:	3518      	adds	r5, #24
 23fa626:	e7e7      	b.n	23fa5f8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fa628:	2618      	movs	r6, #24
 23fa62a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fa62e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fa632:	42ae      	cmp	r6, r5
 23fa634:	d004      	beq.n	23fa640 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fa636:	4628      	mov	r0, r5
 23fa638:	f000 fcbe 	bl	23fafb8 <_ZN6StringD1Ev>
 23fa63c:	3518      	adds	r5, #24
 23fa63e:	e7f8      	b.n	23fa632 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fa640:	2300      	movs	r3, #0
 23fa642:	6163      	str	r3, [r4, #20]
}
 23fa644:	bd70      	pop	{r4, r5, r6, pc}

023fa646 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fa646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fa648:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fa64a:	f7ff fd93 	bl	23fa174 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fa64e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fa652:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fa654:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fa656:	f7ff fc27 	bl	23f9ea8 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fa65a:	4620      	mov	r0, r4
 23fa65c:	f7ff ffc5 	bl	23fa5ea <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fa660:	a801      	add	r0, sp, #4
 23fa662:	f7ff fe8b 	bl	23fa37c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fa666:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fa668:	b108      	cbz	r0, 23fa66e <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fa66a:	f7fd fef1 	bl	23f8450 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fa66e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fa672:	2618      	movs	r6, #24
 23fa674:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fa678:	42ae      	cmp	r6, r5
 23fa67a:	d004      	beq.n	23fa686 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fa67c:	4628      	mov	r0, r5
 23fa67e:	f000 fc9b 	bl	23fafb8 <_ZN6StringD1Ev>
 23fa682:	3518      	adds	r5, #24
 23fa684:	e7f8      	b.n	23fa678 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fa686:	6920      	ldr	r0, [r4, #16]
 23fa688:	f7fe fafc 	bl	23f8c84 <free>
 23fa68c:	6820      	ldr	r0, [r4, #0]
 23fa68e:	f7fe faf9 	bl	23f8c84 <free>
}
 23fa692:	4620      	mov	r0, r4
 23fa694:	b002      	add	sp, #8
 23fa696:	bd70      	pop	{r4, r5, r6, pc}

023fa698 <__tcf_2>:
    static LogManager mgr;
 23fa698:	4801      	ldr	r0, [pc, #4]	; (23fa6a0 <__tcf_2+0x8>)
 23fa69a:	f7ff bfd4 	b.w	23fa646 <_ZN5spark10LogManagerD1Ev>
 23fa69e:	bf00      	nop
 23fa6a0:	1007aeb8 	.word	0x1007aeb8

023fa6a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fa6a4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fa6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa6a8:	4604      	mov	r4, r0
 23fa6aa:	460d      	mov	r5, r1
 23fa6ac:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fa6ae:	d915      	bls.n	23fa6dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fa6b0:	4290      	cmp	r0, r2
 23fa6b2:	d214      	bcs.n	23fa6de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fa6b4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fa6b8:	1a75      	subs	r5, r6, r1
 23fa6ba:	f1a1 0714 	sub.w	r7, r1, #20
 23fa6be:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fa6c0:	42b7      	cmp	r7, r6
 23fa6c2:	d01a      	beq.n	23fa6fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fa6c4:	b11c      	cbz	r4, 23fa6ce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fa6c6:	4631      	mov	r1, r6
 23fa6c8:	4620      	mov	r0, r4
 23fa6ca:	f7ff fe35 	bl	23fa338 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fa6ce:	f106 0008 	add.w	r0, r6, #8
 23fa6d2:	f7ff fde9 	bl	23fa2a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fa6d6:	3e14      	subs	r6, #20
 23fa6d8:	3c14      	subs	r4, #20
 23fa6da:	e7f1      	b.n	23fa6c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fa6dc:	d00d      	beq.n	23fa6fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fa6de:	42b5      	cmp	r5, r6
 23fa6e0:	d00b      	beq.n	23fa6fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fa6e2:	b11c      	cbz	r4, 23fa6ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fa6e4:	4629      	mov	r1, r5
 23fa6e6:	4620      	mov	r0, r4
 23fa6e8:	f7ff fe26 	bl	23fa338 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fa6ec:	f105 0008 	add.w	r0, r5, #8
 23fa6f0:	f7ff fdda 	bl	23fa2a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fa6f4:	3514      	adds	r5, #20
 23fa6f6:	3414      	adds	r4, #20
 23fa6f8:	e7f1      	b.n	23fa6de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fa6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fa6fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fa6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa700:	4690      	mov	r8, r2
        capacity_(0) {
 23fa702:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fa704:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fa706:	b095      	sub	sp, #84	; 0x54
 23fa708:	9103      	str	r1, [sp, #12]
    return size_;
 23fa70a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fa70e:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fa710:	4299      	cmp	r1, r3
        capacity_(0) {
 23fa712:	e9c0 3300 	strd	r3, r3, [r0]
 23fa716:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fa71a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fa71e:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fa722:	7602      	strb	r2, [r0, #24]
 23fa724:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fa726:	dc23      	bgt.n	23fa770 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fa728:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fa72c:	2314      	movs	r3, #20
 23fa72e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fa732:	42af      	cmp	r7, r5
 23fa734:	d03b      	beq.n	23fa7ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fa736:	4629      	mov	r1, r5
 23fa738:	a80b      	add	r0, sp, #44	; 0x2c
 23fa73a:	f000 fcc6 	bl	23fb0ca <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fa73e:	a90b      	add	r1, sp, #44	; 0x2c
 23fa740:	a80f      	add	r0, sp, #60	; 0x3c
 23fa742:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fa744:	f000 fcc1 	bl	23fb0ca <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fa748:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fa74c:	4299      	cmp	r1, r3
 23fa74e:	da1b      	bge.n	23fa788 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fa750:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fa752:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fa754:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fa758:	4631      	mov	r1, r6
 23fa75a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fa75e:	f106 0010 	add.w	r0, r6, #16
 23fa762:	f7ff fb23 	bl	23f9dac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fa766:	b9ee      	cbnz	r6, 23fa7a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fa768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fa76a:	3301      	adds	r3, #1
 23fa76c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fa76e:	e011      	b.n	23fa794 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fa770:	a808      	add	r0, sp, #32
 23fa772:	f7ff fb45 	bl	23f9e00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fa776:	2800      	cmp	r0, #0
 23fa778:	d1d6      	bne.n	23fa728 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fa77a:	a808      	add	r0, sp, #32
 23fa77c:	f7fe fb41 	bl	23f8e02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fa780:	4620      	mov	r0, r4
 23fa782:	b015      	add	sp, #84	; 0x54
 23fa784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fa788:	3101      	adds	r1, #1
 23fa78a:	a808      	add	r0, sp, #32
 23fa78c:	f7ff fb38 	bl	23f9e00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fa790:	2800      	cmp	r0, #0
 23fa792:	d1dd      	bne.n	23fa750 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fa794:	a80f      	add	r0, sp, #60	; 0x3c
 23fa796:	f000 fc0f 	bl	23fafb8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fa79a:	a80b      	add	r0, sp, #44	; 0x2c
 23fa79c:	f000 fc0c 	bl	23fafb8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fa7a0:	3514      	adds	r5, #20
 23fa7a2:	e7c6      	b.n	23fa732 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fa7a4:	4630      	mov	r0, r6
 23fa7a6:	a90f      	add	r1, sp, #60	; 0x3c
 23fa7a8:	f000 fc8f 	bl	23fb0ca <_ZN6StringC1EOS_>
 23fa7ac:	e7dc      	b.n	23fa768 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fa7ae:	2600      	movs	r6, #0
 23fa7b0:	f04f 0914 	mov.w	r9, #20
 23fa7b4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fa7b8:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fa7ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fa7be:	429e      	cmp	r6, r3
 23fa7c0:	da7c      	bge.n	23fa8bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23fa7c2:	0133      	lsls	r3, r6, #4
 23fa7c4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fa7c6:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fa7c8:	b90b      	cbnz	r3, 23fa7ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fa7ca:	3601      	adds	r6, #1
 23fa7cc:	e7f5      	b.n	23fa7ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fa7ce:	2300      	movs	r3, #0
 23fa7d0:	9307      	str	r3, [sp, #28]
 23fa7d2:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fa7d6:	ad0b      	add	r5, sp, #44	; 0x2c
 23fa7d8:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fa7da:	a907      	add	r1, sp, #28
 23fa7dc:	a806      	add	r0, sp, #24
 23fa7de:	f7ff fb3c 	bl	23f9e5a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fa7e2:	4682      	mov	sl, r0
 23fa7e4:	2800      	cmp	r0, #0
 23fa7e6:	d0f0      	beq.n	23fa7ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fa7e8:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fa7ec:	4601      	mov	r1, r0
            bool found = false;
 23fa7ee:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fa7f2:	4628      	mov	r0, r5
 23fa7f4:	9a07      	ldr	r2, [sp, #28]
 23fa7f6:	f10d 0317 	add.w	r3, sp, #23
 23fa7fa:	f7ff fbaf 	bl	23f9f5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fa7fe:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fa802:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fa804:	2f00      	cmp	r7, #0
 23fa806:	d14a      	bne.n	23fa89e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fa808:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fa80c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fa810:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fa814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fa818:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fa81c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fa820:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fa822:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fa826:	4293      	cmp	r3, r2
 23fa828:	db17      	blt.n	23fa85a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fa82a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fa82e:	f1ba 0f00 	cmp.w	sl, #0
 23fa832:	dd30      	ble.n	23fa896 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fa834:	fb09 f00a 	mul.w	r0, r9, sl
 23fa838:	f7fe fa16 	bl	23f8c68 <malloc>
            if (!d) {
 23fa83c:	4683      	mov	fp, r0
 23fa83e:	b360      	cbz	r0, 23fa89a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fa840:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fa844:	fb09 1202 	mla	r2, r9, r2, r1
 23fa848:	f7ff ff2c 	bl	23fa6a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fa84c:	6828      	ldr	r0, [r5, #0]
 23fa84e:	f7fe fa19 	bl	23f8c84 <free>
        data_ = d;
 23fa852:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fa856:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fa85a:	682b      	ldr	r3, [r5, #0]
 23fa85c:	9a01      	ldr	r2, [sp, #4]
 23fa85e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fa862:	686a      	ldr	r2, [r5, #4]
 23fa864:	4651      	mov	r1, sl
 23fa866:	fb09 3202 	mla	r2, r9, r2, r3
 23fa86a:	f10a 0014 	add.w	r0, sl, #20
 23fa86e:	f7ff ff19 	bl	23fa6a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fa872:	f1ba 0f00 	cmp.w	sl, #0
 23fa876:	d003      	beq.n	23fa880 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fa878:	4650      	mov	r0, sl
 23fa87a:	a90f      	add	r1, sp, #60	; 0x3c
 23fa87c:	f7ff fd5c 	bl	23fa338 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fa880:	686b      	ldr	r3, [r5, #4]
 23fa882:	3301      	adds	r3, #1
 23fa884:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fa886:	a811      	add	r0, sp, #68	; 0x44
 23fa888:	f7ff fd0e 	bl	23fa2a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fa88c:	b13f      	cbz	r7, 23fa89e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fa88e:	a80b      	add	r0, sp, #44	; 0x2c
 23fa890:	f7ff fd0a 	bl	23fa2a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fa894:	e771      	b.n	23fa77a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fa896:	46bb      	mov	fp, r7
 23fa898:	e7d8      	b.n	23fa84c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fa89a:	2701      	movs	r7, #1
 23fa89c:	e7f3      	b.n	23fa886 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fa89e:	9b01      	ldr	r3, [sp, #4]
 23fa8a0:	682d      	ldr	r5, [r5, #0]
 23fa8a2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fa8a6:	9b06      	ldr	r3, [sp, #24]
 23fa8a8:	781b      	ldrb	r3, [r3, #0]
 23fa8aa:	b92b      	cbnz	r3, 23fa8b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fa8ac:	f8d8 3000 	ldr.w	r3, [r8]
 23fa8b0:	9a02      	ldr	r2, [sp, #8]
 23fa8b2:	4413      	add	r3, r2
 23fa8b4:	7c1b      	ldrb	r3, [r3, #16]
 23fa8b6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fa8b8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fa8ba:	e78e      	b.n	23fa7da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fa8bc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fa8be:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fa8c0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fa8c2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fa8c4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa8c6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fa8c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fa8ca:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fa8cc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fa8ce:	60a2      	str	r2, [r4, #8]
 23fa8d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fa8d2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fa8d4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fa8d6:	60e2      	str	r2, [r4, #12]
 23fa8d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fa8da:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fa8dc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fa8de:	6122      	str	r2, [r4, #16]
 23fa8e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fa8e2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fa8e4:	9b03      	ldr	r3, [sp, #12]
 23fa8e6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fa8e8:	6162      	str	r2, [r4, #20]
 23fa8ea:	7623      	strb	r3, [r4, #24]
 23fa8ec:	e7cf      	b.n	23fa88e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fa8f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fa8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa8f2:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fa8f4:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fa8f6:	4617      	mov	r7, r2
 23fa8f8:	b087      	sub	sp, #28
 23fa8fa:	460d      	mov	r5, r1
        stream_(&stream) {
 23fa8fc:	4668      	mov	r0, sp
 23fa8fe:	4619      	mov	r1, r3
 23fa900:	f7fb fc10 	bl	23f6124 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fa904:	4b0b      	ldr	r3, [pc, #44]	; (23fa934 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fa906:	4669      	mov	r1, sp
 23fa908:	f846 3b04 	str.w	r3, [r6], #4
 23fa90c:	a803      	add	r0, sp, #12
 23fa90e:	f7fb fc09 	bl	23f6124 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fa912:	4639      	mov	r1, r7
 23fa914:	aa03      	add	r2, sp, #12
 23fa916:	4630      	mov	r0, r6
 23fa918:	f7ff fef0 	bl	23fa6fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fa91c:	a803      	add	r0, sp, #12
 23fa91e:	f7fb fbc0 	bl	23f60a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fa922:	4668      	mov	r0, sp
 23fa924:	f7fb fbbd 	bl	23f60a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fa928:	4620      	mov	r0, r4
        stream_(&stream) {
 23fa92a:	4b03      	ldr	r3, [pc, #12]	; (23fa938 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fa92c:	6225      	str	r5, [r4, #32]
 23fa92e:	6023      	str	r3, [r4, #0]
}
 23fa930:	b007      	add	sp, #28
 23fa932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fa934:	023ff240 	.word	0x023ff240
 23fa938:	023ffa6c 	.word	0x023ffa6c

023fa93c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fa93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa93e:	460f      	mov	r7, r1
 23fa940:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fa942:	4638      	mov	r0, r7
 23fa944:	491c      	ldr	r1, [pc, #112]	; (23fa9b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fa946:	4616      	mov	r6, r2
 23fa948:	461d      	mov	r5, r3
 23fa94a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fa94c:	f7fb fad4 	bl	23f5ef8 <strcmp>
 23fa950:	b9c0      	cbnz	r0, 23fa984 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fa952:	b1a4      	cbz	r4, 23fa97e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fa954:	4629      	mov	r1, r5
 23fa956:	a801      	add	r0, sp, #4
 23fa958:	f7ff fd01 	bl	23fa35e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fa95c:	2024      	movs	r0, #36	; 0x24
 23fa95e:	4917      	ldr	r1, [pc, #92]	; (23fa9bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fa960:	f002 fb02 	bl	23fcf68 <_ZnwjRKSt9nothrow_t>
 23fa964:	4605      	mov	r5, r0
 23fa966:	b130      	cbz	r0, 23fa976 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fa968:	ab01      	add	r3, sp, #4
 23fa96a:	4632      	mov	r2, r6
 23fa96c:	4621      	mov	r1, r4
 23fa96e:	f7ff ffbf 	bl	23fa8f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fa972:	4b13      	ldr	r3, [pc, #76]	; (23fa9c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fa974:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fa976:	a801      	add	r0, sp, #4
 23fa978:	f7fb fb93 	bl	23f60a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fa97c:	462c      	mov	r4, r5
}
 23fa97e:	4620      	mov	r0, r4
 23fa980:	b005      	add	sp, #20
 23fa982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fa984:	4638      	mov	r0, r7
 23fa986:	490f      	ldr	r1, [pc, #60]	; (23fa9c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fa988:	f7fb fab6 	bl	23f5ef8 <strcmp>
 23fa98c:	b990      	cbnz	r0, 23fa9b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fa98e:	2c00      	cmp	r4, #0
 23fa990:	d0f5      	beq.n	23fa97e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fa992:	4629      	mov	r1, r5
 23fa994:	a801      	add	r0, sp, #4
 23fa996:	f7ff fce2 	bl	23fa35e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fa99a:	2024      	movs	r0, #36	; 0x24
 23fa99c:	4907      	ldr	r1, [pc, #28]	; (23fa9bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fa99e:	f002 fae3 	bl	23fcf68 <_ZnwjRKSt9nothrow_t>
 23fa9a2:	4605      	mov	r5, r0
 23fa9a4:	2800      	cmp	r0, #0
 23fa9a6:	d0e6      	beq.n	23fa976 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fa9a8:	4632      	mov	r2, r6
 23fa9aa:	4621      	mov	r1, r4
 23fa9ac:	ab01      	add	r3, sp, #4
 23fa9ae:	f7ff ff9f 	bl	23fa8f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fa9b2:	e7e0      	b.n	23fa976 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fa9b4:	2400      	movs	r4, #0
 23fa9b6:	e7e2      	b.n	23fa97e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fa9b8:	023ff9f0 	.word	0x023ff9f0
 23fa9bc:	023ffc10 	.word	0x023ffc10
 23fa9c0:	023ffa84 	.word	0x023ffa84
 23fa9c4:	023ff9f4 	.word	0x023ff9f4

023fa9c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fa9c8:	4b01      	ldr	r3, [pc, #4]	; (23fa9d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fa9ca:	4a02      	ldr	r2, [pc, #8]	; (23fa9d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fa9cc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fa9ce:	4770      	bx	lr
 23fa9d0:	1007aeb4 	.word	0x1007aeb4
 23fa9d4:	023ffa05 	.word	0x023ffa05

023fa9d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fa9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fa9dc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fa9de:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fa9e2:	4604      	mov	r4, r0
 23fa9e4:	460e      	mov	r6, r1
 23fa9e6:	4617      	mov	r7, r2
 23fa9e8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fa9ea:	f000 fcd9 	bl	23fb3a0 <_Z16_fetch_usbserialv>
 23fa9ee:	4581      	cmp	r9, r0
 23fa9f0:	d04d      	beq.n	23faa8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fa9f2:	792b      	ldrb	r3, [r5, #4]
 23fa9f4:	0719      	lsls	r1, r3, #28
 23fa9f6:	d504      	bpl.n	23faa02 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fa9f8:	4620      	mov	r0, r4
 23fa9fa:	696a      	ldr	r2, [r5, #20]
 23fa9fc:	4954      	ldr	r1, [pc, #336]	; (23fab50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fa9fe:	f7ff fb12 	bl	23fa026 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23faa02:	f1b8 0f00 	cmp.w	r8, #0
 23faa06:	d00d      	beq.n	23faa24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23faa08:	215b      	movs	r1, #91	; 0x5b
 23faa0a:	4620      	mov	r0, r4
 23faa0c:	f7ff fa9a 	bl	23f9f44 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23faa10:	4641      	mov	r1, r8
 23faa12:	4620      	mov	r0, r4
 23faa14:	f7ff fa87 	bl	23f9f26 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23faa18:	6823      	ldr	r3, [r4, #0]
 23faa1a:	2202      	movs	r2, #2
 23faa1c:	4620      	mov	r0, r4
 23faa1e:	68db      	ldr	r3, [r3, #12]
 23faa20:	494c      	ldr	r1, [pc, #304]	; (23fab54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23faa22:	4798      	blx	r3
    if (attr.has_file) {
 23faa24:	792b      	ldrb	r3, [r5, #4]
 23faa26:	07da      	lsls	r2, r3, #31
 23faa28:	d524      	bpl.n	23faa74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23faa2a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23faa2e:	212f      	movs	r1, #47	; 0x2f
 23faa30:	4640      	mov	r0, r8
 23faa32:	f002 fc2a 	bl	23fd28a <strrchr>
    if (s1) {
 23faa36:	b108      	cbz	r0, 23faa3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23faa38:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23faa3c:	4641      	mov	r1, r8
 23faa3e:	4620      	mov	r0, r4
 23faa40:	f7ff fa71 	bl	23f9f26 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23faa44:	792b      	ldrb	r3, [r5, #4]
 23faa46:	079b      	lsls	r3, r3, #30
 23faa48:	d508      	bpl.n	23faa5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23faa4a:	213a      	movs	r1, #58	; 0x3a
 23faa4c:	4620      	mov	r0, r4
 23faa4e:	f7ff fa79 	bl	23f9f44 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23faa52:	4620      	mov	r0, r4
 23faa54:	68ea      	ldr	r2, [r5, #12]
 23faa56:	4940      	ldr	r1, [pc, #256]	; (23fab58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23faa58:	f7ff fae5 	bl	23fa026 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23faa5c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23faa5e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23faa60:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23faa64:	4620      	mov	r0, r4
            write(", ", 2);
 23faa66:	f04f 0202 	mov.w	r2, #2
 23faa6a:	68db      	ldr	r3, [r3, #12]
 23faa6c:	bf14      	ite	ne
 23faa6e:	493b      	ldrne	r1, [pc, #236]	; (23fab5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23faa70:	493b      	ldreq	r1, [pc, #236]	; (23fab60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23faa72:	4798      	blx	r3
    if (attr.has_function) {
 23faa74:	792b      	ldrb	r3, [r5, #4]
 23faa76:	0758      	lsls	r0, r3, #29
 23faa78:	d51d      	bpl.n	23faab6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23faa7a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23faa7c:	460b      	mov	r3, r1
 23faa7e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23faa80:	f813 0b01 	ldrb.w	r0, [r3], #1
 23faa84:	b160      	cbz	r0, 23faaa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23faa86:	2820      	cmp	r0, #32
 23faa88:	d108      	bne.n	23faa9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23faa8a:	4619      	mov	r1, r3
 23faa8c:	e7f7      	b.n	23faa7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23faa8e:	4835      	ldr	r0, [pc, #212]	; (23fab64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23faa90:	f000 f983 	bl	23fad9a <_ZN5spark12NetworkClass9listeningEv>
 23faa94:	2800      	cmp	r0, #0
 23faa96:	d0ac      	beq.n	23fa9f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23faa98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23faa9c:	2828      	cmp	r0, #40	; 0x28
 23faa9e:	d1ee      	bne.n	23faa7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23faaa0:	6823      	ldr	r3, [r4, #0]
 23faaa2:	1a52      	subs	r2, r2, r1
 23faaa4:	4620      	mov	r0, r4
 23faaa6:	68db      	ldr	r3, [r3, #12]
 23faaa8:	4798      	blx	r3
        write("(): ", 4);
 23faaaa:	6823      	ldr	r3, [r4, #0]
 23faaac:	2204      	movs	r2, #4
 23faaae:	4620      	mov	r0, r4
 23faab0:	68db      	ldr	r3, [r3, #12]
 23faab2:	492d      	ldr	r1, [pc, #180]	; (23fab68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23faab4:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23faab6:	2100      	movs	r1, #0
 23faab8:	4638      	mov	r0, r7
 23faaba:	f7fd fea5 	bl	23f8808 <log_level_name>
 23faabe:	4601      	mov	r1, r0
    write(s);
 23faac0:	4620      	mov	r0, r4
 23faac2:	f7ff fa30 	bl	23f9f26 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23faac6:	6823      	ldr	r3, [r4, #0]
 23faac8:	2202      	movs	r2, #2
 23faaca:	4620      	mov	r0, r4
 23faacc:	68db      	ldr	r3, [r3, #12]
 23faace:	4924      	ldr	r1, [pc, #144]	; (23fab60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23faad0:	4798      	blx	r3
    if (msg) {
 23faad2:	b11e      	cbz	r6, 23faadc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23faad4:	4631      	mov	r1, r6
 23faad6:	4620      	mov	r0, r4
 23faad8:	f7ff fa25 	bl	23f9f26 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23faadc:	792b      	ldrb	r3, [r5, #4]
 23faade:	f013 0f30 	tst.w	r3, #48	; 0x30
 23faae2:	d02c      	beq.n	23fab3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23faae4:	6823      	ldr	r3, [r4, #0]
 23faae6:	4921      	ldr	r1, [pc, #132]	; (23fab6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23faae8:	68db      	ldr	r3, [r3, #12]
 23faaea:	2202      	movs	r2, #2
 23faaec:	4620      	mov	r0, r4
 23faaee:	4798      	blx	r3
        if (attr.has_code) {
 23faaf0:	792b      	ldrb	r3, [r5, #4]
 23faaf2:	06d9      	lsls	r1, r3, #27
 23faaf4:	d50a      	bpl.n	23fab0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23faaf6:	6823      	ldr	r3, [r4, #0]
 23faaf8:	2207      	movs	r2, #7
 23faafa:	4620      	mov	r0, r4
 23faafc:	491c      	ldr	r1, [pc, #112]	; (23fab70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23faafe:	68db      	ldr	r3, [r3, #12]
 23fab00:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fab02:	4620      	mov	r0, r4
 23fab04:	69aa      	ldr	r2, [r5, #24]
 23fab06:	491b      	ldr	r1, [pc, #108]	; (23fab74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fab08:	f7ff fa8d 	bl	23fa026 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fab0c:	792b      	ldrb	r3, [r5, #4]
 23fab0e:	069a      	lsls	r2, r3, #26
 23fab10:	d511      	bpl.n	23fab36 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fab12:	06db      	lsls	r3, r3, #27
 23fab14:	d505      	bpl.n	23fab22 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fab16:	6823      	ldr	r3, [r4, #0]
 23fab18:	2202      	movs	r2, #2
 23fab1a:	4620      	mov	r0, r4
 23fab1c:	68db      	ldr	r3, [r3, #12]
 23fab1e:	490f      	ldr	r1, [pc, #60]	; (23fab5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fab20:	4798      	blx	r3
            write("details = ", 10);
 23fab22:	6823      	ldr	r3, [r4, #0]
 23fab24:	4620      	mov	r0, r4
 23fab26:	4914      	ldr	r1, [pc, #80]	; (23fab78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fab28:	220a      	movs	r2, #10
 23fab2a:	68db      	ldr	r3, [r3, #12]
 23fab2c:	4798      	blx	r3
            write(attr.details);
 23fab2e:	4620      	mov	r0, r4
 23fab30:	69e9      	ldr	r1, [r5, #28]
 23fab32:	f7ff f9f8 	bl	23f9f26 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fab36:	215d      	movs	r1, #93	; 0x5d
 23fab38:	4620      	mov	r0, r4
 23fab3a:	f7ff fa03 	bl	23f9f44 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fab3e:	6823      	ldr	r3, [r4, #0]
 23fab40:	4620      	mov	r0, r4
}
 23fab42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fab46:	2202      	movs	r2, #2
 23fab48:	68db      	ldr	r3, [r3, #12]
 23fab4a:	490c      	ldr	r1, [pc, #48]	; (23fab7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fab4c:	4718      	bx	r3
 23fab4e:	bf00      	nop
 23fab50:	023ffa09 	.word	0x023ffa09
 23fab54:	023ffa10 	.word	0x023ffa10
 23fab58:	023ff841 	.word	0x023ff841
 23fab5c:	023ffa13 	.word	0x023ffa13
 23fab60:	023ffa18 	.word	0x023ffa18
 23fab64:	1007aee0 	.word	0x1007aee0
 23fab68:	023ffa16 	.word	0x023ffa16
 23fab6c:	023ffa1b 	.word	0x023ffa1b
 23fab70:	023ffa1e 	.word	0x023ffa1e
 23fab74:	023ffa26 	.word	0x023ffa26
 23fab78:	023ffa29 	.word	0x023ffa29
 23fab7c:	023ffa34 	.word	0x023ffa34

023fab80 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fab80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fab84:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fab86:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fab88:	460d      	mov	r5, r1
 23fab8a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fab8c:	f000 fc08 	bl	23fb3a0 <_Z16_fetch_usbserialv>
 23fab90:	4287      	cmp	r7, r0
 23fab92:	d007      	beq.n	23faba4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fab94:	6a20      	ldr	r0, [r4, #32]
 23fab96:	4632      	mov	r2, r6
 23fab98:	6803      	ldr	r3, [r0, #0]
 23fab9a:	4629      	mov	r1, r5
}
 23fab9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23faba0:	68db      	ldr	r3, [r3, #12]
 23faba2:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23faba4:	4803      	ldr	r0, [pc, #12]	; (23fabb4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23faba6:	f000 f8f8 	bl	23fad9a <_ZN5spark12NetworkClass9listeningEv>
 23fabaa:	2800      	cmp	r0, #0
 23fabac:	d0f2      	beq.n	23fab94 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fabae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fabb2:	bf00      	nop
 23fabb4:	1007aee0 	.word	0x1007aee0

023fabb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fabb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fabbc:	b085      	sub	sp, #20
    return stream_;
 23fabbe:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fabc2:	4605      	mov	r5, r0
 23fabc4:	460f      	mov	r7, r1
 23fabc6:	4690      	mov	r8, r2
 23fabc8:	461e      	mov	r6, r3
 23fabca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fabcc:	f000 fbe8 	bl	23fb3a0 <_Z16_fetch_usbserialv>
 23fabd0:	4581      	cmp	r9, r0
 23fabd2:	d105      	bne.n	23fabe0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fabd4:	4849      	ldr	r0, [pc, #292]	; (23facfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fabd6:	f000 f8e0 	bl	23fad9a <_ZN5spark12NetworkClass9listeningEv>
 23fabda:	2800      	cmp	r0, #0
 23fabdc:	f040 808a 	bne.w	23facf4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fabe0:	f04f 0900 	mov.w	r9, #0
 23fabe4:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
 23fabe6:	4a46      	ldr	r2, [pc, #280]	; (23fad00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fabe8:	4668      	mov	r0, sp
 23fabea:	e9cd 3902 	strd	r3, r9, [sp, #8]
 23fabee:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
 23fabf0:	f88d 9004 	strb.w	r9, [sp, #4]
 23fabf4:	f7fe fcea 	bl	23f95cc <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fabf8:	4649      	mov	r1, r9
 23fabfa:	4640      	mov	r0, r8
 23fabfc:	f7fd fe04 	bl	23f8808 <log_level_name>
 23fac00:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fac02:	4940      	ldr	r1, [pc, #256]	; (23fad04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fac04:	2201      	movs	r2, #1
 23fac06:	4668      	mov	r0, sp
 23fac08:	f7fe fd6e 	bl	23f96e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fac0c:	4641      	mov	r1, r8
 23fac0e:	f7ff f97c 	bl	23f9f0a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fac12:	b13f      	cbz	r7, 23fac24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
 23fac14:	493c      	ldr	r1, [pc, #240]	; (23fad08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fac16:	2201      	movs	r2, #1
 23fac18:	4668      	mov	r0, sp
 23fac1a:	f7fe fd65 	bl	23f96e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fac1e:	4639      	mov	r1, r7
 23fac20:	f7ff f973 	bl	23f9f0a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fac24:	b13e      	cbz	r6, 23fac36 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
 23fac26:	4939      	ldr	r1, [pc, #228]	; (23fad0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fac28:	2201      	movs	r2, #1
 23fac2a:	4668      	mov	r0, sp
 23fac2c:	f7fe fd5c 	bl	23f96e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fac30:	4631      	mov	r1, r6
 23fac32:	f7ff f96a 	bl	23f9f0a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fac36:	7923      	ldrb	r3, [r4, #4]
 23fac38:	07df      	lsls	r7, r3, #31
 23fac3a:	d50e      	bpl.n	23fac5a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
 23fac3c:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fac3e:	212f      	movs	r1, #47	; 0x2f
 23fac40:	4630      	mov	r0, r6
 23fac42:	f002 fb22 	bl	23fd28a <strrchr>
    if (s1) {
 23fac46:	b100      	cbz	r0, 23fac4a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
 23fac48:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fac4a:	4931      	ldr	r1, [pc, #196]	; (23fad10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fac4c:	2201      	movs	r2, #1
 23fac4e:	4668      	mov	r0, sp
 23fac50:	f7fe fd4a 	bl	23f96e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fac54:	4631      	mov	r1, r6
 23fac56:	f7ff f958 	bl	23f9f0a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fac5a:	7923      	ldrb	r3, [r4, #4]
 23fac5c:	079e      	lsls	r6, r3, #30
 23fac5e:	d507      	bpl.n	23fac70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
 23fac60:	492c      	ldr	r1, [pc, #176]	; (23fad14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fac62:	2202      	movs	r2, #2
 23fac64:	4668      	mov	r0, sp
 23fac66:	f7fe fd3f 	bl	23f96e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fac6a:	68e1      	ldr	r1, [r4, #12]
 23fac6c:	f7fe fcba 	bl	23f95e4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fac70:	7923      	ldrb	r3, [r4, #4]
 23fac72:	0758      	lsls	r0, r3, #29
 23fac74:	d514      	bpl.n	23faca0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fac76:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fac78:	4633      	mov	r3, r6
 23fac7a:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fac7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fac80:	b12a      	cbz	r2, 23fac8e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
 23fac82:	2a20      	cmp	r2, #32
 23fac84:	d101      	bne.n	23fac8a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
 23fac86:	461e      	mov	r6, r3
 23fac88:	e7f7      	b.n	23fac7a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
 23fac8a:	2a28      	cmp	r2, #40	; 0x28
 23fac8c:	d1f5      	bne.n	23fac7a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
 23fac8e:	2202      	movs	r2, #2
 23fac90:	4921      	ldr	r1, [pc, #132]	; (23fad18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fac92:	4668      	mov	r0, sp
 23fac94:	f7fe fd28 	bl	23f96e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fac98:	4631      	mov	r1, r6
 23fac9a:	1bba      	subs	r2, r7, r6
 23fac9c:	f7fe fd34 	bl	23f9708 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23faca0:	7923      	ldrb	r3, [r4, #4]
 23faca2:	0719      	lsls	r1, r3, #28
 23faca4:	d507      	bpl.n	23facb6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
 23faca6:	491d      	ldr	r1, [pc, #116]	; (23fad1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23faca8:	2201      	movs	r2, #1
 23facaa:	4668      	mov	r0, sp
 23facac:	f7fe fd1c 	bl	23f96e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23facb0:	6961      	ldr	r1, [r4, #20]
 23facb2:	f7fe fca9 	bl	23f9608 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23facb6:	7923      	ldrb	r3, [r4, #4]
 23facb8:	06da      	lsls	r2, r3, #27
 23facba:	d507      	bpl.n	23faccc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23facbc:	4918      	ldr	r1, [pc, #96]	; (23fad20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23facbe:	2204      	movs	r2, #4
 23facc0:	4668      	mov	r0, sp
 23facc2:	f7fe fd11 	bl	23f96e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23facc6:	69a1      	ldr	r1, [r4, #24]
 23facc8:	f7fe fc8c 	bl	23f95e4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23faccc:	7923      	ldrb	r3, [r4, #4]
 23facce:	069b      	lsls	r3, r3, #26
 23facd0:	d507      	bpl.n	23face2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23facd2:	4914      	ldr	r1, [pc, #80]	; (23fad24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23facd4:	2206      	movs	r2, #6
 23facd6:	4668      	mov	r0, sp
 23facd8:	f7fe fd06 	bl	23f96e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23facdc:	69e1      	ldr	r1, [r4, #28]
 23facde:	f7ff f914 	bl	23f9f0a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23face2:	4668      	mov	r0, sp
 23face4:	f7fe fc5c 	bl	23f95a0 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23face8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23facea:	2202      	movs	r2, #2
 23facec:	6803      	ldr	r3, [r0, #0]
 23facee:	490e      	ldr	r1, [pc, #56]	; (23fad28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23facf0:	68db      	ldr	r3, [r3, #12]
 23facf2:	4798      	blx	r3
}
 23facf4:	b005      	add	sp, #20
 23facf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23facfa:	bf00      	nop
 23facfc:	1007aee0 	.word	0x1007aee0
 23fad00:	023ffa54 	.word	0x023ffa54
 23fad04:	023ff9e6 	.word	0x023ff9e6
 23fad08:	023ffa37 	.word	0x023ffa37
 23fad0c:	023ffec2 	.word	0x023ffec2
 23fad10:	023ffc82 	.word	0x023ffc82
 23fad14:	023ffa39 	.word	0x023ffa39
 23fad18:	023ffa3c 	.word	0x023ffa3c
 23fad1c:	023ff31d 	.word	0x023ff31d
 23fad20:	023ffa3f 	.word	0x023ffa3f
 23fad24:	023ffa44 	.word	0x023ffa44
 23fad28:	023ffa34 	.word	0x023ffa34

023fad2c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fad2c:	2300      	movs	r3, #0
 23fad2e:	6840      	ldr	r0, [r0, #4]
 23fad30:	461a      	mov	r2, r3
 23fad32:	f7fd bed5 	b.w	23f8ae0 <network_connect>

023fad36 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fad36:	2200      	movs	r2, #0
 23fad38:	2102      	movs	r1, #2
 23fad3a:	6840      	ldr	r0, [r0, #4]
 23fad3c:	f7fd beec 	b.w	23f8b18 <network_disconnect>

023fad40 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fad40:	2200      	movs	r2, #0
 23fad42:	6840      	ldr	r0, [r0, #4]
 23fad44:	4611      	mov	r1, r2
 23fad46:	f7fd bed9 	b.w	23f8afc <network_connecting>

023fad4a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fad4a:	2200      	movs	r2, #0
 23fad4c:	6840      	ldr	r0, [r0, #4]
 23fad4e:	4611      	mov	r1, r2
 23fad50:	f7fd bef0 	b.w	23f8b34 <network_ready>

023fad54 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fad54:	2300      	movs	r3, #0
 23fad56:	6840      	ldr	r0, [r0, #4]
 23fad58:	461a      	mov	r2, r3
 23fad5a:	4619      	mov	r1, r3
 23fad5c:	f7fd bef8 	b.w	23f8b50 <network_on>

023fad60 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fad60:	2300      	movs	r3, #0
 23fad62:	6840      	ldr	r0, [r0, #4]
 23fad64:	461a      	mov	r2, r3
 23fad66:	4619      	mov	r1, r3
 23fad68:	f7fd bf00 	b.w	23f8b6c <network_off>

023fad6c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fad6c:	2100      	movs	r1, #0
 23fad6e:	6840      	ldr	r0, [r0, #4]
 23fad70:	f7fd bf42 	b.w	23f8bf8 <network_is_on>

023fad74 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fad74:	2100      	movs	r1, #0
 23fad76:	6840      	ldr	r0, [r0, #4]
 23fad78:	f7fd bf4c 	b.w	23f8c14 <network_is_off>

023fad7c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fad7c:	2200      	movs	r2, #0
 23fad7e:	6840      	ldr	r0, [r0, #4]
 23fad80:	f081 0101 	eor.w	r1, r1, #1
 23fad84:	f7fd bf00 	b.w	23f8b88 <network_listen>

023fad88 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fad88:	2200      	movs	r2, #0
 23fad8a:	6840      	ldr	r0, [r0, #4]
 23fad8c:	f7fd bf18 	b.w	23f8bc0 <network_set_listen_timeout>

023fad90 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fad90:	2200      	movs	r2, #0
 23fad92:	6840      	ldr	r0, [r0, #4]
 23fad94:	4611      	mov	r1, r2
 23fad96:	f7fd bf21 	b.w	23f8bdc <network_get_listen_timeout>

023fad9a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fad9a:	2200      	movs	r2, #0
 23fad9c:	6840      	ldr	r0, [r0, #4]
 23fad9e:	4611      	mov	r1, r2
 23fada0:	f7fd bf00 	b.w	23f8ba4 <network_listening>

023fada4 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23fada4:	2100      	movs	r1, #0
 23fada6:	6840      	ldr	r0, [r0, #4]
 23fada8:	f7fd bf50 	b.w	23f8c4c <network_is_preferred>

023fadac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fadac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fadb0:	b095      	sub	sp, #84	; 0x54
 23fadb2:	4614      	mov	r4, r2
 23fadb4:	460d      	mov	r5, r1
 23fadb6:	4607      	mov	r7, r0
    IPAddress addr;
 23fadb8:	f7fe f932 	bl	23f9020 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fadbc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fadbe:	221c      	movs	r2, #28
 23fadc0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fadc2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fadc4:	f002 f9f7 	bl	23fd1b6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fadc8:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fadca:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fadcc:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fadce:	2100      	movs	r1, #0
 23fadd0:	466b      	mov	r3, sp
 23fadd2:	aa0c      	add	r2, sp, #48	; 0x30
 23fadd4:	f7fd fbc8 	bl	23f8568 <netdb_getaddrinfo>
    if (!r) {
 23fadd8:	4604      	mov	r4, r0
 23fadda:	2800      	cmp	r0, #0
 23faddc:	d14b      	bne.n	23fae76 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fadde:	4602      	mov	r2, r0
 23fade0:	2101      	movs	r1, #1
 23fade2:	6868      	ldr	r0, [r5, #4]
 23fade4:	f7fd fea6 	bl	23f8b34 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fade8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fadea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fadec:	4622      	mov	r2, r4
 23fadee:	6868      	ldr	r0, [r5, #4]
 23fadf0:	f7fd fea0 	bl	23f8b34 <network_ready>
        bool ok = false;
 23fadf4:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fadf6:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fadf8:	9e00      	ldr	r6, [sp, #0]
 23fadfa:	2e00      	cmp	r6, #0
 23fadfc:	d03b      	beq.n	23fae76 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fadfe:	2900      	cmp	r1, #0
 23fae00:	d139      	bne.n	23fae76 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fae02:	6873      	ldr	r3, [r6, #4]
 23fae04:	2b02      	cmp	r3, #2
 23fae06:	d003      	beq.n	23fae10 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fae08:	2b0a      	cmp	r3, #10
 23fae0a:	d011      	beq.n	23fae30 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fae0c:	69f6      	ldr	r6, [r6, #28]
 23fae0e:	e7f4      	b.n	23fadfa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fae10:	f1b8 0f00 	cmp.w	r8, #0
 23fae14:	d0fa      	beq.n	23fae0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fae16:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fae18:	a806      	add	r0, sp, #24
 23fae1a:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fae1c:	1d3c      	adds	r4, r7, #4
 23fae1e:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fae20:	f7fe f92c 	bl	23f907c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fae24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fae26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fae28:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fae2a:	4641      	mov	r1, r8
 23fae2c:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fae2e:	e7ed      	b.n	23fae0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fae30:	f1b9 0f00 	cmp.w	r9, #0
 23fae34:	d0ea      	beq.n	23fae0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fae36:	2210      	movs	r2, #16
 23fae38:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fae3a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fae3c:	f002 f9bb 	bl	23fd1b6 <memset>
                    a.v = 6;
 23fae40:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fae42:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fae44:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fae48:	f104 0308 	add.w	r3, r4, #8
 23fae4c:	3418      	adds	r4, #24
 23fae4e:	462a      	mov	r2, r5
 23fae50:	6818      	ldr	r0, [r3, #0]
 23fae52:	6859      	ldr	r1, [r3, #4]
 23fae54:	3308      	adds	r3, #8
 23fae56:	c203      	stmia	r2!, {r0, r1}
 23fae58:	42a3      	cmp	r3, r4
 23fae5a:	4615      	mov	r5, r2
 23fae5c:	d1f7      	bne.n	23fae4e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fae5e:	a901      	add	r1, sp, #4
 23fae60:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fae62:	1d3c      	adds	r4, r7, #4
 23fae64:	ad07      	add	r5, sp, #28
 23fae66:	f7fe f8e9 	bl	23f903c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fae6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fae6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fae6e:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fae70:	4649      	mov	r1, r9
 23fae72:	7023      	strb	r3, [r4, #0]
                    break;
 23fae74:	e7ca      	b.n	23fae0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fae76:	9800      	ldr	r0, [sp, #0]
 23fae78:	f7fd fb68 	bl	23f854c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fae7c:	4638      	mov	r0, r7
 23fae7e:	b015      	add	sp, #84	; 0x54
 23fae80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fae84 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23fae84:	3803      	subs	r0, #3
 23fae86:	2803      	cmp	r0, #3
 23fae88:	bf9a      	itte	ls
 23fae8a:	4b02      	ldrls	r3, [pc, #8]	; (23fae94 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23fae8c:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23fae90:	4801      	ldrhi	r0, [pc, #4]	; (23fae98 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23fae92:	4770      	bx	lr
 23fae94:	023ffac4 	.word	0x023ffac4
 23fae98:	1007aee0 	.word	0x1007aee0

023fae9c <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23fae9c:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23fae9e:	2200      	movs	r2, #0
 23faea0:	6840      	ldr	r0, [r0, #4]
 23faea2:	f7fd fec5 	bl	23f8c30 <network_prefer>
}
 23faea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23faeaa:	f7ff bfeb 	b.w	23fae84 <_ZN5spark12NetworkClass4fromEm>
	...

023faeb0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23faeb0:	4b02      	ldr	r3, [pc, #8]	; (23faebc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23faeb2:	4a03      	ldr	r2, [pc, #12]	; (23faec0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23faeb4:	601a      	str	r2, [r3, #0]
 23faeb6:	2200      	movs	r2, #0
 23faeb8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23faeba:	4770      	bx	lr
 23faebc:	1007aee0 	.word	0x1007aee0
 23faec0:	023ffadc 	.word	0x023ffadc

023faec4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23faec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23faec6:	4606      	mov	r6, r0
 23faec8:	460d      	mov	r5, r1
  size_t n = 0;
 23faeca:	2400      	movs	r4, #0
 23faecc:	188f      	adds	r7, r1, r2
  while (size--) {
 23faece:	42bd      	cmp	r5, r7
 23faed0:	d00c      	beq.n	23faeec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23faed2:	6833      	ldr	r3, [r6, #0]
 23faed4:	4630      	mov	r0, r6
 23faed6:	689b      	ldr	r3, [r3, #8]
 23faed8:	f815 1b01 	ldrb.w	r1, [r5], #1
 23faedc:	4798      	blx	r3
     if (chunk>=0)
 23faede:	1e03      	subs	r3, r0, #0
 23faee0:	db01      	blt.n	23faee6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23faee2:	441c      	add	r4, r3
  while (size--) {
 23faee4:	e7f3      	b.n	23faece <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23faee6:	2c00      	cmp	r4, #0
 23faee8:	bf08      	it	eq
 23faeea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23faeec:	4620      	mov	r0, r4
 23faeee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023faef0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23faef0:	b513      	push	{r0, r1, r4, lr}
 23faef2:	4604      	mov	r4, r0
    }
 23faef4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23faef6:	b159      	cbz	r1, 23faf10 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23faef8:	9101      	str	r1, [sp, #4]
 23faefa:	f7fb f807 	bl	23f5f0c <strlen>
 23faefe:	4602      	mov	r2, r0
 23faf00:	4620      	mov	r0, r4
 23faf02:	6823      	ldr	r3, [r4, #0]
 23faf04:	9901      	ldr	r1, [sp, #4]
 23faf06:	68db      	ldr	r3, [r3, #12]
    }
 23faf08:	b002      	add	sp, #8
 23faf0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23faf0e:	4718      	bx	r3
    }
 23faf10:	b002      	add	sp, #8
 23faf12:	bd10      	pop	{r4, pc}

023faf14 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23faf14:	6803      	ldr	r3, [r0, #0]
 23faf16:	689b      	ldr	r3, [r3, #8]
 23faf18:	4718      	bx	r3

023faf1a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23faf1a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23faf1c:	2a01      	cmp	r2, #1
 23faf1e:	bf98      	it	ls
 23faf20:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23faf22:	b530      	push	{r4, r5, lr}
 23faf24:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23faf26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23faf2a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23faf2c:	460d      	mov	r5, r1
 23faf2e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23faf32:	fb01 5312 	mls	r3, r1, r2, r5
 23faf36:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23faf3a:	2b09      	cmp	r3, #9
 23faf3c:	bf94      	ite	ls
 23faf3e:	3330      	addls	r3, #48	; 0x30
 23faf40:	3337      	addhi	r3, #55	; 0x37
 23faf42:	b2db      	uxtb	r3, r3
  } while(n);
 23faf44:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23faf46:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23faf4a:	d9ef      	bls.n	23faf2c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23faf4c:	4621      	mov	r1, r4
 23faf4e:	f7ff ffcf 	bl	23faef0 <_ZN5Print5writeEPKc>
}
 23faf52:	b00b      	add	sp, #44	; 0x2c
 23faf54:	bd30      	pop	{r4, r5, pc}
	...

023faf58 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23faf58:	2200      	movs	r2, #0
 23faf5a:	4b01      	ldr	r3, [pc, #4]	; (23faf60 <_GLOBAL__sub_I_RGB+0x8>)
 23faf5c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23faf5e:	4770      	bx	lr
 23faf60:	1007aee8 	.word	0x1007aee8

023faf64 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23faf64:	b510      	push	{r4, lr}
 23faf66:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23faf68:	f7fd fac6 	bl	23f84f8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23faf6c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23faf6e:	6823      	ldr	r3, [r4, #0]
 23faf70:	4620      	mov	r0, r4
 23faf72:	695b      	ldr	r3, [r3, #20]
 23faf74:	4798      	blx	r3
    if (c >= 0) return c;
 23faf76:	2800      	cmp	r0, #0
 23faf78:	da08      	bge.n	23faf8c <_ZN6Stream9timedReadEv+0x28>
 23faf7a:	f7fd fabd 	bl	23f84f8 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23faf7e:	68e3      	ldr	r3, [r4, #12]
 23faf80:	1ac0      	subs	r0, r0, r3
 23faf82:	68a3      	ldr	r3, [r4, #8]
 23faf84:	4298      	cmp	r0, r3
 23faf86:	d3f2      	bcc.n	23faf6e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23faf88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23faf8c:	bd10      	pop	{r4, pc}

023faf8e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23faf8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23faf92:	4607      	mov	r7, r0
 23faf94:	460c      	mov	r4, r1
 23faf96:	460d      	mov	r5, r1
 23faf98:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23faf9a:	42b5      	cmp	r5, r6
 23faf9c:	eba5 0804 	sub.w	r8, r5, r4
 23fafa0:	d007      	beq.n	23fafb2 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23fafa2:	4638      	mov	r0, r7
 23fafa4:	f7ff ffde 	bl	23faf64 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23fafa8:	1e03      	subs	r3, r0, #0
 23fafaa:	db02      	blt.n	23fafb2 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23fafac:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23fafb0:	e7f3      	b.n	23faf9a <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23fafb2:	4640      	mov	r0, r8
 23fafb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fafb8 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fafb8:	b510      	push	{r4, lr}
 23fafba:	4604      	mov	r4, r0
{
    free(buffer);
 23fafbc:	6800      	ldr	r0, [r0, #0]
 23fafbe:	f7fd fe61 	bl	23f8c84 <free>
}
 23fafc2:	4620      	mov	r0, r4
 23fafc4:	bd10      	pop	{r4, pc}

023fafc6 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fafc6:	b510      	push	{r4, lr}
 23fafc8:	4604      	mov	r4, r0
    if (buffer) {
 23fafca:	6800      	ldr	r0, [r0, #0]
 23fafcc:	b108      	cbz	r0, 23fafd2 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fafce:	f7fd fe59 	bl	23f8c84 <free>
    }
    buffer = nullptr;
 23fafd2:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23fafd4:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fafd8:	6023      	str	r3, [r4, #0]
}
 23fafda:	bd10      	pop	{r4, pc}

023fafdc <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fafdc:	b538      	push	{r3, r4, r5, lr}
 23fafde:	4604      	mov	r4, r0
 23fafe0:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fafe2:	6800      	ldr	r0, [r0, #0]
 23fafe4:	3101      	adds	r1, #1
 23fafe6:	f7fd fe5b 	bl	23f8ca0 <realloc>
    if (newbuffer) {
 23fafea:	b110      	cbz	r0, 23faff2 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23fafec:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23faff0:	2001      	movs	r0, #1
    }
    return 0;
}
 23faff2:	bd38      	pop	{r3, r4, r5, pc}

023faff4 <_ZN6String7reserveEj>:
{
 23faff4:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23faff6:	6803      	ldr	r3, [r0, #0]
{
 23faff8:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23faffa:	b123      	cbz	r3, 23fb006 <_ZN6String7reserveEj+0x12>
 23faffc:	6843      	ldr	r3, [r0, #4]
 23faffe:	428b      	cmp	r3, r1
 23fb000:	d301      	bcc.n	23fb006 <_ZN6String7reserveEj+0x12>
 23fb002:	2001      	movs	r0, #1
}
 23fb004:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fb006:	4620      	mov	r0, r4
 23fb008:	f7ff ffe8 	bl	23fafdc <_ZN6String12changeBufferEj>
 23fb00c:	2800      	cmp	r0, #0
 23fb00e:	d0f9      	beq.n	23fb004 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fb010:	68a3      	ldr	r3, [r4, #8]
 23fb012:	2b00      	cmp	r3, #0
 23fb014:	d1f5      	bne.n	23fb002 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fb016:	6822      	ldr	r2, [r4, #0]
 23fb018:	7013      	strb	r3, [r2, #0]
 23fb01a:	e7f2      	b.n	23fb002 <_ZN6String7reserveEj+0xe>

023fb01c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fb01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fb01e:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fb020:	4611      	mov	r1, r2
 23fb022:	9201      	str	r2, [sp, #4]
{
 23fb024:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fb026:	f7ff ffe5 	bl	23faff4 <_ZN6String7reserveEj>
 23fb02a:	9a01      	ldr	r2, [sp, #4]
 23fb02c:	b928      	cbnz	r0, 23fb03a <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fb02e:	4620      	mov	r0, r4
 23fb030:	f7ff ffc9 	bl	23fafc6 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fb034:	4620      	mov	r0, r4
 23fb036:	b003      	add	sp, #12
 23fb038:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fb03a:	4629      	mov	r1, r5
    len = length;
 23fb03c:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fb03e:	6820      	ldr	r0, [r4, #0]
 23fb040:	f002 f892 	bl	23fd168 <memcpy>
    buffer[len] = 0;
 23fb044:	2100      	movs	r1, #0
 23fb046:	6822      	ldr	r2, [r4, #0]
 23fb048:	68a3      	ldr	r3, [r4, #8]
 23fb04a:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fb04c:	e7f2      	b.n	23fb034 <_ZN6String4copyEPKcj+0x18>

023fb04e <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23fb04e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fb050:	b513      	push	{r0, r1, r4, lr}
 23fb052:	4604      	mov	r4, r0
    capacity_ = 0;
 23fb054:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fb058:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fb05a:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fb05c:	b141      	cbz	r1, 23fb070 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23fb05e:	4608      	mov	r0, r1
 23fb060:	9101      	str	r1, [sp, #4]
 23fb062:	f7fa ff53 	bl	23f5f0c <strlen>
 23fb066:	9901      	ldr	r1, [sp, #4]
 23fb068:	4602      	mov	r2, r0
 23fb06a:	4620      	mov	r0, r4
 23fb06c:	f7ff ffd6 	bl	23fb01c <_ZN6String4copyEPKcj>
}
 23fb070:	4620      	mov	r0, r4
 23fb072:	b002      	add	sp, #8
 23fb074:	bd10      	pop	{r4, pc}

023fb076 <_ZN6StringC1EPKcj>:
    buffer = nullptr;
 23fb076:	2300      	movs	r3, #0
String::String(const char *cstr, unsigned int length)
 23fb078:	b510      	push	{r4, lr}
 23fb07a:	4604      	mov	r4, r0
    capacity_ = 0;
 23fb07c:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fb080:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fb082:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fb084:	b109      	cbz	r1, 23fb08a <_ZN6StringC1EPKcj+0x14>
        copy(cstr, length);
 23fb086:	f7ff ffc9 	bl	23fb01c <_ZN6String4copyEPKcj>
}
 23fb08a:	4620      	mov	r0, r4
 23fb08c:	bd10      	pop	{r4, pc}

023fb08e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fb08e:	b538      	push	{r3, r4, r5, lr}
 23fb090:	4605      	mov	r5, r0
    if (buffer) {
 23fb092:	6800      	ldr	r0, [r0, #0]
{
 23fb094:	460c      	mov	r4, r1
    if (buffer) {
 23fb096:	b170      	cbz	r0, 23fb0b6 <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
 23fb098:	686a      	ldr	r2, [r5, #4]
 23fb09a:	688b      	ldr	r3, [r1, #8]
 23fb09c:	429a      	cmp	r2, r3
 23fb09e:	d308      	bcc.n	23fb0b2 <_ZN6String4moveERS_+0x24>
 23fb0a0:	6809      	ldr	r1, [r1, #0]
 23fb0a2:	b131      	cbz	r1, 23fb0b2 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fb0a4:	f002 f8d5 	bl	23fd252 <strcpy>
            len = rhs.len;
 23fb0a8:	68a3      	ldr	r3, [r4, #8]
 23fb0aa:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fb0ac:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
 23fb0ae:	60a3      	str	r3, [r4, #8]
}
 23fb0b0:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fb0b2:	f7fd fde7 	bl	23f8c84 <free>
    buffer = rhs.buffer;
 23fb0b6:	6823      	ldr	r3, [r4, #0]
 23fb0b8:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
 23fb0ba:	6863      	ldr	r3, [r4, #4]
 23fb0bc:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fb0be:	68a3      	ldr	r3, [r4, #8]
 23fb0c0:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fb0c2:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
 23fb0c4:	e9c4 3300 	strd	r3, r3, [r4]
 23fb0c8:	e7f1      	b.n	23fb0ae <_ZN6String4moveERS_+0x20>

023fb0ca <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fb0ca:	2300      	movs	r3, #0
String::String(String &&rval)
 23fb0cc:	b510      	push	{r4, lr}
 23fb0ce:	4604      	mov	r4, r0
    capacity_ = 0;
 23fb0d0:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fb0d4:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fb0d6:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fb0d8:	f7ff ffd9 	bl	23fb08e <_ZN6String4moveERS_>
}
 23fb0dc:	4620      	mov	r0, r4
 23fb0de:	bd10      	pop	{r4, pc}

023fb0e0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fb0e0:	4288      	cmp	r0, r1
{
 23fb0e2:	b510      	push	{r4, lr}
 23fb0e4:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fb0e6:	d005      	beq.n	23fb0f4 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fb0e8:	680b      	ldr	r3, [r1, #0]
 23fb0ea:	b12b      	cbz	r3, 23fb0f8 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fb0ec:	688a      	ldr	r2, [r1, #8]
 23fb0ee:	4619      	mov	r1, r3
 23fb0f0:	f7ff ff94 	bl	23fb01c <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fb0f4:	4620      	mov	r0, r4
 23fb0f6:	bd10      	pop	{r4, pc}
        invalidate();
 23fb0f8:	f7ff ff65 	bl	23fafc6 <_ZN6String10invalidateEv>
 23fb0fc:	e7fa      	b.n	23fb0f4 <_ZN6StringaSERKS_+0x14>

023fb0fe <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fb0fe:	2300      	movs	r3, #0
String::String(const String &value)
 23fb100:	b510      	push	{r4, lr}
 23fb102:	4604      	mov	r4, r0
    capacity_ = 0;
 23fb104:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fb108:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fb10a:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fb10c:	f7ff ffe8 	bl	23fb0e0 <_ZN6StringaSERKS_>
}
 23fb110:	4620      	mov	r0, r4
 23fb112:	bd10      	pop	{r4, pc}

023fb114 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
    if (this != &rval) {
 23fb114:	4288      	cmp	r0, r1
{
 23fb116:	b510      	push	{r4, lr}
 23fb118:	4604      	mov	r4, r0
    if (this != &rval) {
 23fb11a:	d001      	beq.n	23fb120 <_ZN6StringaSEOS_+0xc>
        move(rval);
 23fb11c:	f7ff ffb7 	bl	23fb08e <_ZN6String4moveERS_>
    }
    return *this;
}
 23fb120:	4620      	mov	r0, r4
 23fb122:	bd10      	pop	{r4, pc}

023fb124 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23fb124:	b513      	push	{r0, r1, r4, lr}
 23fb126:	4604      	mov	r4, r0
    if (cstr) {
 23fb128:	b159      	cbz	r1, 23fb142 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
 23fb12a:	4608      	mov	r0, r1
 23fb12c:	9101      	str	r1, [sp, #4]
 23fb12e:	f7fa feed 	bl	23f5f0c <strlen>
 23fb132:	9901      	ldr	r1, [sp, #4]
 23fb134:	4602      	mov	r2, r0
 23fb136:	4620      	mov	r0, r4
 23fb138:	f7ff ff70 	bl	23fb01c <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fb13c:	4620      	mov	r0, r4
 23fb13e:	b002      	add	sp, #8
 23fb140:	bd10      	pop	{r4, pc}
        invalidate();
 23fb142:	f7ff ff40 	bl	23fafc6 <_ZN6String10invalidateEv>
 23fb146:	e7f9      	b.n	23fb13c <_ZN6StringaSEPKc+0x18>

023fb148 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fb148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb14a:	4604      	mov	r4, r0
 23fb14c:	4616      	mov	r6, r2
    unsigned int newlen = len + length;
    if (!cstr) {
 23fb14e:	460f      	mov	r7, r1
 23fb150:	b909      	cbnz	r1, 23fb156 <_ZN6String6concatEPKcj+0xe>
        return 0;
 23fb152:	2000      	movs	r0, #0
    }
    memcpy(buffer + len, cstr, length);
    buffer[newlen] = 0;
    len = newlen;
    return 1;
}
 23fb154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (length == 0) {
 23fb156:	b18a      	cbz	r2, 23fb17c <_ZN6String6concatEPKcj+0x34>
    unsigned int newlen = len + length;
 23fb158:	6885      	ldr	r5, [r0, #8]
 23fb15a:	4415      	add	r5, r2
    if (!reserve(newlen)) {
 23fb15c:	4629      	mov	r1, r5
 23fb15e:	f7ff ff49 	bl	23faff4 <_ZN6String7reserveEj>
 23fb162:	2800      	cmp	r0, #0
 23fb164:	d0f5      	beq.n	23fb152 <_ZN6String6concatEPKcj+0xa>
    memcpy(buffer + len, cstr, length);
 23fb166:	68a3      	ldr	r3, [r4, #8]
 23fb168:	6820      	ldr	r0, [r4, #0]
 23fb16a:	4632      	mov	r2, r6
 23fb16c:	4418      	add	r0, r3
 23fb16e:	4639      	mov	r1, r7
 23fb170:	f001 fffa 	bl	23fd168 <memcpy>
    buffer[newlen] = 0;
 23fb174:	2200      	movs	r2, #0
 23fb176:	6823      	ldr	r3, [r4, #0]
 23fb178:	555a      	strb	r2, [r3, r5]
    len = newlen;
 23fb17a:	60a5      	str	r5, [r4, #8]
        return 1;
 23fb17c:	2001      	movs	r0, #1
 23fb17e:	e7e9      	b.n	23fb154 <_ZN6String6concatEPKcj+0xc>

023fb180 <_ZN6String6concatERKS_>:
    return concat(s.buffer, s.len);
 23fb180:	688a      	ldr	r2, [r1, #8]
 23fb182:	6809      	ldr	r1, [r1, #0]
 23fb184:	f7ff bfe0 	b.w	23fb148 <_ZN6String6concatEPKcj>

023fb188 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    if (!buffer || !s.buffer) {
 23fb188:	6802      	ldr	r2, [r0, #0]
{
 23fb18a:	460b      	mov	r3, r1
    if (!buffer || !s.buffer) {
 23fb18c:	6809      	ldr	r1, [r1, #0]
 23fb18e:	b162      	cbz	r2, 23fb1aa <_ZNK6String9compareToERKS_+0x22>
 23fb190:	b941      	cbnz	r1, 23fb1a4 <_ZNK6String9compareToERKS_+0x1c>
        if (s.buffer && s.len > 0) {
            return 0 - *(unsigned char *)s.buffer;
        }
        if (buffer && len > 0) {
 23fb192:	6880      	ldr	r0, [r0, #8]
 23fb194:	b160      	cbz	r0, 23fb1b0 <_ZNK6String9compareToERKS_+0x28>
            return *(unsigned char *)buffer;
 23fb196:	7810      	ldrb	r0, [r2, #0]
 23fb198:	4770      	bx	lr
        if (s.buffer && s.len > 0) {
 23fb19a:	6898      	ldr	r0, [r3, #8]
 23fb19c:	b140      	cbz	r0, 23fb1b0 <_ZNK6String9compareToERKS_+0x28>
            return 0 - *(unsigned char *)s.buffer;
 23fb19e:	7809      	ldrb	r1, [r1, #0]
 23fb1a0:	4248      	negs	r0, r1
 23fb1a2:	4770      	bx	lr
        }
        return 0;
    }
    return strcmp(buffer, s.buffer);
 23fb1a4:	4610      	mov	r0, r2
 23fb1a6:	f7fa bea7 	b.w	23f5ef8 <strcmp>
        if (s.buffer && s.len > 0) {
 23fb1aa:	2900      	cmp	r1, #0
 23fb1ac:	d1f5      	bne.n	23fb19a <_ZNK6String9compareToERKS_+0x12>
        return 0;
 23fb1ae:	4608      	mov	r0, r1
}
 23fb1b0:	4770      	bx	lr

023fb1b2 <_ZNK6String6equalsEPKc>:
{
    return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 23fb1b2:	b508      	push	{r3, lr}
    if (len == 0) {
 23fb1b4:	6882      	ldr	r2, [r0, #8]
 23fb1b6:	b93a      	cbnz	r2, 23fb1c8 <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
 23fb1b8:	b121      	cbz	r1, 23fb1c4 <_ZNK6String6equalsEPKc+0x12>
 23fb1ba:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
 23fb1bc:	fab0 f080 	clz	r0, r0
 23fb1c0:	0940      	lsrs	r0, r0, #5
 23fb1c2:	e000      	b.n	23fb1c6 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
 23fb1c4:	2001      	movs	r0, #1
}
 23fb1c6:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
 23fb1c8:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
 23fb1ca:	b909      	cbnz	r1, 23fb1d0 <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
 23fb1cc:	7800      	ldrb	r0, [r0, #0]
 23fb1ce:	e7f5      	b.n	23fb1bc <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
 23fb1d0:	f7fa fe92 	bl	23f5ef8 <strcmp>
 23fb1d4:	e7f2      	b.n	23fb1bc <_ZNK6String6equalsEPKc+0xa>

023fb1d6 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
 23fb1d6:	b508      	push	{r3, lr}
    return compareTo(rhs) < 0;
 23fb1d8:	f7ff ffd6 	bl	23fb188 <_ZNK6String9compareToERKS_>
}
 23fb1dc:	0fc0      	lsrs	r0, r0, #31
 23fb1de:	bd08      	pop	{r3, pc}

023fb1e0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fb1e0:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fb1e2:	2000      	movs	r0, #0
 23fb1e4:	4b04      	ldr	r3, [pc, #16]	; (23fb1f8 <_GLOBAL__sub_I_System+0x18>)
 23fb1e6:	601a      	str	r2, [r3, #0]
 23fb1e8:	4b04      	ldr	r3, [pc, #16]	; (23fb1fc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fb1ea:	4a05      	ldr	r2, [pc, #20]	; (23fb200 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fb1ec:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fb1f0:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fb1f2:	f7fd bb33 	b.w	23f885c <set_system_mode>
 23fb1f6:	bf00      	nop
 23fb1f8:	1007af04 	.word	0x1007af04
 23fb1fc:	1007aef8 	.word	0x1007aef8
 23fb200:	ffff0000 	.word	0xffff0000

023fb204 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fb204:	4b02      	ldr	r3, [pc, #8]	; (23fb210 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fb206:	681a      	ldr	r2, [r3, #0]
 23fb208:	4b02      	ldr	r3, [pc, #8]	; (23fb214 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fb20a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fb20c:	4770      	bx	lr
 23fb20e:	bf00      	nop
 23fb210:	1007ac40 	.word	0x1007ac40
 23fb214:	1007af08 	.word	0x1007af08

023fb218 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fb218:	4770      	bx	lr

023fb21a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fb21a:	7441      	strb	r1, [r0, #17]
}
 23fb21c:	4770      	bx	lr

023fb21e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fb21e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fb220:	7c00      	ldrb	r0, [r0, #16]
 23fb222:	f7fd fa11 	bl	23f8648 <hal_usart_available_data_for_write>
}
 23fb226:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fb22a:	bd08      	pop	{r3, pc}

023fb22c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fb22c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fb22e:	7c00      	ldrb	r0, [r0, #16]
 23fb230:	f7fd f9c4 	bl	23f85bc <hal_usart_available>
}
 23fb234:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fb238:	bd08      	pop	{r3, pc}

023fb23a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fb23a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fb23c:	7c00      	ldrb	r0, [r0, #16]
 23fb23e:	f7fd f9d9 	bl	23f85f4 <hal_usart_peek>
}
 23fb242:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fb246:	bd08      	pop	{r3, pc}

023fb248 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fb248:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fb24a:	7c00      	ldrb	r0, [r0, #16]
 23fb24c:	f7fd f9c4 	bl	23f85d8 <hal_usart_read>
}
 23fb250:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fb254:	bd08      	pop	{r3, pc}

023fb256 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fb256:	7c00      	ldrb	r0, [r0, #16]
 23fb258:	f7fd b9da 	b.w	23f8610 <hal_usart_flush>

023fb25c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fb25c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fb25e:	7c45      	ldrb	r5, [r0, #17]
{
 23fb260:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fb262:	b12d      	cbz	r5, 23fb270 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fb264:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fb266:	b003      	add	sp, #12
 23fb268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fb26c:	f7fd b998 	b.w	23f85a0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fb270:	7c00      	ldrb	r0, [r0, #16]
 23fb272:	9101      	str	r1, [sp, #4]
 23fb274:	f7fd f9e8 	bl	23f8648 <hal_usart_available_data_for_write>
 23fb278:	2800      	cmp	r0, #0
 23fb27a:	9901      	ldr	r1, [sp, #4]
 23fb27c:	dcf2      	bgt.n	23fb264 <_ZN11USARTSerial5writeEh+0x8>
}
 23fb27e:	4628      	mov	r0, r5
 23fb280:	b003      	add	sp, #12
 23fb282:	bd30      	pop	{r4, r5, pc}

023fb284 <_ZN11USARTSerialD0Ev>:
 23fb284:	b510      	push	{r4, lr}
 23fb286:	4604      	mov	r4, r0
 23fb288:	2114      	movs	r1, #20
 23fb28a:	f7fa fe82 	bl	23f5f92 <_ZdlPvj>
 23fb28e:	4620      	mov	r0, r4
 23fb290:	bd10      	pop	{r4, pc}
	...

023fb294 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fb294:	b510      	push	{r4, lr}
 23fb296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fb29a:	4604      	mov	r4, r0
 23fb29c:	4608      	mov	r0, r1
 23fb29e:	4611      	mov	r1, r2
 23fb2a0:	2200      	movs	r2, #0
 23fb2a2:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fb2a6:	4b04      	ldr	r3, [pc, #16]	; (23fb2b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fb2a8:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fb2aa:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fb2ac:	2301      	movs	r3, #1
 23fb2ae:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fb2b0:	f7fd f9e6 	bl	23f8680 <hal_usart_init_ex>
}
 23fb2b4:	4620      	mov	r0, r4
 23fb2b6:	bd10      	pop	{r4, pc}
 23fb2b8:	023ffb3c 	.word	0x023ffb3c

023fb2bc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fb2bc:	2300      	movs	r3, #0
 23fb2be:	7c00      	ldrb	r0, [r0, #16]
 23fb2c0:	f7fd b9d0 	b.w	23f8664 <hal_usart_begin_config>

023fb2c4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fb2c4:	2200      	movs	r2, #0
 23fb2c6:	f7ff bff9 	b.w	23fb2bc <_ZN11USARTSerial5beginEmm>

023fb2ca <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fb2ca:	7c00      	ldrb	r0, [r0, #16]
 23fb2cc:	f7fd b95a 	b.w	23f8584 <hal_usart_end>

023fb2d0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fb2d0:	7c00      	ldrb	r0, [r0, #16]
 23fb2d2:	f7fd b9ab 	b.w	23f862c <hal_usart_is_enabled>

023fb2d6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fb2d6:	7441      	strb	r1, [r0, #17]
}
 23fb2d8:	4770      	bx	lr

023fb2da <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fb2da:	4770      	bx	lr

023fb2dc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fb2dc:	4770      	bx	lr

023fb2de <_ZN9USBSerial4readEv>:
{
 23fb2de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fb2e0:	2100      	movs	r1, #0
 23fb2e2:	7c00      	ldrb	r0, [r0, #16]
 23fb2e4:	f7fd fa20 	bl	23f8728 <HAL_USB_USART_Receive_Data>
}
 23fb2e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fb2ec:	bd08      	pop	{r3, pc}

023fb2ee <_ZN9USBSerial4peekEv>:
{
 23fb2ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fb2f0:	2101      	movs	r1, #1
 23fb2f2:	7c00      	ldrb	r0, [r0, #16]
 23fb2f4:	f7fd fa18 	bl	23f8728 <HAL_USB_USART_Receive_Data>
}
 23fb2f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fb2fc:	bd08      	pop	{r3, pc}

023fb2fe <_ZN9USBSerial17availableForWriteEv>:
{
 23fb2fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fb300:	7c00      	ldrb	r0, [r0, #16]
 23fb302:	f7fd fa03 	bl	23f870c <HAL_USB_USART_Available_Data_For_Write>
}
 23fb306:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fb30a:	bd08      	pop	{r3, pc}

023fb30c <_ZN9USBSerial9availableEv>:
{
 23fb30c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fb30e:	7c00      	ldrb	r0, [r0, #16]
 23fb310:	f7fd f9ee 	bl	23f86f0 <HAL_USB_USART_Available_Data>
}
 23fb314:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fb318:	bd08      	pop	{r3, pc}

023fb31a <_ZN9USBSerial5writeEh>:
{
 23fb31a:	b513      	push	{r0, r1, r4, lr}
 23fb31c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fb31e:	7c00      	ldrb	r0, [r0, #16]
{
 23fb320:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fb322:	f7fd f9f3 	bl	23f870c <HAL_USB_USART_Available_Data_For_Write>
 23fb326:	2800      	cmp	r0, #0
 23fb328:	9901      	ldr	r1, [sp, #4]
 23fb32a:	dc01      	bgt.n	23fb330 <_ZN9USBSerial5writeEh+0x16>
 23fb32c:	7c60      	ldrb	r0, [r4, #17]
 23fb32e:	b120      	cbz	r0, 23fb33a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fb330:	7c20      	ldrb	r0, [r4, #16]
 23fb332:	f7fd fa07 	bl	23f8744 <HAL_USB_USART_Send_Data>
 23fb336:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fb33a:	b002      	add	sp, #8
 23fb33c:	bd10      	pop	{r4, pc}

023fb33e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fb33e:	7c00      	ldrb	r0, [r0, #16]
 23fb340:	f7fd ba0e 	b.w	23f8760 <HAL_USB_USART_Flush_Data>

023fb344 <_ZN9USBSerialD0Ev>:
 23fb344:	b510      	push	{r4, lr}
 23fb346:	4604      	mov	r4, r0
 23fb348:	2114      	movs	r1, #20
 23fb34a:	f7fa fe22 	bl	23f5f92 <_ZdlPvj>
 23fb34e:	4620      	mov	r0, r4
 23fb350:	bd10      	pop	{r4, pc}
	...

023fb354 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fb354:	b510      	push	{r4, lr}
 23fb356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fb35a:	4604      	mov	r4, r0
 23fb35c:	4608      	mov	r0, r1
 23fb35e:	2100      	movs	r1, #0
 23fb360:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fb364:	4b04      	ldr	r3, [pc, #16]	; (23fb378 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fb366:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fb368:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fb36a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fb36c:	4611      	mov	r1, r2
  _blocking = true;
 23fb36e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fb370:	f7fd f994 	bl	23f869c <HAL_USB_USART_Init>
}
 23fb374:	4620      	mov	r0, r4
 23fb376:	bd10      	pop	{r4, pc}
 23fb378:	023ffb70 	.word	0x023ffb70

023fb37c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fb37c:	2200      	movs	r2, #0
 23fb37e:	7c00      	ldrb	r0, [r0, #16]
 23fb380:	f7fd b99a 	b.w	23f86b8 <HAL_USB_USART_Begin>

023fb384 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fb384:	7c00      	ldrb	r0, [r0, #16]
 23fb386:	f7fd b9a5 	b.w	23f86d4 <HAL_USB_USART_End>

023fb38a <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23fb38a:	7c00      	ldrb	r0, [r0, #16]
 23fb38c:	f7fd b9f6 	b.w	23f877c <HAL_USB_USART_Is_Connected>

023fb390 <_Z19acquireSerialBufferv>:
{
 23fb390:	b510      	push	{r4, lr}
 23fb392:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fb394:	2214      	movs	r2, #20
 23fb396:	2100      	movs	r1, #0
 23fb398:	f001 ff0d 	bl	23fd1b6 <memset>
}
 23fb39c:	4620      	mov	r0, r4
 23fb39e:	bd10      	pop	{r4, pc}

023fb3a0 <_Z16_fetch_usbserialv>:
{
 23fb3a0:	b510      	push	{r4, lr}
 23fb3a2:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fb3a4:	a803      	add	r0, sp, #12
 23fb3a6:	f7ff fff3 	bl	23fb390 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fb3aa:	4c0c      	ldr	r4, [pc, #48]	; (23fb3dc <_Z16_fetch_usbserialv+0x3c>)
 23fb3ac:	e8d4 1f8f 	ldab	r1, [r4]
 23fb3b0:	f011 0101 	ands.w	r1, r1, #1
 23fb3b4:	d10f      	bne.n	23fb3d6 <_Z16_fetch_usbserialv+0x36>
 23fb3b6:	4620      	mov	r0, r4
 23fb3b8:	9101      	str	r1, [sp, #4]
 23fb3ba:	f7fa fdf9 	bl	23f5fb0 <__cxa_guard_acquire>
 23fb3be:	9901      	ldr	r1, [sp, #4]
 23fb3c0:	b148      	cbz	r0, 23fb3d6 <_Z16_fetch_usbserialv+0x36>
 23fb3c2:	aa03      	add	r2, sp, #12
 23fb3c4:	4806      	ldr	r0, [pc, #24]	; (23fb3e0 <_Z16_fetch_usbserialv+0x40>)
 23fb3c6:	f7ff ffc5 	bl	23fb354 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fb3ca:	4620      	mov	r0, r4
 23fb3cc:	f7fa fdf5 	bl	23f5fba <__cxa_guard_release>
 23fb3d0:	4804      	ldr	r0, [pc, #16]	; (23fb3e4 <_Z16_fetch_usbserialv+0x44>)
 23fb3d2:	f001 feb3 	bl	23fd13c <atexit>
	return _usbserial;
}
 23fb3d6:	4802      	ldr	r0, [pc, #8]	; (23fb3e0 <_Z16_fetch_usbserialv+0x40>)
 23fb3d8:	b008      	add	sp, #32
 23fb3da:	bd10      	pop	{r4, pc}
 23fb3dc:	1007af0c 	.word	0x1007af0c
 23fb3e0:	1007af10 	.word	0x1007af10
 23fb3e4:	023fb2db 	.word	0x023fb2db

023fb3e8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESD_SO_>:
        capacity_(0) {
 23fb3e8:	2200      	movs	r2, #0
 23fb3ea:	e9c0 2200 	strd	r2, r2, [r0]
 23fb3ee:	6082      	str	r2, [r0, #8]
      }
 23fb3f0:	4770      	bx	lr

023fb3f2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESD_SO_>:
 23fb3f2:	2200      	movs	r2, #0
 23fb3f4:	e9c0 2200 	strd	r2, r2, [r0]
 23fb3f8:	6082      	str	r2, [r0, #8]
 23fb3fa:	4770      	bx	lr

023fb3fc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESD_SO_>:
 23fb3fc:	2200      	movs	r2, #0
 23fb3fe:	e9c0 2200 	strd	r2, r2, [r0]
 23fb402:	6082      	str	r2, [r0, #8]
 23fb404:	4770      	bx	lr

023fb406 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESD_SO_>:
 23fb406:	2200      	movs	r2, #0
 23fb408:	e9c0 2200 	strd	r2, r2, [r0]
 23fb40c:	6082      	str	r2, [r0, #8]
 23fb40e:	4770      	bx	lr

023fb410 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESD_SO_>:
 23fb410:	2200      	movs	r2, #0
 23fb412:	e9c0 2200 	strd	r2, r2, [r0]
 23fb416:	6082      	str	r2, [r0, #8]
 23fb418:	4770      	bx	lr

023fb41a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESD_SO_>:
 23fb41a:	2200      	movs	r2, #0
 23fb41c:	e9c0 2200 	strd	r2, r2, [r0]
 23fb420:	6082      	str	r2, [r0, #8]
 23fb422:	4770      	bx	lr

023fb424 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESD_SO_>:
 23fb424:	2200      	movs	r2, #0
 23fb426:	e9c0 2200 	strd	r2, r2, [r0]
 23fb42a:	6082      	str	r2, [r0, #8]
 23fb42c:	4770      	bx	lr

023fb42e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESD_SO_>:
 23fb42e:	2200      	movs	r2, #0
 23fb430:	e9c0 2200 	strd	r2, r2, [r0]
 23fb434:	6082      	str	r2, [r0, #8]
 23fb436:	4770      	bx	lr

023fb438 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESD_SO_>:
 23fb438:	2200      	movs	r2, #0
 23fb43a:	e9c0 2200 	strd	r2, r2, [r0]
 23fb43e:	6082      	str	r2, [r0, #8]
 23fb440:	4770      	bx	lr

023fb442 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESD_SO_>:
 23fb442:	2200      	movs	r2, #0
 23fb444:	e9c0 2200 	strd	r2, r2, [r0]
 23fb448:	6082      	str	r2, [r0, #8]
 23fb44a:	4770      	bx	lr

023fb44c <_ZSt9__advanceIPKSt4pairIK6StringN8particle7VariantEEiEvRT_T0_St26random_access_iterator_tag.isra.0>:
	__i += __n;
 23fb44c:	2228      	movs	r2, #40	; 0x28
 23fb44e:	6803      	ldr	r3, [r0, #0]
 23fb450:	fb02 3101 	mla	r1, r2, r1, r3
 23fb454:	6001      	str	r1, [r0, #0]
    }
 23fb456:	4770      	bx	lr

023fb458 <_ZSt9__advanceIPSt4pairIK6StringN8particle7VariantEEiEvRT_T0_St26random_access_iterator_tag.isra.0>:
	__i += __n;
 23fb458:	2228      	movs	r2, #40	; 0x28
 23fb45a:	6803      	ldr	r3, [r0, #0]
 23fb45c:	fb02 3101 	mla	r1, r2, r1, r3
 23fb460:	6001      	str	r1, [r0, #0]
    }
 23fb462:	4770      	bx	lr

023fb464 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>:
        v = nativeToBigEndian(v);
        CHECK(write((const char*)&v, sizeof(v)));
        return 0;
    }

    int write(const char* data, size_t size) {
 23fb464:	b538      	push	{r3, r4, r5, lr}
        size_t n = stream_.write((const uint8_t*)data, size);
 23fb466:	6803      	ldr	r3, [r0, #0]
    int write(const char* data, size_t size) {
 23fb468:	4615      	mov	r5, r2
        size_t n = stream_.write((const uint8_t*)data, size);
 23fb46a:	68db      	ldr	r3, [r3, #12]
    int write(const char* data, size_t size) {
 23fb46c:	4604      	mov	r4, r0
        size_t n = stream_.write((const uint8_t*)data, size);
 23fb46e:	4798      	blx	r3
        if (n != size) {
 23fb470:	4285      	cmp	r5, r0
 23fb472:	d005      	beq.n	23fb480 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0+0x1c>
    int getWriteError() const { return write_error; }
 23fb474:	6860      	ldr	r0, [r4, #4]
            int err = stream_.getWriteError();
            return (err < 0) ? err : Error::IO;
 23fb476:	2800      	cmp	r0, #0
 23fb478:	bfa8      	it	ge
 23fb47a:	f06f 00db 	mvnge.w	r0, #219	; 0xdb
        }
        return 0;
    }
 23fb47e:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 23fb480:	2000      	movs	r0, #0
 23fb482:	e7fc      	b.n	23fb47e <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0+0x1a>

023fb484 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>:
    int writeUint8(uint8_t val) {
 23fb484:	b507      	push	{r0, r1, r2, lr}
 23fb486:	2201      	movs	r2, #1
 23fb488:	f88d 1007 	strb.w	r1, [sp, #7]
 23fb48c:	f10d 0107 	add.w	r1, sp, #7
 23fb490:	f7ff ffe8 	bl	23fb464 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>
    }
 23fb494:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 23fb498:	b003      	add	sp, #12
 23fb49a:	f85d fb04 	ldr.w	pc, [sp], #4

023fb49e <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>:
        }
    }
    return 0;
}

int writeCborHead(EncodingStream& stream, int type, uint64_t arg) {
 23fb49e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fb4a0:	461e      	mov	r6, r3
    type <<= 5;
    if (arg < 24) {
 23fb4a2:	2a18      	cmp	r2, #24
 23fb4a4:	f176 0300 	sbcs.w	r3, r6, #0
int writeCborHead(EncodingStream& stream, int type, uint64_t arg) {
 23fb4a8:	4604      	mov	r4, r0
 23fb4aa:	4615      	mov	r5, r2
 23fb4ac:	6800      	ldr	r0, [r0, #0]
    type <<= 5;
 23fb4ae:	ea4f 1141 	mov.w	r1, r1, lsl #5
    if (arg < 24) {
 23fb4b2:	d207      	bcs.n	23fb4c4 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x26>
        CHECK(stream.writeUint8(arg | type));
 23fb4b4:	4311      	orrs	r1, r2
 23fb4b6:	b2c9      	uxtb	r1, r1
    } else if (arg <= 0xff) {
        CHECK(stream.writeUint8(24 /* 1-byte argument */ | type));
        CHECK(stream.writeUint8(arg));
 23fb4b8:	f7ff ffe4 	bl	23fb484 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
        CHECK(write((const char*)&val, sizeof(val)));
 23fb4bc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    } else {
        CHECK(stream.writeUint8(27 /* 8-byte argument */ | type));
        CHECK(stream.writeUint64Be(arg));
    }
    return 0;
}
 23fb4c0:	b002      	add	sp, #8
 23fb4c2:	bd70      	pop	{r4, r5, r6, pc}
    } else if (arg <= 0xff) {
 23fb4c4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 23fb4c8:	f176 0300 	sbcs.w	r3, r6, #0
        CHECK(stream.writeUint8(24 /* 1-byte argument */ | type));
 23fb4cc:	b249      	sxtb	r1, r1
    } else if (arg <= 0xff) {
 23fb4ce:	d20a      	bcs.n	23fb4e6 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x48>
        CHECK(stream.writeUint8(24 /* 1-byte argument */ | type));
 23fb4d0:	f041 0118 	orr.w	r1, r1, #24
 23fb4d4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 23fb4d8:	f7ff ffd4 	bl	23fb484 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23fb4dc:	2800      	cmp	r0, #0
 23fb4de:	dbef      	blt.n	23fb4c0 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x22>
        CHECK(stream.writeUint8(arg));
 23fb4e0:	6820      	ldr	r0, [r4, #0]
 23fb4e2:	b2e9      	uxtb	r1, r5
 23fb4e4:	e7e8      	b.n	23fb4b8 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x1a>
    } else if (arg <= 0xffff) {
 23fb4e6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 23fb4ea:	f176 0300 	sbcs.w	r3, r6, #0
 23fb4ee:	d210      	bcs.n	23fb512 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x74>
        CHECK(stream.writeUint8(25 /* 2-byte argument */ | type));
 23fb4f0:	f041 0119 	orr.w	r1, r1, #25
 23fb4f4:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 23fb4f8:	f7ff ffc4 	bl	23fb484 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23fb4fc:	2800      	cmp	r0, #0
 23fb4fe:	dbdf      	blt.n	23fb4c0 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x22>
        CHECK(write((const char*)&val, sizeof(val)));
 23fb500:	2202      	movs	r2, #2
inline int16_t reverseByteOrder(int16_t val) {
    return __builtin_bswap16(val);
}

inline uint16_t reverseByteOrder(uint16_t val) {
    return __builtin_bswap16(val);
 23fb502:	ba6d      	rev16	r5, r5
        val = nativeToBigEndian(val);
 23fb504:	f8ad 5000 	strh.w	r5, [sp]
        CHECK(write((const char*)&val, sizeof(val)));
 23fb508:	4669      	mov	r1, sp
 23fb50a:	6820      	ldr	r0, [r4, #0]
 23fb50c:	f7ff ffaa 	bl	23fb464 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>
 23fb510:	e7d4      	b.n	23fb4bc <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x1e>
    } else if (arg <= 0xffffffffu) {
 23fb512:	b95e      	cbnz	r6, 23fb52c <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x8e>
        CHECK(stream.writeUint8(26 /* 4-byte argument */ | type));
 23fb514:	f041 011a 	orr.w	r1, r1, #26
 23fb518:	f001 01fa 	and.w	r1, r1, #250	; 0xfa
 23fb51c:	f7ff ffb2 	bl	23fb484 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23fb520:	2800      	cmp	r0, #0
 23fb522:	dbcd      	blt.n	23fb4c0 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x22>
inline int32_t reverseByteOrder(int32_t val) {
    return __builtin_bswap32(val);
}

inline uint32_t reverseByteOrder(uint32_t val) {
    return __builtin_bswap32(val);
 23fb524:	ba2d      	rev	r5, r5
        CHECK(write((const char*)&val, sizeof(val)));
 23fb526:	2204      	movs	r2, #4
        val = nativeToBigEndian(val);
 23fb528:	9500      	str	r5, [sp, #0]
        CHECK(write((const char*)&val, sizeof(val)));
 23fb52a:	e7ed      	b.n	23fb508 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x6a>
        CHECK(stream.writeUint8(27 /* 8-byte argument */ | type));
 23fb52c:	f041 011b 	orr.w	r1, r1, #27
 23fb530:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 23fb534:	f7ff ffa6 	bl	23fb484 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23fb538:	2800      	cmp	r0, #0
 23fb53a:	dbc1      	blt.n	23fb4c0 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x22>
inline int64_t reverseByteOrder(int64_t val) {
    return __builtin_bswap64(val);
}

inline uint64_t reverseByteOrder(uint64_t val) {
    return __builtin_bswap64(val);
 23fb53c:	ba2d      	rev	r5, r5
 23fb53e:	ba36      	rev	r6, r6
        CHECK(write((const char*)&val, sizeof(val)));
 23fb540:	2208      	movs	r2, #8
        val = nativeToBigEndian(val);
 23fb542:	e9cd 6500 	strd	r6, r5, [sp]
        CHECK(write((const char*)&val, sizeof(val)));
 23fb546:	e7df      	b.n	23fb508 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x6a>

023fb548 <_ZN8particle12_GLOBAL__N_122writeCborSignedIntegerERNS0_14EncodingStreamEx>:
    CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
    return 0;
}

int writeCborSignedInteger(EncodingStream& stream, int64_t val) {
    if (val < 0) {
 23fb548:	1e19      	subs	r1, r3, #0
        val = -(val + 1);
        CHECK(writeCborHead(stream, 1 /* Negative integer */, val));
 23fb54a:	bfbd      	ittte	lt
 23fb54c:	43cb      	mvnlt	r3, r1
 23fb54e:	43d2      	mvnlt	r2, r2
 23fb550:	2101      	movlt	r1, #1
    } else {
        CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
 23fb552:	2100      	movge	r1, #0
int writeCborSignedInteger(EncodingStream& stream, int64_t val) {
 23fb554:	b510      	push	{r4, lr}
        CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
 23fb556:	f7ff ffa2 	bl	23fb49e <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
 23fb55a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    }
    return 0;
}
 23fb55e:	bd10      	pop	{r4, pc}

023fb560 <_ZN8particle12_GLOBAL__N_119writeCborTextStringERNS0_14EncodingStreamERK6String>:
int readCborTextString(DecodingStream& stream, const CborHead& head, String& str) {
    CHECK(readCborString(stream, head, str, readAndAppendToString));
    return 0;
}

int writeCborTextString(EncodingStream& stream, const String& str) {
 23fb560:	b538      	push	{r3, r4, r5, lr}
 23fb562:	460c      	mov	r4, r1
    CHECK(writeCborHead(stream, 3 /* Text string */, str.length()));
 23fb564:	688a      	ldr	r2, [r1, #8]
 23fb566:	2300      	movs	r3, #0
 23fb568:	2103      	movs	r1, #3
int writeCborTextString(EncodingStream& stream, const String& str) {
 23fb56a:	4605      	mov	r5, r0
    CHECK(writeCborHead(stream, 3 /* Text string */, str.length()));
 23fb56c:	f7ff ff97 	bl	23fb49e <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
 23fb570:	2800      	cmp	r0, #0
 23fb572:	db06      	blt.n	23fb582 <_ZN8particle12_GLOBAL__N_119writeCborTextStringERNS0_14EncodingStreamERK6String+0x22>
    CHECK(stream.write(str.c_str(), str.length()));
 23fb574:	68a2      	ldr	r2, [r4, #8]
 23fb576:	6821      	ldr	r1, [r4, #0]
 23fb578:	6828      	ldr	r0, [r5, #0]
 23fb57a:	f7ff ff73 	bl	23fb464 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>
 23fb57e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    return 0;
}
 23fb582:	bd38      	pop	{r3, r4, r5, pc}

023fb584 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>:
    int read(char* data, size_t size) {
 23fb584:	b510      	push	{r4, lr}
        size_t n = stream_.readBytes(data, size);
 23fb586:	6803      	ldr	r3, [r0, #0]
    int read(char* data, size_t size) {
 23fb588:	4614      	mov	r4, r2
        size_t n = stream_.readBytes(data, size);
 23fb58a:	6a1b      	ldr	r3, [r3, #32]
 23fb58c:	4798      	blx	r3
            return Error::END_OF_STREAM;
 23fb58e:	4284      	cmp	r4, r0
    }
 23fb590:	bf14      	ite	ne
 23fb592:	f06f 00c8 	mvnne.w	r0, #200	; 0xc8
 23fb596:	2000      	moveq	r0, #0
 23fb598:	bd10      	pop	{r4, pc}
	...

023fb59c <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String>:
int readAndAppendToString(DecodingStream& stream, size_t size, String& str) {
 23fb59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb59e:	460c      	mov	r4, r1
    if (!str.reserve(str.length() + size)) {
 23fb5a0:	6891      	ldr	r1, [r2, #8]
int readAndAppendToString(DecodingStream& stream, size_t size, String& str) {
 23fb5a2:	4607      	mov	r7, r0
 23fb5a4:	b0a1      	sub	sp, #132	; 0x84
    if (!str.reserve(str.length() + size)) {
 23fb5a6:	4610      	mov	r0, r2
 23fb5a8:	4421      	add	r1, r4
int readAndAppendToString(DecodingStream& stream, size_t size, String& str) {
 23fb5aa:	4615      	mov	r5, r2
    if (!str.reserve(str.length() + size)) {
 23fb5ac:	f7ff fd22 	bl	23faff4 <_ZN6String7reserveEj>
 23fb5b0:	b190      	cbz	r0, 23fb5d8 <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String+0x3c>
    while (size > 0) {
 23fb5b2:	b1a4      	cbz	r4, 23fb5de <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String+0x42>
        size_t n = std::min(size, sizeof(buf));
 23fb5b4:	2c80      	cmp	r4, #128	; 0x80
 23fb5b6:	4626      	mov	r6, r4
 23fb5b8:	bf28      	it	cs
 23fb5ba:	2680      	movcs	r6, #128	; 0x80
        CHECK(stream.read(buf, n));
 23fb5bc:	4669      	mov	r1, sp
 23fb5be:	4632      	mov	r2, r6
 23fb5c0:	6838      	ldr	r0, [r7, #0]
 23fb5c2:	f7ff ffdf 	bl	23fb584 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
 23fb5c6:	2800      	cmp	r0, #0
 23fb5c8:	db07      	blt.n	23fb5da <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String+0x3e>
        str.concat(buf, n);
 23fb5ca:	4632      	mov	r2, r6
 23fb5cc:	4669      	mov	r1, sp
 23fb5ce:	4628      	mov	r0, r5
 23fb5d0:	f7ff fdba 	bl	23fb148 <_ZN6String6concatEPKcj>
        size -= n;
 23fb5d4:	1ba4      	subs	r4, r4, r6
    while (size > 0) {
 23fb5d6:	e7ec      	b.n	23fb5b2 <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String+0x16>
        return Error::NO_MEMORY;
 23fb5d8:	4802      	ldr	r0, [pc, #8]	; (23fb5e4 <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String+0x48>)
}
 23fb5da:	b021      	add	sp, #132	; 0x84
 23fb5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
 23fb5de:	4620      	mov	r0, r4
 23fb5e0:	e7fb      	b.n	23fb5da <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String+0x3e>
 23fb5e2:	bf00      	nop
 23fb5e4:	fffffefc 	.word	0xfffffefc

023fb5e8 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>:
int readCborHead(DecodingStream& stream, CborHead& head) {
 23fb5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fb5ea:	4605      	mov	r5, r0
 23fb5ec:	460c      	mov	r4, r1
 23fb5ee:	2201      	movs	r2, #1
 23fb5f0:	6800      	ldr	r0, [r0, #0]
 23fb5f2:	f10d 0103 	add.w	r1, sp, #3
 23fb5f6:	f7ff ffc5 	bl	23fb584 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
    CHECK(stream.readUint8(b));
 23fb5fa:	2800      	cmp	r0, #0
 23fb5fc:	db0b      	blt.n	23fb616 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
    head.type = b >> 5;
 23fb5fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 23fb602:	095a      	lsrs	r2, r3, #5
 23fb604:	f003 031f 	and.w	r3, r3, #31
    if (head.detail < 24) {
 23fb608:	2b17      	cmp	r3, #23
    head.type = b >> 5;
 23fb60a:	60a2      	str	r2, [r4, #8]
    head.detail = b & 0x1f;
 23fb60c:	60e3      	str	r3, [r4, #12]
    if (head.detail < 24) {
 23fb60e:	d804      	bhi.n	23fb61a <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x32>
            head.arg = v;
 23fb610:	2000      	movs	r0, #0
 23fb612:	e9c4 3000 	strd	r3, r0, [r4]
}
 23fb616:	b003      	add	sp, #12
 23fb618:	bd30      	pop	{r4, r5, pc}
        switch (head.detail) {
 23fb61a:	3b18      	subs	r3, #24
 23fb61c:	2b07      	cmp	r3, #7
 23fb61e:	d83e      	bhi.n	23fb69e <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0xb6>
 23fb620:	e8df f003 	tbb	[pc, r3]
 23fb624:	251a0e04 	.word	0x251a0e04
 23fb628:	343d3d3d 	.word	0x343d3d3d
        CHECK(read((char*)&val, sizeof(val)));
 23fb62c:	2201      	movs	r2, #1
 23fb62e:	6828      	ldr	r0, [r5, #0]
 23fb630:	a901      	add	r1, sp, #4
 23fb632:	f7ff ffa7 	bl	23fb584 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
            CHECK(stream.readUint8(v));
 23fb636:	2800      	cmp	r0, #0
 23fb638:	dbed      	blt.n	23fb616 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
            head.arg = v;
 23fb63a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fb63e:	e7e7      	b.n	23fb610 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x28>
        CHECK(read((char*)&val, sizeof(val)));
 23fb640:	2202      	movs	r2, #2
 23fb642:	6828      	ldr	r0, [r5, #0]
 23fb644:	a901      	add	r1, sp, #4
 23fb646:	f7ff ff9d 	bl	23fb584 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
 23fb64a:	2800      	cmp	r0, #0
 23fb64c:	dbe3      	blt.n	23fb616 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
    return __builtin_bswap16(val);
 23fb64e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 23fb652:	ba5b      	rev16	r3, r3
 23fb654:	b29b      	uxth	r3, r3
            head.arg = v;
 23fb656:	e7db      	b.n	23fb610 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x28>
        CHECK(read((char*)&val, sizeof(val)));
 23fb658:	2204      	movs	r2, #4
 23fb65a:	6828      	ldr	r0, [r5, #0]
 23fb65c:	eb0d 0102 	add.w	r1, sp, r2
 23fb660:	f7ff ff90 	bl	23fb584 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
 23fb664:	2800      	cmp	r0, #0
 23fb666:	dbd6      	blt.n	23fb616 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
    return __builtin_bswap32(val);
 23fb668:	9b01      	ldr	r3, [sp, #4]
 23fb66a:	ba1b      	rev	r3, r3
            head.arg = v;
 23fb66c:	e7d0      	b.n	23fb610 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x28>
        CHECK(read((char*)&val, sizeof(val)));
 23fb66e:	2208      	movs	r2, #8
 23fb670:	4621      	mov	r1, r4
 23fb672:	6828      	ldr	r0, [r5, #0]
 23fb674:	f7ff ff86 	bl	23fb584 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
 23fb678:	2800      	cmp	r0, #0
 23fb67a:	dbcc      	blt.n	23fb616 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
    return __builtin_bswap64(val);
 23fb67c:	6823      	ldr	r3, [r4, #0]
 23fb67e:	6862      	ldr	r2, [r4, #4]
 23fb680:	ba1b      	rev	r3, r3
 23fb682:	ba12      	rev	r2, r2
        val = bigEndianToNative(val);
 23fb684:	e9c4 2300 	strd	r2, r3, [r4]
    return 0;
 23fb688:	2000      	movs	r0, #0
            break;
 23fb68a:	e7c4      	b.n	23fb616 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
            if (head.type == 0 /* Unsigned integer */ || head.type == 1 /* Negative integer */ || head.type == 6 /* Tagged item */) {
 23fb68c:	2a01      	cmp	r2, #1
 23fb68e:	d906      	bls.n	23fb69e <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0xb6>
 23fb690:	2a06      	cmp	r2, #6
 23fb692:	d004      	beq.n	23fb69e <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0xb6>
            head.arg = 0;
 23fb694:	2200      	movs	r2, #0
 23fb696:	2300      	movs	r3, #0
 23fb698:	e9c4 2300 	strd	r2, r3, [r4]
 23fb69c:	e7f4      	b.n	23fb688 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0xa0>
                return Error::BAD_DATA;
 23fb69e:	4801      	ldr	r0, [pc, #4]	; (23fb6a4 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0xbc>)
 23fb6a0:	e7b9      	b.n	23fb616 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE+0x2e>
 23fb6a2:	bf00      	nop
 23fb6a4:	fffffee8 	.word	0xfffffee8

023fb6a8 <_ZN8particle6detail8to_charsEPcS1_d>:

namespace detail {

#if !defined(__cpp_lib_to_chars) || defined(UNIT_TEST)

std::to_chars_result to_chars(char* first, char* last, double value) {
 23fb6a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fb6aa:	460d      	mov	r5, r1
    std::to_chars_result res;
    int n = std::snprintf(first, last - first, "%g", value);
 23fb6ac:	1a57      	subs	r7, r2, r1
std::to_chars_result to_chars(char* first, char* last, double value) {
 23fb6ae:	4604      	mov	r4, r0
 23fb6b0:	4616      	mov	r6, r2
    int n = std::snprintf(first, last - first, "%g", value);
 23fb6b2:	ed8d 0b00 	vstr	d0, [sp]
 23fb6b6:	4639      	mov	r1, r7
 23fb6b8:	4628      	mov	r0, r5
 23fb6ba:	4a09      	ldr	r2, [pc, #36]	; (23fb6e0 <_ZN8particle6detail8to_charsEPcS1_d+0x38>)
 23fb6bc:	f7fd fafe 	bl	23f8cbc <snprintf>
    if (n < 0 || n >= last - first) {
 23fb6c0:	2800      	cmp	r0, #0
 23fb6c2:	db01      	blt.n	23fb6c8 <_ZN8particle6detail8to_charsEPcS1_d+0x20>
 23fb6c4:	4287      	cmp	r7, r0
 23fb6c6:	dc05      	bgt.n	23fb6d4 <_ZN8particle6detail8to_charsEPcS1_d+0x2c>
        res.ec = std::errc::value_too_large;
 23fb6c8:	238b      	movs	r3, #139	; 0x8b
        res.ptr = last;
 23fb6ca:	e9c4 6300 	strd	r6, r3, [r4]
    } else {
        res.ec = std::errc();
        res.ptr = first + n;
    }
    return res;
}
 23fb6ce:	4620      	mov	r0, r4
 23fb6d0:	b003      	add	sp, #12
 23fb6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res.ec = std::errc();
 23fb6d4:	2300      	movs	r3, #0
        res.ptr = first + n;
 23fb6d6:	4405      	add	r5, r0
        res.ec = std::errc();
 23fb6d8:	6063      	str	r3, [r4, #4]
        res.ptr = first + n;
 23fb6da:	6025      	str	r5, [r4, #0]
    return res;
 23fb6dc:	e7f7      	b.n	23fb6ce <_ZN8particle6detail8to_charsEPcS1_d+0x26>
 23fb6de:	bf00      	nop
 23fb6e0:	023ffb9c 	.word	0x023ffb9c

023fb6e4 <_ZN8particle6detail10from_charsEPKcS2_Rd>:

std::from_chars_result from_chars(const char* first, const char* last, double& value) {
 23fb6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb6e6:	ed2d 8b02 	vpush	{d8}
    std::from_chars_result res;
    if (last > first) {
 23fb6ea:	4291      	cmp	r1, r2
std::from_chars_result from_chars(const char* first, const char* last, double& value) {
 23fb6ec:	4604      	mov	r4, r0
 23fb6ee:	460d      	mov	r5, r1
 23fb6f0:	461e      	mov	r6, r3
 23fb6f2:	b083      	sub	sp, #12
    if (last > first) {
 23fb6f4:	d21f      	bcs.n	23fb736 <_ZN8particle6detail10from_charsEPKcS2_Rd+0x52>
        char* end = nullptr;
 23fb6f6:	2700      	movs	r7, #0
 23fb6f8:	9701      	str	r7, [sp, #4]
        errno = 0;
 23fb6fa:	f7fd fb17 	bl	23f8d2c <__errno>
        double v = strtod(first, &end);
 23fb6fe:	a901      	add	r1, sp, #4
        errno = 0;
 23fb700:	6007      	str	r7, [r0, #0]
        double v = strtod(first, &end);
 23fb702:	4628      	mov	r0, r5
 23fb704:	f002 fc0a 	bl	23fdf1c <strtod>
 23fb708:	eeb0 8a40 	vmov.f32	s16, s0
 23fb70c:	eef0 8a60 	vmov.f32	s17, s1
        if (errno == ERANGE) {
 23fb710:	f7fd fb0c 	bl	23f8d2c <__errno>
 23fb714:	6803      	ldr	r3, [r0, #0]
 23fb716:	9f01      	ldr	r7, [sp, #4]
 23fb718:	2b22      	cmp	r3, #34	; 0x22
 23fb71a:	d106      	bne.n	23fb72a <_ZN8particle6detail10from_charsEPKcS2_Rd+0x46>
            res.ec = std::errc::result_out_of_range;
            res.ptr = end;
 23fb71c:	e9c4 7300 	strd	r7, r3, [r4]
    } else {
        res.ec = std::errc::invalid_argument;
        res.ptr = first;
    }
    return res;
}
 23fb720:	4620      	mov	r0, r4
 23fb722:	b003      	add	sp, #12
 23fb724:	ecbd 8b02 	vpop	{d8}
 23fb728:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (end == first || std::isspace((unsigned char)*first)) {
 23fb72a:	42bd      	cmp	r5, r7
 23fb72c:	d003      	beq.n	23fb736 <_ZN8particle6detail10from_charsEPKcS2_Rd+0x52>
 23fb72e:	7828      	ldrb	r0, [r5, #0]
 23fb730:	f001 fd12 	bl	23fd158 <isspace>
 23fb734:	b118      	cbz	r0, 23fb73e <_ZN8particle6detail10from_charsEPKcS2_Rd+0x5a>
        res.ec = std::errc::invalid_argument;
 23fb736:	2316      	movs	r3, #22
        res.ptr = first;
 23fb738:	e9c4 5300 	strd	r5, r3, [r4]
    return res;
 23fb73c:	e7f0      	b.n	23fb720 <_ZN8particle6detail10from_charsEPKcS2_Rd+0x3c>
            value = v;
 23fb73e:	ed86 8b00 	vstr	d8, [r6]
            res.ptr = end;
 23fb742:	e9c4 7000 	strd	r7, r0, [r4]
    return res;
 23fb746:	e7eb      	b.n	23fb720 <_ZN8particle6detail10from_charsEPKcS2_Rd+0x3c>

023fb748 <_ZN8particle6BufferaSEOS0_.isra.0>:
namespace particle {

/**
 * A dynamically allocated buffer.
 */
class Buffer {
 23fb748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fb74a:	4604      	mov	r4, r0
 23fb74c:	a801      	add	r0, sp, #4
 23fb74e:	f7fb f8d9 	bl	23f6904 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
 23fb752:	9a01      	ldr	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb754:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb756:	6022      	str	r2, [r4, #0]
 23fb758:	9a02      	ldr	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb75a:	9301      	str	r3, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb75c:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb75e:	6062      	str	r2, [r4, #4]
 23fb760:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb762:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb764:	68a3      	ldr	r3, [r4, #8]
 23fb766:	a801      	add	r0, sp, #4
      __a = _GLIBCXX_MOVE(__b);
 23fb768:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb76a:	9303      	str	r3, [sp, #12]
 23fb76c:	f7fd fb08 	bl	23f8d80 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
 23fb770:	b004      	add	sp, #16
 23fb772:	bd10      	pop	{r4, pc}

023fb774 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE>:
int readAndAppendToBuffer(DecodingStream& stream, size_t size, Buffer& buf) {
 23fb774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return size_;
 23fb778:	f8d2 8004 	ldr.w	r8, [r2, #4]
 23fb77c:	4607      	mov	r7, r0
    if (!buf.resize(oldSize + size)) {
 23fb77e:	eb01 0508 	add.w	r5, r1, r8
    if (n > size_) {
 23fb782:	4545      	cmp	r5, r8
int readAndAppendToBuffer(DecodingStream& stream, size_t size, Buffer& buf) {
 23fb784:	460e      	mov	r6, r1
 23fb786:	4614      	mov	r4, r2
 23fb788:	dd17      	ble.n	23fb7ba <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x46>
        if (n > capacity_ && !realloc(n)) {
 23fb78a:	6893      	ldr	r3, [r2, #8]
 23fb78c:	429d      	cmp	r5, r3
 23fb78e:	dc0a      	bgt.n	23fb7a6 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x32>
        construct(data_ + size_, data_ + n);
 23fb790:	e9d4 2300 	ldrd	r2, r3, [r4]
            new(p) T(std::forward<ArgsT>(args)...);
 23fb794:	2100      	movs	r1, #0
        construct(data_ + size_, data_ + n);
 23fb796:	4413      	add	r3, r2
 23fb798:	442a      	add	r2, r5
        for (; p != end; ++p) {
 23fb79a:	429a      	cmp	r2, r3
 23fb79c:	d00f      	beq.n	23fb7be <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x4a>
            new(p) T(std::forward<ArgsT>(args)...);
 23fb79e:	b103      	cbz	r3, 23fb7a2 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x2e>
 23fb7a0:	7019      	strb	r1, [r3, #0]
        for (; p != end; ++p) {
 23fb7a2:	3301      	adds	r3, #1
 23fb7a4:	e7f9      	b.n	23fb79a <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x26>
        if (n > capacity_ && !realloc(n)) {
 23fb7a6:	4629      	mov	r1, r5
 23fb7a8:	4610      	mov	r0, r2
 23fb7aa:	f7fd fb06 	bl	23f8dba <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>
 23fb7ae:	2800      	cmp	r0, #0
 23fb7b0:	d1ee      	bne.n	23fb790 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x1c>
        return Error::NO_MEMORY;
 23fb7b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
}
 23fb7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (n >= 0) {
 23fb7ba:	2d00      	cmp	r5, #0
 23fb7bc:	db00      	blt.n	23fb7c0 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x4c>
        size_ = n;
 23fb7be:	6065      	str	r5, [r4, #4]
    CHECK(stream.read(buf.data() + oldSize, size));
 23fb7c0:	6821      	ldr	r1, [r4, #0]
 23fb7c2:	4632      	mov	r2, r6
 23fb7c4:	6838      	ldr	r0, [r7, #0]
 23fb7c6:	4441      	add	r1, r8
 23fb7c8:	f7ff fedc 	bl	23fb584 <_ZN8particle12_GLOBAL__N_114DecodingStream4readEPcj.isra.0>
 23fb7cc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 23fb7d0:	e7f1      	b.n	23fb7b6 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE+0x42>

023fb7d2 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>:
    get(variant<_Types...>& __v)
 23fb7d2:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fb7d4:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
 23fb7d6:	2b07      	cmp	r3, #7
 23fb7d8:	d004      	beq.n	23fb7e4 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fb7da:	3bff      	subs	r3, #255	; 0xff
 23fb7dc:	4258      	negs	r0, r3
 23fb7de:	4158      	adcs	r0, r3
 23fb7e0:	f7fa ff7f 	bl	23f66e2 <_ZSt26__throw_bad_variant_accessb>
    }
 23fb7e4:	bd08      	pop	{r3, pc}
	...

023fb7e8 <_ZN8particle7Variant2asI6StringEERT_v>:
     *
     * @tparam T Target type.
     * @return Reference to the stored value.
     */
    template<typename T>
    T& as() {
 23fb7e8:	b510      	push	{r4, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fb7ea:	7c03      	ldrb	r3, [r0, #16]
 23fb7ec:	4604      	mov	r4, r0
        static_assert(IsAlternativeType<T>::value, "The type specified is not one of the alternative types of Variant");
        if (!is<T>()) {
 23fb7ee:	2b07      	cmp	r3, #7
    T& as() {
 23fb7f0:	b086      	sub	sp, #24
        if (!is<T>()) {
 23fb7f2:	d01a      	beq.n	23fb82a <_ZN8particle7Variant2asI6StringEERT_v+0x42>
        return std::visit(ConvertToVisitor<T>(), v_);
 23fb7f4:	2200      	movs	r2, #0
      if ((__variants.valueless_by_exception() || ...))
 23fb7f6:	2bff      	cmp	r3, #255	; 0xff
 23fb7f8:	f88d 2004 	strb.w	r2, [sp, #4]
 23fb7fc:	d101      	bne.n	23fb802 <_ZN8particle7Variant2asI6StringEERT_v+0x1a>
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 23fb7fe:	f7fd fa79 	bl	23f8cf4 <abort>
			   std::forward<_Variants>(__variants)...);
 23fb802:	4a12      	ldr	r2, [pc, #72]	; (23fb84c <_ZN8particle7Variant2asI6StringEERT_v+0x64>)
	  return make_signed_t<__index_type>(this->_M_index);
 23fb804:	b25b      	sxtb	r3, r3
			   std::forward<_Variants>(__variants)...);
 23fb806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fb80a:	a901      	add	r1, sp, #4
 23fb80c:	4602      	mov	r2, r0
 23fb80e:	a802      	add	r0, sp, #8
 23fb810:	4798      	blx	r3
	  if (index() == __index)
 23fb812:	7c23      	ldrb	r3, [r4, #16]
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 23fb814:	4620      	mov	r0, r4
	  if (index() == __index)
 23fb816:	2b07      	cmp	r3, #7
 23fb818:	d10c      	bne.n	23fb834 <_ZN8particle7Variant2asI6StringEERT_v+0x4c>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 23fb81a:	f7ff ffda 	bl	23fb7d2 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
 23fb81e:	a902      	add	r1, sp, #8
 23fb820:	f7ff fc78 	bl	23fb114 <_ZN6StringaSEOS_>
            v_ = to<T>();
 23fb824:	a802      	add	r0, sp, #8
 23fb826:	f7ff fbc7 	bl	23fafb8 <_ZN6StringD1Ev>
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 23fb82a:	4620      	mov	r0, r4
 23fb82c:	f7ff ffd1 	bl	23fb7d2 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
        }
        return value<T>();
    }
 23fb830:	b006      	add	sp, #24
 23fb832:	bd10      	pop	{r4, pc}
	      this->_M_reset();
 23fb834:	f7fb fa70 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fb838:	2307      	movs	r3, #7
      ::new ((void*)std::addressof(__storage))
 23fb83a:	4620      	mov	r0, r4
      __v._M_index = _Np;
 23fb83c:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
 23fb83e:	a902      	add	r1, sp, #8
 23fb840:	f7ff fc43 	bl	23fb0ca <_ZN6StringC1EOS_>
	  return std::get<_Np>(*this);
 23fb844:	4620      	mov	r0, r4
 23fb846:	f7ff ffc4 	bl	23fb7d2 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
 23fb84a:	e7eb      	b.n	23fb824 <_ZN8particle7Variant2asI6StringEERT_v+0x3c>
 23fb84c:	023ff570 	.word	0x023ff570

023fb850 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>:
    get(variant<_Types...>& __v)
 23fb850:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fb852:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
 23fb854:	2b09      	cmp	r3, #9
 23fb856:	d004      	beq.n	23fb862 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fb858:	3bff      	subs	r3, #255	; 0xff
 23fb85a:	4258      	negs	r0, r3
 23fb85c:	4158      	adcs	r0, r3
 23fb85e:	f7fa ff40 	bl	23f66e2 <_ZSt26__throw_bad_variant_accessb>
    }
 23fb862:	bd08      	pop	{r3, pc}

023fb864 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v>:
    T& as() {
 23fb864:	b510      	push	{r4, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fb866:	7c03      	ldrb	r3, [r0, #16]
 23fb868:	4604      	mov	r4, r0
        if (!is<T>()) {
 23fb86a:	2b09      	cmp	r3, #9
    T& as() {
 23fb86c:	b086      	sub	sp, #24
        if (!is<T>()) {
 23fb86e:	d02a      	beq.n	23fb8c6 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v+0x62>
        return std::visit(ConvertToVisitor<T>(), v_);
 23fb870:	2200      	movs	r2, #0
      if ((__variants.valueless_by_exception() || ...))
 23fb872:	2bff      	cmp	r3, #255	; 0xff
 23fb874:	f88d 200c 	strb.w	r2, [sp, #12]
 23fb878:	d101      	bne.n	23fb87e <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v+0x1a>
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 23fb87a:	f7fd fa3b 	bl	23f8cf4 <abort>
			   std::forward<_Variants>(__variants)...);
 23fb87e:	4a1b      	ldr	r2, [pc, #108]	; (23fb8ec <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v+0x88>)
	  return make_signed_t<__index_type>(this->_M_index);
 23fb880:	b25b      	sxtb	r3, r3
			   std::forward<_Variants>(__variants)...);
 23fb882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fb886:	a903      	add	r1, sp, #12
 23fb888:	4602      	mov	r2, r0
 23fb88a:	4668      	mov	r0, sp
 23fb88c:	4798      	blx	r3
	  if (index() == __index)
 23fb88e:	7c23      	ldrb	r3, [r4, #16]
 23fb890:	2b09      	cmp	r3, #9
 23fb892:	d11d      	bne.n	23fb8d0 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v+0x6c>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 23fb894:	4669      	mov	r1, sp
 23fb896:	a803      	add	r0, sp, #12
 23fb898:	f7fb f858 	bl	23f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
 23fb89c:	4620      	mov	r0, r4
 23fb89e:	f7ff ffd7 	bl	23fb850 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
      __a = _GLIBCXX_MOVE(__b);
 23fb8a2:	9a03      	ldr	r2, [sp, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb8a4:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb8a6:	6002      	str	r2, [r0, #0]
 23fb8a8:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb8aa:	9303      	str	r3, [sp, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb8ac:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb8ae:	6042      	str	r2, [r0, #4]
 23fb8b0:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb8b2:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb8b4:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fb8b6:	6082      	str	r2, [r0, #8]
 23fb8b8:	a803      	add	r0, sp, #12
      __b = _GLIBCXX_MOVE(__tmp);
 23fb8ba:	9305      	str	r3, [sp, #20]
 23fb8bc:	f7fb faab 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
            v_ = to<T>();
 23fb8c0:	4668      	mov	r0, sp
 23fb8c2:	f7fb faa8 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 23fb8c6:	4620      	mov	r0, r4
 23fb8c8:	f7ff ffc2 	bl	23fb850 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
    }
 23fb8cc:	b006      	add	sp, #24
 23fb8ce:	bd10      	pop	{r4, pc}
	      this->_M_reset();
 23fb8d0:	4620      	mov	r0, r4
 23fb8d2:	f7fb fa21 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fb8d6:	2309      	movs	r3, #9
      ::new ((void*)std::addressof(__storage))
 23fb8d8:	4669      	mov	r1, sp
 23fb8da:	4620      	mov	r0, r4
      __v._M_index = _Np;
 23fb8dc:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
 23fb8de:	f7fb f835 	bl	23f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  return std::get<_Np>(*this);
 23fb8e2:	4620      	mov	r0, r4
 23fb8e4:	f7ff ffb4 	bl	23fb850 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
 23fb8e8:	e7ea      	b.n	23fb8c0 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v+0x5c>
 23fb8ea:	bf00      	nop
 23fb8ec:	023ffba0 	.word	0x023ffba0

023fb8f0 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>:
    get(const variant<_Types...>& __v)
 23fb8f0:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fb8f2:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
 23fb8f4:	2b09      	cmp	r3, #9
 23fb8f6:	d004      	beq.n	23fb902 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fb8f8:	3bff      	subs	r3, #255	; 0xff
 23fb8fa:	4258      	negs	r0, r3
 23fb8fc:	4158      	adcs	r0, r3
 23fb8fe:	f7fa fef0 	bl	23f66e2 <_ZSt26__throw_bad_variant_accessb>
    }
 23fb902:	bd08      	pop	{r3, pc}

023fb904 <_ZNK8particle7Variant2atEi>:
        return;
    }
    arr.removeAt(index);
}

Variant Variant::at(int index) const {
 23fb904:	b538      	push	{r3, r4, r5, lr}
    if (!isArray()) {
 23fb906:	7c0b      	ldrb	r3, [r1, #16]
Variant Variant::at(int index) const {
 23fb908:	4604      	mov	r4, r0
    if (!isArray()) {
 23fb90a:	2b09      	cmp	r3, #9
Variant Variant::at(int index) const {
 23fb90c:	4608      	mov	r0, r1
 23fb90e:	4615      	mov	r5, r2
    if (!isArray()) {
 23fb910:	d006      	beq.n	23fb920 <_ZNK8particle7Variant2atEi+0x1c>
        return Variant();
 23fb912:	2218      	movs	r2, #24
 23fb914:	2100      	movs	r1, #0
 23fb916:	4620      	mov	r0, r4
 23fb918:	f001 fc4d 	bl	23fd1b6 <memset>
    auto& arr = value<VariantArray>();
    if (index < 0 || index >= arr.size()) {
        return Variant();
    }
    return arr.at(index);
}
 23fb91c:	4620      	mov	r0, r4
 23fb91e:	bd38      	pop	{r3, r4, r5, pc}
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 23fb920:	f7ff ffe6 	bl	23fb8f0 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
    if (index < 0 || index >= arr.size()) {
 23fb924:	2d00      	cmp	r5, #0
 23fb926:	dbf4      	blt.n	23fb912 <_ZNK8particle7Variant2atEi+0xe>
 23fb928:	6843      	ldr	r3, [r0, #4]
 23fb92a:	429d      	cmp	r5, r3
 23fb92c:	daf1      	bge.n	23fb912 <_ZNK8particle7Variant2atEi+0xe>
      _Move_ctor_base(const _Move_ctor_base&) = default;
 23fb92e:	2118      	movs	r1, #24
    return data_[i];
 23fb930:	6803      	ldr	r3, [r0, #0]
 23fb932:	4620      	mov	r0, r4
 23fb934:	fb01 3105 	mla	r1, r1, r5, r3
 23fb938:	f7fb f826 	bl	23f6988 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
    }
 23fb93c:	e7ee      	b.n	23fb91c <_ZNK8particle7Variant2atEi+0x18>
	...

023fb940 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_>:
    return data_ + size_;
 23fb940:	2328      	movs	r3, #40	; 0x28
     *
     * @param key Key.
     * @return Iterator.
     */
    template<typename T>
    Iterator lowerBound(const T& key) {
 23fb942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb946:	460f      	mov	r7, r1
 23fb948:	e9d0 6400 	ldrd	r6, r4, [r0]
 23fb94c:	435c      	muls	r4, r3
      return __last - __first;
 23fb94e:	4b13      	ldr	r3, [pc, #76]	; (23fb99c <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_+0x5c>)
 23fb950:	10e4      	asrs	r4, r4, #3
 23fb952:	435c      	muls	r4, r3
 23fb954:	b086      	sub	sp, #24
      while (__len > 0)
 23fb956:	2c00      	cmp	r4, #0
 23fb958:	dd1c      	ble.n	23fb994 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_+0x54>
	  _DistanceType __half = __len >> 1;
 23fb95a:	1065      	asrs	r5, r4, #1
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
 23fb95c:	4629      	mov	r1, r5
 23fb95e:	a801      	add	r0, sp, #4
	  _ForwardIterator __middle = __first;
 23fb960:	9601      	str	r6, [sp, #4]
 23fb962:	f7ff fd79 	bl	23fb458 <_ZSt9__advanceIPSt4pairIK6StringN8particle7VariantEEiEvRT_T0_St26random_access_iterator_tag.isra.0>
        return std::lower_bound(entries_.begin(), entries_.end(), key, [this](const Entry& entry, const T& key) {
            return this->cmp_(entry.first, key);
 23fb966:	f8dd 8004 	ldr.w	r8, [sp, #4]
 23fb96a:	6839      	ldr	r1, [r7, #0]
 23fb96c:	a802      	add	r0, sp, #8
 23fb96e:	f7ff fb6e 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
 23fb972:	4640      	mov	r0, r8
 23fb974:	a902      	add	r1, sp, #8
 23fb976:	f7ff fc2e 	bl	23fb1d6 <_ZNK6StringltERKS_>
 23fb97a:	4680      	mov	r8, r0
 23fb97c:	a802      	add	r0, sp, #8
 23fb97e:	f7ff fb1b 	bl	23fafb8 <_ZN6StringD1Ev>
	  if (__comp(__middle, __val))
 23fb982:	f1b8 0f00 	cmp.w	r8, #0
 23fb986:	d003      	beq.n	23fb990 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_+0x50>
	      __first = __middle;
 23fb988:	9e01      	ldr	r6, [sp, #4]
	      __len = __len - __half - 1;
 23fb98a:	1b65      	subs	r5, r4, r5
	      ++__first;
 23fb98c:	3628      	adds	r6, #40	; 0x28
	      __len = __len - __half - 1;
 23fb98e:	3d01      	subs	r5, #1
      while (__len > 0)
 23fb990:	462c      	mov	r4, r5
 23fb992:	e7e0      	b.n	23fb956 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_+0x16>
        });
    }
 23fb994:	4630      	mov	r0, r6
 23fb996:	b006      	add	sp, #24
 23fb998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fb99c:	cccccccd 	.word	0xcccccccd

023fb9a0 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_>:
 23fb9a0:	2328      	movs	r3, #40	; 0x28
    Iterator lowerBound(const T& key) {
 23fb9a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fb9a4:	460f      	mov	r7, r1
 23fb9a6:	e9d0 6400 	ldrd	r6, r4, [r0]
 23fb9aa:	435c      	muls	r4, r3
      return __last - __first;
 23fb9ac:	4b0c      	ldr	r3, [pc, #48]	; (23fb9e0 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_+0x40>)
 23fb9ae:	10e4      	asrs	r4, r4, #3
 23fb9b0:	435c      	muls	r4, r3
 23fb9b2:	2c00      	cmp	r4, #0
 23fb9b4:	dd10      	ble.n	23fb9d8 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_+0x38>
	  _DistanceType __half = __len >> 1;
 23fb9b6:	1065      	asrs	r5, r4, #1
      std::__advance(__i, __d, std::__iterator_category(__i));
 23fb9b8:	4629      	mov	r1, r5
 23fb9ba:	a801      	add	r0, sp, #4
	  _ForwardIterator __middle = __first;
 23fb9bc:	9601      	str	r6, [sp, #4]
 23fb9be:	f7ff fd4b 	bl	23fb458 <_ZSt9__advanceIPSt4pairIK6StringN8particle7VariantEEiEvRT_T0_St26random_access_iterator_tag.isra.0>
 23fb9c2:	4639      	mov	r1, r7
 23fb9c4:	9801      	ldr	r0, [sp, #4]
 23fb9c6:	f7ff fc06 	bl	23fb1d6 <_ZNK6StringltERKS_>
	  if (__comp(__middle, __val))
 23fb9ca:	b118      	cbz	r0, 23fb9d4 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_+0x34>
	      __first = __middle;
 23fb9cc:	9e01      	ldr	r6, [sp, #4]
	      __len = __len - __half - 1;
 23fb9ce:	1b65      	subs	r5, r4, r5
	      ++__first;
 23fb9d0:	3628      	adds	r6, #40	; 0x28
	      __len = __len - __half - 1;
 23fb9d2:	3d01      	subs	r5, #1
      while (__len > 0)
 23fb9d4:	462c      	mov	r4, r5
 23fb9d6:	e7ec      	b.n	23fb9b2 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_+0x12>
    }
 23fb9d8:	4630      	mov	r0, r6
 23fb9da:	b003      	add	sp, #12
 23fb9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fb9de:	bf00      	nop
 23fb9e0:	cccccccd 	.word	0xcccccccd

023fb9e4 <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>:
 23fb9e4:	b538      	push	{r3, r4, r5, lr}
 23fb9e6:	4604      	mov	r4, r0
 23fb9e8:	460d      	mov	r5, r1
 23fb9ea:	f7ff fb88 	bl	23fb0fe <_ZN6StringC1ERKS_>
 23fb9ee:	f105 0110 	add.w	r1, r5, #16
 23fb9f2:	f104 0010 	add.w	r0, r4, #16
 23fb9f6:	f7fb fe51 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fb9fa:	4620      	mov	r0, r4
 23fb9fc:	bd38      	pop	{r3, r4, r5, pc}

023fb9fe <_ZNSt4pairIK6StringN8particle7VariantEEC1IS0_S3_Lb1EEEOS_IT_T0_E>:
	       enable_if<_PCCFP<_U1, _U2>::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
 23fb9fe:	b538      	push	{r3, r4, r5, lr}
 23fba00:	4604      	mov	r4, r0
 23fba02:	460d      	mov	r5, r1
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
 23fba04:	f7ff fb61 	bl	23fb0ca <_ZN6StringC1EOS_>
 23fba08:	f105 0110 	add.w	r1, r5, #16
 23fba0c:	f104 0010 	add.w	r0, r4, #16
 23fba10:	f7fb fe44 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fba14:	4620      	mov	r0, r4
 23fba16:	bd38      	pop	{r3, r4, r5, pc}

023fba18 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>:
    get(const variant<_Types...>& __v)
 23fba18:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fba1a:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
 23fba1c:	2b07      	cmp	r3, #7
 23fba1e:	d004      	beq.n	23fba2a <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fba20:	3bff      	subs	r3, #255	; 0xff
 23fba22:	4258      	negs	r0, r3
 23fba24:	4158      	adcs	r0, r3
 23fba26:	f7fa fe5c 	bl	23f66e2 <_ZSt26__throw_bad_variant_accessb>
    }
 23fba2a:	bd08      	pop	{r3, pc}

023fba2c <_ZSt3getILj8EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>:
    get(const variant<_Types...>& __v)
 23fba2c:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fba2e:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
 23fba30:	2b08      	cmp	r3, #8
 23fba32:	d004      	beq.n	23fba3e <_ZSt3getILj8EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fba34:	3bff      	subs	r3, #255	; 0xff
 23fba36:	4258      	negs	r0, r3
 23fba38:	4158      	adcs	r0, r3
 23fba3a:	f7fa fe52 	bl	23f66e2 <_ZSt26__throw_bad_variant_accessb>
    }
 23fba3e:	bd08      	pop	{r3, pc}

023fba40 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>:
    get(const variant<_Types...>& __v)
 23fba40:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fba42:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
 23fba44:	2b0a      	cmp	r3, #10
 23fba46:	d004      	beq.n	23fba52 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fba48:	3bff      	subs	r3, #255	; 0xff
 23fba4a:	4258      	negs	r0, r3
 23fba4c:	4158      	adcs	r0, r3
 23fba4e:	f7fa fe48 	bl	23f66e2 <_ZSt26__throw_bad_variant_accessb>
    }
 23fba52:	bd08      	pop	{r3, pc}

023fba54 <_ZNK8particle7Variant4sizeEv>:
        return false;
    }
    return value<VariantMap>().has(key);
}

int Variant::size() const {
 23fba54:	b508      	push	{r3, lr}
 23fba56:	7c03      	ldrb	r3, [r0, #16]
 23fba58:	3b07      	subs	r3, #7
 23fba5a:	2b03      	cmp	r3, #3
 23fba5c:	d811      	bhi.n	23fba82 <_ZNK8particle7Variant4sizeEv+0x2e>
 23fba5e:	e8df f003 	tbb	[pc, r3]
 23fba62:	0602      	.short	0x0602
 23fba64:	0d0a      	.short	0x0d0a
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 23fba66:	f7ff ffd7 	bl	23fba18 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
    switch (type()) {
    case Type::STRING:
        return value<String>().length();
 23fba6a:	6880      	ldr	r0, [r0, #8]
    case Type::MAP:
        return value<VariantMap>().size();
    default:
        return 0;
    }
}
 23fba6c:	bd08      	pop	{r3, pc}
 23fba6e:	f7ff ffdd 	bl	23fba2c <_ZSt3getILj8EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
    return size_;
 23fba72:	6840      	ldr	r0, [r0, #4]
        return value<VariantMap>().size();
 23fba74:	e7fa      	b.n	23fba6c <_ZNK8particle7Variant4sizeEv+0x18>
 23fba76:	f7ff ff3b 	bl	23fb8f0 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
 23fba7a:	e7fa      	b.n	23fba72 <_ZNK8particle7Variant4sizeEv+0x1e>
 23fba7c:	f7ff ffe0 	bl	23fba40 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
 23fba80:	e7f7      	b.n	23fba72 <_ZNK8particle7Variant4sizeEv+0x1e>
	  return make_signed_t<__index_type>(this->_M_index);
 23fba82:	2000      	movs	r0, #0
 23fba84:	e7f2      	b.n	23fba6c <_ZNK8particle7Variant4sizeEv+0x18>

023fba86 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE>:
int encodeToCbor(EncodingStream& stream, const Variant& var) {
 23fba86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fba8a:	7c0b      	ldrb	r3, [r1, #16]
 23fba8c:	4604      	mov	r4, r0
 23fba8e:	4608      	mov	r0, r1
 23fba90:	2b0a      	cmp	r3, #10
 23fba92:	f200 80bb 	bhi.w	23fbc0c <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x186>
 23fba96:	e8df f003 	tbb	[pc, r3]
 23fba9a:	0f06      	.short	0x0f06
 23fba9c:	322d241c 	.word	0x322d241c
 23fbaa0:	786a6337 	.word	0x786a6337
 23fbaa4:	95          	.byte	0x95
 23fbaa5:	00          	.byte	0x00
        CHECK(stream.writeUint8(0xf6 /* null */)); // See RFC 8949, Appendix B
 23fbaa6:	21f6      	movs	r1, #246	; 0xf6
        CHECK(stream.writeUint8(v ? 0xf5 /* true */ : 0xf4 /* false */));
 23fbaa8:	6820      	ldr	r0, [r4, #0]
 23fbaaa:	f7ff fceb 	bl	23fb484 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23fbaae:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
 23fbab2:	b002      	add	sp, #8
 23fbab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__v.index() != _Np)
 23fbab8:	2b01      	cmp	r3, #1
 23fbaba:	d004      	beq.n	23fbac6 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x40>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fbabc:	3bff      	subs	r3, #255	; 0xff
 23fbabe:	4258      	negs	r0, r3
 23fbac0:	4158      	adcs	r0, r3
 23fbac2:	f7fa fe0e 	bl	23f66e2 <_ZSt26__throw_bad_variant_accessb>
        CHECK(stream.writeUint8(v ? 0xf5 /* true */ : 0xf4 /* false */));
 23fbac6:	7803      	ldrb	r3, [r0, #0]
 23fbac8:	2b00      	cmp	r3, #0
 23fbaca:	bf14      	ite	ne
 23fbacc:	21f5      	movne	r1, #245	; 0xf5
 23fbace:	21f4      	moveq	r1, #244	; 0xf4
 23fbad0:	e7ea      	b.n	23fbaa8 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x22>
      if (__v.index() != _Np)
 23fbad2:	2b02      	cmp	r3, #2
 23fbad4:	d1f2      	bne.n	23fbabc <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
        CHECK(writeCborSignedInteger(stream, var.value<int>()));
 23fbad6:	6802      	ldr	r2, [r0, #0]
 23fbad8:	17d3      	asrs	r3, r2, #31
        CHECK(writeCborSignedInteger(stream, var.value<int64_t>()));
 23fbada:	4620      	mov	r0, r4
 23fbadc:	f7ff fd34 	bl	23fb548 <_ZN8particle12_GLOBAL__N_122writeCborSignedIntegerERNS0_14EncodingStreamEx>
 23fbae0:	e7e5      	b.n	23fbaae <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x28>
 23fbae2:	2b03      	cmp	r3, #3
 23fbae4:	d1ea      	bne.n	23fbabc <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
    CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
 23fbae6:	2300      	movs	r3, #0
 23fbae8:	6802      	ldr	r2, [r0, #0]
 23fbaea:	2100      	movs	r1, #0
 23fbaec:	4620      	mov	r0, r4
 23fbaee:	f7ff fcd6 	bl	23fb49e <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
 23fbaf2:	e7dc      	b.n	23fbaae <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x28>
 23fbaf4:	2b04      	cmp	r3, #4
 23fbaf6:	d1e1      	bne.n	23fbabc <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
        CHECK(writeCborSignedInteger(stream, var.value<int64_t>()));
 23fbaf8:	e9d0 2300 	ldrd	r2, r3, [r0]
 23fbafc:	e7ed      	b.n	23fbada <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x54>
 23fbafe:	2b05      	cmp	r3, #5
 23fbb00:	d1dc      	bne.n	23fbabc <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
    CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
 23fbb02:	e9d0 2300 	ldrd	r2, r3, [r0]
 23fbb06:	e7f0      	b.n	23fbaea <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x64>
 23fbb08:	2b06      	cmp	r3, #6
 23fbb0a:	d1d7      	bne.n	23fbabc <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
        double d = var.value<double>();
 23fbb0c:	e9d0 6700 	ldrd	r6, r7, [r0]
        float f = d;
 23fbb10:	4639      	mov	r1, r7
 23fbb12:	4630      	mov	r0, r6
 23fbb14:	f7f9 fff2 	bl	23f5afc <__aeabi_d2f>
 23fbb18:	4605      	mov	r5, r0
        if (f == d) {
 23fbb1a:	f7f9 fcb5 	bl	23f5488 <__aeabi_f2d>
 23fbb1e:	4632      	mov	r2, r6
 23fbb20:	463b      	mov	r3, r7
 23fbb22:	f8d4 8000 	ldr.w	r8, [r4]
 23fbb26:	f7f9 ff6f 	bl	23f5a08 <__aeabi_dcmpeq>
 23fbb2a:	b168      	cbz	r0, 23fbb48 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0xc2>
            CHECK(stream.writeUint8(0xfa /* Single-precision */));
 23fbb2c:	21fa      	movs	r1, #250	; 0xfa
 23fbb2e:	4640      	mov	r0, r8
 23fbb30:	f7ff fca8 	bl	23fb484 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23fbb34:	2800      	cmp	r0, #0
 23fbb36:	dbbc      	blt.n	23fbab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
        CHECK(write((const char*)&v, sizeof(v)));
 23fbb38:	2204      	movs	r2, #4
    return __builtin_bswap32(val);
 23fbb3a:	ba2d      	rev	r5, r5
        v = nativeToBigEndian(v);
 23fbb3c:	9500      	str	r5, [sp, #0]
        CHECK(write((const char*)&v, sizeof(v)));
 23fbb3e:	4669      	mov	r1, sp
    CHECK(stream.write(buf.data(), buf.size()));
 23fbb40:	6820      	ldr	r0, [r4, #0]
 23fbb42:	f7ff fc8f 	bl	23fb464 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>
 23fbb46:	e7b2      	b.n	23fbaae <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x28>
            CHECK(stream.writeUint8(0xfb /* Double-precision */));
 23fbb48:	21fb      	movs	r1, #251	; 0xfb
 23fbb4a:	4640      	mov	r0, r8
 23fbb4c:	f7ff fc9a 	bl	23fb484 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23fbb50:	2800      	cmp	r0, #0
 23fbb52:	dbae      	blt.n	23fbab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
    return __builtin_bswap64(val);
 23fbb54:	ba3a      	rev	r2, r7
 23fbb56:	ba33      	rev	r3, r6
        v = nativeToBigEndian(v);
 23fbb58:	e9cd 2300 	strd	r2, r3, [sp]
        CHECK(write((const char*)&v, sizeof(v)));
 23fbb5c:	2208      	movs	r2, #8
 23fbb5e:	e7ee      	b.n	23fbb3e <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0xb8>
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 23fbb60:	f7ff ff5a 	bl	23fba18 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
 23fbb64:	4601      	mov	r1, r0
        CHECK(writeCborTextString(stream, var.value<String>()));
 23fbb66:	4620      	mov	r0, r4
 23fbb68:	f7ff fcfa 	bl	23fb560 <_ZN8particle12_GLOBAL__N_119writeCborTextStringERNS0_14EncodingStreamERK6String>
 23fbb6c:	e79f      	b.n	23fbaae <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x28>
 23fbb6e:	f7ff ff5d 	bl	23fba2c <_ZSt3getILj8EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
    CHECK(writeCborHead(stream, 2 /* Byte string */, buf.size()));
 23fbb72:	2300      	movs	r3, #0
 23fbb74:	6842      	ldr	r2, [r0, #4]
 23fbb76:	4605      	mov	r5, r0
 23fbb78:	2102      	movs	r1, #2
 23fbb7a:	4620      	mov	r0, r4
 23fbb7c:	f7ff fc8f 	bl	23fb49e <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
 23fbb80:	2800      	cmp	r0, #0
 23fbb82:	db96      	blt.n	23fbab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
    CHECK(stream.write(buf.data(), buf.size()));
 23fbb84:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fbb88:	e7da      	b.n	23fbb40 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0xba>
 23fbb8a:	f7ff feb1 	bl	23fb8f0 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
        CHECK(writeCborHead(stream, 4 /* Array */, arr.size()));
 23fbb8e:	6842      	ldr	r2, [r0, #4]
 23fbb90:	4606      	mov	r6, r0
 23fbb92:	2104      	movs	r1, #4
 23fbb94:	4620      	mov	r0, r4
 23fbb96:	17d3      	asrs	r3, r2, #31
 23fbb98:	f7ff fc81 	bl	23fb49e <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
 23fbb9c:	2800      	cmp	r0, #0
 23fbb9e:	db88      	blt.n	23fbab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
    return data_ + size_;
 23fbba0:	e9d6 5600 	ldrd	r5, r6, [r6]
 23fbba4:	2318      	movs	r3, #24
 23fbba6:	fb03 5606 	mla	r6, r3, r6, r5
        for (auto& v: arr) {
 23fbbaa:	42b5      	cmp	r5, r6
 23fbbac:	d101      	bne.n	23fbbb2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x12c>
    return 0;
 23fbbae:	2000      	movs	r0, #0
 23fbbb0:	e77f      	b.n	23fbab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
            CHECK(encodeToCbor(stream, v));
 23fbbb2:	4629      	mov	r1, r5
 23fbbb4:	4620      	mov	r0, r4
 23fbbb6:	f7ff ff66 	bl	23fba86 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE>
 23fbbba:	2800      	cmp	r0, #0
 23fbbbc:	f105 0518 	add.w	r5, r5, #24
 23fbbc0:	daf3      	bge.n	23fbbaa <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x124>
 23fbbc2:	e776      	b.n	23fbab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
 23fbbc4:	f7ff ff3c 	bl	23fba40 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
        CHECK(writeCborHead(stream, 5 /* Map */, entries.size()));
 23fbbc8:	6842      	ldr	r2, [r0, #4]
 23fbbca:	4606      	mov	r6, r0
 23fbbcc:	2105      	movs	r1, #5
 23fbbce:	4620      	mov	r0, r4
 23fbbd0:	17d3      	asrs	r3, r2, #31
 23fbbd2:	f7ff fc64 	bl	23fb49e <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
 23fbbd6:	2800      	cmp	r0, #0
 23fbbd8:	f6ff af6b 	blt.w	23fbab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
 23fbbdc:	e9d6 5600 	ldrd	r5, r6, [r6]
 23fbbe0:	2328      	movs	r3, #40	; 0x28
 23fbbe2:	fb03 5606 	mla	r6, r3, r6, r5
        for (auto& e: entries) {
 23fbbe6:	42b5      	cmp	r5, r6
 23fbbe8:	d0e1      	beq.n	23fbbae <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x128>
            CHECK(writeCborTextString(stream, e.first));
 23fbbea:	4629      	mov	r1, r5
 23fbbec:	4620      	mov	r0, r4
 23fbbee:	f7ff fcb7 	bl	23fb560 <_ZN8particle12_GLOBAL__N_119writeCborTextStringERNS0_14EncodingStreamERK6String>
 23fbbf2:	2800      	cmp	r0, #0
 23fbbf4:	f6ff af5d 	blt.w	23fbab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
            CHECK(encodeToCbor(stream, e.second));
 23fbbf8:	f105 0110 	add.w	r1, r5, #16
 23fbbfc:	4620      	mov	r0, r4
 23fbbfe:	f7ff ff42 	bl	23fba86 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE>
 23fbc02:	2800      	cmp	r0, #0
 23fbc04:	f105 0528 	add.w	r5, r5, #40	; 0x28
 23fbc08:	daed      	bge.n	23fbbe6 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x160>
 23fbc0a:	e752      	b.n	23fbab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
	  return make_signed_t<__index_type>(this->_M_index);
 23fbc0c:	f06f 00f9 	mvn.w	r0, #249	; 0xf9
 23fbc10:	e74f      	b.n	23fbab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>

023fbc12 <_ZN8particle12encodeToCBORERKNS_7VariantER5Print>:
        return Variant();
    }
    return v;
}

int encodeToCBOR(const Variant& var, Print& stream) {
 23fbc12:	b507      	push	{r0, r1, r2, lr}
            stream_(stream) {
 23fbc14:	9101      	str	r1, [sp, #4]
    EncodingStream s(stream);
    CHECK(encodeToCbor(s, var));
 23fbc16:	4601      	mov	r1, r0
 23fbc18:	a801      	add	r0, sp, #4
 23fbc1a:	f7ff ff34 	bl	23fba86 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE>
    return 0;
}
 23fbc1e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 23fbc22:	b003      	add	sp, #12
 23fbc24:	f85d fb04 	ldr.w	pc, [sp], #4

023fbc28 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
 23fbc28:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
 23fbc2a:	6883      	ldr	r3, [r0, #8]
 23fbc2c:	428b      	cmp	r3, r1
 23fbc2e:	da02      	bge.n	23fbc36 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi+0xe>
 23fbc30:	f7fb fea2 	bl	23f7978 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
}
 23fbc34:	bd08      	pop	{r3, pc}
    return true;
 23fbc36:	2001      	movs	r0, #1
 23fbc38:	e7fc      	b.n	23fbc34 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi+0xc>

023fbc3a <_ZN8particle7Variant14ensureCapacityIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEEbRT_i>:
            return false;
        }
    }

    template<typename ContainerT>
    static bool ensureCapacity(ContainerT& cont, int count) {
 23fbc3a:	b508      	push	{r3, lr}
        int newSize = cont.size() + count;
 23fbc3c:	6842      	ldr	r2, [r0, #4]
    return capacity_;
 23fbc3e:	6883      	ldr	r3, [r0, #8]
 23fbc40:	4411      	add	r1, r2
        if (cont.capacity() >= newSize) {
 23fbc42:	4299      	cmp	r1, r3
 23fbc44:	dd0a      	ble.n	23fbc5c <_ZN8particle7Variant14ensureCapacityIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEEbRT_i+0x22>
            return true;
        }
        return cont.reserve(std::max(newSize, cont.capacity() * 3 / 2));
 23fbc46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fbc4a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 23fbc4e:	105b      	asrs	r3, r3, #1
 23fbc50:	4299      	cmp	r1, r3
 23fbc52:	bfb8      	it	lt
 23fbc54:	4619      	movlt	r1, r3
 23fbc56:	f7ff ffe7 	bl	23fbc28 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi>
    }
 23fbc5a:	bd08      	pop	{r3, pc}
            return true;
 23fbc5c:	2001      	movs	r0, #1
 23fbc5e:	e7fc      	b.n	23fbc5a <_ZN8particle7Variant14ensureCapacityIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEEbRT_i+0x20>

023fbc60 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS4_16DefaultAllocatorEEEEEONS7_16ConvertToVisitorIS9_vEERKSt7variantIJSt9monostatebijxyd6StringNS6_6BufferES9_NS6_3MapISG_S7_St4lessISG_EEEEEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESD_SO_>:
template<>
struct Variant::ConvertToVisitor<VariantArray> {
    bool ok = false;

    VariantArray operator()(const VariantArray& val) {
        ok = true;
 23fbc60:	2301      	movs	r3, #1
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fbc62:	b510      	push	{r4, lr}
 23fbc64:	4604      	mov	r4, r0
 23fbc66:	700b      	strb	r3, [r1, #0]
        return val;
 23fbc68:	4611      	mov	r1, r2
 23fbc6a:	f7fb fe9f 	bl	23f79ac <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_>
      }
 23fbc6e:	4620      	mov	r0, r4
 23fbc70:	bd10      	pop	{r4, pc}

023fbc72 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fbc72:	b570      	push	{r4, r5, r6, lr}
 23fbc74:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbc76:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fbc7a:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fbc7c:	4604      	mov	r4, r0
 23fbc7e:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbc80:	da11      	bge.n	23fbca6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_+0x34>
    T* const p = data_ + i;
 23fbc82:	2218      	movs	r2, #24
 23fbc84:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fbc86:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
 23fbc88:	fb02 3505 	mla	r5, r2, r5, r3
    move(p + 1, p, data_ + size_);
 23fbc8c:	fb02 3201 	mla	r2, r2, r1, r3
 23fbc90:	f105 0018 	add.w	r0, r5, #24
 23fbc94:	4629      	mov	r1, r5
 23fbc96:	f7fb fe45 	bl	23f7924 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fbc9a:	b955      	cbnz	r5, 23fbcb2 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_+0x40>
    ++size_;
 23fbc9c:	6863      	ldr	r3, [r4, #4]
    return true;
 23fbc9e:	2001      	movs	r0, #1
    ++size_;
 23fbca0:	3301      	adds	r3, #1
 23fbca2:	6063      	str	r3, [r4, #4]
    return true;
 23fbca4:	e004      	b.n	23fbcb0 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_+0x3e>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbca6:	3101      	adds	r1, #1
 23fbca8:	f7fb fe66 	bl	23f7978 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fbcac:	2800      	cmp	r0, #0
 23fbcae:	d1e8      	bne.n	23fbc82 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_+0x10>
}
 23fbcb0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
 23fbcb2:	4631      	mov	r1, r6
 23fbcb4:	4628      	mov	r0, r5
 23fbcb6:	f7fb fcf1 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fbcba:	e7ef      	b.n	23fbc9c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_+0x2a>

023fbcbc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fbcbc:	b530      	push	{r4, r5, lr}
 23fbcbe:	4604      	mov	r4, r0
 23fbcc0:	b087      	sub	sp, #28
    return insert(size_, std::move(value));
 23fbcc2:	6845      	ldr	r5, [r0, #4]
 23fbcc4:	4668      	mov	r0, sp
 23fbcc6:	f7fb fce9 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fbcca:	466a      	mov	r2, sp
 23fbccc:	4629      	mov	r1, r5
 23fbcce:	4620      	mov	r0, r4
 23fbcd0:	f7ff ffcf 	bl	23fbc72 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6insertEiS2_>
 23fbcd4:	4604      	mov	r4, r0
      { _M_reset(); }
 23fbcd6:	4668      	mov	r0, sp
 23fbcd8:	f7fb f81e 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
 23fbcdc:	4620      	mov	r0, r4
 23fbcde:	b007      	add	sp, #28
 23fbce0:	bd30      	pop	{r4, r5, pc}
	...

023fbce4 <_ZN8particle12_GLOBAL__N_119appendKeyValueArrayERN5spark6VectorINS_7VariantENS1_16DefaultAllocatorEEES3_S3_>:
int appendKeyValueArray(VariantArray& arr, Variant key, Variant val) {
 23fbce4:	b5f0      	push	{r4, r5, r6, r7, lr}
        capacity_(0) {
 23fbce6:	2400      	movs	r4, #0
 23fbce8:	b08d      	sub	sp, #52	; 0x34
 23fbcea:	4605      	mov	r5, r0
 23fbcec:	460f      	mov	r7, r1
    if (n > capacity_ && !realloc(n)) {
 23fbcee:	4668      	mov	r0, sp
 23fbcf0:	2102      	movs	r1, #2
 23fbcf2:	4616      	mov	r6, r2
        capacity_(0) {
 23fbcf4:	e9cd 4400 	strd	r4, r4, [sp]
 23fbcf8:	9402      	str	r4, [sp, #8]
    if (n > capacity_ && !realloc(n)) {
 23fbcfa:	f7fb fe3d 	bl	23f7978 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fbcfe:	b360      	cbz	r0, 23fbd5a <_ZN8particle12_GLOBAL__N_119appendKeyValueArrayERN5spark6VectorINS_7VariantENS1_16DefaultAllocatorEEES3_S3_+0x76>
    arr2.append(std::move(key));
 23fbd00:	4639      	mov	r1, r7
 23fbd02:	a806      	add	r0, sp, #24
 23fbd04:	f7fb fcca 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fbd08:	a906      	add	r1, sp, #24
 23fbd0a:	4668      	mov	r0, sp
 23fbd0c:	f7ff ffd6 	bl	23fbcbc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>
 23fbd10:	a806      	add	r0, sp, #24
 23fbd12:	f7fb f801 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    arr2.append(std::move(val));
 23fbd16:	4631      	mov	r1, r6
 23fbd18:	a806      	add	r0, sp, #24
 23fbd1a:	f7fb fcbf 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fbd1e:	a906      	add	r1, sp, #24
 23fbd20:	4668      	mov	r0, sp
 23fbd22:	f7ff ffcb 	bl	23fbcbc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>
 23fbd26:	a806      	add	r0, sp, #24
 23fbd28:	f7fa fff6 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    if (!arr.append(Variant(std::move(arr2)))) {
 23fbd2c:	4669      	mov	r1, sp
 23fbd2e:	a803      	add	r0, sp, #12
 23fbd30:	f7fa fe0c 	bl	23f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  ::new ((void*)std::addressof(_M_storage))
 23fbd34:	a903      	add	r1, sp, #12
 23fbd36:	a806      	add	r0, sp, #24
 23fbd38:	f7fa fe08 	bl	23f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	_M_index{_Np}
 23fbd3c:	2309      	movs	r3, #9
 23fbd3e:	4628      	mov	r0, r5
 23fbd40:	a906      	add	r1, sp, #24
 23fbd42:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 23fbd46:	f7ff ffb9 	bl	23fbcbc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>
 23fbd4a:	4605      	mov	r5, r0
      { _M_reset(); }
 23fbd4c:	a806      	add	r0, sp, #24
 23fbd4e:	f7fa ffe3 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fbd52:	a803      	add	r0, sp, #12
 23fbd54:	f7fb f85f 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
 23fbd58:	b905      	cbnz	r5, 23fbd5c <_ZN8particle12_GLOBAL__N_119appendKeyValueArrayERN5spark6VectorINS_7VariantENS1_16DefaultAllocatorEEES3_S3_+0x78>
        return Error::NO_MEMORY;
 23fbd5a:	4c03      	ldr	r4, [pc, #12]	; (23fbd68 <_ZN8particle12_GLOBAL__N_119appendKeyValueArrayERN5spark6VectorINS_7VariantENS1_16DefaultAllocatorEEES3_S3_+0x84>)
    VariantArray arr2;
 23fbd5c:	4668      	mov	r0, sp
 23fbd5e:	f7fb f85a 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
}
 23fbd62:	4620      	mov	r0, r4
 23fbd64:	b00d      	add	sp, #52	; 0x34
 23fbd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fbd68:	fffffefc 	.word	0xfffffefc

023fbd6c <_ZN8particle7Variant6appendES0_>:
bool Variant::append(Variant val) {
 23fbd6c:	b570      	push	{r4, r5, r6, lr}
 23fbd6e:	b086      	sub	sp, #24
 23fbd70:	460e      	mov	r6, r1
        return as<VariantArray>();
 23fbd72:	f7ff fd77 	bl	23fb864 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v>
    if (!ensureCapacity(arr, 1)) {
 23fbd76:	2101      	movs	r1, #1
 23fbd78:	4605      	mov	r5, r0
 23fbd7a:	f7ff ff5e 	bl	23fbc3a <_ZN8particle7Variant14ensureCapacityIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEEbRT_i>
 23fbd7e:	4604      	mov	r4, r0
 23fbd80:	b158      	cbz	r0, 23fbd9a <_ZN8particle7Variant6appendES0_+0x2e>
    return arr.append(std::move(val));
 23fbd82:	4631      	mov	r1, r6
 23fbd84:	4668      	mov	r0, sp
 23fbd86:	f7fb fc89 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fbd8a:	4669      	mov	r1, sp
 23fbd8c:	4628      	mov	r0, r5
 23fbd8e:	f7ff ff95 	bl	23fbcbc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>
 23fbd92:	4604      	mov	r4, r0
 23fbd94:	4668      	mov	r0, sp
 23fbd96:	f7fa ffbf 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
 23fbd9a:	4620      	mov	r0, r4
 23fbd9c:	b006      	add	sp, #24
 23fbd9e:	bd70      	pop	{r4, r5, r6, pc}

023fbda0 <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_>:
    return data_ + size_;
 23fbda0:	2328      	movs	r3, #40	; 0x28
    ConstIterator find(const T& key) const {
 23fbda2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fbda6:	4606      	mov	r6, r0
 23fbda8:	e9d0 4500 	ldrd	r4, r5, [r0]
 23fbdac:	4688      	mov	r8, r1
 23fbdae:	435d      	muls	r5, r3
      return __last - __first;
 23fbdb0:	4b20      	ldr	r3, [pc, #128]	; (23fbe34 <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_+0x94>)
 23fbdb2:	10ed      	asrs	r5, r5, #3
 23fbdb4:	435d      	muls	r5, r3
 23fbdb6:	b087      	sub	sp, #28
 23fbdb8:	2d00      	cmp	r5, #0
 23fbdba:	dd1d      	ble.n	23fbdf8 <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_+0x58>
	  _DistanceType __half = __len >> 1;
 23fbdbc:	106f      	asrs	r7, r5, #1
      std::__advance(__i, __d, std::__iterator_category(__i));
 23fbdbe:	4639      	mov	r1, r7
 23fbdc0:	a801      	add	r0, sp, #4
	  _ForwardIterator __middle = __first;
 23fbdc2:	9401      	str	r4, [sp, #4]
 23fbdc4:	f7ff fb42 	bl	23fb44c <_ZSt9__advanceIPKSt4pairIK6StringN8particle7VariantEEiEvRT_T0_St26random_access_iterator_tag.isra.0>

    template<typename T>
    ConstIterator lowerBound(const T& key) const {
        return std::lower_bound(entries_.begin(), entries_.end(), key, [this](const Entry& entry, const T& key) {
            return this->cmp_(entry.first, key);
 23fbdc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 23fbdcc:	f8d8 1000 	ldr.w	r1, [r8]
 23fbdd0:	a802      	add	r0, sp, #8
 23fbdd2:	f7ff f93c 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
 23fbdd6:	4648      	mov	r0, r9
 23fbdd8:	a902      	add	r1, sp, #8
 23fbdda:	f7ff f9fc 	bl	23fb1d6 <_ZNK6StringltERKS_>
 23fbdde:	4681      	mov	r9, r0
 23fbde0:	a802      	add	r0, sp, #8
 23fbde2:	f7ff f8e9 	bl	23fafb8 <_ZN6StringD1Ev>
	  if (__comp(__middle, __val))
 23fbde6:	f1b9 0f00 	cmp.w	r9, #0
 23fbdea:	d003      	beq.n	23fbdf4 <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_+0x54>
	      __first = __middle;
 23fbdec:	9c01      	ldr	r4, [sp, #4]
	      __len = __len - __half - 1;
 23fbdee:	1bef      	subs	r7, r5, r7
	      ++__first;
 23fbdf0:	3428      	adds	r4, #40	; 0x28
	      __len = __len - __half - 1;
 23fbdf2:	3f01      	subs	r7, #1
      while (__len > 0)
 23fbdf4:	463d      	mov	r5, r7
 23fbdf6:	e7df      	b.n	23fbdb8 <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_+0x18>
 23fbdf8:	2728      	movs	r7, #40	; 0x28
 23fbdfa:	6872      	ldr	r2, [r6, #4]
 23fbdfc:	6833      	ldr	r3, [r6, #0]
 23fbdfe:	fb07 3302 	mla	r3, r7, r2, r3
        if (it != entries_.end() && cmp_(key, it->first)) {
 23fbe02:	429c      	cmp	r4, r3
 23fbe04:	d011      	beq.n	23fbe2a <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_+0x8a>
 23fbe06:	f8d8 1000 	ldr.w	r1, [r8]
 23fbe0a:	a802      	add	r0, sp, #8
 23fbe0c:	f7ff f91f 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
 23fbe10:	4621      	mov	r1, r4
 23fbe12:	a802      	add	r0, sp, #8
 23fbe14:	f7ff f9df 	bl	23fb1d6 <_ZNK6StringltERKS_>
 23fbe18:	4605      	mov	r5, r0
 23fbe1a:	a802      	add	r0, sp, #8
 23fbe1c:	f7ff f8cc 	bl	23fafb8 <_ZN6StringD1Ev>
 23fbe20:	b11d      	cbz	r5, 23fbe2a <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_+0x8a>
    return data_ + size_;
 23fbe22:	e9d6 4300 	ldrd	r4, r3, [r6]
 23fbe26:	fb07 4403 	mla	r4, r7, r3, r4
    }
 23fbe2a:	4620      	mov	r0, r4
 23fbe2c:	b007      	add	sp, #28
 23fbe2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fbe32:	bf00      	nop
 23fbe34:	cccccccd 	.word	0xcccccccd

023fbe38 <_ZNK8particle7Variant3hasEPKc>:
bool Variant::has(const char* key) const {
 23fbe38:	b513      	push	{r0, r1, r4, lr}
    if (!isMap()) {
 23fbe3a:	7c03      	ldrb	r3, [r0, #16]
bool Variant::has(const char* key) const {
 23fbe3c:	9101      	str	r1, [sp, #4]
    if (!isMap()) {
 23fbe3e:	2b0a      	cmp	r3, #10
 23fbe40:	d10f      	bne.n	23fbe62 <_ZNK8particle7Variant3hasEPKc+0x2a>
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 23fbe42:	f7ff fdfd 	bl	23fba40 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
        auto it = find(key);
 23fbe46:	a901      	add	r1, sp, #4
 23fbe48:	4604      	mov	r4, r0
 23fbe4a:	f7ff ffa9 	bl	23fbda0 <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_>
    return data_ + size_;
 23fbe4e:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fbe52:	2128      	movs	r1, #40	; 0x28
 23fbe54:	fb01 3302 	mla	r3, r1, r2, r3
        if (it == entries_.end()) {
 23fbe58:	1ac0      	subs	r0, r0, r3
 23fbe5a:	bf18      	it	ne
 23fbe5c:	2001      	movne	r0, #1
}
 23fbe5e:	b002      	add	sp, #8
 23fbe60:	bd10      	pop	{r4, pc}
        return false;
 23fbe62:	2000      	movs	r0, #0
 23fbe64:	e7fb      	b.n	23fbe5e <_ZNK8particle7Variant3hasEPKc+0x26>

023fbe66 <_ZNK8particle7Variant3getEPKc>:
Variant Variant::get(const char* key) const {
 23fbe66:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!isMap()) {
 23fbe68:	7c0b      	ldrb	r3, [r1, #16]
Variant Variant::get(const char* key) const {
 23fbe6a:	4604      	mov	r4, r0
    if (!isMap()) {
 23fbe6c:	2b0a      	cmp	r3, #10
Variant Variant::get(const char* key) const {
 23fbe6e:	4608      	mov	r0, r1
 23fbe70:	9201      	str	r2, [sp, #4]
    if (!isMap()) {
 23fbe72:	d007      	beq.n	23fbe84 <_ZNK8particle7Variant3getEPKc+0x1e>
        return Variant();
 23fbe74:	2218      	movs	r2, #24
 23fbe76:	2100      	movs	r1, #0
 23fbe78:	4620      	mov	r0, r4
 23fbe7a:	f001 f99c 	bl	23fd1b6 <memset>
}
 23fbe7e:	4620      	mov	r0, r4
 23fbe80:	b003      	add	sp, #12
 23fbe82:	bd30      	pop	{r4, r5, pc}
 23fbe84:	f7ff fddc 	bl	23fba40 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
        auto it = find(key);
 23fbe88:	a901      	add	r1, sp, #4
 23fbe8a:	4605      	mov	r5, r0
 23fbe8c:	f7ff ff88 	bl	23fbda0 <_ZNK8particle3MapI6StringNS_7VariantESt4lessIS1_EE4findIPKcEEPKSt4pairIKS1_S2_ERKT_>
 23fbe90:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fbe94:	2128      	movs	r1, #40	; 0x28
 23fbe96:	fb01 3302 	mla	r3, r1, r2, r3
        if (it == entries_.end()) {
 23fbe9a:	4298      	cmp	r0, r3
 23fbe9c:	d0ea      	beq.n	23fbe74 <_ZNK8particle7Variant3getEPKc+0xe>
      _Move_ctor_base(const _Move_ctor_base&) = default;
 23fbe9e:	f100 0110 	add.w	r1, r0, #16
 23fbea2:	4620      	mov	r0, r4
 23fbea4:	f7fa fd70 	bl	23f6988 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
    }
 23fbea8:	e7e9      	b.n	23fbe7e <_ZNK8particle7Variant3getEPKc+0x18>

023fbeaa <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_>:
        if (dest > p && dest < end) {
 23fbeaa:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fbeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbeae:	4604      	mov	r4, r0
 23fbeb0:	460d      	mov	r5, r1
 23fbeb2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fbeb4:	d914      	bls.n	23fbee0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x36>
 23fbeb6:	4290      	cmp	r0, r2
 23fbeb8:	d213      	bcs.n	23fbee2 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x38>
            --end;
 23fbeba:	f1a2 0628 	sub.w	r6, r2, #40	; 0x28
            dest += end - p - 1;
 23fbebe:	1a75      	subs	r5, r6, r1
 23fbec0:	f1a1 0728 	sub.w	r7, r1, #40	; 0x28
 23fbec4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fbec6:	42b7      	cmp	r7, r6
 23fbec8:	d018      	beq.n	23fbefc <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x52>
                new(dest) T(std::move(*end));
 23fbeca:	b11c      	cbz	r4, 23fbed4 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x2a>
 23fbecc:	4631      	mov	r1, r6
 23fbece:	4620      	mov	r0, r4
 23fbed0:	f7ff fd88 	bl	23fb9e4 <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>
                end->~T();
 23fbed4:	4630      	mov	r0, r6
 23fbed6:	f7fa ff31 	bl	23f6d3c <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
            for (; end != p; --end, --dest) {
 23fbeda:	3e28      	subs	r6, #40	; 0x28
 23fbedc:	3c28      	subs	r4, #40	; 0x28
 23fbede:	e7f2      	b.n	23fbec6 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x1c>
        } else if (dest != p) {
 23fbee0:	d00c      	beq.n	23fbefc <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x52>
            for (; p != end; ++p, ++dest) {
 23fbee2:	42b5      	cmp	r5, r6
 23fbee4:	d00a      	beq.n	23fbefc <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x52>
                new(dest) T(std::move(*p));
 23fbee6:	b11c      	cbz	r4, 23fbef0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x46>
 23fbee8:	4629      	mov	r1, r5
 23fbeea:	4620      	mov	r0, r4
 23fbeec:	f7ff fd7a 	bl	23fb9e4 <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>
                p->~T();
 23fbef0:	4628      	mov	r0, r5
 23fbef2:	f7fa ff23 	bl	23f6d3c <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fbef6:	3528      	adds	r5, #40	; 0x28
 23fbef8:	3428      	adds	r4, #40	; 0x28
 23fbefa:	e7f2      	b.n	23fbee2 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x38>
    }
 23fbefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbefe <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi>:
    bool realloc(int n) {
 23fbefe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
 23fbf00:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fbf02:	4605      	mov	r5, r0
        if (n > 0) {
 23fbf04:	dd13      	ble.n	23fbf2e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fbf06:	2728      	movs	r7, #40	; 0x28
    return ::malloc(size);
 23fbf08:	fb07 f006 	mul.w	r0, r7, r6
 23fbf0c:	f7fc feac 	bl	23f8c68 <malloc>
            if (!d) {
 23fbf10:	4604      	mov	r4, r0
 23fbf12:	b158      	cbz	r0, 23fbf2c <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
 23fbf14:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fbf18:	fb07 1202 	mla	r2, r7, r2, r1
 23fbf1c:	f7ff ffc5 	bl	23fbeaa <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_>
    ::free(ptr);
 23fbf20:	6828      	ldr	r0, [r5, #0]
 23fbf22:	f7fc feaf 	bl	23f8c84 <free>
        return true;
 23fbf26:	2001      	movs	r0, #1
        data_ = d;
 23fbf28:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fbf2a:	60ae      	str	r6, [r5, #8]
    }
 23fbf2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
 23fbf2e:	2400      	movs	r4, #0
 23fbf30:	e7f6      	b.n	23fbf20 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi+0x22>

023fbf32 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
 23fbf32:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
 23fbf34:	6883      	ldr	r3, [r0, #8]
 23fbf36:	428b      	cmp	r3, r1
 23fbf38:	da02      	bge.n	23fbf40 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi+0xe>
 23fbf3a:	f7ff ffe0 	bl	23fbefe <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi>
}
 23fbf3e:	bd08      	pop	{r3, pc}
    return true;
 23fbf40:	2001      	movs	r0, #1
 23fbf42:	e7fc      	b.n	23fbf3e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi+0xc>

023fbf44 <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i>:
    static bool ensureCapacity(ContainerT& cont, int count) {
 23fbf44:	b508      	push	{r3, lr}
        int newSize = cont.size() + count;
 23fbf46:	6842      	ldr	r2, [r0, #4]
    return capacity_;
 23fbf48:	6883      	ldr	r3, [r0, #8]
 23fbf4a:	4411      	add	r1, r2
        if (cont.capacity() >= newSize) {
 23fbf4c:	4299      	cmp	r1, r3
 23fbf4e:	dd0a      	ble.n	23fbf66 <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i+0x22>
        return cont.reserve(std::max(newSize, cont.capacity() * 3 / 2));
 23fbf50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fbf54:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 23fbf58:	105b      	asrs	r3, r3, #1
        return entries_.reserve(count);
 23fbf5a:	4299      	cmp	r1, r3
 23fbf5c:	bfb8      	it	lt
 23fbf5e:	4619      	movlt	r1, r3
 23fbf60:	f7ff ffe7 	bl	23fbf32 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi>
    }
 23fbf64:	bd08      	pop	{r3, pc}
            return true;
 23fbf66:	2001      	movs	r0, #1
 23fbf68:	e7fc      	b.n	23fbf64 <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i+0x20>

023fbf6a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_>:
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::Iterator spark::Vector<T, AllocatorT>::insert(ConstIterator pos, T value) {
 23fbf6a:	b570      	push	{r4, r5, r6, lr}
 23fbf6c:	4604      	mov	r4, r0
    int i = pos - data_;
 23fbf6e:	6803      	ldr	r3, [r0, #0]
inline typename spark::Vector<T, AllocatorT>::Iterator spark::Vector<T, AllocatorT>::insert(ConstIterator pos, T value) {
 23fbf70:	b08a      	sub	sp, #40	; 0x28
    int i = pos - data_;
 23fbf72:	1ace      	subs	r6, r1, r3
    if (!insert(i, std::move(value))) {
 23fbf74:	4668      	mov	r0, sp
 23fbf76:	4611      	mov	r1, r2
 23fbf78:	f7ff fd34 	bl	23fb9e4 <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbf7c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fbf80:	4299      	cmp	r1, r3
 23fbf82:	da10      	bge.n	23fbfa6 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x3c>
    move(p + 1, p, data_ + size_);
 23fbf84:	2128      	movs	r1, #40	; 0x28
    T* const p = data_ + i;
 23fbf86:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fbf88:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fbf8a:	199d      	adds	r5, r3, r6
    move(p + 1, p, data_ + size_);
 23fbf8c:	fb01 3202 	mla	r2, r1, r2, r3
 23fbf90:	f105 0028 	add.w	r0, r5, #40	; 0x28
 23fbf94:	4629      	mov	r1, r5
 23fbf96:	f7ff ff88 	bl	23fbeaa <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_>
    new(p) T(std::move(value));
 23fbf9a:	b9b5      	cbnz	r5, 23fbfca <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x60>
    ++size_;
 23fbf9c:	6863      	ldr	r3, [r4, #4]
    return true;
 23fbf9e:	2501      	movs	r5, #1
    ++size_;
 23fbfa0:	3301      	adds	r3, #1
 23fbfa2:	6063      	str	r3, [r4, #4]
    return true;
 23fbfa4:	e006      	b.n	23fbfb4 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x4a>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbfa6:	4620      	mov	r0, r4
 23fbfa8:	3101      	adds	r1, #1
 23fbfaa:	f7ff ffa8 	bl	23fbefe <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi>
 23fbfae:	4605      	mov	r5, r0
 23fbfb0:	2800      	cmp	r0, #0
 23fbfb2:	d1e7      	bne.n	23fbf84 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x1a>
    if (!insert(i, std::move(value))) {
 23fbfb4:	4668      	mov	r0, sp
 23fbfb6:	f7fa fec1 	bl	23f6d3c <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
 23fbfba:	6823      	ldr	r3, [r4, #0]
 23fbfbc:	b955      	cbnz	r5, 23fbfd4 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x6a>
        return data_ + size_;
 23fbfbe:	2128      	movs	r1, #40	; 0x28
 23fbfc0:	6860      	ldr	r0, [r4, #4]
 23fbfc2:	fb01 3000 	mla	r0, r1, r0, r3
    }
    return data_ + i;
}
 23fbfc6:	b00a      	add	sp, #40	; 0x28
 23fbfc8:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
 23fbfca:	4669      	mov	r1, sp
 23fbfcc:	4628      	mov	r0, r5
 23fbfce:	f7ff fd09 	bl	23fb9e4 <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>
 23fbfd2:	e7e3      	b.n	23fbf9c <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x32>
    return data_ + i;
 23fbfd4:	1998      	adds	r0, r3, r6
 23fbfd6:	e7f6      	b.n	23fbfc6 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x5c>

023fbfd8 <_ZN8particle7Variant3setEPKcS0_>:
bool Variant::set(const char* key, Variant val) {
 23fbfd8:	b570      	push	{r4, r5, r6, lr}
 23fbfda:	b0a6      	sub	sp, #152	; 0x98
 23fbfdc:	4616      	mov	r6, r2
 23fbfde:	9101      	str	r1, [sp, #4]
        return as<VariantMap>();
 23fbfe0:	f7fb fa85 	bl	23f74ee <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
    if (!ensureCapacity(map, 1)) {
 23fbfe4:	2101      	movs	r1, #1
 23fbfe6:	4605      	mov	r5, r0
 23fbfe8:	f7ff ffac 	bl	23fbf44 <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i>
 23fbfec:	4604      	mov	r4, r0
 23fbfee:	2800      	cmp	r0, #0
 23fbff0:	d03a      	beq.n	23fc068 <_ZN8particle7Variant3setEPKcS0_+0x90>
    return map.set(key, std::move(val));
 23fbff2:	4631      	mov	r1, r6
 23fbff4:	a806      	add	r0, sp, #24
 23fbff6:	f7fb fb51 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
        auto r = insert(key, std::move(val));
 23fbffa:	a906      	add	r1, sp, #24
 23fbffc:	a80c      	add	r0, sp, #48	; 0x30
 23fbffe:	f7fb fb4d 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
        auto it = lowerBound(key);
 23fc002:	a901      	add	r1, sp, #4
 23fc004:	4628      	mov	r0, r5
 23fc006:	f7ff fc9b 	bl	23fb940 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_>
    return data_ + size_;
 23fc00a:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fc00e:	2128      	movs	r1, #40	; 0x28
 23fc010:	fb01 3302 	mla	r3, r1, r2, r3
        if (it != entries_.end() && !cmp_(key, it->first)) {
 23fc014:	4298      	cmp	r0, r3
        auto it = lowerBound(key);
 23fc016:	4604      	mov	r4, r0
        if (it != entries_.end() && !cmp_(key, it->first)) {
 23fc018:	d029      	beq.n	23fc06e <_ZN8particle7Variant3setEPKcS0_+0x96>
 23fc01a:	9901      	ldr	r1, [sp, #4]
 23fc01c:	a81c      	add	r0, sp, #112	; 0x70
 23fc01e:	f7ff f816 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
 23fc022:	4621      	mov	r1, r4
 23fc024:	a81c      	add	r0, sp, #112	; 0x70
 23fc026:	f7ff f8d6 	bl	23fb1d6 <_ZNK6StringltERKS_>
 23fc02a:	4606      	mov	r6, r0
 23fc02c:	a81c      	add	r0, sp, #112	; 0x70
 23fc02e:	f7fe ffc3 	bl	23fafb8 <_ZN6StringD1Ev>
 23fc032:	b9e6      	cbnz	r6, 23fc06e <_ZN8particle7Variant3setEPKcS0_+0x96>
            it->second = std::move(val);
 23fc034:	a90c      	add	r1, sp, #48	; 0x30
 23fc036:	a81c      	add	r0, sp, #112	; 0x70
 23fc038:	f7fb fb30 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
    { __lhs.swap(__rhs); }
 23fc03c:	f104 0010 	add.w	r0, r4, #16
 23fc040:	a91c      	add	r1, sp, #112	; 0x70
 23fc042:	f7fb fa8d 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fc046:	a81c      	add	r0, sp, #112	; 0x70
 23fc048:	f7fa fe66 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc04c:	a80c      	add	r0, sp, #48	; 0x30
 23fc04e:	f7fa fe63 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc052:	e9d5 0300 	ldrd	r0, r3, [r5]
 23fc056:	2228      	movs	r2, #40	; 0x28
 23fc058:	fb02 0003 	mla	r0, r2, r3, r0
        if (r.first == entries_.end()) {
 23fc05c:	1a24      	subs	r4, r4, r0
 23fc05e:	a806      	add	r0, sp, #24
 23fc060:	bf18      	it	ne
 23fc062:	2401      	movne	r4, #1
 23fc064:	f7fa fe58 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
 23fc068:	4620      	mov	r0, r4
 23fc06a:	b026      	add	sp, #152	; 0x98
 23fc06c:	bd70      	pop	{r4, r5, r6, pc}
        it = entries_.insert(it, std::make_pair(KeyT(key), std::move(val)));
 23fc06e:	9901      	ldr	r1, [sp, #4]
 23fc070:	a802      	add	r0, sp, #8
 23fc072:	f7fe ffec 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 23fc076:	a902      	add	r1, sp, #8
 23fc078:	a812      	add	r0, sp, #72	; 0x48
 23fc07a:	f7ff f826 	bl	23fb0ca <_ZN6StringC1EOS_>
 23fc07e:	a90c      	add	r1, sp, #48	; 0x30
 23fc080:	a816      	add	r0, sp, #88	; 0x58
 23fc082:	f7fb fb0b 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fc086:	a912      	add	r1, sp, #72	; 0x48
 23fc088:	a81c      	add	r0, sp, #112	; 0x70
 23fc08a:	f7ff fcb8 	bl	23fb9fe <_ZNSt4pairIK6StringN8particle7VariantEEC1IS0_S3_Lb1EEEOS_IT_T0_E>
 23fc08e:	4621      	mov	r1, r4
 23fc090:	aa1c      	add	r2, sp, #112	; 0x70
 23fc092:	4628      	mov	r0, r5
 23fc094:	f7ff ff69 	bl	23fbf6a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_>
 23fc098:	4604      	mov	r4, r0
 23fc09a:	a81c      	add	r0, sp, #112	; 0x70
 23fc09c:	f7fa fe4e 	bl	23f6d3c <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
 23fc0a0:	a816      	add	r0, sp, #88	; 0x58
 23fc0a2:	f7fa fe39 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    struct pair
 23fc0a6:	a812      	add	r0, sp, #72	; 0x48
 23fc0a8:	f7fe ff86 	bl	23fafb8 <_ZN6StringD1Ev>
 23fc0ac:	a802      	add	r0, sp, #8
 23fc0ae:	f7fe ff83 	bl	23fafb8 <_ZN6StringD1Ev>
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 23fc0b2:	e7cb      	b.n	23fc04c <_ZN8particle7Variant3setEPKcS0_+0x74>

023fc0b4 <_ZN8particle7Variant3setERK6StringS0_>:
bool Variant::set(const String& key, Variant val) {
 23fc0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc0b6:	b0a5      	sub	sp, #148	; 0x94
 23fc0b8:	460e      	mov	r6, r1
 23fc0ba:	4617      	mov	r7, r2
 23fc0bc:	f7fb fa17 	bl	23f74ee <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
    if (!ensureCapacity(map, 1)) {
 23fc0c0:	2101      	movs	r1, #1
 23fc0c2:	4605      	mov	r5, r0
 23fc0c4:	f7ff ff3e 	bl	23fbf44 <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i>
 23fc0c8:	4604      	mov	r4, r0
 23fc0ca:	b390      	cbz	r0, 23fc132 <_ZN8particle7Variant3setERK6StringS0_+0x7e>
    return map.set(key, std::move(val));
 23fc0cc:	4639      	mov	r1, r7
 23fc0ce:	a804      	add	r0, sp, #16
 23fc0d0:	f7fb fae4 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
        auto r = insert(key, std::move(val));
 23fc0d4:	a904      	add	r1, sp, #16
 23fc0d6:	a80a      	add	r0, sp, #40	; 0x28
 23fc0d8:	f7fb fae0 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
        auto it = lowerBound(key);
 23fc0dc:	4631      	mov	r1, r6
 23fc0de:	4628      	mov	r0, r5
 23fc0e0:	f7ff fc5e 	bl	23fb9a0 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_>
 23fc0e4:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fc0e8:	2128      	movs	r1, #40	; 0x28
 23fc0ea:	fb01 3302 	mla	r3, r1, r2, r3
        if (it != entries_.end() && !cmp_(key, it->first)) {
 23fc0ee:	4298      	cmp	r0, r3
        auto it = lowerBound(key);
 23fc0f0:	4604      	mov	r4, r0
        if (it != entries_.end() && !cmp_(key, it->first)) {
 23fc0f2:	d021      	beq.n	23fc138 <_ZN8particle7Variant3setERK6StringS0_+0x84>
 23fc0f4:	4601      	mov	r1, r0
 23fc0f6:	4630      	mov	r0, r6
 23fc0f8:	f7ff f86d 	bl	23fb1d6 <_ZNK6StringltERKS_>
 23fc0fc:	b9e0      	cbnz	r0, 23fc138 <_ZN8particle7Variant3setERK6StringS0_+0x84>
            it->second = std::move(val);
 23fc0fe:	a90a      	add	r1, sp, #40	; 0x28
 23fc100:	a81a      	add	r0, sp, #104	; 0x68
 23fc102:	f7fb facb 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
    { __lhs.swap(__rhs); }
 23fc106:	f104 0010 	add.w	r0, r4, #16
 23fc10a:	a91a      	add	r1, sp, #104	; 0x68
 23fc10c:	f7fb fa28 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fc110:	a81a      	add	r0, sp, #104	; 0x68
 23fc112:	f7fa fe01 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc116:	a80a      	add	r0, sp, #40	; 0x28
 23fc118:	f7fa fdfe 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc11c:	e9d5 0300 	ldrd	r0, r3, [r5]
 23fc120:	2228      	movs	r2, #40	; 0x28
 23fc122:	fb02 0003 	mla	r0, r2, r3, r0
        if (r.first == entries_.end()) {
 23fc126:	1a24      	subs	r4, r4, r0
 23fc128:	a804      	add	r0, sp, #16
 23fc12a:	bf18      	it	ne
 23fc12c:	2401      	movne	r4, #1
 23fc12e:	f7fa fdf3 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
 23fc132:	4620      	mov	r0, r4
 23fc134:	b025      	add	sp, #148	; 0x94
 23fc136:	bdf0      	pop	{r4, r5, r6, r7, pc}
        it = entries_.insert(it, std::make_pair(KeyT(key), std::move(val)));
 23fc138:	4631      	mov	r1, r6
 23fc13a:	4668      	mov	r0, sp
 23fc13c:	f7fe ffdf 	bl	23fb0fe <_ZN6StringC1ERKS_>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 23fc140:	4669      	mov	r1, sp
 23fc142:	a810      	add	r0, sp, #64	; 0x40
 23fc144:	f7fe ffc1 	bl	23fb0ca <_ZN6StringC1EOS_>
 23fc148:	a90a      	add	r1, sp, #40	; 0x28
 23fc14a:	a814      	add	r0, sp, #80	; 0x50
 23fc14c:	f7fb faa6 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fc150:	a910      	add	r1, sp, #64	; 0x40
 23fc152:	a81a      	add	r0, sp, #104	; 0x68
 23fc154:	f7ff fc53 	bl	23fb9fe <_ZNSt4pairIK6StringN8particle7VariantEEC1IS0_S3_Lb1EEEOS_IT_T0_E>
 23fc158:	4621      	mov	r1, r4
 23fc15a:	aa1a      	add	r2, sp, #104	; 0x68
 23fc15c:	4628      	mov	r0, r5
 23fc15e:	f7ff ff04 	bl	23fbf6a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_>
 23fc162:	4604      	mov	r4, r0
 23fc164:	a81a      	add	r0, sp, #104	; 0x68
 23fc166:	f7fa fde9 	bl	23f6d3c <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
 23fc16a:	a814      	add	r0, sp, #80	; 0x50
 23fc16c:	f7fa fdd4 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    struct pair
 23fc170:	a810      	add	r0, sp, #64	; 0x40
 23fc172:	f7fe ff21 	bl	23fafb8 <_ZN6StringD1Ev>
 23fc176:	4668      	mov	r0, sp
 23fc178:	f7fe ff1e 	bl	23fafb8 <_ZN6StringD1Ev>
 23fc17c:	e7cb      	b.n	23fc116 <_ZN8particle7Variant3setERK6StringS0_+0x62>

023fc17e <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE3setEOS1_S2_>:
    bool set(KeyT&& key, ValueT val) {
 23fc17e:	b570      	push	{r4, r5, r6, lr}
 23fc180:	4605      	mov	r5, r0
 23fc182:	460e      	mov	r6, r1
 23fc184:	b09a      	sub	sp, #104	; 0x68
        auto r = insert(std::move(key), std::move(val));
 23fc186:	4611      	mov	r1, r2
 23fc188:	4668      	mov	r0, sp
 23fc18a:	f7fb fa87 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
        auto it = lowerBound(key);
 23fc18e:	4631      	mov	r1, r6
 23fc190:	4628      	mov	r0, r5
 23fc192:	f7ff fc05 	bl	23fb9a0 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIS1_EEPSt4pairIKS1_S2_ERKT_>
 23fc196:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fc19a:	2128      	movs	r1, #40	; 0x28
 23fc19c:	fb01 3302 	mla	r3, r1, r2, r3
        if (it != entries_.end() && !cmp_(key, it->first)) {
 23fc1a0:	4298      	cmp	r0, r3
        auto it = lowerBound(key);
 23fc1a2:	4604      	mov	r4, r0
        if (it != entries_.end() && !cmp_(key, it->first)) {
 23fc1a4:	d01d      	beq.n	23fc1e2 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE3setEOS1_S2_+0x64>
 23fc1a6:	4601      	mov	r1, r0
 23fc1a8:	4630      	mov	r0, r6
 23fc1aa:	f7ff f814 	bl	23fb1d6 <_ZNK6StringltERKS_>
 23fc1ae:	b9c0      	cbnz	r0, 23fc1e2 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE3setEOS1_S2_+0x64>
            it->second = std::move(val);
 23fc1b0:	4669      	mov	r1, sp
 23fc1b2:	a810      	add	r0, sp, #64	; 0x40
 23fc1b4:	f7fb fa72 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
    { __lhs.swap(__rhs); }
 23fc1b8:	f104 0010 	add.w	r0, r4, #16
 23fc1bc:	a910      	add	r1, sp, #64	; 0x40
 23fc1be:	f7fb f9cf 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fc1c2:	a810      	add	r0, sp, #64	; 0x40
 23fc1c4:	f7fa fda8 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc1c8:	4668      	mov	r0, sp
 23fc1ca:	f7fa fda5 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc1ce:	e9d5 0300 	ldrd	r0, r3, [r5]
 23fc1d2:	2228      	movs	r2, #40	; 0x28
 23fc1d4:	fb02 0003 	mla	r0, r2, r3, r0
    }
 23fc1d8:	1a20      	subs	r0, r4, r0
 23fc1da:	bf18      	it	ne
 23fc1dc:	2001      	movne	r0, #1
 23fc1de:	b01a      	add	sp, #104	; 0x68
 23fc1e0:	bd70      	pop	{r4, r5, r6, pc}
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 23fc1e2:	4631      	mov	r1, r6
 23fc1e4:	a806      	add	r0, sp, #24
 23fc1e6:	f7fe ff70 	bl	23fb0ca <_ZN6StringC1EOS_>
 23fc1ea:	4669      	mov	r1, sp
 23fc1ec:	a80a      	add	r0, sp, #40	; 0x28
 23fc1ee:	f7fb fa55 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
        it = entries_.insert(it, std::make_pair(std::move(key), std::move(val)));
 23fc1f2:	a906      	add	r1, sp, #24
 23fc1f4:	a810      	add	r0, sp, #64	; 0x40
 23fc1f6:	f7ff fc02 	bl	23fb9fe <_ZNSt4pairIK6StringN8particle7VariantEEC1IS0_S3_Lb1EEEOS_IT_T0_E>
 23fc1fa:	4621      	mov	r1, r4
 23fc1fc:	aa10      	add	r2, sp, #64	; 0x40
 23fc1fe:	4628      	mov	r0, r5
 23fc200:	f7ff feb3 	bl	23fbf6a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_>
 23fc204:	4604      	mov	r4, r0
 23fc206:	a810      	add	r0, sp, #64	; 0x40
 23fc208:	f7fa fd98 	bl	23f6d3c <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
 23fc20c:	a80a      	add	r0, sp, #40	; 0x28
 23fc20e:	f7fa fd83 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    struct pair
 23fc212:	a806      	add	r0, sp, #24
 23fc214:	f7fe fed0 	bl	23fafb8 <_ZN6StringD1Ev>
 23fc218:	e7d6      	b.n	23fc1c8 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE3setEOS1_S2_+0x4a>
	...

023fc21c <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE>:
int decodeFromJson(const JSONValue& val, Variant& var) {
 23fc21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc21e:	b09d      	sub	sp, #116	; 0x74
 23fc220:	4604      	mov	r4, r0
 23fc222:	460d      	mov	r5, r1
    switch (val.type()) {
 23fc224:	f7fc ffd7 	bl	23f91d6 <_ZNK5spark9JSONValue4typeEv>
 23fc228:	2806      	cmp	r0, #6
 23fc22a:	d808      	bhi.n	23fc23e <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x22>
 23fc22c:	e8df f010 	tbh	[pc, r0, lsl #1]
 23fc230:	000c0175 	.word	0x000c0175
 23fc234:	002a0019 	.word	0x002a0019
 23fc238:	00b3007b 	.word	0x00b3007b
 23fc23c:	0102      	.short	0x0102
 23fc23e:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
}
 23fc242:	4620      	mov	r0, r4
 23fc244:	b01d      	add	sp, #116	; 0x74
 23fc246:	bdf0      	pop	{r4, r5, r6, r7, pc}
        var = Variant();
 23fc248:	2400      	movs	r4, #0
    { __lhs.swap(__rhs); }
 23fc24a:	4628      	mov	r0, r5
 23fc24c:	a916      	add	r1, sp, #88	; 0x58
 23fc24e:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
	_M_index{_Np}
 23fc252:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    { __lhs.swap(__rhs); }
 23fc256:	f7fb f983 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fc25a:	a816      	add	r0, sp, #88	; 0x58
 23fc25c:	f7fa fd5c 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        break;
 23fc260:	e7ef      	b.n	23fc242 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x26>
        var = val.toBool();
 23fc262:	4620      	mov	r0, r4
 23fc264:	f7fc ffe0 	bl	23f9228 <_ZNK5spark9JSONValue6toBoolEv>
	_M_index{_Np}
 23fc268:	2301      	movs	r3, #1
	: _M_storage(std::forward<_Args>(__args)...)
 23fc26a:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
    { __lhs.swap(__rhs); }
 23fc26e:	a916      	add	r1, sp, #88	; 0x58
 23fc270:	4628      	mov	r0, r5
	_M_index{_Np}
 23fc272:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    { __lhs.swap(__rhs); }
 23fc276:	f7fb f973 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fc27a:	a816      	add	r0, sp, #88	; 0x58
 23fc27c:	f7fa fd4c 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
                return false;
 23fc280:	2400      	movs	r4, #0
 23fc282:	e7de      	b.n	23fc242 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x26>
    return JSONString(t_, d_);
 23fc284:	68a6      	ldr	r6, [r4, #8]
 23fc286:	4621      	mov	r1, r4
 23fc288:	a816      	add	r0, sp, #88	; 0x58
 23fc28a:	f7fd fe35 	bl	23f9ef8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc28e:	4631      	mov	r1, r6
 23fc290:	aa16      	add	r2, sp, #88	; 0x58
 23fc292:	a810      	add	r0, sp, #64	; 0x40
 23fc294:	f7fd f90e 	bl	23f94b4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc298:	a817      	add	r0, sp, #92	; 0x5c
 23fc29a:	f7fc fd78 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto r = detail::from_chars(s.data(), s.data() + s.size(), num);
 23fc29e:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 23fc2a2:	440a      	add	r2, r1
	if (__first != __last && *__first == '-')
 23fc2a4:	428a      	cmp	r2, r1
 23fc2a6:	d02a      	beq.n	23fc2fe <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xe2>
 23fc2a8:	780b      	ldrb	r3, [r1, #0]
 23fc2aa:	2b2d      	cmp	r3, #45	; 0x2d
 23fc2ac:	d12a      	bne.n	23fc304 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xe8>
	    __sign = -1;
 23fc2ae:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	    ++__first;
 23fc2b2:	1c4c      	adds	r4, r1, #1
    __from_chars_digit(const char*& __first, const char* __last, _Tp& __val,
 23fc2b4:	4627      	mov	r7, r4
      _Up __val = 0;
 23fc2b6:	2300      	movs	r3, #0
      if (__builtin_mul_overflow(__val, __base, &__val)
 23fc2b8:	f04f 0e0a 	mov.w	lr, #10
      while (__first != __last)
 23fc2bc:	42ba      	cmp	r2, r7
 23fc2be:	46bc      	mov	ip, r7
 23fc2c0:	f000 812d 	beq.w	23fc51e <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x302>
	  return '0' <= __c && __c <= ('0' + (__base - 1));
 23fc2c4:	f89c 0000 	ldrb.w	r0, [ip]
 23fc2c8:	3701      	adds	r7, #1
 23fc2ca:	3830      	subs	r0, #48	; 0x30
 23fc2cc:	b2c0      	uxtb	r0, r0
 23fc2ce:	2809      	cmp	r0, #9
 23fc2d0:	f200 8148 	bhi.w	23fc564 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x348>
      if (__builtin_mul_overflow(__val, __base, &__val)
 23fc2d4:	fba3 3c0e 	umull	r3, ip, r3, lr
 23fc2d8:	f1bc 0f00 	cmp.w	ip, #0
 23fc2dc:	d101      	bne.n	23fc2e2 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xc6>
	  || __builtin_add_overflow(__val, __c, &__val))
 23fc2de:	181b      	adds	r3, r3, r0
 23fc2e0:	d3ec      	bcc.n	23fc2bc <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xa0>
            double num = 0;
 23fc2e2:	2600      	movs	r6, #0
 23fc2e4:	2700      	movs	r7, #0
            r = detail::from_chars(s.data(), s.data() + s.size(), num);
 23fc2e6:	ab06      	add	r3, sp, #24
 23fc2e8:	a80a      	add	r0, sp, #40	; 0x28
            double num = 0;
 23fc2ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
            r = detail::from_chars(s.data(), s.data() + s.size(), num);
 23fc2ee:	f7ff f9f9 	bl	23fb6e4 <_ZN8particle6detail10from_charsEPKcS2_Rd>
            if (r.ec != std::errc() || r.ptr != s.data() + s.size()) {
 23fc2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fc2f4:	b15b      	cbz	r3, 23fc30e <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xf2>
 23fc2f6:	a811      	add	r0, sp, #68	; 0x44
 23fc2f8:	f7fc fd49 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc2fc:	e7c0      	b.n	23fc280 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x64>
 23fc2fe:	4614      	mov	r4, r2
      int __sign = 1;
 23fc300:	2601      	movs	r6, #1
 23fc302:	e7d7      	b.n	23fc2b4 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x98>
 23fc304:	460c      	mov	r4, r1
 23fc306:	e7fb      	b.n	23fc300 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xe4>
		  if (__builtin_mul_overflow(__val, __sign, &__tmp))
 23fc308:	2c00      	cmp	r4, #0
 23fc30a:	d1ea      	bne.n	23fc2e2 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xc6>
 23fc30c:	e11b      	b.n	23fc546 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x32a>
 23fc30e:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
 23fc312:	4413      	add	r3, r2
 23fc314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fc316:	429a      	cmp	r2, r3
 23fc318:	d1ed      	bne.n	23fc2f6 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xda>
            var = num;
 23fc31a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	: _M_storage(std::forward<_Args>(__args)...)
 23fc31e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	_M_index{_Np}
 23fc322:	2306      	movs	r3, #6
 23fc324:	e114      	b.n	23fc550 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x334>
 23fc326:	68a6      	ldr	r6, [r4, #8]
 23fc328:	4621      	mov	r1, r4
 23fc32a:	a816      	add	r0, sp, #88	; 0x58
 23fc32c:	f7fd fde4 	bl	23f9ef8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc330:	4631      	mov	r1, r6
 23fc332:	aa16      	add	r2, sp, #88	; 0x58
 23fc334:	a806      	add	r0, sp, #24
 23fc336:	f7fd f8bd 	bl	23f94b4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc33a:	a817      	add	r0, sp, #92	; 0x5c
 23fc33c:	f7fc fd27 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return String(s_, n_);
 23fc340:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 23fc344:	a80a      	add	r0, sp, #40	; 0x28
 23fc346:	f7fe fe96 	bl	23fb076 <_ZN6StringC1EPKcj>
        if (s.length() != jsonStr.size()) {
 23fc34a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fc34c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fc34e:	429a      	cmp	r2, r3
 23fc350:	d007      	beq.n	23fc362 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x146>
            return Error::NO_MEMORY;
 23fc352:	a80a      	add	r0, sp, #40	; 0x28
 23fc354:	f7fe fe30 	bl	23fafb8 <_ZN6StringD1Ev>
 23fc358:	a807      	add	r0, sp, #28
 23fc35a:	f7fc fd18 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc35e:	4c82      	ldr	r4, [pc, #520]	; (23fc568 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x34c>)
 23fc360:	e76f      	b.n	23fc242 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x26>
        var = std::move(s);
 23fc362:	a90a      	add	r1, sp, #40	; 0x28
 23fc364:	a810      	add	r0, sp, #64	; 0x40
 23fc366:	f7fe feb0 	bl	23fb0ca <_ZN6StringC1EOS_>
	  ::new ((void*)std::addressof(_M_storage))
 23fc36a:	a910      	add	r1, sp, #64	; 0x40
 23fc36c:	a816      	add	r0, sp, #88	; 0x58
 23fc36e:	f7fe feac 	bl	23fb0ca <_ZN6StringC1EOS_>
	_M_index{_Np}
 23fc372:	2307      	movs	r3, #7
    { __lhs.swap(__rhs); }
 23fc374:	a916      	add	r1, sp, #88	; 0x58
 23fc376:	4628      	mov	r0, r5
	_M_index{_Np}
 23fc378:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    { __lhs.swap(__rhs); }
 23fc37c:	f7fb f8f0 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fc380:	a816      	add	r0, sp, #88	; 0x58
 23fc382:	f7fa fcc9 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc386:	a810      	add	r0, sp, #64	; 0x40
 23fc388:	f7fe fe16 	bl	23fafb8 <_ZN6StringD1Ev>
        break;
 23fc38c:	a80a      	add	r0, sp, #40	; 0x28
 23fc38e:	f7fe fe13 	bl	23fafb8 <_ZN6StringD1Ev>
 23fc392:	a807      	add	r0, sp, #28
 23fc394:	e7b0      	b.n	23fc2f8 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xdc>
        JSONArrayIterator(value.t_, value.d_) {
 23fc396:	68a6      	ldr	r6, [r4, #8]
 23fc398:	4621      	mov	r1, r4
 23fc39a:	a816      	add	r0, sp, #88	; 0x58
 23fc39c:	f7fd fdac 	bl	23f9ef8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc3a0:	4631      	mov	r1, r6
 23fc3a2:	aa16      	add	r2, sp, #88	; 0x58
 23fc3a4:	a80a      	add	r0, sp, #40	; 0x28
 23fc3a6:	f7fd f8d4 	bl	23f9552 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc3aa:	a817      	add	r0, sp, #92	; 0x5c
 23fc3ac:	f7fc fcef 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return as<VariantArray>();
 23fc3b0:	4628      	mov	r0, r5
 23fc3b2:	f7ff fa57 	bl	23fb864 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v>
        if (!arr.reserve(it.count())) {
 23fc3b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 23fc3b8:	4605      	mov	r5, r0
 23fc3ba:	f7ff fc35 	bl	23fbc28 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi>
 23fc3be:	2800      	cmp	r0, #0
 23fc3c0:	d036      	beq.n	23fc430 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x214>
        while (it.next()) {
 23fc3c2:	a80a      	add	r0, sp, #40	; 0x28
 23fc3c4:	f7fd f8dc 	bl	23f9580 <_ZN5spark17JSONArrayIterator4nextEv>
 23fc3c8:	4604      	mov	r4, r0
 23fc3ca:	b1f0      	cbz	r0, 23fc40a <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x1ee>
            Variant v;
 23fc3cc:	2218      	movs	r2, #24
 23fc3ce:	2100      	movs	r1, #0
 23fc3d0:	a810      	add	r0, sp, #64	; 0x40
 23fc3d2:	f000 fef0 	bl	23fd1b6 <memset>
    return JSONValue(v_, d_);
 23fc3d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 23fc3d8:	a90a      	add	r1, sp, #40	; 0x28
 23fc3da:	a806      	add	r0, sp, #24
 23fc3dc:	f7fd fd8c 	bl	23f9ef8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc3e0:	4621      	mov	r1, r4
 23fc3e2:	aa06      	add	r2, sp, #24
 23fc3e4:	a816      	add	r0, sp, #88	; 0x58
 23fc3e6:	f7fc fee8 	bl	23f91ba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc3ea:	a807      	add	r0, sp, #28
 23fc3ec:	f7fc fccf 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            CHECK(decodeFromJson(it.value(), v));
 23fc3f0:	a910      	add	r1, sp, #64	; 0x40
 23fc3f2:	a816      	add	r0, sp, #88	; 0x58
 23fc3f4:	f7ff ff12 	bl	23fc21c <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE>
 23fc3f8:	4604      	mov	r4, r0
 23fc3fa:	a817      	add	r0, sp, #92	; 0x5c
 23fc3fc:	f7fc fcc7 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc400:	2c00      	cmp	r4, #0
 23fc402:	da06      	bge.n	23fc412 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x1f6>
 23fc404:	a810      	add	r0, sp, #64	; 0x40
 23fc406:	f7fa fc87 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc40a:	a80b      	add	r0, sp, #44	; 0x2c
 23fc40c:	f7fc fcbf 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc410:	e717      	b.n	23fc242 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x26>
            arr.append(std::move(v));
 23fc412:	a910      	add	r1, sp, #64	; 0x40
 23fc414:	a816      	add	r0, sp, #88	; 0x58
 23fc416:	f7fb f941 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fc41a:	a916      	add	r1, sp, #88	; 0x58
 23fc41c:	4628      	mov	r0, r5
 23fc41e:	f7ff fc4d 	bl	23fbcbc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>
 23fc422:	a816      	add	r0, sp, #88	; 0x58
 23fc424:	f7fa fc78 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc428:	a810      	add	r0, sp, #64	; 0x40
 23fc42a:	f7fa fc75 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc42e:	e7c8      	b.n	23fc3c2 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x1a6>
            return Error::NO_MEMORY;
 23fc430:	4c4d      	ldr	r4, [pc, #308]	; (23fc568 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x34c>)
 23fc432:	e7ea      	b.n	23fc40a <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x1ee>
        JSONObjectIterator(value.t_, value.d_) {
 23fc434:	68a6      	ldr	r6, [r4, #8]
 23fc436:	4621      	mov	r1, r4
 23fc438:	a810      	add	r0, sp, #64	; 0x40
 23fc43a:	f7fd fd5d 	bl	23f9ef8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc43e:	4631      	mov	r1, r6
 23fc440:	aa10      	add	r2, sp, #64	; 0x40
 23fc442:	a816      	add	r0, sp, #88	; 0x58
 23fc444:	f7fd f85a 	bl	23f94fc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc448:	a811      	add	r0, sp, #68	; 0x44
 23fc44a:	f7fc fca0 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return as<VariantMap>();
 23fc44e:	4628      	mov	r0, r5
 23fc450:	f7fb f84d 	bl	23f74ee <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
        return entries_.reserve(count);
 23fc454:	991b      	ldr	r1, [sp, #108]	; 0x6c
 23fc456:	4605      	mov	r5, r0
 23fc458:	f7ff fd6b 	bl	23fbf32 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi>
        if (!map.reserve(it.count())) {
 23fc45c:	2800      	cmp	r0, #0
 23fc45e:	d05a      	beq.n	23fc516 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x2fa>
        while (it.next()) {
 23fc460:	a816      	add	r0, sp, #88	; 0x58
 23fc462:	f7fd f863 	bl	23f952c <_ZN5spark18JSONObjectIterator4nextEv>
 23fc466:	4604      	mov	r4, r0
 23fc468:	2800      	cmp	r0, #0
 23fc46a:	d03a      	beq.n	23fc4e2 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x2c6>
    return JSONString(k_, d_);
 23fc46c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 23fc46e:	a916      	add	r1, sp, #88	; 0x58
 23fc470:	a810      	add	r0, sp, #64	; 0x40
 23fc472:	f7fd fd41 	bl	23f9ef8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc476:	4621      	mov	r1, r4
 23fc478:	aa10      	add	r2, sp, #64	; 0x40
 23fc47a:	a802      	add	r0, sp, #8
 23fc47c:	f7fd f81a 	bl	23f94b4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc480:	a811      	add	r0, sp, #68	; 0x44
 23fc482:	f7fc fc84 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return String(s_, n_);
 23fc486:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 23fc48a:	a806      	add	r0, sp, #24
 23fc48c:	f7fe fdf3 	bl	23fb076 <_ZN6StringC1EPKcj>
            if (k.length() != jsonKey.size()) {
 23fc490:	9a05      	ldr	r2, [sp, #20]
 23fc492:	9b08      	ldr	r3, [sp, #32]
 23fc494:	429a      	cmp	r2, r3
 23fc496:	d13c      	bne.n	23fc512 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x2f6>
            Variant v;
 23fc498:	2218      	movs	r2, #24
 23fc49a:	2100      	movs	r1, #0
 23fc49c:	a80a      	add	r0, sp, #40	; 0x28
 23fc49e:	f000 fe8a 	bl	23fd1b6 <memset>
    return JSONValue(v_, d_);
 23fc4a2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 23fc4a4:	a916      	add	r1, sp, #88	; 0x58
 23fc4a6:	4668      	mov	r0, sp
 23fc4a8:	f7fd fd26 	bl	23f9ef8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc4ac:	466a      	mov	r2, sp
 23fc4ae:	4621      	mov	r1, r4
 23fc4b0:	a810      	add	r0, sp, #64	; 0x40
 23fc4b2:	f7fc fe82 	bl	23f91ba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc4b6:	a801      	add	r0, sp, #4
 23fc4b8:	f7fc fc69 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            CHECK(decodeFromJson(it.value(), v));
 23fc4bc:	a90a      	add	r1, sp, #40	; 0x28
 23fc4be:	a810      	add	r0, sp, #64	; 0x40
 23fc4c0:	f7ff feac 	bl	23fc21c <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE>
 23fc4c4:	4604      	mov	r4, r0
 23fc4c6:	a811      	add	r0, sp, #68	; 0x44
 23fc4c8:	f7fc fc61 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc4cc:	2c00      	cmp	r4, #0
 23fc4ce:	da0a      	bge.n	23fc4e6 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x2ca>
 23fc4d0:	a80a      	add	r0, sp, #40	; 0x28
 23fc4d2:	f7fa fc21 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
                return Error::NO_MEMORY;
 23fc4d6:	a806      	add	r0, sp, #24
 23fc4d8:	f7fe fd6e 	bl	23fafb8 <_ZN6StringD1Ev>
 23fc4dc:	a803      	add	r0, sp, #12
 23fc4de:	f7fc fc56 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc4e2:	a817      	add	r0, sp, #92	; 0x5c
 23fc4e4:	e792      	b.n	23fc40c <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x1f0>
            map.set(std::move(k), std::move(v));
 23fc4e6:	a90a      	add	r1, sp, #40	; 0x28
 23fc4e8:	a810      	add	r0, sp, #64	; 0x40
 23fc4ea:	f7fb f8d7 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fc4ee:	aa10      	add	r2, sp, #64	; 0x40
 23fc4f0:	a906      	add	r1, sp, #24
 23fc4f2:	4628      	mov	r0, r5
 23fc4f4:	f7ff fe43 	bl	23fc17e <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE3setEOS1_S2_>
 23fc4f8:	a810      	add	r0, sp, #64	; 0x40
 23fc4fa:	f7fa fc0d 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc4fe:	a80a      	add	r0, sp, #40	; 0x28
 23fc500:	f7fa fc0a 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            String k(jsonKey);
 23fc504:	a806      	add	r0, sp, #24
 23fc506:	f7fe fd57 	bl	23fafb8 <_ZN6StringD1Ev>
 23fc50a:	a803      	add	r0, sp, #12
 23fc50c:	f7fc fc3f 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc510:	e7a6      	b.n	23fc460 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x244>
                return Error::NO_MEMORY;
 23fc512:	4c15      	ldr	r4, [pc, #84]	; (23fc568 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x34c>)
 23fc514:	e7df      	b.n	23fc4d6 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x2ba>
            return Error::NO_MEMORY;
 23fc516:	4c14      	ldr	r4, [pc, #80]	; (23fc568 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x34c>)
 23fc518:	e7e3      	b.n	23fc4e2 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x2c6>
        return Error::INVALID_ARGUMENT;
 23fc51a:	4c14      	ldr	r4, [pc, #80]	; (23fc56c <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x350>)
 23fc51c:	e691      	b.n	23fc242 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x26>
      if (__builtin_expect(__first == __start, 0))
 23fc51e:	4294      	cmp	r4, r2
 23fc520:	f43f aedf 	beq.w	23fc2e2 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xc6>
		  if (__builtin_mul_overflow(__val, __sign, &__tmp))
 23fc524:	fb86 0403 	smull	r0, r4, r6, r3
 23fc528:	ebb4 7fe0 	cmp.w	r4, r0, asr #31
 23fc52c:	bf14      	ite	ne
 23fc52e:	2401      	movne	r4, #1
 23fc530:	2400      	moveq	r4, #0
 23fc532:	2b00      	cmp	r3, #0
 23fc534:	f6bf aee8 	bge.w	23fc308 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xec>
 23fc538:	b12e      	cbz	r6, 23fc546 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x32a>
 23fc53a:	3601      	adds	r6, #1
 23fc53c:	f47f aed1 	bne.w	23fc2e2 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xc6>
 23fc540:	4283      	cmp	r3, r0
 23fc542:	f47f aece 	bne.w	23fc2e2 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xc6>
        if (r.ec != std::errc() || r.ptr != s.data() + s.size()) {
 23fc546:	4562      	cmp	r2, ip
 23fc548:	f47f aecb 	bne.w	23fc2e2 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xc6>
	_M_index{_Np}
 23fc54c:	2302      	movs	r3, #2
	: _M_storage(std::forward<_Args>(__args)...)
 23fc54e:	9016      	str	r0, [sp, #88]	; 0x58
    { __lhs.swap(__rhs); }
 23fc550:	4628      	mov	r0, r5
 23fc552:	a916      	add	r1, sp, #88	; 0x58
	_M_index{_Np}
 23fc554:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    { __lhs.swap(__rhs); }
 23fc558:	f7fb f802 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fc55c:	a816      	add	r0, sp, #88	; 0x58
 23fc55e:	f7fa fbdb 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc562:	e6c8      	b.n	23fc2f6 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0xda>
      if (__builtin_expect(__first == __start, 0))
 23fc564:	4564      	cmp	r4, ip
 23fc566:	e7db      	b.n	23fc520 <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE+0x304>
 23fc568:	fffffefc 	.word	0xfffffefc
 23fc56c:	fffffef2 	.word	0xfffffef2

023fc570 <_ZN8particle7Variant8fromJSONERKN5spark9JSONValueE>:
Variant Variant::fromJSON(const JSONValue& val) {
 23fc570:	b530      	push	{r4, r5, lr}
 23fc572:	460d      	mov	r5, r1
 23fc574:	b087      	sub	sp, #28
    Variant v;
 23fc576:	2218      	movs	r2, #24
 23fc578:	2100      	movs	r1, #0
Variant Variant::fromJSON(const JSONValue& val) {
 23fc57a:	4604      	mov	r4, r0
    Variant v;
 23fc57c:	4668      	mov	r0, sp
 23fc57e:	f000 fe1a 	bl	23fd1b6 <memset>
    int r = decodeFromJson(val, v);
 23fc582:	4669      	mov	r1, sp
 23fc584:	4628      	mov	r0, r5
 23fc586:	f7ff fe49 	bl	23fc21c <_ZN8particle12_GLOBAL__N_114decodeFromJsonERKN5spark9JSONValueERNS_7VariantE>
    if (r < 0) {
 23fc58a:	2800      	cmp	r0, #0
 23fc58c:	da0a      	bge.n	23fc5a4 <_ZN8particle7Variant8fromJSONERKN5spark9JSONValueE+0x34>
        return Variant();
 23fc58e:	2218      	movs	r2, #24
 23fc590:	2100      	movs	r1, #0
 23fc592:	4620      	mov	r0, r4
 23fc594:	f000 fe0f 	bl	23fd1b6 <memset>
 23fc598:	4668      	mov	r0, sp
 23fc59a:	f7fa fbbd 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
 23fc59e:	4620      	mov	r0, r4
 23fc5a0:	b007      	add	sp, #28
 23fc5a2:	bd30      	pop	{r4, r5, pc}
    return v;
 23fc5a4:	4669      	mov	r1, sp
 23fc5a6:	4620      	mov	r0, r4
 23fc5a8:	f7fb f878 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fc5ac:	e7f4      	b.n	23fc598 <_ZN8particle7Variant8fromJSONERKN5spark9JSONValueE+0x28>

023fc5ae <_ZN8particle7Variant8fromJSONEPKc>:
Variant Variant::fromJSON(const char* json) {
 23fc5ae:	b510      	push	{r4, lr}
 23fc5b0:	4604      	mov	r4, r0
 23fc5b2:	b086      	sub	sp, #24
    return parseCopy(json, strlen(json));
 23fc5b4:	4608      	mov	r0, r1
 23fc5b6:	9101      	str	r1, [sp, #4]
 23fc5b8:	f7f9 fca8 	bl	23f5f0c <strlen>
 23fc5bc:	9901      	ldr	r1, [sp, #4]
 23fc5be:	4602      	mov	r2, r0
 23fc5c0:	a803      	add	r0, sp, #12
 23fc5c2:	f7fd f8c5 	bl	23f9750 <_ZN5spark9JSONValue9parseCopyEPKcj>
    return fromJSON(JSONValue::parseCopy(json));
 23fc5c6:	4620      	mov	r0, r4
 23fc5c8:	a903      	add	r1, sp, #12
 23fc5ca:	f7ff ffd1 	bl	23fc570 <_ZN8particle7Variant8fromJSONERKN5spark9JSONValueE>
 23fc5ce:	a804      	add	r0, sp, #16
 23fc5d0:	f7fc fbdd 	bl	23f8d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc5d4:	4620      	mov	r0, r4
 23fc5d6:	b006      	add	sp, #24
 23fc5d8:	bd10      	pop	{r4, pc}
	...

023fc5dc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE>:
int decodeFromCbor(DecodingStream& stream, const CborHead& head, Variant& var) {
 23fc5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch (head.type) {
 23fc5e0:	688c      	ldr	r4, [r1, #8]
int decodeFromCbor(DecodingStream& stream, const CborHead& head, Variant& var) {
 23fc5e2:	4607      	mov	r7, r0
 23fc5e4:	4689      	mov	r9, r1
 23fc5e6:	4615      	mov	r5, r2
 23fc5e8:	b0aa      	sub	sp, #168	; 0xa8
 23fc5ea:	2c07      	cmp	r4, #7
 23fc5ec:	f200 82fc 	bhi.w	23fcbe8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x60c>
 23fc5f0:	e8df f014 	tbh	[pc, r4, lsl #1]
 23fc5f4:	00180008 	.word	0x00180008
 23fc5f8:	00930030 	.word	0x00930030
 23fc5fc:	016000f3 	.word	0x016000f3
 23fc600:	029a0288 	.word	0x029a0288
        if (head.arg <= std::numeric_limits<unsigned>::max()) {
 23fc604:	e9d1 2300 	ldrd	r2, r3, [r1]
            var = (unsigned)head.arg; // 32-bit
 23fc608:	9224      	str	r2, [sp, #144]	; 0x90
        if (head.arg <= std::numeric_limits<unsigned>::max()) {
 23fc60a:	b943      	cbnz	r3, 23fc61e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x42>
	_M_index{_Np}
 23fc60c:	2303      	movs	r3, #3
 23fc60e:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    { __lhs.swap(__rhs); }
 23fc612:	4628      	mov	r0, r5
 23fc614:	a924      	add	r1, sp, #144	; 0x90
 23fc616:	f7fa ffa3 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fc61a:	a824      	add	r0, sp, #144	; 0x90
 23fc61c:	e20f      	b.n	23fca3e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x462>
	: _M_storage(std::forward<_Args>(__args)...)
 23fc61e:	9325      	str	r3, [sp, #148]	; 0x94
	_M_index{_Np}
 23fc620:	2305      	movs	r3, #5
 23fc622:	e7f4      	b.n	23fc60e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x32>
        if (head.arg > (uint64_t)std::numeric_limits<int64_t>::max()) {
 23fc624:	e9d1 2300 	ldrd	r2, r3, [r1]
 23fc628:	2b00      	cmp	r3, #0
 23fc62a:	f2c0 82e0 	blt.w	23fcbee <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x612>
        int64_t v = -(int64_t)head.arg - 1;
 23fc62e:	43d2      	mvns	r2, r2
 23fc630:	43db      	mvns	r3, r3
        if (v >= std::numeric_limits<int>::min()) {
 23fc632:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fc636:	f173 31ff 	sbcs.w	r1, r3, #4294967295	; 0xffffffff
	: _M_storage(std::forward<_Args>(__args)...)
 23fc63a:	bfb6      	itet	lt
 23fc63c:	9325      	strlt	r3, [sp, #148]	; 0x94
	_M_index{_Np}
 23fc63e:	2302      	movge	r3, #2
 23fc640:	2304      	movlt	r3, #4
            var = (int)v; // 32-bit
 23fc642:	9224      	str	r2, [sp, #144]	; 0x90
    { __lhs.swap(__rhs); }
 23fc644:	4628      	mov	r0, r5
 23fc646:	a924      	add	r1, sp, #144	; 0x90
	_M_index{_Np}
 23fc648:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    { __lhs.swap(__rhs); }
 23fc64c:	f7fa ff88 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fc650:	a824      	add	r0, sp, #144	; 0x90
 23fc652:	e17a      	b.n	23fc94a <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x36e>
        capacity_(0) {
 23fc654:	2600      	movs	r6, #0
    if (head.detail == 31 /* Indefinite length */) {
 23fc656:	68cb      	ldr	r3, [r1, #12]
 23fc658:	e9cd 6618 	strd	r6, r6, [sp, #96]	; 0x60
 23fc65c:	2b1f      	cmp	r3, #31
 23fc65e:	e9cd 661e 	strd	r6, r6, [sp, #120]	; 0x78
 23fc662:	961a      	str	r6, [sp, #104]	; 0x68
 23fc664:	9620      	str	r6, [sp, #128]	; 0x80
 23fc666:	d12d      	bne.n	23fc6c4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xe8>
            if (h.arg > std::numeric_limits<unsigned>::max()) {
 23fc668:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
            CHECK(readCborHead(stream, h));
 23fc66c:	4638      	mov	r0, r7
 23fc66e:	a924      	add	r1, sp, #144	; 0x90
 23fc670:	f7fe ffba 	bl	23fb5e8 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
 23fc674:	1e04      	subs	r4, r0, #0
 23fc676:	db18      	blt.n	23fc6aa <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xce>
            if (h.type == 7 /* Misc. items */ && h.detail == 31 /* Stop code */) {
 23fc678:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23fc67a:	2b07      	cmp	r3, #7
 23fc67c:	d102      	bne.n	23fc684 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xa8>
 23fc67e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 23fc680:	2a1f      	cmp	r2, #31
 23fc682:	d02c      	beq.n	23fc6de <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x102>
            if (h.type != head.type || h.detail == 31 /* Indefinite length */) { // Chunks of indefinite length are not permitted
 23fc684:	f8d9 2008 	ldr.w	r2, [r9, #8]
 23fc688:	4293      	cmp	r3, r2
 23fc68a:	d119      	bne.n	23fc6c0 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xe4>
 23fc68c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23fc68e:	2b1f      	cmp	r3, #31
 23fc690:	d016      	beq.n	23fc6c0 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xe4>
            if (h.arg > std::numeric_limits<unsigned>::max()) {
 23fc692:	9924      	ldr	r1, [sp, #144]	; 0x90
 23fc694:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23fc696:	4588      	cmp	r8, r1
 23fc698:	eb76 0303 	sbcs.w	r3, r6, r3
 23fc69c:	d325      	bcc.n	23fc6ea <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x10e>
            CHECK(read(stream, h.arg, out));
 23fc69e:	4638      	mov	r0, r7
 23fc6a0:	aa1e      	add	r2, sp, #120	; 0x78
 23fc6a2:	f7ff f867 	bl	23fb774 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE>
 23fc6a6:	1e04      	subs	r4, r0, #0
 23fc6a8:	dae0      	bge.n	23fc66c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x90>
 23fc6aa:	a81e      	add	r0, sp, #120	; 0x78
 23fc6ac:	f7fc fb68 	bl	23f8d80 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
        CHECK(readCborByteString(stream, head, b));
 23fc6b0:	b1ec      	cbz	r4, 23fc6ee <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x112>
 23fc6b2:	a818      	add	r0, sp, #96	; 0x60
 23fc6b4:	f7fc fb64 	bl	23f8d80 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
}
 23fc6b8:	4620      	mov	r0, r4
 23fc6ba:	b02a      	add	sp, #168	; 0xa8
 23fc6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                return Error::BAD_DATA;
 23fc6c0:	4ca3      	ldr	r4, [pc, #652]	; (23fc950 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x374>)
 23fc6c2:	e7f2      	b.n	23fc6aa <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xce>
        if (head.arg > std::numeric_limits<unsigned>::max()) {
 23fc6c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fc6c8:	e9d1 1300 	ldrd	r1, r3, [r1]
 23fc6cc:	428a      	cmp	r2, r1
 23fc6ce:	eb76 0303 	sbcs.w	r3, r6, r3
 23fc6d2:	d30a      	bcc.n	23fc6ea <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x10e>
        CHECK(read(stream, head.arg, out));
 23fc6d4:	aa1e      	add	r2, sp, #120	; 0x78
 23fc6d6:	f7ff f84d 	bl	23fb774 <_ZN8particle12_GLOBAL__N_121readAndAppendToBufferERNS0_14DecodingStreamEjRNS_6BufferE>
 23fc6da:	1e04      	subs	r4, r0, #0
 23fc6dc:	dbe5      	blt.n	23fc6aa <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xce>
    output = std::move(out);
 23fc6de:	a91e      	add	r1, sp, #120	; 0x78
 23fc6e0:	a818      	add	r0, sp, #96	; 0x60
 23fc6e2:	f7ff f831 	bl	23fb748 <_ZN8particle6BufferaSEOS0_.isra.0>
    return 0;
 23fc6e6:	2400      	movs	r4, #0
 23fc6e8:	e7df      	b.n	23fc6aa <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xce>
            return Error::OUT_OF_RANGE;
 23fc6ea:	4c9a      	ldr	r4, [pc, #616]	; (23fc954 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x378>)
 23fc6ec:	e7dd      	b.n	23fc6aa <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xce>
 23fc6ee:	a918      	add	r1, sp, #96	; 0x60
 23fc6f0:	a81e      	add	r0, sp, #120	; 0x78
 23fc6f2:	f7fa f907 	bl	23f6904 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
 23fc6f6:	a91e      	add	r1, sp, #120	; 0x78
 23fc6f8:	a824      	add	r0, sp, #144	; 0x90
 23fc6fa:	f7fa f903 	bl	23f6904 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
	_M_index{_Np}
 23fc6fe:	2308      	movs	r3, #8
    { __lhs.swap(__rhs); }
 23fc700:	4628      	mov	r0, r5
 23fc702:	a924      	add	r1, sp, #144	; 0x90
	_M_index{_Np}
 23fc704:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    { __lhs.swap(__rhs); }
 23fc708:	f7fa ff2a 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fc70c:	a824      	add	r0, sp, #144	; 0x90
 23fc70e:	f7fa fb03 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc712:	a81e      	add	r0, sp, #120	; 0x78
 23fc714:	f7fc fb34 	bl	23f8d80 <_ZN5spark6VectorIcNS_16DefaultAllocatorEED1Ev>
 23fc718:	e7cb      	b.n	23fc6b2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xd6>
        String s;
 23fc71a:	498f      	ldr	r1, [pc, #572]	; (23fc958 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x37c>)
 23fc71c:	a818      	add	r0, sp, #96	; 0x60
 23fc71e:	f7fe fc96 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
    T out;
 23fc722:	498d      	ldr	r1, [pc, #564]	; (23fc958 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x37c>)
 23fc724:	a824      	add	r0, sp, #144	; 0x90
 23fc726:	f7fe fc92 	bl	23fb04e <_ZN6StringC1EPK19__FlashStringHelper>
    if (head.detail == 31 /* Indefinite length */) {
 23fc72a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 23fc72e:	2b1f      	cmp	r3, #31
 23fc730:	d12c      	bne.n	23fc78c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1b0>
            if (h.arg > std::numeric_limits<unsigned>::max()) {
 23fc732:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fc736:	f04f 0800 	mov.w	r8, #0
            CHECK(readCborHead(stream, h));
 23fc73a:	4638      	mov	r0, r7
 23fc73c:	a91e      	add	r1, sp, #120	; 0x78
 23fc73e:	f7fe ff53 	bl	23fb5e8 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
 23fc742:	1e04      	subs	r4, r0, #0
 23fc744:	db18      	blt.n	23fc778 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x19c>
            if (h.type == 7 /* Misc. items */ && h.detail == 31 /* Stop code */) {
 23fc746:	9b20      	ldr	r3, [sp, #128]	; 0x80
 23fc748:	2b07      	cmp	r3, #7
 23fc74a:	d102      	bne.n	23fc752 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x176>
 23fc74c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 23fc74e:	2a1f      	cmp	r2, #31
 23fc750:	d025      	beq.n	23fc79e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1c2>
            if (h.type != head.type || h.detail == 31 /* Indefinite length */) { // Chunks of indefinite length are not permitted
 23fc752:	f8d9 2008 	ldr.w	r2, [r9, #8]
 23fc756:	4293      	cmp	r3, r2
 23fc758:	d116      	bne.n	23fc788 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1ac>
 23fc75a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 23fc75c:	2b1f      	cmp	r3, #31
 23fc75e:	d013      	beq.n	23fc788 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1ac>
            if (h.arg > std::numeric_limits<unsigned>::max()) {
 23fc760:	991e      	ldr	r1, [sp, #120]	; 0x78
 23fc762:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 23fc764:	428e      	cmp	r6, r1
 23fc766:	eb78 0303 	sbcs.w	r3, r8, r3
 23fc76a:	d31e      	bcc.n	23fc7aa <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1ce>
            CHECK(read(stream, h.arg, out));
 23fc76c:	4638      	mov	r0, r7
 23fc76e:	aa24      	add	r2, sp, #144	; 0x90
 23fc770:	f7fe ff14 	bl	23fb59c <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String>
 23fc774:	1e04      	subs	r4, r0, #0
 23fc776:	dae0      	bge.n	23fc73a <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x15e>
    T out;
 23fc778:	a824      	add	r0, sp, #144	; 0x90
 23fc77a:	f7fe fc1d 	bl	23fafb8 <_ZN6StringD1Ev>
        CHECK(readCborTextString(stream, head, s));
 23fc77e:	b1b4      	cbz	r4, 23fc7ae <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1d2>
        break;
 23fc780:	a818      	add	r0, sp, #96	; 0x60
 23fc782:	f7fe fc19 	bl	23fafb8 <_ZN6StringD1Ev>
 23fc786:	e797      	b.n	23fc6b8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xdc>
                return Error::BAD_DATA;
 23fc788:	4c71      	ldr	r4, [pc, #452]	; (23fc950 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x374>)
 23fc78a:	e7f5      	b.n	23fc778 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x19c>
        if (head.arg > std::numeric_limits<unsigned>::max()) {
 23fc78c:	e9d9 1300 	ldrd	r1, r3, [r9]
 23fc790:	b95b      	cbnz	r3, 23fc7aa <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1ce>
        CHECK(read(stream, head.arg, out));
 23fc792:	4638      	mov	r0, r7
 23fc794:	aa24      	add	r2, sp, #144	; 0x90
 23fc796:	f7fe ff01 	bl	23fb59c <_ZN8particle12_GLOBAL__N_121readAndAppendToStringERNS0_14DecodingStreamEjR6String>
 23fc79a:	1e04      	subs	r4, r0, #0
 23fc79c:	dbec      	blt.n	23fc778 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x19c>
    output = std::move(out);
 23fc79e:	a924      	add	r1, sp, #144	; 0x90
 23fc7a0:	a818      	add	r0, sp, #96	; 0x60
 23fc7a2:	f7fe fcb7 	bl	23fb114 <_ZN6StringaSEOS_>
    return 0;
 23fc7a6:	2400      	movs	r4, #0
 23fc7a8:	e7e6      	b.n	23fc778 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x19c>
            return Error::OUT_OF_RANGE;
 23fc7aa:	4c6a      	ldr	r4, [pc, #424]	; (23fc954 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x378>)
 23fc7ac:	e7e4      	b.n	23fc778 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x19c>
        var = std::move(s);
 23fc7ae:	a918      	add	r1, sp, #96	; 0x60
 23fc7b0:	a81e      	add	r0, sp, #120	; 0x78
 23fc7b2:	f7fe fc8a 	bl	23fb0ca <_ZN6StringC1EOS_>
	  ::new ((void*)std::addressof(_M_storage))
 23fc7b6:	a91e      	add	r1, sp, #120	; 0x78
 23fc7b8:	a824      	add	r0, sp, #144	; 0x90
 23fc7ba:	f7fe fc86 	bl	23fb0ca <_ZN6StringC1EOS_>
	_M_index{_Np}
 23fc7be:	2307      	movs	r3, #7
    { __lhs.swap(__rhs); }
 23fc7c0:	4628      	mov	r0, r5
 23fc7c2:	a924      	add	r1, sp, #144	; 0x90
	_M_index{_Np}
 23fc7c4:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    { __lhs.swap(__rhs); }
 23fc7c8:	f7fa feca 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fc7cc:	a824      	add	r0, sp, #144	; 0x90
 23fc7ce:	f7fa faa3 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc7d2:	a81e      	add	r0, sp, #120	; 0x78
 23fc7d4:	f7fe fbf0 	bl	23fafb8 <_ZN6StringD1Ev>
 23fc7d8:	e7d2      	b.n	23fc780 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x1a4>
 23fc7da:	2300      	movs	r3, #0
 23fc7dc:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 23fc7e0:	9314      	str	r3, [sp, #80]	; 0x50
        if (head.detail != 31 /* Indefinite length */) {
 23fc7e2:	68cb      	ldr	r3, [r1, #12]
 23fc7e4:	2b1f      	cmp	r3, #31
 23fc7e6:	d00d      	beq.n	23fc804 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x228>
            if (head.arg > (uint64_t)std::numeric_limits<int>::max()) {
 23fc7e8:	e9d1 6300 	ldrd	r6, r3, [r1]
 23fc7ec:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 23fc7f0:	f173 0300 	sbcs.w	r3, r3, #0
 23fc7f4:	d25c      	bcs.n	23fc8b0 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2d4>
            if (!arr.reserve(len)) {
 23fc7f6:	4631      	mov	r1, r6
 23fc7f8:	a812      	add	r0, sp, #72	; 0x48
 23fc7fa:	f7ff fa15 	bl	23fbc28 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi>
 23fc7fe:	b918      	cbnz	r0, 23fc808 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x22c>
                return Error::NO_MEMORY;
 23fc800:	4c56      	ldr	r4, [pc, #344]	; (23fc95c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x380>)
 23fc802:	e04f      	b.n	23fc8a4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2c8>
        int len = -1;
 23fc804:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
            if (len >= 0 && arr.size() == len) {
 23fc808:	1c70      	adds	r0, r6, #1
 23fc80a:	d002      	beq.n	23fc812 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x236>
 23fc80c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23fc80e:	429e      	cmp	r6, r3
 23fc810:	d00d      	beq.n	23fc82e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x252>
            CHECK(readCborHead(stream, h));
 23fc812:	4638      	mov	r0, r7
 23fc814:	a918      	add	r1, sp, #96	; 0x60
 23fc816:	f7fe fee7 	bl	23fb5e8 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
 23fc81a:	1e04      	subs	r4, r0, #0
 23fc81c:	db42      	blt.n	23fc8a4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2c8>
            if (h.type == 7 /* Misc. items */ && h.detail == 31 /* Stop code */) {
 23fc81e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23fc820:	2b07      	cmp	r3, #7
 23fc822:	d11e      	bne.n	23fc862 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x286>
 23fc824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 23fc826:	2b1f      	cmp	r3, #31
 23fc828:	d11b      	bne.n	23fc862 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x286>
                if (len >= 0) {
 23fc82a:	3601      	adds	r6, #1
 23fc82c:	d13e      	bne.n	23fc8ac <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2d0>
        var = std::move(arr);
 23fc82e:	a912      	add	r1, sp, #72	; 0x48
 23fc830:	a81e      	add	r0, sp, #120	; 0x78
 23fc832:	f7fa f88b 	bl	23f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  ::new ((void*)std::addressof(_M_storage))
 23fc836:	a91e      	add	r1, sp, #120	; 0x78
 23fc838:	a824      	add	r0, sp, #144	; 0x90
 23fc83a:	f7fa f887 	bl	23f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	_M_index{_Np}
 23fc83e:	2309      	movs	r3, #9
    { __lhs.swap(__rhs); }
 23fc840:	a924      	add	r1, sp, #144	; 0x90
 23fc842:	4628      	mov	r0, r5
	_M_index{_Np}
 23fc844:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    { __lhs.swap(__rhs); }
 23fc848:	f7fa fe8a 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fc84c:	a824      	add	r0, sp, #144	; 0x90
 23fc84e:	f7fa fa63 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc852:	a81e      	add	r0, sp, #120	; 0x78
 23fc854:	f7fa fadf 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
        break;
 23fc858:	a812      	add	r0, sp, #72	; 0x48
 23fc85a:	f7fa fadc 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
    return 0;
 23fc85e:	2400      	movs	r4, #0
 23fc860:	e72a      	b.n	23fc6b8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xdc>
            Variant v;
 23fc862:	2218      	movs	r2, #24
 23fc864:	2100      	movs	r1, #0
 23fc866:	a81e      	add	r0, sp, #120	; 0x78
 23fc868:	f000 fca5 	bl	23fd1b6 <memset>
            CHECK(decodeFromCbor(stream, h, v));
 23fc86c:	4638      	mov	r0, r7
 23fc86e:	aa1e      	add	r2, sp, #120	; 0x78
 23fc870:	a918      	add	r1, sp, #96	; 0x60
 23fc872:	f7ff feb3 	bl	23fc5dc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE>
 23fc876:	1e04      	subs	r4, r0, #0
 23fc878:	db11      	blt.n	23fc89e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2c2>
            if (!arr.append(std::move(v))) {
 23fc87a:	a91e      	add	r1, sp, #120	; 0x78
 23fc87c:	a824      	add	r0, sp, #144	; 0x90
 23fc87e:	f7fa ff0d 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fc882:	a924      	add	r1, sp, #144	; 0x90
 23fc884:	a812      	add	r0, sp, #72	; 0x48
 23fc886:	f7ff fa19 	bl	23fbcbc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE6appendES2_>
 23fc88a:	4604      	mov	r4, r0
 23fc88c:	a824      	add	r0, sp, #144	; 0x90
 23fc88e:	f7fa fa43 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc892:	b11c      	cbz	r4, 23fc89c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2c0>
 23fc894:	a81e      	add	r0, sp, #120	; 0x78
 23fc896:	f7fa fa3f 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc89a:	e7b5      	b.n	23fc808 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x22c>
                return Error::NO_MEMORY;
 23fc89c:	4c2f      	ldr	r4, [pc, #188]	; (23fc95c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x380>)
 23fc89e:	a81e      	add	r0, sp, #120	; 0x78
 23fc8a0:	f7fa fa3a 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
                return Error::OUT_OF_RANGE;
 23fc8a4:	a812      	add	r0, sp, #72	; 0x48
 23fc8a6:	f7fa fab6 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
 23fc8aa:	e705      	b.n	23fc6b8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xdc>
                    return Error::BAD_DATA; // Unexpected stop code
 23fc8ac:	4c28      	ldr	r4, [pc, #160]	; (23fc950 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x374>)
 23fc8ae:	e7f9      	b.n	23fc8a4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2c8>
                return Error::OUT_OF_RANGE;
 23fc8b0:	4c28      	ldr	r4, [pc, #160]	; (23fc954 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x378>)
 23fc8b2:	e7f7      	b.n	23fc8a4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x2c8>
 23fc8b4:	2300      	movs	r3, #0
	  ::new ((void*)std::addressof(_M_storage))
 23fc8b6:	a924      	add	r1, sp, #144	; 0x90
 23fc8b8:	a80c      	add	r0, sp, #48	; 0x30
 23fc8ba:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
 23fc8be:	9326      	str	r3, [sp, #152]	; 0x98
 23fc8c0:	f7fa f853 	bl	23f696a <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	_M_index{_Np}
 23fc8c4:	230a      	movs	r3, #10
class Map {
 23fc8c6:	a824      	add	r0, sp, #144	; 0x90
 23fc8c8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 23fc8cc:	f7fa fa40 	bl	23f6d50 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
        if (head.detail != 31 /* Indefinite length */) {
 23fc8d0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 23fc8d4:	2b1f      	cmp	r3, #31
 23fc8d6:	d011      	beq.n	23fc8fc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x320>
            if (head.arg > (uint64_t)std::numeric_limits<int>::max()) {
 23fc8d8:	e9d9 3200 	ldrd	r3, r2, [r9]
 23fc8dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23fc8e0:	f172 0200 	sbcs.w	r2, r2, #0
 23fc8e4:	f080 810c 	bcs.w	23fcb00 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x524>
            len = head.arg;
 23fc8e8:	4698      	mov	r8, r3
 23fc8ea:	a80c      	add	r0, sp, #48	; 0x30
 23fc8ec:	f7fa fdff 	bl	23f74ee <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
        return entries_.reserve(count);
 23fc8f0:	4641      	mov	r1, r8
 23fc8f2:	f7ff fb1e 	bl	23fbf32 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi>
            if (!cont.asMap().reserve(len)) {
 23fc8f6:	b918      	cbnz	r0, 23fc900 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x324>
                return Error::NO_MEMORY;
 23fc8f8:	4c18      	ldr	r4, [pc, #96]	; (23fc95c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x380>)
 23fc8fa:	e09f      	b.n	23fca3c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x460>
        int len = -1;
 23fc8fc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
            if (len >= 0 && cont.size() == len) {
 23fc900:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 23fc904:	d004      	beq.n	23fc910 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x334>
 23fc906:	a80c      	add	r0, sp, #48	; 0x30
 23fc908:	f7ff f8a4 	bl	23fba54 <_ZNK8particle7Variant4sizeEv>
 23fc90c:	4540      	cmp	r0, r8
 23fc90e:	d010      	beq.n	23fc932 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x356>
            CHECK(readCborHead(stream, h));
 23fc910:	4638      	mov	r0, r7
 23fc912:	a904      	add	r1, sp, #16
 23fc914:	f7fe fe68 	bl	23fb5e8 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
 23fc918:	1e04      	subs	r4, r0, #0
 23fc91a:	f2c0 808f 	blt.w	23fca3c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x460>
            if (h.type == 7 /* Misc. items */ && h.detail == 31 /* Stop code */) {
 23fc91e:	9b06      	ldr	r3, [sp, #24]
 23fc920:	2b07      	cmp	r3, #7
 23fc922:	d11d      	bne.n	23fc960 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x384>
 23fc924:	9b07      	ldr	r3, [sp, #28]
 23fc926:	2b1f      	cmp	r3, #31
 23fc928:	d11a      	bne.n	23fc960 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x384>
                if (len >= 0) {
 23fc92a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 23fc92e:	f040 80e5 	bne.w	23fcafc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x520>
        var = std::move(cont);
 23fc932:	a90c      	add	r1, sp, #48	; 0x30
 23fc934:	a824      	add	r0, sp, #144	; 0x90
 23fc936:	f7fa feb1 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
    { __lhs.swap(__rhs); }
 23fc93a:	4628      	mov	r0, r5
 23fc93c:	a924      	add	r1, sp, #144	; 0x90
 23fc93e:	f7fa fe0f 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fc942:	a824      	add	r0, sp, #144	; 0x90
 23fc944:	f7fa f9e8 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc948:	a80c      	add	r0, sp, #48	; 0x30
 23fc94a:	f7fa f9e5 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fc94e:	e786      	b.n	23fc85e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x282>
 23fc950:	fffffee8 	.word	0xfffffee8
 23fc954:	fffffede 	.word	0xfffffede
 23fc958:	023ffa36 	.word	0x023ffa36
 23fc95c:	fffffefc 	.word	0xfffffefc
            Variant k;
 23fc960:	2218      	movs	r2, #24
 23fc962:	2100      	movs	r1, #0
 23fc964:	a812      	add	r0, sp, #72	; 0x48
 23fc966:	f000 fc26 	bl	23fd1b6 <memset>
            CHECK(decodeFromCbor(stream, h, k));
 23fc96a:	4638      	mov	r0, r7
 23fc96c:	aa12      	add	r2, sp, #72	; 0x48
 23fc96e:	a904      	add	r1, sp, #16
 23fc970:	f7ff fe34 	bl	23fc5dc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE>
 23fc974:	1e04      	subs	r4, r0, #0
 23fc976:	db5e      	blt.n	23fca36 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x45a>
            Variant v;
 23fc978:	2218      	movs	r2, #24
 23fc97a:	2100      	movs	r1, #0
 23fc97c:	a818      	add	r0, sp, #96	; 0x60
 23fc97e:	f000 fc1a 	bl	23fd1b6 <memset>
            CHECK(readCborHead(stream, h));
 23fc982:	4638      	mov	r0, r7
 23fc984:	a904      	add	r1, sp, #16
 23fc986:	f7fe fe2f 	bl	23fb5e8 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
 23fc98a:	1e04      	subs	r4, r0, #0
 23fc98c:	db50      	blt.n	23fca30 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x454>
            CHECK(decodeFromCbor(stream, h, v));
 23fc98e:	4638      	mov	r0, r7
 23fc990:	aa18      	add	r2, sp, #96	; 0x60
 23fc992:	a904      	add	r1, sp, #16
 23fc994:	f7ff fe22 	bl	23fc5dc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE>
 23fc998:	1e04      	subs	r4, r0, #0
 23fc99a:	db49      	blt.n	23fca30 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x454>
            if (cont.isMap()) {
 23fc99c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 23fc9a0:	2b0a      	cmp	r3, #10
 23fc9a2:	d169      	bne.n	23fca78 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x49c>
                if (!k.isString()) {
 23fc9a4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 23fc9a8:	2b07      	cmp	r3, #7
 23fc9aa:	d072      	beq.n	23fca92 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x4b6>
 23fc9ac:	2300      	movs	r3, #0
                    int capacity = (len < 0) ? (cont.size() + 1) : len;
 23fc9ae:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 23fc9b2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 23fc9b6:	9303      	str	r3, [sp, #12]
 23fc9b8:	d144      	bne.n	23fca44 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x468>
 23fc9ba:	a80c      	add	r0, sp, #48	; 0x30
 23fc9bc:	f7ff f84a 	bl	23fba54 <_ZNK8particle7Variant4sizeEv>
 23fc9c0:	1c41      	adds	r1, r0, #1
                    if (!arr.reserve(capacity)) {
 23fc9c2:	a801      	add	r0, sp, #4
 23fc9c4:	f7ff f930 	bl	23fbc28 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEE7reserveEi>
 23fc9c8:	2800      	cmp	r0, #0
 23fc9ca:	d060      	beq.n	23fca8e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x4b2>
 23fc9cc:	a80c      	add	r0, sp, #48	; 0x30
 23fc9ce:	f7fa fd8e 	bl	23f74ee <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
    return data_ + size_;
 23fc9d2:	f04f 0928 	mov.w	r9, #40	; 0x28
 23fc9d6:	e9d0 6300 	ldrd	r6, r3, [r0]
	_M_index{_Np}
 23fc9da:	f04f 0a07 	mov.w	sl, #7
 23fc9de:	fb09 6903 	mla	r9, r9, r3, r6
                    for (auto& entry: cont.asMap()) {
 23fc9e2:	454e      	cmp	r6, r9
 23fc9e4:	d030      	beq.n	23fca48 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x46c>
                        CHECK(appendKeyValueArray(arr, entry.first, std::move(entry.second))); // Can't move the key
 23fc9e6:	4631      	mov	r1, r6
 23fc9e8:	a808      	add	r0, sp, #32
 23fc9ea:	f7fe fb88 	bl	23fb0fe <_ZN6StringC1ERKS_>
	  ::new ((void*)std::addressof(_M_storage))
 23fc9ee:	a908      	add	r1, sp, #32
 23fc9f0:	a81e      	add	r0, sp, #120	; 0x78
 23fc9f2:	f7fe fb6a 	bl	23fb0ca <_ZN6StringC1EOS_>
 23fc9f6:	f106 0110 	add.w	r1, r6, #16
 23fc9fa:	a824      	add	r0, sp, #144	; 0x90
	_M_index{_Np}
 23fc9fc:	f88d a088 	strb.w	sl, [sp, #136]	; 0x88
 23fca00:	f7fa fe4c 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fca04:	aa24      	add	r2, sp, #144	; 0x90
 23fca06:	a91e      	add	r1, sp, #120	; 0x78
 23fca08:	a801      	add	r0, sp, #4
 23fca0a:	f7ff f96b 	bl	23fbce4 <_ZN8particle12_GLOBAL__N_119appendKeyValueArrayERN5spark6VectorINS_7VariantENS1_16DefaultAllocatorEEES3_S3_>
 23fca0e:	4604      	mov	r4, r0
      { _M_reset(); }
 23fca10:	a824      	add	r0, sp, #144	; 0x90
 23fca12:	f7fa f981 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fca16:	a81e      	add	r0, sp, #120	; 0x78
 23fca18:	f7fa f97e 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fca1c:	a808      	add	r0, sp, #32
 23fca1e:	f7fe facb 	bl	23fafb8 <_ZN6StringD1Ev>
 23fca22:	2c00      	cmp	r4, #0
 23fca24:	f106 0628 	add.w	r6, r6, #40	; 0x28
 23fca28:	dadb      	bge.n	23fc9e2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x406>
                        return Error::NO_MEMORY;
 23fca2a:	a801      	add	r0, sp, #4
 23fca2c:	f7fa f9f3 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
 23fca30:	a818      	add	r0, sp, #96	; 0x60
 23fca32:	f7fa f971 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fca36:	a812      	add	r0, sp, #72	; 0x48
 23fca38:	f7fa f96e 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fca3c:	a80c      	add	r0, sp, #48	; 0x30
 23fca3e:	f7fa f96b 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            break;
 23fca42:	e639      	b.n	23fc6b8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xdc>
 23fca44:	4641      	mov	r1, r8
 23fca46:	e7bc      	b.n	23fc9c2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x3e6>
                    cont = std::move(arr);
 23fca48:	a901      	add	r1, sp, #4
 23fca4a:	a81e      	add	r0, sp, #120	; 0x78
 23fca4c:	f7f9 ff7e 	bl	23f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  ::new ((void*)std::addressof(_M_storage))
 23fca50:	a91e      	add	r1, sp, #120	; 0x78
 23fca52:	a824      	add	r0, sp, #144	; 0x90
 23fca54:	f7f9 ff7a 	bl	23f694c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	_M_index{_Np}
 23fca58:	2309      	movs	r3, #9
    { __lhs.swap(__rhs); }
 23fca5a:	a924      	add	r1, sp, #144	; 0x90
 23fca5c:	a80c      	add	r0, sp, #48	; 0x30
	_M_index{_Np}
 23fca5e:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    { __lhs.swap(__rhs); }
 23fca62:	f7fa fd7d 	bl	23f7560 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fca66:	a824      	add	r0, sp, #144	; 0x90
 23fca68:	f7fa f956 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fca6c:	a81e      	add	r0, sp, #120	; 0x78
 23fca6e:	f7fa f9d2 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
                    VariantArray arr;
 23fca72:	a801      	add	r0, sp, #4
 23fca74:	f7fa f9cf 	bl	23f6e16 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
            if (cont.isArray()) {
 23fca78:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 23fca7c:	2b09      	cmp	r3, #9
 23fca7e:	d022      	beq.n	23fcac6 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x4ea>
 23fca80:	a818      	add	r0, sp, #96	; 0x60
 23fca82:	f7fa f949 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fca86:	a812      	add	r0, sp, #72	; 0x48
 23fca88:	f7fa f946 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fca8c:	e738      	b.n	23fc900 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x324>
                        return Error::NO_MEMORY;
 23fca8e:	4c5a      	ldr	r4, [pc, #360]	; (23fcbf8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x61c>)
 23fca90:	e7cb      	b.n	23fca2a <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x44e>
 23fca92:	a80c      	add	r0, sp, #48	; 0x30
 23fca94:	f7fa fd2b 	bl	23f74ee <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
 23fca98:	4604      	mov	r4, r0
        return as<String>();
 23fca9a:	a812      	add	r0, sp, #72	; 0x48
 23fca9c:	f7fe fea4 	bl	23fb7e8 <_ZN8particle7Variant2asI6StringEERT_v>
 23fcaa0:	4606      	mov	r6, r0
                } else if (!cont.asMap().set(std::move(k.asString()), std::move(v))) {
 23fcaa2:	a918      	add	r1, sp, #96	; 0x60
 23fcaa4:	a824      	add	r0, sp, #144	; 0x90
 23fcaa6:	f7fa fdf9 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fcaaa:	4620      	mov	r0, r4
 23fcaac:	4631      	mov	r1, r6
 23fcaae:	aa24      	add	r2, sp, #144	; 0x90
 23fcab0:	f7ff fb65 	bl	23fc17e <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE3setEOS1_S2_>
 23fcab4:	4604      	mov	r4, r0
 23fcab6:	a824      	add	r0, sp, #144	; 0x90
 23fcab8:	f7fa f92e 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fcabc:	2c00      	cmp	r4, #0
 23fcabe:	d1db      	bne.n	23fca78 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x49c>
                    return Error::NO_MEMORY;
 23fcac0:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 23fcac4:	e7b4      	b.n	23fca30 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x454>
        return as<VariantArray>();
 23fcac6:	a80c      	add	r0, sp, #48	; 0x30
 23fcac8:	f7fe fecc 	bl	23fb864 <_ZN8particle7Variant2asIN5spark6VectorIS0_NS2_16DefaultAllocatorEEEEERT_v>
 23fcacc:	4604      	mov	r4, r0
                CHECK(appendKeyValueArray(cont.asArray(), std::move(k), std::move(v)));
 23fcace:	a912      	add	r1, sp, #72	; 0x48
 23fcad0:	a81e      	add	r0, sp, #120	; 0x78
 23fcad2:	f7fa fde3 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fcad6:	a918      	add	r1, sp, #96	; 0x60
 23fcad8:	a824      	add	r0, sp, #144	; 0x90
 23fcada:	f7fa fddf 	bl	23f769c <_ZN8particle7VariantC1EOS0_>
 23fcade:	aa24      	add	r2, sp, #144	; 0x90
 23fcae0:	a91e      	add	r1, sp, #120	; 0x78
 23fcae2:	4620      	mov	r0, r4
 23fcae4:	f7ff f8fe 	bl	23fbce4 <_ZN8particle12_GLOBAL__N_119appendKeyValueArrayERN5spark6VectorINS_7VariantENS1_16DefaultAllocatorEEES3_S3_>
 23fcae8:	4604      	mov	r4, r0
 23fcaea:	a824      	add	r0, sp, #144	; 0x90
 23fcaec:	f7fa f914 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fcaf0:	a81e      	add	r0, sp, #120	; 0x78
 23fcaf2:	f7fa f911 	bl	23f6d18 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fcaf6:	2c00      	cmp	r4, #0
 23fcaf8:	dac2      	bge.n	23fca80 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x4a4>
 23fcafa:	e799      	b.n	23fca30 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x454>
                    return Error::BAD_DATA; // Unexpected stop code
 23fcafc:	4c3f      	ldr	r4, [pc, #252]	; (23fcbfc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x620>)
 23fcafe:	e79d      	b.n	23fca3c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x460>
                return Error::OUT_OF_RANGE;
 23fcb00:	4c3f      	ldr	r4, [pc, #252]	; (23fcc00 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x624>)
 23fcb02:	e79b      	b.n	23fca3c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x460>
            CHECK(readCborHead(stream, h));
 23fcb04:	4638      	mov	r0, r7
 23fcb06:	a924      	add	r1, sp, #144	; 0x90
 23fcb08:	f7fe fd6e 	bl	23fb5e8 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
 23fcb0c:	1e04      	subs	r4, r0, #0
 23fcb0e:	f6ff add3 	blt.w	23fc6b8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xdc>
        } while (h.type == 6 /* Tagged item */);
 23fcb12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23fcb14:	2b06      	cmp	r3, #6
 23fcb16:	d0f5      	beq.n	23fcb04 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x528>
        CHECK(decodeFromCbor(stream, h, var));
 23fcb18:	462a      	mov	r2, r5
 23fcb1a:	4638      	mov	r0, r7
 23fcb1c:	a924      	add	r1, sp, #144	; 0x90
 23fcb1e:	f7ff fd5d 	bl	23fc5dc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE>
    return 0;
 23fcb22:	ea00 74e0 	and.w	r4, r0, r0, asr #31
 23fcb26:	e5c7      	b.n	23fc6b8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xdc>
        switch (head.detail) {
 23fcb28:	68cb      	ldr	r3, [r1, #12]
 23fcb2a:	f1a3 0214 	sub.w	r2, r3, #20
 23fcb2e:	2a07      	cmp	r2, #7
 23fcb30:	d84c      	bhi.n	23fcbcc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5f0>
 23fcb32:	e8df f002 	tbb	[pc, r2]
 23fcb36:	0904      	.short	0x0904
 23fcb38:	134b4b0d 	.word	0x134b4b0d
 23fcb3c:	4840      	.short	0x4840
	: _M_storage(std::forward<_Args>(__args)...)
 23fcb3e:	2400      	movs	r4, #0
	_M_index{_Np}
 23fcb40:	2301      	movs	r3, #1
	: _M_storage(std::forward<_Args>(__args)...)
 23fcb42:	f88d 4090 	strb.w	r4, [sp, #144]	; 0x90
 23fcb46:	e562      	b.n	23fc60e <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x32>
 23fcb48:	2301      	movs	r3, #1
 23fcb4a:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 23fcb4e:	e579      	b.n	23fc644 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x68>
            var = Variant();
 23fcb50:	2400      	movs	r4, #0
 23fcb52:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	_M_index{_Np}
 23fcb56:	f88d 40a0 	strb.w	r4, [sp, #160]	; 0xa0
    swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)
 23fcb5a:	e55a      	b.n	23fc612 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x36>
            uint16_t half = head.arg;
 23fcb5c:	f8d9 6000 	ldr.w	r6, [r9]
            if (exp == 0) {
 23fcb60:	f416 4ff8 	tst.w	r6, #31744	; 0x7c00
 23fcb64:	f3c6 2384 	ubfx	r3, r6, #10, #5
            unsigned mant = half & 0x03ff;
 23fcb68:	f3c6 0009 	ubfx	r0, r6, #0, #10
            if (exp == 0) {
 23fcb6c:	d111      	bne.n	23fcb92 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5b6>
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }
 23fcb6e:	f7f8 fc69 	bl	23f5444 <__aeabi_ui2d>
 23fcb72:	ec41 0b10 	vmov	d0, r0, r1
 23fcb76:	f06f 0017 	mvn.w	r0, #23
 23fcb7a:	f000 f9ff 	bl	23fcf7c <ldexp>
 23fcb7e:	ec53 2b10 	vmov	r2, r3, d0
            if (half & 0x8000) {
 23fcb82:	0431      	lsls	r1, r6, #16
 23fcb84:	d502      	bpl.n	23fcb8c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5b0>
                val = -val;
 23fcb86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 23fcb8a:	460b      	mov	r3, r1
	: _M_storage(std::forward<_Args>(__args)...)
 23fcb8c:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 23fcb90:	e017      	b.n	23fcbc2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5e6>
            } else if (exp != 31) {
 23fcb92:	2b1f      	cmp	r3, #31
 23fcb94:	d009      	beq.n	23fcbaa <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5ce>
 23fcb96:	f500 6080 	add.w	r0, r0, #1024	; 0x400
                val = std::ldexp(mant + 1024, exp - 25);
 23fcb9a:	f1a3 0419 	sub.w	r4, r3, #25
 23fcb9e:	f7f8 fc51 	bl	23f5444 <__aeabi_ui2d>
 23fcba2:	ec41 0b10 	vmov	d0, r0, r1
 23fcba6:	4620      	mov	r0, r4
 23fcba8:	e7e7      	b.n	23fcb7a <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x59e>
                val = (mant == 0) ? INFINITY : NAN;
 23fcbaa:	2200      	movs	r2, #0
 23fcbac:	b108      	cbz	r0, 23fcbb2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5d6>
 23fcbae:	4b15      	ldr	r3, [pc, #84]	; (23fcc04 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x628>)
 23fcbb0:	e7e7      	b.n	23fcb82 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5a6>
 23fcbb2:	4b15      	ldr	r3, [pc, #84]	; (23fcc08 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x62c>)
 23fcbb4:	e7e5      	b.n	23fcb82 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5a6>
            var = val;
 23fcbb6:	f8d9 0000 	ldr.w	r0, [r9]
 23fcbba:	f7f8 fc65 	bl	23f5488 <__aeabi_f2d>
 23fcbbe:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
	_M_index{_Np}
 23fcbc2:	2306      	movs	r3, #6
 23fcbc4:	e53e      	b.n	23fc644 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x68>
            var = val;
 23fcbc6:	e9d9 2300 	ldrd	r2, r3, [r9]
 23fcbca:	e7df      	b.n	23fcb8c <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x5b0>
            if ((head.detail >= 28 && head.detail <= 31) || // Reserved (28-30) or unexpected stop code (31)
 23fcbcc:	f1a3 021c 	sub.w	r2, r3, #28
 23fcbd0:	2a03      	cmp	r2, #3
 23fcbd2:	d907      	bls.n	23fcbe4 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x608>
 23fcbd4:	2b18      	cmp	r3, #24
 23fcbd6:	d10c      	bne.n	23fcbf2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x616>
                    (head.detail == 24 && head.arg < 32)) { // Invalid simple value
 23fcbd8:	e9d9 2300 	ldrd	r2, r3, [r9]
 23fcbdc:	2a20      	cmp	r2, #32
 23fcbde:	f173 0300 	sbcs.w	r3, r3, #0
 23fcbe2:	d206      	bcs.n	23fcbf2 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x616>
                return Error::BAD_DATA;
 23fcbe4:	4c05      	ldr	r4, [pc, #20]	; (23fcbfc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x620>)
 23fcbe6:	e567      	b.n	23fc6b8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xdc>
    switch (head.type) {
 23fcbe8:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
 23fcbec:	e564      	b.n	23fc6b8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xdc>
            return Error::OUT_OF_RANGE;
 23fcbee:	4c04      	ldr	r4, [pc, #16]	; (23fcc00 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0x624>)
 23fcbf0:	e562      	b.n	23fc6b8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xdc>
            return Error::NOT_SUPPORTED; // Unassigned simple value (0-19, 32-255) or undefined (23)
 23fcbf2:	f06f 0477 	mvn.w	r4, #119	; 0x77
 23fcbf6:	e55f      	b.n	23fc6b8 <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE+0xdc>
 23fcbf8:	fffffefc 	.word	0xfffffefc
 23fcbfc:	fffffee8 	.word	0xfffffee8
 23fcc00:	fffffede 	.word	0xfffffede
 23fcc04:	7ff80000 	.word	0x7ff80000
 23fcc08:	7ff00000 	.word	0x7ff00000

023fcc0c <_ZN8particle14decodeFromCBORERNS_7VariantER6Stream>:

int decodeFromCBOR(Variant& var, Stream& stream) {
 23fcc0c:	b500      	push	{lr}
 23fcc0e:	b089      	sub	sp, #36	; 0x24
 23fcc10:	9001      	str	r0, [sp, #4]
            stream_(stream) {
 23fcc12:	9103      	str	r1, [sp, #12]
    DecodingStream s(stream);
    CborHead h;
    CHECK(readCborHead(s, h));
 23fcc14:	a803      	add	r0, sp, #12
 23fcc16:	a904      	add	r1, sp, #16
 23fcc18:	f7fe fce6 	bl	23fb5e8 <_ZN8particle12_GLOBAL__N_112readCborHeadERNS0_14DecodingStreamERNS0_8CborHeadE>
 23fcc1c:	2800      	cmp	r0, #0
 23fcc1e:	db06      	blt.n	23fcc2e <_ZN8particle14decodeFromCBORERNS_7VariantER6Stream+0x22>
    CHECK(decodeFromCbor(s, h, var));
 23fcc20:	9a01      	ldr	r2, [sp, #4]
 23fcc22:	a904      	add	r1, sp, #16
 23fcc24:	a803      	add	r0, sp, #12
 23fcc26:	f7ff fcd9 	bl	23fc5dc <_ZN8particle12_GLOBAL__N_114decodeFromCborERNS0_14DecodingStreamERKNS0_8CborHeadERNS_7VariantE>
 23fcc2a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    return 0;
}
 23fcc2e:	b009      	add	sp, #36	; 0x24
 23fcc30:	f85d fb04 	ldr.w	pc, [sp], #4

023fcc34 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fcc34:	2200      	movs	r2, #0
 23fcc36:	6840      	ldr	r0, [r0, #4]
 23fcc38:	4611      	mov	r1, r2
 23fcc3a:	f7fb bf7b 	b.w	23f8b34 <network_ready>

023fcc3e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fcc3e:	2200      	movs	r2, #0
 23fcc40:	6840      	ldr	r0, [r0, #4]
 23fcc42:	4611      	mov	r1, r2
 23fcc44:	f7fb bfae 	b.w	23f8ba4 <network_listening>

023fcc48 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fcc48:	2200      	movs	r2, #0
 23fcc4a:	6840      	ldr	r0, [r0, #4]
 23fcc4c:	4611      	mov	r1, r2
 23fcc4e:	f7fb bfc5 	b.w	23f8bdc <network_get_listen_timeout>

023fcc52 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fcc52:	2200      	movs	r2, #0
 23fcc54:	6840      	ldr	r0, [r0, #4]
 23fcc56:	f7fb bfb3 	b.w	23f8bc0 <network_set_listen_timeout>

023fcc5a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fcc5a:	2200      	movs	r2, #0
 23fcc5c:	6840      	ldr	r0, [r0, #4]
 23fcc5e:	f081 0101 	eor.w	r1, r1, #1
 23fcc62:	f7fb bf91 	b.w	23f8b88 <network_listen>

023fcc66 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fcc66:	2300      	movs	r3, #0
 23fcc68:	6840      	ldr	r0, [r0, #4]
 23fcc6a:	461a      	mov	r2, r3
 23fcc6c:	4619      	mov	r1, r3
 23fcc6e:	f7fb bf7d 	b.w	23f8b6c <network_off>

023fcc72 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fcc72:	2300      	movs	r3, #0
 23fcc74:	6840      	ldr	r0, [r0, #4]
 23fcc76:	461a      	mov	r2, r3
 23fcc78:	4619      	mov	r1, r3
 23fcc7a:	f7fb bf69 	b.w	23f8b50 <network_on>

023fcc7e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fcc7e:	2200      	movs	r2, #0
 23fcc80:	6840      	ldr	r0, [r0, #4]
 23fcc82:	4611      	mov	r1, r2
 23fcc84:	f7fb bf3a 	b.w	23f8afc <network_connecting>

023fcc88 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fcc88:	2200      	movs	r2, #0
 23fcc8a:	2102      	movs	r1, #2
 23fcc8c:	6840      	ldr	r0, [r0, #4]
 23fcc8e:	f7fb bf43 	b.w	23f8b18 <network_disconnect>

023fcc92 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fcc92:	2300      	movs	r3, #0
 23fcc94:	6840      	ldr	r0, [r0, #4]
 23fcc96:	461a      	mov	r2, r3
 23fcc98:	f7fb bf22 	b.w	23f8ae0 <network_connect>

023fcc9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fcc9c:	2205      	movs	r2, #5
 23fcc9e:	4b02      	ldr	r3, [pc, #8]	; (23fcca8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fcca0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fcca2:	4a02      	ldr	r2, [pc, #8]	; (23fccac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fcca4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fcca6:	4770      	bx	lr
 23fcca8:	1007af24 	.word	0x1007af24
 23fccac:	023ffbd4 	.word	0x023ffbd4

023fccb0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fccb0:	4b01      	ldr	r3, [pc, #4]	; (23fccb8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fccb2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fccb4:	4770      	bx	lr
 23fccb6:	bf00      	nop
 23fccb8:	1007ac44 	.word	0x1007ac44

023fccbc <serialEventRun>:
{
 23fccbc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fccbe:	4b0d      	ldr	r3, [pc, #52]	; (23fccf4 <serialEventRun+0x38>)
 23fccc0:	b143      	cbz	r3, 23fccd4 <serialEventRun+0x18>
 23fccc2:	f7fe fb6d 	bl	23fb3a0 <_Z16_fetch_usbserialv>
 23fccc6:	6803      	ldr	r3, [r0, #0]
 23fccc8:	691b      	ldr	r3, [r3, #16]
 23fccca:	4798      	blx	r3
 23fcccc:	2800      	cmp	r0, #0
 23fccce:	dd01      	ble.n	23fccd4 <serialEventRun+0x18>
        serialEvent();
 23fccd0:	e000      	b.n	23fccd4 <serialEventRun+0x18>
 23fccd2:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fccd4:	4b08      	ldr	r3, [pc, #32]	; (23fccf8 <serialEventRun+0x3c>)
 23fccd6:	b143      	cbz	r3, 23fccea <serialEventRun+0x2e>
 23fccd8:	f000 f8ec 	bl	23fceb4 <_Z22__fetch_global_Serial1v>
 23fccdc:	6803      	ldr	r3, [r0, #0]
 23fccde:	691b      	ldr	r3, [r3, #16]
 23fcce0:	4798      	blx	r3
 23fcce2:	2800      	cmp	r0, #0
 23fcce4:	dd01      	ble.n	23fccea <serialEventRun+0x2e>
        serialEvent1();
 23fcce6:	e000      	b.n	23fccea <serialEventRun+0x2e>
 23fcce8:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fccea:	4b04      	ldr	r3, [pc, #16]	; (23fccfc <serialEventRun+0x40>)
 23fccec:	b10b      	cbz	r3, 23fccf2 <serialEventRun+0x36>
 23fccee:	f000 f927 	bl	23fcf40 <_Z15serialEventRun2v>
}
 23fccf2:	bd08      	pop	{r3, pc}
	...

023fcd00 <_post_loop>:
{
 23fcd00:	b508      	push	{r3, lr}
	serialEventRun();
 23fcd02:	f7ff ffdb 	bl	23fccbc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fcd06:	f7fb fbf7 	bl	23f84f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fcd0a:	4b01      	ldr	r3, [pc, #4]	; (23fcd10 <_post_loop+0x10>)
 23fcd0c:	6018      	str	r0, [r3, #0]
}
 23fcd0e:	bd08      	pop	{r3, pc}
 23fcd10:	1007af34 	.word	0x1007af34

023fcd14 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fcd14:	4805      	ldr	r0, [pc, #20]	; (23fcd2c <_Z33system_initialize_user_backup_ramv+0x18>)
 23fcd16:	4a06      	ldr	r2, [pc, #24]	; (23fcd30 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fcd18:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fcd1a:	1a12      	subs	r2, r2, r0
 23fcd1c:	4905      	ldr	r1, [pc, #20]	; (23fcd34 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fcd1e:	f000 fa23 	bl	23fd168 <memcpy>
    __backup_sram_signature = signature;
 23fcd22:	4b05      	ldr	r3, [pc, #20]	; (23fcd38 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fcd24:	4a05      	ldr	r2, [pc, #20]	; (23fcd3c <_Z33system_initialize_user_backup_ramv+0x28>)
 23fcd26:	601a      	str	r2, [r3, #0]
}
 23fcd28:	bd08      	pop	{r3, pc}
 23fcd2a:	bf00      	nop
 23fcd2c:	1007b400 	.word	0x1007b400
 23fcd30:	1007bc04 	.word	0x1007bc04
 23fcd34:	085ff0d4 	.word	0x085ff0d4
 23fcd38:	1007bc00 	.word	0x1007bc00
 23fcd3c:	9a271c1e 	.word	0x9a271c1e

023fcd40 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fcd40:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fcd42:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fcd44:	461a      	mov	r2, r3
 23fcd46:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fcd4a:	9300      	str	r3, [sp, #0]
 23fcd4c:	f7fb fdda 	bl	23f8904 <system_ctrl_set_result>
}
 23fcd50:	b003      	add	sp, #12
 23fcd52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fcd58 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fcd58:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fcd5a:	8843      	ldrh	r3, [r0, #2]
 23fcd5c:	2b0a      	cmp	r3, #10
 23fcd5e:	d008      	beq.n	23fcd72 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fcd60:	2b50      	cmp	r3, #80	; 0x50
 23fcd62:	d10b      	bne.n	23fcd7c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fcd64:	4b09      	ldr	r3, [pc, #36]	; (23fcd8c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fcd66:	681b      	ldr	r3, [r3, #0]
 23fcd68:	b14b      	cbz	r3, 23fcd7e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fcd6a:	b003      	add	sp, #12
 23fcd6c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fcd70:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fcd72:	f7ff ffe5 	bl	23fcd40 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fcd76:	b003      	add	sp, #12
 23fcd78:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fcd7c:	2300      	movs	r3, #0
 23fcd7e:	461a      	mov	r2, r3
 23fcd80:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fcd84:	9300      	str	r3, [sp, #0]
 23fcd86:	f7fb fdbd 	bl	23f8904 <system_ctrl_set_result>
}
 23fcd8a:	e7f4      	b.n	23fcd76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fcd8c:	1007af30 	.word	0x1007af30

023fcd90 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fcd90:	2100      	movs	r1, #0
{
 23fcd92:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fcd94:	4811      	ldr	r0, [pc, #68]	; (23fcddc <module_user_init_hook+0x4c>)
 23fcd96:	f7fb ffe5 	bl	23f8d64 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fcd9a:	4b11      	ldr	r3, [pc, #68]	; (23fcde0 <module_user_init_hook+0x50>)
 23fcd9c:	681a      	ldr	r2, [r3, #0]
 23fcd9e:	4b11      	ldr	r3, [pc, #68]	; (23fcde4 <module_user_init_hook+0x54>)
 23fcda0:	429a      	cmp	r2, r3
 23fcda2:	bf0c      	ite	eq
 23fcda4:	2201      	moveq	r2, #1
 23fcda6:	2200      	movne	r2, #0
 23fcda8:	4b0f      	ldr	r3, [pc, #60]	; (23fcde8 <module_user_init_hook+0x58>)
 23fcdaa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fcdac:	d001      	beq.n	23fcdb2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fcdae:	f7ff ffb1 	bl	23fcd14 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fcdb2:	f7fb fb85 	bl	23f84c0 <HAL_RNG_GetRandomNumber>
 23fcdb6:	4604      	mov	r4, r0
    srand(seed);
 23fcdb8:	f000 fa06 	bl	23fd1c8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fcdbc:	4b0b      	ldr	r3, [pc, #44]	; (23fcdec <module_user_init_hook+0x5c>)
 23fcdbe:	b113      	cbz	r3, 23fcdc6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fcdc0:	4620      	mov	r0, r4
 23fcdc2:	e000      	b.n	23fcdc6 <module_user_init_hook+0x36>
 23fcdc4:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fcdc6:	2100      	movs	r1, #0
 23fcdc8:	4808      	ldr	r0, [pc, #32]	; (23fcdec <module_user_init_hook+0x5c>)
 23fcdca:	f7fb fdd3 	bl	23f8974 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fcdce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fcdd2:	2100      	movs	r1, #0
 23fcdd4:	4806      	ldr	r0, [pc, #24]	; (23fcdf0 <module_user_init_hook+0x60>)
 23fcdd6:	f7fb bd87 	b.w	23f88e8 <system_ctrl_set_app_request_handler>
 23fcdda:	bf00      	nop
 23fcddc:	023fccb1 	.word	0x023fccb1
 23fcde0:	1007bc00 	.word	0x1007bc00
 23fcde4:	9a271c1e 	.word	0x9a271c1e
 23fcde8:	1007af2c 	.word	0x1007af2c
 23fcdec:	00000000 	.word	0x00000000
 23fcdf0:	023fcd59 	.word	0x023fcd59

023fcdf4 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 23fcdf4:	b509      	push	{r0, r3, lr}
 23fcdf6:	4804      	ldr	r0, [pc, #16]	; (23fce08 <spark_protocol_instance+0x14>)
 23fcdf8:	6800      	ldr	r0, [r0, #0]
 23fcdfa:	4b04      	ldr	r3, [pc, #16]	; (23fce0c <spark_protocol_instance+0x18>)
 23fcdfc:	4403      	add	r3, r0
 23fcdfe:	681b      	ldr	r3, [r3, #0]
 23fce00:	681b      	ldr	r3, [r3, #0]
 23fce02:	9302      	str	r3, [sp, #8]
 23fce04:	bd09      	pop	{r0, r3, pc}
 23fce06:	0000      	.short	0x0000
 23fce08:	1007ac34 	.word	0x1007ac34
 23fce0c:	00000044 	.word	0x00000044

023fce10 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 23fce10:	b509      	push	{r0, r3, lr}
 23fce12:	4804      	ldr	r0, [pc, #16]	; (23fce24 <spark_protocol_set_product_id+0x14>)
 23fce14:	6800      	ldr	r0, [r0, #0]
 23fce16:	4b04      	ldr	r3, [pc, #16]	; (23fce28 <spark_protocol_set_product_id+0x18>)
 23fce18:	4403      	add	r3, r0
 23fce1a:	681b      	ldr	r3, [r3, #0]
 23fce1c:	685b      	ldr	r3, [r3, #4]
 23fce1e:	9302      	str	r3, [sp, #8]
 23fce20:	bd09      	pop	{r0, r3, pc}
 23fce22:	0000      	.short	0x0000
 23fce24:	1007ac34 	.word	0x1007ac34
 23fce28:	00000044 	.word	0x00000044

023fce2c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 23fce2c:	b509      	push	{r0, r3, lr}
 23fce2e:	4804      	ldr	r0, [pc, #16]	; (23fce40 <spark_protocol_set_product_firmware_version+0x14>)
 23fce30:	6800      	ldr	r0, [r0, #0]
 23fce32:	4b04      	ldr	r3, [pc, #16]	; (23fce44 <spark_protocol_set_product_firmware_version+0x18>)
 23fce34:	4403      	add	r3, r0
 23fce36:	681b      	ldr	r3, [r3, #0]
 23fce38:	689b      	ldr	r3, [r3, #8]
 23fce3a:	9302      	str	r3, [sp, #8]
 23fce3c:	bd09      	pop	{r0, r3, pc}
 23fce3e:	0000      	.short	0x0000
 23fce40:	1007ac34 	.word	0x1007ac34
 23fce44:	00000044 	.word	0x00000044

023fce48 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fce48:	4770      	bx	lr

023fce4a <__tcf_1>:
 23fce4a:	4770      	bx	lr

023fce4c <_Z20acquireSerial1Bufferv>:
{
 23fce4c:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fce4e:	2514      	movs	r5, #20
{
 23fce50:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fce52:	462a      	mov	r2, r5
 23fce54:	2100      	movs	r1, #0
 23fce56:	f000 f9ae 	bl	23fd1b6 <memset>
 23fce5a:	8025      	strh	r5, [r4, #0]
 23fce5c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fce5e:	4907      	ldr	r1, [pc, #28]	; (23fce7c <_Z20acquireSerial1Bufferv+0x30>)
 23fce60:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fce62:	8125      	strh	r5, [r4, #8]
 23fce64:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fce66:	f000 f881 	bl	23fcf6c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fce6a:	4904      	ldr	r1, [pc, #16]	; (23fce7c <_Z20acquireSerial1Bufferv+0x30>)
    };
 23fce6c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fce6e:	4628      	mov	r0, r5
 23fce70:	f000 f87c 	bl	23fcf6c <_ZnajRKSt9nothrow_t>
    };
 23fce74:	60e0      	str	r0, [r4, #12]
}
 23fce76:	4620      	mov	r0, r4
 23fce78:	bd38      	pop	{r3, r4, r5, pc}
 23fce7a:	bf00      	nop
 23fce7c:	023ffc10 	.word	0x023ffc10

023fce80 <_Z20acquireSerial2Bufferv>:
 23fce80:	b538      	push	{r3, r4, r5, lr}
 23fce82:	2514      	movs	r5, #20
 23fce84:	4604      	mov	r4, r0
 23fce86:	462a      	mov	r2, r5
 23fce88:	2100      	movs	r1, #0
 23fce8a:	f000 f994 	bl	23fd1b6 <memset>
 23fce8e:	8025      	strh	r5, [r4, #0]
 23fce90:	2540      	movs	r5, #64	; 0x40
 23fce92:	4907      	ldr	r1, [pc, #28]	; (23fceb0 <_Z20acquireSerial2Bufferv+0x30>)
 23fce94:	4628      	mov	r0, r5
 23fce96:	8125      	strh	r5, [r4, #8]
 23fce98:	8225      	strh	r5, [r4, #16]
 23fce9a:	f000 f867 	bl	23fcf6c <_ZnajRKSt9nothrow_t>
 23fce9e:	4904      	ldr	r1, [pc, #16]	; (23fceb0 <_Z20acquireSerial2Bufferv+0x30>)
 23fcea0:	6060      	str	r0, [r4, #4]
 23fcea2:	4628      	mov	r0, r5
 23fcea4:	f000 f862 	bl	23fcf6c <_ZnajRKSt9nothrow_t>
 23fcea8:	60e0      	str	r0, [r4, #12]
 23fceaa:	4620      	mov	r0, r4
 23fceac:	bd38      	pop	{r3, r4, r5, pc}
 23fceae:	bf00      	nop
 23fceb0:	023ffc10 	.word	0x023ffc10

023fceb4 <_Z22__fetch_global_Serial1v>:
{
 23fceb4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fceb6:	4d0e      	ldr	r5, [pc, #56]	; (23fcef0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fceb8:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fceba:	e8d5 1f8f 	ldab	r1, [r5]
 23fcebe:	f011 0401 	ands.w	r4, r1, #1
 23fcec2:	d111      	bne.n	23fcee8 <_Z22__fetch_global_Serial1v+0x34>
 23fcec4:	4628      	mov	r0, r5
 23fcec6:	f7f9 f873 	bl	23f5fb0 <__cxa_guard_acquire>
 23fceca:	b168      	cbz	r0, 23fcee8 <_Z22__fetch_global_Serial1v+0x34>
 23fcecc:	a801      	add	r0, sp, #4
 23fcece:	f7ff ffbd 	bl	23fce4c <_Z20acquireSerial1Bufferv>
 23fced2:	4621      	mov	r1, r4
 23fced4:	aa01      	add	r2, sp, #4
 23fced6:	4807      	ldr	r0, [pc, #28]	; (23fcef4 <_Z22__fetch_global_Serial1v+0x40>)
 23fced8:	f7fe f9dc 	bl	23fb294 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fcedc:	4628      	mov	r0, r5
 23fcede:	f7f9 f86c 	bl	23f5fba <__cxa_guard_release>
 23fcee2:	4805      	ldr	r0, [pc, #20]	; (23fcef8 <_Z22__fetch_global_Serial1v+0x44>)
 23fcee4:	f000 f92a 	bl	23fd13c <atexit>
    return serial1;
}
 23fcee8:	4802      	ldr	r0, [pc, #8]	; (23fcef4 <_Z22__fetch_global_Serial1v+0x40>)
 23fceea:	b007      	add	sp, #28
 23fceec:	bd30      	pop	{r4, r5, pc}
 23fceee:	bf00      	nop
 23fcef0:	1007af38 	.word	0x1007af38
 23fcef4:	1007af40 	.word	0x1007af40
 23fcef8:	023fce49 	.word	0x023fce49

023fcefc <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fcefc:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fcefe:	4c0d      	ldr	r4, [pc, #52]	; (23fcf34 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fcf00:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fcf02:	e8d4 3f8f 	ldab	r3, [r4]
 23fcf06:	07db      	lsls	r3, r3, #31
 23fcf08:	d411      	bmi.n	23fcf2e <_Z22__fetch_global_Serial2v+0x32>
 23fcf0a:	4620      	mov	r0, r4
 23fcf0c:	f7f9 f850 	bl	23f5fb0 <__cxa_guard_acquire>
 23fcf10:	b168      	cbz	r0, 23fcf2e <_Z22__fetch_global_Serial2v+0x32>
 23fcf12:	a801      	add	r0, sp, #4
 23fcf14:	f7ff ffb4 	bl	23fce80 <_Z20acquireSerial2Bufferv>
 23fcf18:	2101      	movs	r1, #1
 23fcf1a:	aa01      	add	r2, sp, #4
 23fcf1c:	4806      	ldr	r0, [pc, #24]	; (23fcf38 <_Z22__fetch_global_Serial2v+0x3c>)
 23fcf1e:	f7fe f9b9 	bl	23fb294 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fcf22:	4620      	mov	r0, r4
 23fcf24:	f7f9 f849 	bl	23f5fba <__cxa_guard_release>
 23fcf28:	4804      	ldr	r0, [pc, #16]	; (23fcf3c <_Z22__fetch_global_Serial2v+0x40>)
 23fcf2a:	f000 f907 	bl	23fd13c <atexit>
	return serial2;
}
 23fcf2e:	4802      	ldr	r0, [pc, #8]	; (23fcf38 <_Z22__fetch_global_Serial2v+0x3c>)
 23fcf30:	b006      	add	sp, #24
 23fcf32:	bd10      	pop	{r4, pc}
 23fcf34:	1007af3c 	.word	0x1007af3c
 23fcf38:	1007af54 	.word	0x1007af54
 23fcf3c:	023fce4b 	.word	0x023fce4b

023fcf40 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fcf40:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fcf42:	f7ff ffdb 	bl	23fcefc <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fcf46:	4b07      	ldr	r3, [pc, #28]	; (23fcf64 <_Z15serialEventRun2v+0x24>)
 23fcf48:	4604      	mov	r4, r0
 23fcf4a:	b153      	cbz	r3, 23fcf62 <_Z15serialEventRun2v+0x22>
 23fcf4c:	f7fe f9c0 	bl	23fb2d0 <_ZN11USARTSerial9isEnabledEv>
 23fcf50:	b138      	cbz	r0, 23fcf62 <_Z15serialEventRun2v+0x22>
 23fcf52:	6823      	ldr	r3, [r4, #0]
 23fcf54:	4620      	mov	r0, r4
 23fcf56:	691b      	ldr	r3, [r3, #16]
 23fcf58:	4798      	blx	r3
 23fcf5a:	2800      	cmp	r0, #0
 23fcf5c:	dd01      	ble.n	23fcf62 <_Z15serialEventRun2v+0x22>
        handler();
 23fcf5e:	e000      	b.n	23fcf62 <_Z15serialEventRun2v+0x22>
 23fcf60:	bf00      	nop
}
 23fcf62:	bd10      	pop	{r4, pc}
 23fcf64:	00000000 	.word	0x00000000

023fcf68 <_ZnwjRKSt9nothrow_t>:
 23fcf68:	f7f9 b80d 	b.w	23f5f86 <_Znwj>

023fcf6c <_ZnajRKSt9nothrow_t>:
 23fcf6c:	f7f9 b80d 	b.w	23f5f8a <_Znaj>

023fcf70 <_ZSt20__throw_length_errorPKc>:
 23fcf70:	b508      	push	{r3, lr}
 23fcf72:	f7fb febf 	bl	23f8cf4 <abort>

023fcf76 <_ZSt25__throw_bad_function_callv>:
 23fcf76:	b508      	push	{r3, lr}
 23fcf78:	f7fb febc 	bl	23f8cf4 <abort>

023fcf7c <ldexp>:
 23fcf7c:	b538      	push	{r3, r4, r5, lr}
 23fcf7e:	ed2d 8b02 	vpush	{d8}
 23fcf82:	eeb0 8a40 	vmov.f32	s16, s0
 23fcf86:	eef0 8a60 	vmov.f32	s17, s1
 23fcf8a:	4605      	mov	r5, r0
 23fcf8c:	f000 f8c8 	bl	23fd120 <finite>
 23fcf90:	2200      	movs	r2, #0
 23fcf92:	4604      	mov	r4, r0
 23fcf94:	2300      	movs	r3, #0
 23fcf96:	ec51 0b18 	vmov	r0, r1, d8
 23fcf9a:	f7f8 fd35 	bl	23f5a08 <__aeabi_dcmpeq>
 23fcf9e:	b900      	cbnz	r0, 23fcfa2 <ldexp+0x26>
 23fcfa0:	b934      	cbnz	r4, 23fcfb0 <ldexp+0x34>
 23fcfa2:	eeb0 0a48 	vmov.f32	s0, s16
 23fcfa6:	eef0 0a68 	vmov.f32	s1, s17
 23fcfaa:	ecbd 8b02 	vpop	{d8}
 23fcfae:	bd38      	pop	{r3, r4, r5, pc}
 23fcfb0:	eeb0 0a48 	vmov.f32	s0, s16
 23fcfb4:	eef0 0a68 	vmov.f32	s1, s17
 23fcfb8:	4628      	mov	r0, r5
 23fcfba:	f000 f81d 	bl	23fcff8 <scalbn>
 23fcfbe:	eeb0 8a40 	vmov.f32	s16, s0
 23fcfc2:	eef0 8a60 	vmov.f32	s17, s1
 23fcfc6:	f000 f8ab 	bl	23fd120 <finite>
 23fcfca:	2200      	movs	r2, #0
 23fcfcc:	4604      	mov	r4, r0
 23fcfce:	2300      	movs	r3, #0
 23fcfd0:	ec51 0b18 	vmov	r0, r1, d8
 23fcfd4:	f7f8 fd18 	bl	23f5a08 <__aeabi_dcmpeq>
 23fcfd8:	b908      	cbnz	r0, 23fcfde <ldexp+0x62>
 23fcfda:	2c00      	cmp	r4, #0
 23fcfdc:	d1e1      	bne.n	23fcfa2 <ldexp+0x26>
 23fcfde:	f7fb fea5 	bl	23f8d2c <__errno>
 23fcfe2:	eeb0 0a48 	vmov.f32	s0, s16
 23fcfe6:	eef0 0a68 	vmov.f32	s1, s17
 23fcfea:	2322      	movs	r3, #34	; 0x22
 23fcfec:	ecbd 8b02 	vpop	{d8}
 23fcff0:	6003      	str	r3, [r0, #0]
 23fcff2:	bd38      	pop	{r3, r4, r5, pc}
 23fcff4:	0000      	movs	r0, r0
	...

023fcff8 <scalbn>:
 23fcff8:	b538      	push	{r3, r4, r5, lr}
 23fcffa:	ec53 2b10 	vmov	r2, r3, d0
 23fcffe:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23fd002:	469c      	mov	ip, r3
 23fd004:	4604      	mov	r4, r0
 23fd006:	bb89      	cbnz	r1, 23fd06c <scalbn+0x74>
 23fd008:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23fd00c:	ee10 1a10 	vmov	r1, s0
 23fd010:	ea5c 0101 	orrs.w	r1, ip, r1
 23fd014:	d029      	beq.n	23fd06a <scalbn+0x72>
 23fd016:	4d3e      	ldr	r5, [pc, #248]	; (23fd110 <scalbn+0x118>)
 23fd018:	4619      	mov	r1, r3
 23fd01a:	2200      	movs	r2, #0
 23fd01c:	4b3d      	ldr	r3, [pc, #244]	; (23fd114 <scalbn+0x11c>)
 23fd01e:	ee10 0a10 	vmov	r0, s0
 23fd022:	f7f8 fa89 	bl	23f5538 <__aeabi_dmul>
 23fd026:	42ac      	cmp	r4, r5
 23fd028:	4602      	mov	r2, r0
 23fd02a:	460b      	mov	r3, r1
 23fd02c:	db16      	blt.n	23fd05c <scalbn+0x64>
 23fd02e:	468c      	mov	ip, r1
 23fd030:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23fd034:	3936      	subs	r1, #54	; 0x36
 23fd036:	4421      	add	r1, r4
 23fd038:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23fd03c:	4281      	cmp	r1, r0
 23fd03e:	dc21      	bgt.n	23fd084 <scalbn+0x8c>
 23fd040:	2900      	cmp	r1, #0
 23fd042:	dc47      	bgt.n	23fd0d4 <scalbn+0xdc>
 23fd044:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23fd048:	da34      	bge.n	23fd0b4 <scalbn+0xbc>
 23fd04a:	f24c 3150 	movw	r1, #50000	; 0xc350
 23fd04e:	428c      	cmp	r4, r1
 23fd050:	dc18      	bgt.n	23fd084 <scalbn+0x8c>
 23fd052:	2b00      	cmp	r3, #0
 23fd054:	a126      	add	r1, pc, #152	; (adr r1, 23fd0f0 <scalbn+0xf8>)
 23fd056:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd05a:	db43      	blt.n	23fd0e4 <scalbn+0xec>
 23fd05c:	a324      	add	r3, pc, #144	; (adr r3, 23fd0f0 <scalbn+0xf8>)
 23fd05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd062:	f7f8 fa69 	bl	23f5538 <__aeabi_dmul>
 23fd066:	ec41 0b10 	vmov	d0, r0, r1
 23fd06a:	bd38      	pop	{r3, r4, r5, pc}
 23fd06c:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23fd070:	4571      	cmp	r1, lr
 23fd072:	d1e0      	bne.n	23fd036 <scalbn+0x3e>
 23fd074:	ee10 0a10 	vmov	r0, s0
 23fd078:	4619      	mov	r1, r3
 23fd07a:	f7f8 f8a7 	bl	23f51cc <__adddf3>
 23fd07e:	ec41 0b10 	vmov	d0, r0, r1
 23fd082:	bd38      	pop	{r3, r4, r5, pc}
 23fd084:	2b00      	cmp	r3, #0
 23fd086:	a11c      	add	r1, pc, #112	; (adr r1, 23fd0f8 <scalbn+0x100>)
 23fd088:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd08c:	db07      	blt.n	23fd09e <scalbn+0xa6>
 23fd08e:	a31a      	add	r3, pc, #104	; (adr r3, 23fd0f8 <scalbn+0x100>)
 23fd090:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd094:	f7f8 fa50 	bl	23f5538 <__aeabi_dmul>
 23fd098:	ec41 0b10 	vmov	d0, r0, r1
 23fd09c:	bd38      	pop	{r3, r4, r5, pc}
 23fd09e:	a118      	add	r1, pc, #96	; (adr r1, 23fd100 <scalbn+0x108>)
 23fd0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd0a4:	a314      	add	r3, pc, #80	; (adr r3, 23fd0f8 <scalbn+0x100>)
 23fd0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd0aa:	f7f8 fa45 	bl	23f5538 <__aeabi_dmul>
 23fd0ae:	ec41 0b10 	vmov	d0, r0, r1
 23fd0b2:	e7f3      	b.n	23fd09c <scalbn+0xa4>
 23fd0b4:	4818      	ldr	r0, [pc, #96]	; (23fd118 <scalbn+0x120>)
 23fd0b6:	3136      	adds	r1, #54	; 0x36
 23fd0b8:	4614      	mov	r4, r2
 23fd0ba:	4b18      	ldr	r3, [pc, #96]	; (23fd11c <scalbn+0x124>)
 23fd0bc:	ea0c 0000 	and.w	r0, ip, r0
 23fd0c0:	2200      	movs	r2, #0
 23fd0c2:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23fd0c6:	4620      	mov	r0, r4
 23fd0c8:	4629      	mov	r1, r5
 23fd0ca:	f7f8 fa35 	bl	23f5538 <__aeabi_dmul>
 23fd0ce:	ec41 0b10 	vmov	d0, r0, r1
 23fd0d2:	bd38      	pop	{r3, r4, r5, pc}
 23fd0d4:	4810      	ldr	r0, [pc, #64]	; (23fd118 <scalbn+0x120>)
 23fd0d6:	ea0c 0000 	and.w	r0, ip, r0
 23fd0da:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23fd0de:	ec43 2b10 	vmov	d0, r2, r3
 23fd0e2:	bd38      	pop	{r3, r4, r5, pc}
 23fd0e4:	a108      	add	r1, pc, #32	; (adr r1, 23fd108 <scalbn+0x110>)
 23fd0e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd0ea:	e7b7      	b.n	23fd05c <scalbn+0x64>
 23fd0ec:	f3af 8000 	nop.w
 23fd0f0:	c2f8f359 	.word	0xc2f8f359
 23fd0f4:	01a56e1f 	.word	0x01a56e1f
 23fd0f8:	8800759c 	.word	0x8800759c
 23fd0fc:	7e37e43c 	.word	0x7e37e43c
 23fd100:	8800759c 	.word	0x8800759c
 23fd104:	fe37e43c 	.word	0xfe37e43c
 23fd108:	c2f8f359 	.word	0xc2f8f359
 23fd10c:	81a56e1f 	.word	0x81a56e1f
 23fd110:	ffff3cb0 	.word	0xffff3cb0
 23fd114:	43500000 	.word	0x43500000
 23fd118:	800fffff 	.word	0x800fffff
 23fd11c:	3c900000 	.word	0x3c900000

023fd120 <finite>:
 23fd120:	b082      	sub	sp, #8
 23fd122:	4805      	ldr	r0, [pc, #20]	; (23fd138 <finite+0x18>)
 23fd124:	ed8d 0b00 	vstr	d0, [sp]
 23fd128:	9b01      	ldr	r3, [sp, #4]
 23fd12a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 23fd12e:	4418      	add	r0, r3
 23fd130:	0fc0      	lsrs	r0, r0, #31
 23fd132:	b002      	add	sp, #8
 23fd134:	4770      	bx	lr
 23fd136:	bf00      	nop
 23fd138:	80100000 	.word	0x80100000

023fd13c <atexit>:
 23fd13c:	2300      	movs	r3, #0
 23fd13e:	4601      	mov	r1, r0
 23fd140:	461a      	mov	r2, r3
 23fd142:	4618      	mov	r0, r3
 23fd144:	f000 bf82 	b.w	23fe04c <__register_exitproc>

023fd148 <isprint>:
 23fd148:	4b02      	ldr	r3, [pc, #8]	; (23fd154 <isprint+0xc>)
 23fd14a:	4418      	add	r0, r3
 23fd14c:	7840      	ldrb	r0, [r0, #1]
 23fd14e:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fd152:	4770      	bx	lr
 23fd154:	023ffce0 	.word	0x023ffce0

023fd158 <isspace>:
 23fd158:	4b02      	ldr	r3, [pc, #8]	; (23fd164 <isspace+0xc>)
 23fd15a:	4418      	add	r0, r3
 23fd15c:	7840      	ldrb	r0, [r0, #1]
 23fd15e:	f000 0008 	and.w	r0, r0, #8
 23fd162:	4770      	bx	lr
 23fd164:	023ffce0 	.word	0x023ffce0

023fd168 <memcpy>:
 23fd168:	440a      	add	r2, r1
 23fd16a:	1e43      	subs	r3, r0, #1
 23fd16c:	4291      	cmp	r1, r2
 23fd16e:	d100      	bne.n	23fd172 <memcpy+0xa>
 23fd170:	4770      	bx	lr
 23fd172:	b510      	push	{r4, lr}
 23fd174:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fd178:	4291      	cmp	r1, r2
 23fd17a:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fd17e:	d1f9      	bne.n	23fd174 <memcpy+0xc>
 23fd180:	bd10      	pop	{r4, pc}

023fd182 <memmove>:
 23fd182:	4288      	cmp	r0, r1
 23fd184:	b510      	push	{r4, lr}
 23fd186:	eb01 0402 	add.w	r4, r1, r2
 23fd18a:	d902      	bls.n	23fd192 <memmove+0x10>
 23fd18c:	4284      	cmp	r4, r0
 23fd18e:	4623      	mov	r3, r4
 23fd190:	d807      	bhi.n	23fd1a2 <memmove+0x20>
 23fd192:	1e43      	subs	r3, r0, #1
 23fd194:	42a1      	cmp	r1, r4
 23fd196:	d008      	beq.n	23fd1aa <memmove+0x28>
 23fd198:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fd19c:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fd1a0:	e7f8      	b.n	23fd194 <memmove+0x12>
 23fd1a2:	4402      	add	r2, r0
 23fd1a4:	4601      	mov	r1, r0
 23fd1a6:	428a      	cmp	r2, r1
 23fd1a8:	d100      	bne.n	23fd1ac <memmove+0x2a>
 23fd1aa:	bd10      	pop	{r4, pc}
 23fd1ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fd1b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fd1b4:	e7f7      	b.n	23fd1a6 <memmove+0x24>

023fd1b6 <memset>:
 23fd1b6:	4402      	add	r2, r0
 23fd1b8:	4603      	mov	r3, r0
 23fd1ba:	4293      	cmp	r3, r2
 23fd1bc:	d100      	bne.n	23fd1c0 <memset+0xa>
 23fd1be:	4770      	bx	lr
 23fd1c0:	f803 1b01 	strb.w	r1, [r3], #1
 23fd1c4:	e7f9      	b.n	23fd1ba <memset+0x4>
	...

023fd1c8 <srand>:
 23fd1c8:	b538      	push	{r3, r4, r5, lr}
 23fd1ca:	4b10      	ldr	r3, [pc, #64]	; (23fd20c <srand+0x44>)
 23fd1cc:	4604      	mov	r4, r0
 23fd1ce:	681d      	ldr	r5, [r3, #0]
 23fd1d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fd1d2:	b9b3      	cbnz	r3, 23fd202 <srand+0x3a>
 23fd1d4:	2018      	movs	r0, #24
 23fd1d6:	f7fb fd47 	bl	23f8c68 <malloc>
 23fd1da:	4602      	mov	r2, r0
 23fd1dc:	63a8      	str	r0, [r5, #56]	; 0x38
 23fd1de:	b920      	cbnz	r0, 23fd1ea <srand+0x22>
 23fd1e0:	4b0b      	ldr	r3, [pc, #44]	; (23fd210 <srand+0x48>)
 23fd1e2:	2142      	movs	r1, #66	; 0x42
 23fd1e4:	480b      	ldr	r0, [pc, #44]	; (23fd214 <srand+0x4c>)
 23fd1e6:	f7fb fdaf 	bl	23f8d48 <__assert_func>
 23fd1ea:	490b      	ldr	r1, [pc, #44]	; (23fd218 <srand+0x50>)
 23fd1ec:	4b0b      	ldr	r3, [pc, #44]	; (23fd21c <srand+0x54>)
 23fd1ee:	e9c0 1300 	strd	r1, r3, [r0]
 23fd1f2:	4b0b      	ldr	r3, [pc, #44]	; (23fd220 <srand+0x58>)
 23fd1f4:	2100      	movs	r1, #0
 23fd1f6:	6083      	str	r3, [r0, #8]
 23fd1f8:	230b      	movs	r3, #11
 23fd1fa:	8183      	strh	r3, [r0, #12]
 23fd1fc:	2001      	movs	r0, #1
 23fd1fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fd202:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fd204:	2200      	movs	r2, #0
 23fd206:	611c      	str	r4, [r3, #16]
 23fd208:	615a      	str	r2, [r3, #20]
 23fd20a:	bd38      	pop	{r3, r4, r5, pc}
 23fd20c:	1007ac44 	.word	0x1007ac44
 23fd210:	023ffc11 	.word	0x023ffc11
 23fd214:	023ffc28 	.word	0x023ffc28
 23fd218:	abcd330e 	.word	0xabcd330e
 23fd21c:	e66d1234 	.word	0xe66d1234
 23fd220:	0005deec 	.word	0x0005deec

023fd224 <strchr>:
 23fd224:	b2c9      	uxtb	r1, r1
 23fd226:	4603      	mov	r3, r0
 23fd228:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fd22c:	b11a      	cbz	r2, 23fd236 <strchr+0x12>
 23fd22e:	428a      	cmp	r2, r1
 23fd230:	d1f9      	bne.n	23fd226 <strchr+0x2>
 23fd232:	4618      	mov	r0, r3
 23fd234:	4770      	bx	lr
 23fd236:	2900      	cmp	r1, #0
 23fd238:	bf18      	it	ne
 23fd23a:	2300      	movne	r3, #0
 23fd23c:	e7f9      	b.n	23fd232 <strchr+0xe>

023fd23e <strchrnul>:
 23fd23e:	b510      	push	{r4, lr}
 23fd240:	4604      	mov	r4, r0
 23fd242:	f7ff ffef 	bl	23fd224 <strchr>
 23fd246:	b918      	cbnz	r0, 23fd250 <strchrnul+0x12>
 23fd248:	4620      	mov	r0, r4
 23fd24a:	f7f8 fe5f 	bl	23f5f0c <strlen>
 23fd24e:	4420      	add	r0, r4
 23fd250:	bd10      	pop	{r4, pc}

023fd252 <strcpy>:
 23fd252:	4603      	mov	r3, r0
 23fd254:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fd258:	f803 2b01 	strb.w	r2, [r3], #1
 23fd25c:	2a00      	cmp	r2, #0
 23fd25e:	d1f9      	bne.n	23fd254 <strcpy+0x2>
 23fd260:	4770      	bx	lr

023fd262 <strncmp>:
 23fd262:	b510      	push	{r4, lr}
 23fd264:	b17a      	cbz	r2, 23fd286 <strncmp+0x24>
 23fd266:	4603      	mov	r3, r0
 23fd268:	3901      	subs	r1, #1
 23fd26a:	1884      	adds	r4, r0, r2
 23fd26c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fd270:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fd274:	4290      	cmp	r0, r2
 23fd276:	d101      	bne.n	23fd27c <strncmp+0x1a>
 23fd278:	42a3      	cmp	r3, r4
 23fd27a:	d101      	bne.n	23fd280 <strncmp+0x1e>
 23fd27c:	1a80      	subs	r0, r0, r2
 23fd27e:	bd10      	pop	{r4, pc}
 23fd280:	2800      	cmp	r0, #0
 23fd282:	d1f3      	bne.n	23fd26c <strncmp+0xa>
 23fd284:	e7fa      	b.n	23fd27c <strncmp+0x1a>
 23fd286:	4610      	mov	r0, r2
 23fd288:	e7f9      	b.n	23fd27e <strncmp+0x1c>

023fd28a <strrchr>:
 23fd28a:	b538      	push	{r3, r4, r5, lr}
 23fd28c:	4603      	mov	r3, r0
 23fd28e:	460c      	mov	r4, r1
 23fd290:	b969      	cbnz	r1, 23fd2ae <strrchr+0x24>
 23fd292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fd296:	f7ff bfc5 	b.w	23fd224 <strchr>
 23fd29a:	1c43      	adds	r3, r0, #1
 23fd29c:	4605      	mov	r5, r0
 23fd29e:	4621      	mov	r1, r4
 23fd2a0:	4618      	mov	r0, r3
 23fd2a2:	f7ff ffbf 	bl	23fd224 <strchr>
 23fd2a6:	2800      	cmp	r0, #0
 23fd2a8:	d1f7      	bne.n	23fd29a <strrchr+0x10>
 23fd2aa:	4628      	mov	r0, r5
 23fd2ac:	bd38      	pop	{r3, r4, r5, pc}
 23fd2ae:	2500      	movs	r5, #0
 23fd2b0:	e7f5      	b.n	23fd29e <strrchr+0x14>

023fd2b2 <strstr>:
 23fd2b2:	780a      	ldrb	r2, [r1, #0]
 23fd2b4:	b570      	push	{r4, r5, r6, lr}
 23fd2b6:	b96a      	cbnz	r2, 23fd2d4 <strstr+0x22>
 23fd2b8:	bd70      	pop	{r4, r5, r6, pc}
 23fd2ba:	429a      	cmp	r2, r3
 23fd2bc:	d109      	bne.n	23fd2d2 <strstr+0x20>
 23fd2be:	460c      	mov	r4, r1
 23fd2c0:	4605      	mov	r5, r0
 23fd2c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 23fd2c6:	2b00      	cmp	r3, #0
 23fd2c8:	d0f6      	beq.n	23fd2b8 <strstr+0x6>
 23fd2ca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 23fd2ce:	429e      	cmp	r6, r3
 23fd2d0:	d0f7      	beq.n	23fd2c2 <strstr+0x10>
 23fd2d2:	3001      	adds	r0, #1
 23fd2d4:	7803      	ldrb	r3, [r0, #0]
 23fd2d6:	2b00      	cmp	r3, #0
 23fd2d8:	d1ef      	bne.n	23fd2ba <strstr+0x8>
 23fd2da:	4618      	mov	r0, r3
 23fd2dc:	e7ec      	b.n	23fd2b8 <strstr+0x6>

023fd2de <sulp>:
 23fd2de:	b570      	push	{r4, r5, r6, lr}
 23fd2e0:	4604      	mov	r4, r0
 23fd2e2:	460d      	mov	r5, r1
 23fd2e4:	4616      	mov	r6, r2
 23fd2e6:	ec45 4b10 	vmov	d0, r4, r5
 23fd2ea:	f001 fe0f 	bl	23fef0c <__ulp>
 23fd2ee:	ec51 0b10 	vmov	r0, r1, d0
 23fd2f2:	b17e      	cbz	r6, 23fd314 <sulp+0x36>
 23fd2f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 23fd2f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 23fd2fc:	2b00      	cmp	r3, #0
 23fd2fe:	dd09      	ble.n	23fd314 <sulp+0x36>
 23fd300:	051b      	lsls	r3, r3, #20
 23fd302:	2400      	movs	r4, #0
 23fd304:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 23fd308:	4622      	mov	r2, r4
 23fd30a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 23fd30e:	462b      	mov	r3, r5
 23fd310:	f7f8 f912 	bl	23f5538 <__aeabi_dmul>
 23fd314:	bd70      	pop	{r4, r5, r6, pc}
	...

023fd318 <_strtod_l>:
 23fd318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd31c:	461f      	mov	r7, r3
 23fd31e:	2300      	movs	r3, #0
 23fd320:	4604      	mov	r4, r0
 23fd322:	4688      	mov	r8, r1
 23fd324:	f04f 0a00 	mov.w	sl, #0
 23fd328:	f04f 0b00 	mov.w	fp, #0
 23fd32c:	ed2d 8b02 	vpush	{d8}
 23fd330:	b09d      	sub	sp, #116	; 0x74
 23fd332:	9318      	str	r3, [sp, #96]	; 0x60
 23fd334:	4b9f      	ldr	r3, [pc, #636]	; (23fd5b4 <_strtod_l+0x29c>)
 23fd336:	9213      	str	r2, [sp, #76]	; 0x4c
 23fd338:	681b      	ldr	r3, [r3, #0]
 23fd33a:	4618      	mov	r0, r3
 23fd33c:	9305      	str	r3, [sp, #20]
 23fd33e:	f7f8 fde5 	bl	23f5f0c <strlen>
 23fd342:	4605      	mov	r5, r0
 23fd344:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fd348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd34a:	781a      	ldrb	r2, [r3, #0]
 23fd34c:	2a2b      	cmp	r2, #43	; 0x2b
 23fd34e:	d04e      	beq.n	23fd3ee <_strtod_l+0xd6>
 23fd350:	d83b      	bhi.n	23fd3ca <_strtod_l+0xb2>
 23fd352:	2a0d      	cmp	r2, #13
 23fd354:	d834      	bhi.n	23fd3c0 <_strtod_l+0xa8>
 23fd356:	2a08      	cmp	r2, #8
 23fd358:	d834      	bhi.n	23fd3c4 <_strtod_l+0xac>
 23fd35a:	2a00      	cmp	r2, #0
 23fd35c:	d03e      	beq.n	23fd3dc <_strtod_l+0xc4>
 23fd35e:	2300      	movs	r3, #0
 23fd360:	930a      	str	r3, [sp, #40]	; 0x28
 23fd362:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 23fd364:	7833      	ldrb	r3, [r6, #0]
 23fd366:	2b30      	cmp	r3, #48	; 0x30
 23fd368:	f040 80b0 	bne.w	23fd4cc <_strtod_l+0x1b4>
 23fd36c:	7873      	ldrb	r3, [r6, #1]
 23fd36e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 23fd372:	2b58      	cmp	r3, #88	; 0x58
 23fd374:	d168      	bne.n	23fd448 <_strtod_l+0x130>
 23fd376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fd378:	a917      	add	r1, sp, #92	; 0x5c
 23fd37a:	9702      	str	r7, [sp, #8]
 23fd37c:	4620      	mov	r0, r4
 23fd37e:	9301      	str	r3, [sp, #4]
 23fd380:	ab18      	add	r3, sp, #96	; 0x60
 23fd382:	4a8d      	ldr	r2, [pc, #564]	; (23fd5b8 <_strtod_l+0x2a0>)
 23fd384:	9300      	str	r3, [sp, #0]
 23fd386:	ab19      	add	r3, sp, #100	; 0x64
 23fd388:	f000 ff2a 	bl	23fe1e0 <__gethex>
 23fd38c:	f010 0707 	ands.w	r7, r0, #7
 23fd390:	4605      	mov	r5, r0
 23fd392:	d005      	beq.n	23fd3a0 <_strtod_l+0x88>
 23fd394:	2f06      	cmp	r7, #6
 23fd396:	d12c      	bne.n	23fd3f2 <_strtod_l+0xda>
 23fd398:	3601      	adds	r6, #1
 23fd39a:	2300      	movs	r3, #0
 23fd39c:	9617      	str	r6, [sp, #92]	; 0x5c
 23fd39e:	930a      	str	r3, [sp, #40]	; 0x28
 23fd3a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23fd3a2:	2b00      	cmp	r3, #0
 23fd3a4:	f040 858e 	bne.w	23fdec4 <_strtod_l+0xbac>
 23fd3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fd3aa:	b1eb      	cbz	r3, 23fd3e8 <_strtod_l+0xd0>
 23fd3ac:	4652      	mov	r2, sl
 23fd3ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 23fd3b2:	ec43 2b10 	vmov	d0, r2, r3
 23fd3b6:	b01d      	add	sp, #116	; 0x74
 23fd3b8:	ecbd 8b02 	vpop	{d8}
 23fd3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd3c0:	2a20      	cmp	r2, #32
 23fd3c2:	d1cc      	bne.n	23fd35e <_strtod_l+0x46>
 23fd3c4:	3301      	adds	r3, #1
 23fd3c6:	9317      	str	r3, [sp, #92]	; 0x5c
 23fd3c8:	e7be      	b.n	23fd348 <_strtod_l+0x30>
 23fd3ca:	2a2d      	cmp	r2, #45	; 0x2d
 23fd3cc:	d1c7      	bne.n	23fd35e <_strtod_l+0x46>
 23fd3ce:	2201      	movs	r2, #1
 23fd3d0:	920a      	str	r2, [sp, #40]	; 0x28
 23fd3d2:	1c5a      	adds	r2, r3, #1
 23fd3d4:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd3d6:	785b      	ldrb	r3, [r3, #1]
 23fd3d8:	2b00      	cmp	r3, #0
 23fd3da:	d1c2      	bne.n	23fd362 <_strtod_l+0x4a>
 23fd3dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23fd3de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fd3e2:	2b00      	cmp	r3, #0
 23fd3e4:	f040 856c 	bne.w	23fdec0 <_strtod_l+0xba8>
 23fd3e8:	4652      	mov	r2, sl
 23fd3ea:	465b      	mov	r3, fp
 23fd3ec:	e7e1      	b.n	23fd3b2 <_strtod_l+0x9a>
 23fd3ee:	2200      	movs	r2, #0
 23fd3f0:	e7ee      	b.n	23fd3d0 <_strtod_l+0xb8>
 23fd3f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23fd3f4:	b13a      	cbz	r2, 23fd406 <_strtod_l+0xee>
 23fd3f6:	2135      	movs	r1, #53	; 0x35
 23fd3f8:	a81a      	add	r0, sp, #104	; 0x68
 23fd3fa:	f001 fe90 	bl	23ff11e <__copybits>
 23fd3fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fd400:	4620      	mov	r0, r4
 23fd402:	f001 fa4b 	bl	23fe89c <_Bfree>
 23fd406:	3f01      	subs	r7, #1
 23fd408:	2f04      	cmp	r7, #4
 23fd40a:	d806      	bhi.n	23fd41a <_strtod_l+0x102>
 23fd40c:	e8df f007 	tbb	[pc, r7]
 23fd410:	1714030a 	.word	0x1714030a
 23fd414:	0a          	.byte	0x0a
 23fd415:	00          	.byte	0x00
 23fd416:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 23fd41a:	0728      	lsls	r0, r5, #28
 23fd41c:	d5c0      	bpl.n	23fd3a0 <_strtod_l+0x88>
 23fd41e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 23fd422:	e7bd      	b.n	23fd3a0 <_strtod_l+0x88>
 23fd424:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 23fd428:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23fd42a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 23fd42e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 23fd432:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 23fd436:	e7f0      	b.n	23fd41a <_strtod_l+0x102>
 23fd438:	f8df b180 	ldr.w	fp, [pc, #384]	; 23fd5bc <_strtod_l+0x2a4>
 23fd43c:	e7ed      	b.n	23fd41a <_strtod_l+0x102>
 23fd43e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 23fd442:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fd446:	e7e8      	b.n	23fd41a <_strtod_l+0x102>
 23fd448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd44a:	1c5a      	adds	r2, r3, #1
 23fd44c:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd44e:	785b      	ldrb	r3, [r3, #1]
 23fd450:	2b30      	cmp	r3, #48	; 0x30
 23fd452:	d0f9      	beq.n	23fd448 <_strtod_l+0x130>
 23fd454:	2b00      	cmp	r3, #0
 23fd456:	d0a3      	beq.n	23fd3a0 <_strtod_l+0x88>
 23fd458:	2301      	movs	r3, #1
 23fd45a:	f04f 0900 	mov.w	r9, #0
 23fd45e:	9304      	str	r3, [sp, #16]
 23fd460:	220a      	movs	r2, #10
 23fd462:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd464:	464f      	mov	r7, r9
 23fd466:	f8cd 901c 	str.w	r9, [sp, #28]
 23fd46a:	9308      	str	r3, [sp, #32]
 23fd46c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 23fd46e:	7806      	ldrb	r6, [r0, #0]
 23fd470:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 23fd474:	b2d9      	uxtb	r1, r3
 23fd476:	2909      	cmp	r1, #9
 23fd478:	d92a      	bls.n	23fd4d0 <_strtod_l+0x1b8>
 23fd47a:	462a      	mov	r2, r5
 23fd47c:	9905      	ldr	r1, [sp, #20]
 23fd47e:	f7ff fef0 	bl	23fd262 <strncmp>
 23fd482:	b3a0      	cbz	r0, 23fd4ee <_strtod_l+0x1d6>
 23fd484:	2000      	movs	r0, #0
 23fd486:	4632      	mov	r2, r6
 23fd488:	463d      	mov	r5, r7
 23fd48a:	4603      	mov	r3, r0
 23fd48c:	9005      	str	r0, [sp, #20]
 23fd48e:	2a65      	cmp	r2, #101	; 0x65
 23fd490:	d001      	beq.n	23fd496 <_strtod_l+0x17e>
 23fd492:	2a45      	cmp	r2, #69	; 0x45
 23fd494:	d118      	bne.n	23fd4c8 <_strtod_l+0x1b0>
 23fd496:	b91d      	cbnz	r5, 23fd4a0 <_strtod_l+0x188>
 23fd498:	9a04      	ldr	r2, [sp, #16]
 23fd49a:	4302      	orrs	r2, r0
 23fd49c:	d09e      	beq.n	23fd3dc <_strtod_l+0xc4>
 23fd49e:	2500      	movs	r5, #0
 23fd4a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 23fd4a4:	f108 0201 	add.w	r2, r8, #1
 23fd4a8:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd4aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 23fd4ae:	2a2b      	cmp	r2, #43	; 0x2b
 23fd4b0:	d075      	beq.n	23fd59e <_strtod_l+0x286>
 23fd4b2:	2a2d      	cmp	r2, #45	; 0x2d
 23fd4b4:	d07b      	beq.n	23fd5ae <_strtod_l+0x296>
 23fd4b6:	f04f 0c00 	mov.w	ip, #0
 23fd4ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 23fd4be:	2909      	cmp	r1, #9
 23fd4c0:	f240 8082 	bls.w	23fd5c8 <_strtod_l+0x2b0>
 23fd4c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fd4c8:	2600      	movs	r6, #0
 23fd4ca:	e09d      	b.n	23fd608 <_strtod_l+0x2f0>
 23fd4cc:	2300      	movs	r3, #0
 23fd4ce:	e7c4      	b.n	23fd45a <_strtod_l+0x142>
 23fd4d0:	2f08      	cmp	r7, #8
 23fd4d2:	f100 0001 	add.w	r0, r0, #1
 23fd4d6:	f107 0701 	add.w	r7, r7, #1
 23fd4da:	bfd4      	ite	le
 23fd4dc:	9907      	ldrle	r1, [sp, #28]
 23fd4de:	fb02 3909 	mlagt	r9, r2, r9, r3
 23fd4e2:	9017      	str	r0, [sp, #92]	; 0x5c
 23fd4e4:	bfdc      	itt	le
 23fd4e6:	fb02 3301 	mlale	r3, r2, r1, r3
 23fd4ea:	9307      	strle	r3, [sp, #28]
 23fd4ec:	e7be      	b.n	23fd46c <_strtod_l+0x154>
 23fd4ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd4f0:	195a      	adds	r2, r3, r5
 23fd4f2:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd4f4:	5d5a      	ldrb	r2, [r3, r5]
 23fd4f6:	2f00      	cmp	r7, #0
 23fd4f8:	d036      	beq.n	23fd568 <_strtod_l+0x250>
 23fd4fa:	463d      	mov	r5, r7
 23fd4fc:	9005      	str	r0, [sp, #20]
 23fd4fe:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 23fd502:	2b09      	cmp	r3, #9
 23fd504:	d912      	bls.n	23fd52c <_strtod_l+0x214>
 23fd506:	2301      	movs	r3, #1
 23fd508:	e7c1      	b.n	23fd48e <_strtod_l+0x176>
 23fd50a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd50c:	3001      	adds	r0, #1
 23fd50e:	1c5a      	adds	r2, r3, #1
 23fd510:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd512:	785a      	ldrb	r2, [r3, #1]
 23fd514:	2a30      	cmp	r2, #48	; 0x30
 23fd516:	d0f8      	beq.n	23fd50a <_strtod_l+0x1f2>
 23fd518:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 23fd51c:	2b08      	cmp	r3, #8
 23fd51e:	f200 84d6 	bhi.w	23fdece <_strtod_l+0xbb6>
 23fd522:	9005      	str	r0, [sp, #20]
 23fd524:	2000      	movs	r0, #0
 23fd526:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd528:	4605      	mov	r5, r0
 23fd52a:	9308      	str	r3, [sp, #32]
 23fd52c:	3a30      	subs	r2, #48	; 0x30
 23fd52e:	f100 0301 	add.w	r3, r0, #1
 23fd532:	d013      	beq.n	23fd55c <_strtod_l+0x244>
 23fd534:	9905      	ldr	r1, [sp, #20]
 23fd536:	eb00 0e05 	add.w	lr, r0, r5
 23fd53a:	4419      	add	r1, r3
 23fd53c:	462b      	mov	r3, r5
 23fd53e:	9105      	str	r1, [sp, #20]
 23fd540:	210a      	movs	r1, #10
 23fd542:	4573      	cmp	r3, lr
 23fd544:	d112      	bne.n	23fd56c <_strtod_l+0x254>
 23fd546:	182b      	adds	r3, r5, r0
 23fd548:	3501      	adds	r5, #1
 23fd54a:	2b08      	cmp	r3, #8
 23fd54c:	4405      	add	r5, r0
 23fd54e:	dc1c      	bgt.n	23fd58a <_strtod_l+0x272>
 23fd550:	9907      	ldr	r1, [sp, #28]
 23fd552:	230a      	movs	r3, #10
 23fd554:	fb03 2301 	mla	r3, r3, r1, r2
 23fd558:	9307      	str	r3, [sp, #28]
 23fd55a:	2300      	movs	r3, #0
 23fd55c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd55e:	4618      	mov	r0, r3
 23fd560:	1c51      	adds	r1, r2, #1
 23fd562:	9117      	str	r1, [sp, #92]	; 0x5c
 23fd564:	7852      	ldrb	r2, [r2, #1]
 23fd566:	e7ca      	b.n	23fd4fe <_strtod_l+0x1e6>
 23fd568:	4638      	mov	r0, r7
 23fd56a:	e7d3      	b.n	23fd514 <_strtod_l+0x1fc>
 23fd56c:	2b08      	cmp	r3, #8
 23fd56e:	dc04      	bgt.n	23fd57a <_strtod_l+0x262>
 23fd570:	9e07      	ldr	r6, [sp, #28]
 23fd572:	434e      	muls	r6, r1
 23fd574:	9607      	str	r6, [sp, #28]
 23fd576:	3301      	adds	r3, #1
 23fd578:	e7e3      	b.n	23fd542 <_strtod_l+0x22a>
 23fd57a:	f103 0c01 	add.w	ip, r3, #1
 23fd57e:	f1bc 0f10 	cmp.w	ip, #16
 23fd582:	bfd8      	it	le
 23fd584:	fb01 f909 	mulle.w	r9, r1, r9
 23fd588:	e7f5      	b.n	23fd576 <_strtod_l+0x25e>
 23fd58a:	2d10      	cmp	r5, #16
 23fd58c:	bfdc      	itt	le
 23fd58e:	230a      	movle	r3, #10
 23fd590:	fb03 2909 	mlale	r9, r3, r9, r2
 23fd594:	e7e1      	b.n	23fd55a <_strtod_l+0x242>
 23fd596:	2300      	movs	r3, #0
 23fd598:	9305      	str	r3, [sp, #20]
 23fd59a:	2301      	movs	r3, #1
 23fd59c:	e77c      	b.n	23fd498 <_strtod_l+0x180>
 23fd59e:	f04f 0c00 	mov.w	ip, #0
 23fd5a2:	f108 0202 	add.w	r2, r8, #2
 23fd5a6:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd5a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 23fd5ac:	e785      	b.n	23fd4ba <_strtod_l+0x1a2>
 23fd5ae:	f04f 0c01 	mov.w	ip, #1
 23fd5b2:	e7f6      	b.n	23fd5a2 <_strtod_l+0x28a>
 23fd5b4:	023ffe58 	.word	0x023ffe58
 23fd5b8:	023ffc90 	.word	0x023ffc90
 23fd5bc:	7ff00000 	.word	0x7ff00000
 23fd5c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd5c2:	1c51      	adds	r1, r2, #1
 23fd5c4:	9117      	str	r1, [sp, #92]	; 0x5c
 23fd5c6:	7852      	ldrb	r2, [r2, #1]
 23fd5c8:	2a30      	cmp	r2, #48	; 0x30
 23fd5ca:	d0f9      	beq.n	23fd5c0 <_strtod_l+0x2a8>
 23fd5cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 23fd5d0:	2908      	cmp	r1, #8
 23fd5d2:	f63f af79 	bhi.w	23fd4c8 <_strtod_l+0x1b0>
 23fd5d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 23fd5da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd5dc:	9206      	str	r2, [sp, #24]
 23fd5de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd5e0:	1c51      	adds	r1, r2, #1
 23fd5e2:	9117      	str	r1, [sp, #92]	; 0x5c
 23fd5e4:	7852      	ldrb	r2, [r2, #1]
 23fd5e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 23fd5ea:	2e09      	cmp	r6, #9
 23fd5ec:	d937      	bls.n	23fd65e <_strtod_l+0x346>
 23fd5ee:	9e06      	ldr	r6, [sp, #24]
 23fd5f0:	1b89      	subs	r1, r1, r6
 23fd5f2:	f644 661f 	movw	r6, #19999	; 0x4e1f
 23fd5f6:	2908      	cmp	r1, #8
 23fd5f8:	dc02      	bgt.n	23fd600 <_strtod_l+0x2e8>
 23fd5fa:	4576      	cmp	r6, lr
 23fd5fc:	bfa8      	it	ge
 23fd5fe:	4676      	movge	r6, lr
 23fd600:	f1bc 0f00 	cmp.w	ip, #0
 23fd604:	d000      	beq.n	23fd608 <_strtod_l+0x2f0>
 23fd606:	4276      	negs	r6, r6
 23fd608:	2d00      	cmp	r5, #0
 23fd60a:	d14d      	bne.n	23fd6a8 <_strtod_l+0x390>
 23fd60c:	9904      	ldr	r1, [sp, #16]
 23fd60e:	4301      	orrs	r1, r0
 23fd610:	f47f aec6 	bne.w	23fd3a0 <_strtod_l+0x88>
 23fd614:	2b00      	cmp	r3, #0
 23fd616:	f47f aee1 	bne.w	23fd3dc <_strtod_l+0xc4>
 23fd61a:	2a69      	cmp	r2, #105	; 0x69
 23fd61c:	d027      	beq.n	23fd66e <_strtod_l+0x356>
 23fd61e:	dc24      	bgt.n	23fd66a <_strtod_l+0x352>
 23fd620:	2a49      	cmp	r2, #73	; 0x49
 23fd622:	d024      	beq.n	23fd66e <_strtod_l+0x356>
 23fd624:	2a4e      	cmp	r2, #78	; 0x4e
 23fd626:	f47f aed9 	bne.w	23fd3dc <_strtod_l+0xc4>
 23fd62a:	499f      	ldr	r1, [pc, #636]	; (23fd8a8 <_strtod_l+0x590>)
 23fd62c:	a817      	add	r0, sp, #92	; 0x5c
 23fd62e:	f001 f82f 	bl	23fe690 <__match>
 23fd632:	2800      	cmp	r0, #0
 23fd634:	f43f aed2 	beq.w	23fd3dc <_strtod_l+0xc4>
 23fd638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd63a:	781b      	ldrb	r3, [r3, #0]
 23fd63c:	2b28      	cmp	r3, #40	; 0x28
 23fd63e:	d12d      	bne.n	23fd69c <_strtod_l+0x384>
 23fd640:	aa1a      	add	r2, sp, #104	; 0x68
 23fd642:	499a      	ldr	r1, [pc, #616]	; (23fd8ac <_strtod_l+0x594>)
 23fd644:	a817      	add	r0, sp, #92	; 0x5c
 23fd646:	f001 f837 	bl	23fe6b8 <__hexnan>
 23fd64a:	2805      	cmp	r0, #5
 23fd64c:	d126      	bne.n	23fd69c <_strtod_l+0x384>
 23fd64e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 23fd650:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 23fd654:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 23fd658:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 23fd65c:	e6a0      	b.n	23fd3a0 <_strtod_l+0x88>
 23fd65e:	210a      	movs	r1, #10
 23fd660:	fb01 2e0e 	mla	lr, r1, lr, r2
 23fd664:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 23fd668:	e7b9      	b.n	23fd5de <_strtod_l+0x2c6>
 23fd66a:	2a6e      	cmp	r2, #110	; 0x6e
 23fd66c:	e7db      	b.n	23fd626 <_strtod_l+0x30e>
 23fd66e:	4990      	ldr	r1, [pc, #576]	; (23fd8b0 <_strtod_l+0x598>)
 23fd670:	a817      	add	r0, sp, #92	; 0x5c
 23fd672:	f001 f80d 	bl	23fe690 <__match>
 23fd676:	2800      	cmp	r0, #0
 23fd678:	f43f aeb0 	beq.w	23fd3dc <_strtod_l+0xc4>
 23fd67c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd67e:	a817      	add	r0, sp, #92	; 0x5c
 23fd680:	498c      	ldr	r1, [pc, #560]	; (23fd8b4 <_strtod_l+0x59c>)
 23fd682:	3b01      	subs	r3, #1
 23fd684:	9317      	str	r3, [sp, #92]	; 0x5c
 23fd686:	f001 f803 	bl	23fe690 <__match>
 23fd68a:	b910      	cbnz	r0, 23fd692 <_strtod_l+0x37a>
 23fd68c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd68e:	3301      	adds	r3, #1
 23fd690:	9317      	str	r3, [sp, #92]	; 0x5c
 23fd692:	f8df b230 	ldr.w	fp, [pc, #560]	; 23fd8c4 <_strtod_l+0x5ac>
 23fd696:	f04f 0a00 	mov.w	sl, #0
 23fd69a:	e681      	b.n	23fd3a0 <_strtod_l+0x88>
 23fd69c:	4886      	ldr	r0, [pc, #536]	; (23fd8b8 <_strtod_l+0x5a0>)
 23fd69e:	f001 fd93 	bl	23ff1c8 <nan>
 23fd6a2:	ec5b ab10 	vmov	sl, fp, d0
 23fd6a6:	e67b      	b.n	23fd3a0 <_strtod_l+0x88>
 23fd6a8:	9b05      	ldr	r3, [sp, #20]
 23fd6aa:	2f00      	cmp	r7, #0
 23fd6ac:	bf08      	it	eq
 23fd6ae:	462f      	moveq	r7, r5
 23fd6b0:	2d10      	cmp	r5, #16
 23fd6b2:	9807      	ldr	r0, [sp, #28]
 23fd6b4:	eba6 0303 	sub.w	r3, r6, r3
 23fd6b8:	46a8      	mov	r8, r5
 23fd6ba:	bfa8      	it	ge
 23fd6bc:	f04f 0810 	movge.w	r8, #16
 23fd6c0:	9306      	str	r3, [sp, #24]
 23fd6c2:	f7f7 febf 	bl	23f5444 <__aeabi_ui2d>
 23fd6c6:	2d09      	cmp	r5, #9
 23fd6c8:	4682      	mov	sl, r0
 23fd6ca:	468b      	mov	fp, r1
 23fd6cc:	dd13      	ble.n	23fd6f6 <_strtod_l+0x3de>
 23fd6ce:	4b7b      	ldr	r3, [pc, #492]	; (23fd8bc <_strtod_l+0x5a4>)
 23fd6d0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 23fd6d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 23fd6d8:	f7f7 ff2e 	bl	23f5538 <__aeabi_dmul>
 23fd6dc:	4682      	mov	sl, r0
 23fd6de:	468b      	mov	fp, r1
 23fd6e0:	4648      	mov	r0, r9
 23fd6e2:	f7f7 feaf 	bl	23f5444 <__aeabi_ui2d>
 23fd6e6:	4602      	mov	r2, r0
 23fd6e8:	460b      	mov	r3, r1
 23fd6ea:	4650      	mov	r0, sl
 23fd6ec:	4659      	mov	r1, fp
 23fd6ee:	f7f7 fd6d 	bl	23f51cc <__adddf3>
 23fd6f2:	4682      	mov	sl, r0
 23fd6f4:	468b      	mov	fp, r1
 23fd6f6:	2d0f      	cmp	r5, #15
 23fd6f8:	dc38      	bgt.n	23fd76c <_strtod_l+0x454>
 23fd6fa:	9b06      	ldr	r3, [sp, #24]
 23fd6fc:	2b00      	cmp	r3, #0
 23fd6fe:	f43f ae4f 	beq.w	23fd3a0 <_strtod_l+0x88>
 23fd702:	dd24      	ble.n	23fd74e <_strtod_l+0x436>
 23fd704:	2b16      	cmp	r3, #22
 23fd706:	dc0b      	bgt.n	23fd720 <_strtod_l+0x408>
 23fd708:	496c      	ldr	r1, [pc, #432]	; (23fd8bc <_strtod_l+0x5a4>)
 23fd70a:	4652      	mov	r2, sl
 23fd70c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23fd710:	465b      	mov	r3, fp
 23fd712:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd716:	f7f7 ff0f 	bl	23f5538 <__aeabi_dmul>
 23fd71a:	4682      	mov	sl, r0
 23fd71c:	468b      	mov	fp, r1
 23fd71e:	e63f      	b.n	23fd3a0 <_strtod_l+0x88>
 23fd720:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 23fd724:	9a06      	ldr	r2, [sp, #24]
 23fd726:	4293      	cmp	r3, r2
 23fd728:	db20      	blt.n	23fd76c <_strtod_l+0x454>
 23fd72a:	f1c5 050f 	rsb	r5, r5, #15
 23fd72e:	4c63      	ldr	r4, [pc, #396]	; (23fd8bc <_strtod_l+0x5a4>)
 23fd730:	4652      	mov	r2, sl
 23fd732:	465b      	mov	r3, fp
 23fd734:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 23fd738:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd73c:	f7f7 fefc 	bl	23f5538 <__aeabi_dmul>
 23fd740:	9b06      	ldr	r3, [sp, #24]
 23fd742:	1b5d      	subs	r5, r3, r5
 23fd744:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 23fd748:	e9d4 2300 	ldrd	r2, r3, [r4]
 23fd74c:	e7e3      	b.n	23fd716 <_strtod_l+0x3fe>
 23fd74e:	9b06      	ldr	r3, [sp, #24]
 23fd750:	3316      	adds	r3, #22
 23fd752:	db0b      	blt.n	23fd76c <_strtod_l+0x454>
 23fd754:	9b05      	ldr	r3, [sp, #20]
 23fd756:	4650      	mov	r0, sl
 23fd758:	4659      	mov	r1, fp
 23fd75a:	1b9e      	subs	r6, r3, r6
 23fd75c:	4b57      	ldr	r3, [pc, #348]	; (23fd8bc <_strtod_l+0x5a4>)
 23fd75e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 23fd762:	e9d6 2300 	ldrd	r2, r3, [r6]
 23fd766:	f7f8 f811 	bl	23f578c <__aeabi_ddiv>
 23fd76a:	e7d6      	b.n	23fd71a <_strtod_l+0x402>
 23fd76c:	eba5 0808 	sub.w	r8, r5, r8
 23fd770:	9b06      	ldr	r3, [sp, #24]
 23fd772:	4498      	add	r8, r3
 23fd774:	f1b8 0f00 	cmp.w	r8, #0
 23fd778:	dd74      	ble.n	23fd864 <_strtod_l+0x54c>
 23fd77a:	f018 030f 	ands.w	r3, r8, #15
 23fd77e:	d00a      	beq.n	23fd796 <_strtod_l+0x47e>
 23fd780:	494e      	ldr	r1, [pc, #312]	; (23fd8bc <_strtod_l+0x5a4>)
 23fd782:	4652      	mov	r2, sl
 23fd784:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23fd788:	465b      	mov	r3, fp
 23fd78a:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd78e:	f7f7 fed3 	bl	23f5538 <__aeabi_dmul>
 23fd792:	4682      	mov	sl, r0
 23fd794:	468b      	mov	fp, r1
 23fd796:	f038 080f 	bics.w	r8, r8, #15
 23fd79a:	d04f      	beq.n	23fd83c <_strtod_l+0x524>
 23fd79c:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 23fd7a0:	dd22      	ble.n	23fd7e8 <_strtod_l+0x4d0>
 23fd7a2:	2500      	movs	r5, #0
 23fd7a4:	462e      	mov	r6, r5
 23fd7a6:	9507      	str	r5, [sp, #28]
 23fd7a8:	9505      	str	r5, [sp, #20]
 23fd7aa:	2322      	movs	r3, #34	; 0x22
 23fd7ac:	f8df b114 	ldr.w	fp, [pc, #276]	; 23fd8c4 <_strtod_l+0x5ac>
 23fd7b0:	f04f 0a00 	mov.w	sl, #0
 23fd7b4:	6023      	str	r3, [r4, #0]
 23fd7b6:	9b07      	ldr	r3, [sp, #28]
 23fd7b8:	2b00      	cmp	r3, #0
 23fd7ba:	f43f adf1 	beq.w	23fd3a0 <_strtod_l+0x88>
 23fd7be:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fd7c0:	4620      	mov	r0, r4
 23fd7c2:	f001 f86b 	bl	23fe89c <_Bfree>
 23fd7c6:	9905      	ldr	r1, [sp, #20]
 23fd7c8:	4620      	mov	r0, r4
 23fd7ca:	f001 f867 	bl	23fe89c <_Bfree>
 23fd7ce:	4631      	mov	r1, r6
 23fd7d0:	4620      	mov	r0, r4
 23fd7d2:	f001 f863 	bl	23fe89c <_Bfree>
 23fd7d6:	9907      	ldr	r1, [sp, #28]
 23fd7d8:	4620      	mov	r0, r4
 23fd7da:	f001 f85f 	bl	23fe89c <_Bfree>
 23fd7de:	4629      	mov	r1, r5
 23fd7e0:	4620      	mov	r0, r4
 23fd7e2:	f001 f85b 	bl	23fe89c <_Bfree>
 23fd7e6:	e5db      	b.n	23fd3a0 <_strtod_l+0x88>
 23fd7e8:	4b35      	ldr	r3, [pc, #212]	; (23fd8c0 <_strtod_l+0x5a8>)
 23fd7ea:	ea4f 1828 	mov.w	r8, r8, asr #4
 23fd7ee:	4650      	mov	r0, sl
 23fd7f0:	4659      	mov	r1, fp
 23fd7f2:	9304      	str	r3, [sp, #16]
 23fd7f4:	2300      	movs	r3, #0
 23fd7f6:	4699      	mov	r9, r3
 23fd7f8:	f1b8 0f01 	cmp.w	r8, #1
 23fd7fc:	dc21      	bgt.n	23fd842 <_strtod_l+0x52a>
 23fd7fe:	b10b      	cbz	r3, 23fd804 <_strtod_l+0x4ec>
 23fd800:	4682      	mov	sl, r0
 23fd802:	468b      	mov	fp, r1
 23fd804:	4b2e      	ldr	r3, [pc, #184]	; (23fd8c0 <_strtod_l+0x5a8>)
 23fd806:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 23fd80a:	4652      	mov	r2, sl
 23fd80c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 23fd810:	465b      	mov	r3, fp
 23fd812:	e9d9 0100 	ldrd	r0, r1, [r9]
 23fd816:	f7f7 fe8f 	bl	23f5538 <__aeabi_dmul>
 23fd81a:	4b2a      	ldr	r3, [pc, #168]	; (23fd8c4 <_strtod_l+0x5ac>)
 23fd81c:	460a      	mov	r2, r1
 23fd81e:	4682      	mov	sl, r0
 23fd820:	400b      	ands	r3, r1
 23fd822:	4929      	ldr	r1, [pc, #164]	; (23fd8c8 <_strtod_l+0x5b0>)
 23fd824:	428b      	cmp	r3, r1
 23fd826:	d8bc      	bhi.n	23fd7a2 <_strtod_l+0x48a>
 23fd828:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 23fd82c:	428b      	cmp	r3, r1
 23fd82e:	bf86      	itte	hi
 23fd830:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 23fd8cc <_strtod_l+0x5b4>
 23fd834:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 23fd838:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 23fd83c:	2300      	movs	r3, #0
 23fd83e:	9304      	str	r3, [sp, #16]
 23fd840:	e083      	b.n	23fd94a <_strtod_l+0x632>
 23fd842:	f018 0f01 	tst.w	r8, #1
 23fd846:	d005      	beq.n	23fd854 <_strtod_l+0x53c>
 23fd848:	9b04      	ldr	r3, [sp, #16]
 23fd84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd84e:	f7f7 fe73 	bl	23f5538 <__aeabi_dmul>
 23fd852:	2301      	movs	r3, #1
 23fd854:	9a04      	ldr	r2, [sp, #16]
 23fd856:	f109 0901 	add.w	r9, r9, #1
 23fd85a:	ea4f 0868 	mov.w	r8, r8, asr #1
 23fd85e:	3208      	adds	r2, #8
 23fd860:	9204      	str	r2, [sp, #16]
 23fd862:	e7c9      	b.n	23fd7f8 <_strtod_l+0x4e0>
 23fd864:	d0ea      	beq.n	23fd83c <_strtod_l+0x524>
 23fd866:	f1c8 0800 	rsb	r8, r8, #0
 23fd86a:	f018 020f 	ands.w	r2, r8, #15
 23fd86e:	d00a      	beq.n	23fd886 <_strtod_l+0x56e>
 23fd870:	4b12      	ldr	r3, [pc, #72]	; (23fd8bc <_strtod_l+0x5a4>)
 23fd872:	4650      	mov	r0, sl
 23fd874:	4659      	mov	r1, fp
 23fd876:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 23fd87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd87e:	f7f7 ff85 	bl	23f578c <__aeabi_ddiv>
 23fd882:	4682      	mov	sl, r0
 23fd884:	468b      	mov	fp, r1
 23fd886:	ea5f 1828 	movs.w	r8, r8, asr #4
 23fd88a:	d0d7      	beq.n	23fd83c <_strtod_l+0x524>
 23fd88c:	f1b8 0f1f 	cmp.w	r8, #31
 23fd890:	dd1e      	ble.n	23fd8d0 <_strtod_l+0x5b8>
 23fd892:	2500      	movs	r5, #0
 23fd894:	462e      	mov	r6, r5
 23fd896:	9507      	str	r5, [sp, #28]
 23fd898:	9505      	str	r5, [sp, #20]
 23fd89a:	2322      	movs	r3, #34	; 0x22
 23fd89c:	f04f 0a00 	mov.w	sl, #0
 23fd8a0:	f04f 0b00 	mov.w	fp, #0
 23fd8a4:	6023      	str	r3, [r4, #0]
 23fd8a6:	e786      	b.n	23fd7b6 <_strtod_l+0x49e>
 23fd8a8:	023ffc8a 	.word	0x023ffc8a
 23fd8ac:	023ffca4 	.word	0x023ffca4
 23fd8b0:	023ffc81 	.word	0x023ffc81
 23fd8b4:	023ffc84 	.word	0x023ffc84
 23fd8b8:	023ffa36 	.word	0x023ffa36
 23fd8bc:	023ffef0 	.word	0x023ffef0
 23fd8c0:	023ffec8 	.word	0x023ffec8
 23fd8c4:	7ff00000 	.word	0x7ff00000
 23fd8c8:	7ca00000 	.word	0x7ca00000
 23fd8cc:	7fefffff 	.word	0x7fefffff
 23fd8d0:	f018 0310 	ands.w	r3, r8, #16
 23fd8d4:	4650      	mov	r0, sl
 23fd8d6:	4659      	mov	r1, fp
 23fd8d8:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 23fdc84 <_strtod_l+0x96c>
 23fd8dc:	bf18      	it	ne
 23fd8de:	236a      	movne	r3, #106	; 0x6a
 23fd8e0:	9304      	str	r3, [sp, #16]
 23fd8e2:	2300      	movs	r3, #0
 23fd8e4:	f018 0f01 	tst.w	r8, #1
 23fd8e8:	d004      	beq.n	23fd8f4 <_strtod_l+0x5dc>
 23fd8ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 23fd8ee:	f7f7 fe23 	bl	23f5538 <__aeabi_dmul>
 23fd8f2:	2301      	movs	r3, #1
 23fd8f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 23fd8f8:	f109 0908 	add.w	r9, r9, #8
 23fd8fc:	d1f2      	bne.n	23fd8e4 <_strtod_l+0x5cc>
 23fd8fe:	b10b      	cbz	r3, 23fd904 <_strtod_l+0x5ec>
 23fd900:	4682      	mov	sl, r0
 23fd902:	468b      	mov	fp, r1
 23fd904:	9b04      	ldr	r3, [sp, #16]
 23fd906:	b1c3      	cbz	r3, 23fd93a <_strtod_l+0x622>
 23fd908:	f3cb 520a 	ubfx	r2, fp, #20, #11
 23fd90c:	4659      	mov	r1, fp
 23fd90e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 23fd912:	2b00      	cmp	r3, #0
 23fd914:	dd11      	ble.n	23fd93a <_strtod_l+0x622>
 23fd916:	2b1f      	cmp	r3, #31
 23fd918:	f340 8121 	ble.w	23fdb5e <_strtod_l+0x846>
 23fd91c:	2b34      	cmp	r3, #52	; 0x34
 23fd91e:	f04f 0a00 	mov.w	sl, #0
 23fd922:	bfdb      	ittet	le
 23fd924:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 23fd928:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 23fd92c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 23fd930:	fa03 f202 	lslle.w	r2, r3, r2
 23fd934:	bfd8      	it	le
 23fd936:	ea02 0b01 	andle.w	fp, r2, r1
 23fd93a:	2200      	movs	r2, #0
 23fd93c:	2300      	movs	r3, #0
 23fd93e:	4650      	mov	r0, sl
 23fd940:	4659      	mov	r1, fp
 23fd942:	f7f8 f861 	bl	23f5a08 <__aeabi_dcmpeq>
 23fd946:	2800      	cmp	r0, #0
 23fd948:	d1a3      	bne.n	23fd892 <_strtod_l+0x57a>
 23fd94a:	9b07      	ldr	r3, [sp, #28]
 23fd94c:	463a      	mov	r2, r7
 23fd94e:	9908      	ldr	r1, [sp, #32]
 23fd950:	4620      	mov	r0, r4
 23fd952:	9300      	str	r3, [sp, #0]
 23fd954:	462b      	mov	r3, r5
 23fd956:	f001 f80b 	bl	23fe970 <__s2b>
 23fd95a:	9007      	str	r0, [sp, #28]
 23fd95c:	2800      	cmp	r0, #0
 23fd95e:	f43f af20 	beq.w	23fd7a2 <_strtod_l+0x48a>
 23fd962:	9b05      	ldr	r3, [sp, #20]
 23fd964:	2500      	movs	r5, #0
 23fd966:	1b9e      	subs	r6, r3, r6
 23fd968:	9b06      	ldr	r3, [sp, #24]
 23fd96a:	2b00      	cmp	r3, #0
 23fd96c:	bfb4      	ite	lt
 23fd96e:	4633      	movlt	r3, r6
 23fd970:	2300      	movge	r3, #0
 23fd972:	462e      	mov	r6, r5
 23fd974:	930c      	str	r3, [sp, #48]	; 0x30
 23fd976:	9b06      	ldr	r3, [sp, #24]
 23fd978:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23fd97c:	9312      	str	r3, [sp, #72]	; 0x48
 23fd97e:	9b07      	ldr	r3, [sp, #28]
 23fd980:	4620      	mov	r0, r4
 23fd982:	6859      	ldr	r1, [r3, #4]
 23fd984:	f000 ff4a 	bl	23fe81c <_Balloc>
 23fd988:	9005      	str	r0, [sp, #20]
 23fd98a:	2800      	cmp	r0, #0
 23fd98c:	f43f af0d 	beq.w	23fd7aa <_strtod_l+0x492>
 23fd990:	9b07      	ldr	r3, [sp, #28]
 23fd992:	300c      	adds	r0, #12
 23fd994:	691a      	ldr	r2, [r3, #16]
 23fd996:	f103 010c 	add.w	r1, r3, #12
 23fd99a:	3202      	adds	r2, #2
 23fd99c:	0092      	lsls	r2, r2, #2
 23fd99e:	f7ff fbe3 	bl	23fd168 <memcpy>
 23fd9a2:	aa1a      	add	r2, sp, #104	; 0x68
 23fd9a4:	a919      	add	r1, sp, #100	; 0x64
 23fd9a6:	4620      	mov	r0, r4
 23fd9a8:	ec4b ab10 	vmov	d0, sl, fp
 23fd9ac:	f001 fb28 	bl	23ff000 <__d2b>
 23fd9b0:	9018      	str	r0, [sp, #96]	; 0x60
 23fd9b2:	ec4b ab18 	vmov	d8, sl, fp
 23fd9b6:	2800      	cmp	r0, #0
 23fd9b8:	f43f aef7 	beq.w	23fd7aa <_strtod_l+0x492>
 23fd9bc:	2101      	movs	r1, #1
 23fd9be:	4620      	mov	r0, r4
 23fd9c0:	f001 f870 	bl	23feaa4 <__i2b>
 23fd9c4:	4606      	mov	r6, r0
 23fd9c6:	2800      	cmp	r0, #0
 23fd9c8:	f43f aeef 	beq.w	23fd7aa <_strtod_l+0x492>
 23fd9cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23fd9ce:	9904      	ldr	r1, [sp, #16]
 23fd9d0:	2b00      	cmp	r3, #0
 23fd9d2:	eba3 0801 	sub.w	r8, r3, r1
 23fd9d6:	bfa9      	itett	ge
 23fd9d8:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 23fd9da:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 23fd9dc:	eb03 0902 	addge.w	r9, r3, r2
 23fd9e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 23fd9e2:	bfb8      	it	lt
 23fd9e4:	1ad7      	sublt	r7, r2, r3
 23fd9e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23fd9e8:	4ba1      	ldr	r3, [pc, #644]	; (23fdc70 <_strtod_l+0x958>)
 23fd9ea:	4490      	add	r8, r2
 23fd9ec:	bfb8      	it	lt
 23fd9ee:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 23fd9f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 23fd9f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fd9fa:	4598      	cmp	r8, r3
 23fd9fc:	f280 80c3 	bge.w	23fdb86 <_strtod_l+0x86e>
 23fda00:	eba3 0308 	sub.w	r3, r3, r8
 23fda04:	2101      	movs	r1, #1
 23fda06:	2b1f      	cmp	r3, #31
 23fda08:	eba2 0203 	sub.w	r2, r2, r3
 23fda0c:	f300 80ae 	bgt.w	23fdb6c <_strtod_l+0x854>
 23fda10:	fa01 f303 	lsl.w	r3, r1, r3
 23fda14:	930d      	str	r3, [sp, #52]	; 0x34
 23fda16:	2300      	movs	r3, #0
 23fda18:	9308      	str	r3, [sp, #32]
 23fda1a:	eb09 0802 	add.w	r8, r9, r2
 23fda1e:	9b04      	ldr	r3, [sp, #16]
 23fda20:	4417      	add	r7, r2
 23fda22:	45c1      	cmp	r9, r8
 23fda24:	441f      	add	r7, r3
 23fda26:	464b      	mov	r3, r9
 23fda28:	bfa8      	it	ge
 23fda2a:	4643      	movge	r3, r8
 23fda2c:	42bb      	cmp	r3, r7
 23fda2e:	bfa8      	it	ge
 23fda30:	463b      	movge	r3, r7
 23fda32:	2b00      	cmp	r3, #0
 23fda34:	bfc2      	ittt	gt
 23fda36:	eba8 0803 	subgt.w	r8, r8, r3
 23fda3a:	1aff      	subgt	r7, r7, r3
 23fda3c:	eba9 0903 	subgt.w	r9, r9, r3
 23fda40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fda42:	2b00      	cmp	r3, #0
 23fda44:	dd17      	ble.n	23fda76 <_strtod_l+0x75e>
 23fda46:	4631      	mov	r1, r6
 23fda48:	461a      	mov	r2, r3
 23fda4a:	4620      	mov	r0, r4
 23fda4c:	f001 f8e8 	bl	23fec20 <__pow5mult>
 23fda50:	4606      	mov	r6, r0
 23fda52:	2800      	cmp	r0, #0
 23fda54:	f43f aea9 	beq.w	23fd7aa <_strtod_l+0x492>
 23fda58:	4601      	mov	r1, r0
 23fda5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23fda5c:	4620      	mov	r0, r4
 23fda5e:	f001 f837 	bl	23fead0 <__multiply>
 23fda62:	900b      	str	r0, [sp, #44]	; 0x2c
 23fda64:	2800      	cmp	r0, #0
 23fda66:	f43f aea0 	beq.w	23fd7aa <_strtod_l+0x492>
 23fda6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fda6c:	4620      	mov	r0, r4
 23fda6e:	f000 ff15 	bl	23fe89c <_Bfree>
 23fda72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fda74:	9318      	str	r3, [sp, #96]	; 0x60
 23fda76:	f1b8 0f00 	cmp.w	r8, #0
 23fda7a:	f300 8089 	bgt.w	23fdb90 <_strtod_l+0x878>
 23fda7e:	9b06      	ldr	r3, [sp, #24]
 23fda80:	2b00      	cmp	r3, #0
 23fda82:	dd08      	ble.n	23fda96 <_strtod_l+0x77e>
 23fda84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23fda86:	4620      	mov	r0, r4
 23fda88:	9905      	ldr	r1, [sp, #20]
 23fda8a:	f001 f8c9 	bl	23fec20 <__pow5mult>
 23fda8e:	9005      	str	r0, [sp, #20]
 23fda90:	2800      	cmp	r0, #0
 23fda92:	f43f ae8a 	beq.w	23fd7aa <_strtod_l+0x492>
 23fda96:	2f00      	cmp	r7, #0
 23fda98:	dd08      	ble.n	23fdaac <_strtod_l+0x794>
 23fda9a:	463a      	mov	r2, r7
 23fda9c:	9905      	ldr	r1, [sp, #20]
 23fda9e:	4620      	mov	r0, r4
 23fdaa0:	f001 f918 	bl	23fecd4 <__lshift>
 23fdaa4:	9005      	str	r0, [sp, #20]
 23fdaa6:	2800      	cmp	r0, #0
 23fdaa8:	f43f ae7f 	beq.w	23fd7aa <_strtod_l+0x492>
 23fdaac:	f1b9 0f00 	cmp.w	r9, #0
 23fdab0:	dd08      	ble.n	23fdac4 <_strtod_l+0x7ac>
 23fdab2:	4631      	mov	r1, r6
 23fdab4:	464a      	mov	r2, r9
 23fdab6:	4620      	mov	r0, r4
 23fdab8:	f001 f90c 	bl	23fecd4 <__lshift>
 23fdabc:	4606      	mov	r6, r0
 23fdabe:	2800      	cmp	r0, #0
 23fdac0:	f43f ae73 	beq.w	23fd7aa <_strtod_l+0x492>
 23fdac4:	9a05      	ldr	r2, [sp, #20]
 23fdac6:	4620      	mov	r0, r4
 23fdac8:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fdaca:	f001 f98f 	bl	23fedec <__mdiff>
 23fdace:	4605      	mov	r5, r0
 23fdad0:	2800      	cmp	r0, #0
 23fdad2:	f43f ae6a 	beq.w	23fd7aa <_strtod_l+0x492>
 23fdad6:	68c3      	ldr	r3, [r0, #12]
 23fdad8:	4631      	mov	r1, r6
 23fdada:	930b      	str	r3, [sp, #44]	; 0x2c
 23fdadc:	2300      	movs	r3, #0
 23fdade:	60c3      	str	r3, [r0, #12]
 23fdae0:	f001 f968 	bl	23fedb4 <__mcmp>
 23fdae4:	2800      	cmp	r0, #0
 23fdae6:	da5d      	bge.n	23fdba4 <_strtod_l+0x88c>
 23fdae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fdaea:	ea53 030a 	orrs.w	r3, r3, sl
 23fdaee:	d17f      	bne.n	23fdbf0 <_strtod_l+0x8d8>
 23fdaf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fdaf4:	2b00      	cmp	r3, #0
 23fdaf6:	d17b      	bne.n	23fdbf0 <_strtod_l+0x8d8>
 23fdaf8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fdafc:	0d1b      	lsrs	r3, r3, #20
 23fdafe:	051b      	lsls	r3, r3, #20
 23fdb00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 23fdb04:	d974      	bls.n	23fdbf0 <_strtod_l+0x8d8>
 23fdb06:	696b      	ldr	r3, [r5, #20]
 23fdb08:	b913      	cbnz	r3, 23fdb10 <_strtod_l+0x7f8>
 23fdb0a:	692b      	ldr	r3, [r5, #16]
 23fdb0c:	2b01      	cmp	r3, #1
 23fdb0e:	dd6f      	ble.n	23fdbf0 <_strtod_l+0x8d8>
 23fdb10:	4629      	mov	r1, r5
 23fdb12:	2201      	movs	r2, #1
 23fdb14:	4620      	mov	r0, r4
 23fdb16:	f001 f8dd 	bl	23fecd4 <__lshift>
 23fdb1a:	4631      	mov	r1, r6
 23fdb1c:	4605      	mov	r5, r0
 23fdb1e:	f001 f949 	bl	23fedb4 <__mcmp>
 23fdb22:	2800      	cmp	r0, #0
 23fdb24:	dd64      	ble.n	23fdbf0 <_strtod_l+0x8d8>
 23fdb26:	9904      	ldr	r1, [sp, #16]
 23fdb28:	465b      	mov	r3, fp
 23fdb2a:	4a52      	ldr	r2, [pc, #328]	; (23fdc74 <_strtod_l+0x95c>)
 23fdb2c:	2900      	cmp	r1, #0
 23fdb2e:	d07f      	beq.n	23fdc30 <_strtod_l+0x918>
 23fdb30:	ea02 010b 	and.w	r1, r2, fp
 23fdb34:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 23fdb38:	dc7a      	bgt.n	23fdc30 <_strtod_l+0x918>
 23fdb3a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 23fdb3e:	f77f aeac 	ble.w	23fd89a <_strtod_l+0x582>
 23fdb42:	4b4d      	ldr	r3, [pc, #308]	; (23fdc78 <_strtod_l+0x960>)
 23fdb44:	4650      	mov	r0, sl
 23fdb46:	4659      	mov	r1, fp
 23fdb48:	2200      	movs	r2, #0
 23fdb4a:	f7f7 fcf5 	bl	23f5538 <__aeabi_dmul>
 23fdb4e:	460b      	mov	r3, r1
 23fdb50:	4682      	mov	sl, r0
 23fdb52:	468b      	mov	fp, r1
 23fdb54:	4303      	orrs	r3, r0
 23fdb56:	bf04      	itt	eq
 23fdb58:	2322      	moveq	r3, #34	; 0x22
 23fdb5a:	6023      	streq	r3, [r4, #0]
 23fdb5c:	e62f      	b.n	23fd7be <_strtod_l+0x4a6>
 23fdb5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fdb62:	fa02 f303 	lsl.w	r3, r2, r3
 23fdb66:	ea03 0a0a 	and.w	sl, r3, sl
 23fdb6a:	e6e6      	b.n	23fd93a <_strtod_l+0x622>
 23fdb6c:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 23fdb70:	910d      	str	r1, [sp, #52]	; 0x34
 23fdb72:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 23fdb76:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 23fdb7a:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 23fdb7e:	fa01 f308 	lsl.w	r3, r1, r8
 23fdb82:	9308      	str	r3, [sp, #32]
 23fdb84:	e749      	b.n	23fda1a <_strtod_l+0x702>
 23fdb86:	2300      	movs	r3, #0
 23fdb88:	9308      	str	r3, [sp, #32]
 23fdb8a:	2301      	movs	r3, #1
 23fdb8c:	930d      	str	r3, [sp, #52]	; 0x34
 23fdb8e:	e744      	b.n	23fda1a <_strtod_l+0x702>
 23fdb90:	4642      	mov	r2, r8
 23fdb92:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fdb94:	4620      	mov	r0, r4
 23fdb96:	f001 f89d 	bl	23fecd4 <__lshift>
 23fdb9a:	9018      	str	r0, [sp, #96]	; 0x60
 23fdb9c:	2800      	cmp	r0, #0
 23fdb9e:	f47f af6e 	bne.w	23fda7e <_strtod_l+0x766>
 23fdba2:	e602      	b.n	23fd7aa <_strtod_l+0x492>
 23fdba4:	465f      	mov	r7, fp
 23fdba6:	d16f      	bne.n	23fdc88 <_strtod_l+0x970>
 23fdba8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fdbaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fdbae:	b342      	cbz	r2, 23fdc02 <_strtod_l+0x8ea>
 23fdbb0:	4a32      	ldr	r2, [pc, #200]	; (23fdc7c <_strtod_l+0x964>)
 23fdbb2:	4293      	cmp	r3, r2
 23fdbb4:	d128      	bne.n	23fdc08 <_strtod_l+0x8f0>
 23fdbb6:	9b04      	ldr	r3, [sp, #16]
 23fdbb8:	4651      	mov	r1, sl
 23fdbba:	b1eb      	cbz	r3, 23fdbf8 <_strtod_l+0x8e0>
 23fdbbc:	4b2d      	ldr	r3, [pc, #180]	; (23fdc74 <_strtod_l+0x95c>)
 23fdbbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fdbc2:	403b      	ands	r3, r7
 23fdbc4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 23fdbc8:	d819      	bhi.n	23fdbfe <_strtod_l+0x8e6>
 23fdbca:	0d1b      	lsrs	r3, r3, #20
 23fdbcc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 23fdbd0:	fa02 f303 	lsl.w	r3, r2, r3
 23fdbd4:	4299      	cmp	r1, r3
 23fdbd6:	d117      	bne.n	23fdc08 <_strtod_l+0x8f0>
 23fdbd8:	4b29      	ldr	r3, [pc, #164]	; (23fdc80 <_strtod_l+0x968>)
 23fdbda:	429f      	cmp	r7, r3
 23fdbdc:	d102      	bne.n	23fdbe4 <_strtod_l+0x8cc>
 23fdbde:	3101      	adds	r1, #1
 23fdbe0:	f43f ade3 	beq.w	23fd7aa <_strtod_l+0x492>
 23fdbe4:	4b23      	ldr	r3, [pc, #140]	; (23fdc74 <_strtod_l+0x95c>)
 23fdbe6:	f04f 0a00 	mov.w	sl, #0
 23fdbea:	403b      	ands	r3, r7
 23fdbec:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 23fdbf0:	9b04      	ldr	r3, [sp, #16]
 23fdbf2:	2b00      	cmp	r3, #0
 23fdbf4:	d1a5      	bne.n	23fdb42 <_strtod_l+0x82a>
 23fdbf6:	e5e2      	b.n	23fd7be <_strtod_l+0x4a6>
 23fdbf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fdbfc:	e7ea      	b.n	23fdbd4 <_strtod_l+0x8bc>
 23fdbfe:	4613      	mov	r3, r2
 23fdc00:	e7e8      	b.n	23fdbd4 <_strtod_l+0x8bc>
 23fdc02:	ea53 030a 	orrs.w	r3, r3, sl
 23fdc06:	d08e      	beq.n	23fdb26 <_strtod_l+0x80e>
 23fdc08:	9b08      	ldr	r3, [sp, #32]
 23fdc0a:	b1db      	cbz	r3, 23fdc44 <_strtod_l+0x92c>
 23fdc0c:	423b      	tst	r3, r7
 23fdc0e:	d0ef      	beq.n	23fdbf0 <_strtod_l+0x8d8>
 23fdc10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fdc12:	4650      	mov	r0, sl
 23fdc14:	9a04      	ldr	r2, [sp, #16]
 23fdc16:	4659      	mov	r1, fp
 23fdc18:	b1c3      	cbz	r3, 23fdc4c <_strtod_l+0x934>
 23fdc1a:	f7ff fb60 	bl	23fd2de <sulp>
 23fdc1e:	4602      	mov	r2, r0
 23fdc20:	460b      	mov	r3, r1
 23fdc22:	ec51 0b18 	vmov	r0, r1, d8
 23fdc26:	f7f7 fad1 	bl	23f51cc <__adddf3>
 23fdc2a:	4682      	mov	sl, r0
 23fdc2c:	468b      	mov	fp, r1
 23fdc2e:	e7df      	b.n	23fdbf0 <_strtod_l+0x8d8>
 23fdc30:	4013      	ands	r3, r2
 23fdc32:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fdc36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 23fdc3a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 23fdc3e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 23fdc42:	e7d5      	b.n	23fdbf0 <_strtod_l+0x8d8>
 23fdc44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23fdc46:	ea13 0f0a 	tst.w	r3, sl
 23fdc4a:	e7e0      	b.n	23fdc0e <_strtod_l+0x8f6>
 23fdc4c:	f7ff fb47 	bl	23fd2de <sulp>
 23fdc50:	4602      	mov	r2, r0
 23fdc52:	460b      	mov	r3, r1
 23fdc54:	ec51 0b18 	vmov	r0, r1, d8
 23fdc58:	f7f7 fab6 	bl	23f51c8 <__aeabi_dsub>
 23fdc5c:	2200      	movs	r2, #0
 23fdc5e:	2300      	movs	r3, #0
 23fdc60:	4682      	mov	sl, r0
 23fdc62:	468b      	mov	fp, r1
 23fdc64:	f7f7 fed0 	bl	23f5a08 <__aeabi_dcmpeq>
 23fdc68:	2800      	cmp	r0, #0
 23fdc6a:	d0c1      	beq.n	23fdbf0 <_strtod_l+0x8d8>
 23fdc6c:	e615      	b.n	23fd89a <_strtod_l+0x582>
 23fdc6e:	bf00      	nop
 23fdc70:	fffffc02 	.word	0xfffffc02
 23fdc74:	7ff00000 	.word	0x7ff00000
 23fdc78:	39500000 	.word	0x39500000
 23fdc7c:	000fffff 	.word	0x000fffff
 23fdc80:	7fefffff 	.word	0x7fefffff
 23fdc84:	023ffcb8 	.word	0x023ffcb8
 23fdc88:	4631      	mov	r1, r6
 23fdc8a:	4628      	mov	r0, r5
 23fdc8c:	f001 fa14 	bl	23ff0b8 <__ratio>
 23fdc90:	2200      	movs	r2, #0
 23fdc92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fdc96:	ee10 0a10 	vmov	r0, s0
 23fdc9a:	ec59 8b10 	vmov	r8, r9, d0
 23fdc9e:	4649      	mov	r1, r9
 23fdca0:	f7f7 fec6 	bl	23f5a30 <__aeabi_dcmple>
 23fdca4:	2800      	cmp	r0, #0
 23fdca6:	d07a      	beq.n	23fdd9e <_strtod_l+0xa86>
 23fdca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fdcaa:	2b00      	cmp	r3, #0
 23fdcac:	d04a      	beq.n	23fdd44 <_strtod_l+0xa2c>
 23fdcae:	2200      	movs	r2, #0
 23fdcb0:	4b93      	ldr	r3, [pc, #588]	; (23fdf00 <_strtod_l+0xbe8>)
 23fdcb2:	f04f 0800 	mov.w	r8, #0
 23fdcb6:	f8df 9248 	ldr.w	r9, [pc, #584]	; 23fdf00 <_strtod_l+0xbe8>
 23fdcba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fdcbe:	4b91      	ldr	r3, [pc, #580]	; (23fdf04 <_strtod_l+0xbec>)
 23fdcc0:	403b      	ands	r3, r7
 23fdcc2:	930d      	str	r3, [sp, #52]	; 0x34
 23fdcc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fdcc6:	4b90      	ldr	r3, [pc, #576]	; (23fdf08 <_strtod_l+0xbf0>)
 23fdcc8:	429a      	cmp	r2, r3
 23fdcca:	f040 80b0 	bne.w	23fde2e <_strtod_l+0xb16>
 23fdcce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 23fdcd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fdcd6:	ec4b ab10 	vmov	d0, sl, fp
 23fdcda:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23fdcde:	f001 f915 	bl	23fef0c <__ulp>
 23fdce2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fdce6:	ec53 2b10 	vmov	r2, r3, d0
 23fdcea:	f7f7 fc25 	bl	23f5538 <__aeabi_dmul>
 23fdcee:	4652      	mov	r2, sl
 23fdcf0:	465b      	mov	r3, fp
 23fdcf2:	f7f7 fa6b 	bl	23f51cc <__adddf3>
 23fdcf6:	460b      	mov	r3, r1
 23fdcf8:	4982      	ldr	r1, [pc, #520]	; (23fdf04 <_strtod_l+0xbec>)
 23fdcfa:	4682      	mov	sl, r0
 23fdcfc:	4a83      	ldr	r2, [pc, #524]	; (23fdf0c <_strtod_l+0xbf4>)
 23fdcfe:	4019      	ands	r1, r3
 23fdd00:	4291      	cmp	r1, r2
 23fdd02:	d960      	bls.n	23fddc6 <_strtod_l+0xaae>
 23fdd04:	ee18 3a90 	vmov	r3, s17
 23fdd08:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 23fdd0c:	4293      	cmp	r3, r2
 23fdd0e:	d104      	bne.n	23fdd1a <_strtod_l+0xa02>
 23fdd10:	ee18 3a10 	vmov	r3, s16
 23fdd14:	3301      	adds	r3, #1
 23fdd16:	f43f ad48 	beq.w	23fd7aa <_strtod_l+0x492>
 23fdd1a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 23fdf18 <_strtod_l+0xc00>
 23fdd1e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fdd22:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fdd24:	4620      	mov	r0, r4
 23fdd26:	f000 fdb9 	bl	23fe89c <_Bfree>
 23fdd2a:	9905      	ldr	r1, [sp, #20]
 23fdd2c:	4620      	mov	r0, r4
 23fdd2e:	f000 fdb5 	bl	23fe89c <_Bfree>
 23fdd32:	4631      	mov	r1, r6
 23fdd34:	4620      	mov	r0, r4
 23fdd36:	f000 fdb1 	bl	23fe89c <_Bfree>
 23fdd3a:	4629      	mov	r1, r5
 23fdd3c:	4620      	mov	r0, r4
 23fdd3e:	f000 fdad 	bl	23fe89c <_Bfree>
 23fdd42:	e61c      	b.n	23fd97e <_strtod_l+0x666>
 23fdd44:	f1ba 0f00 	cmp.w	sl, #0
 23fdd48:	d11b      	bne.n	23fdd82 <_strtod_l+0xa6a>
 23fdd4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fdd4e:	b9f3      	cbnz	r3, 23fdd8e <_strtod_l+0xa76>
 23fdd50:	2200      	movs	r2, #0
 23fdd52:	4b6b      	ldr	r3, [pc, #428]	; (23fdf00 <_strtod_l+0xbe8>)
 23fdd54:	4640      	mov	r0, r8
 23fdd56:	4649      	mov	r1, r9
 23fdd58:	f7f7 fe60 	bl	23f5a1c <__aeabi_dcmplt>
 23fdd5c:	b9d0      	cbnz	r0, 23fdd94 <_strtod_l+0xa7c>
 23fdd5e:	4640      	mov	r0, r8
 23fdd60:	4649      	mov	r1, r9
 23fdd62:	2200      	movs	r2, #0
 23fdd64:	4b6a      	ldr	r3, [pc, #424]	; (23fdf10 <_strtod_l+0xbf8>)
 23fdd66:	f7f7 fbe7 	bl	23f5538 <__aeabi_dmul>
 23fdd6a:	4680      	mov	r8, r0
 23fdd6c:	4689      	mov	r9, r1
 23fdd6e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23fdd72:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 23fdd76:	9315      	str	r3, [sp, #84]	; 0x54
 23fdd78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 23fdd7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fdd80:	e79d      	b.n	23fdcbe <_strtod_l+0x9a6>
 23fdd82:	f1ba 0f01 	cmp.w	sl, #1
 23fdd86:	d102      	bne.n	23fdd8e <_strtod_l+0xa76>
 23fdd88:	2f00      	cmp	r7, #0
 23fdd8a:	f43f ad86 	beq.w	23fd89a <_strtod_l+0x582>
 23fdd8e:	2200      	movs	r2, #0
 23fdd90:	4b60      	ldr	r3, [pc, #384]	; (23fdf14 <_strtod_l+0xbfc>)
 23fdd92:	e78e      	b.n	23fdcb2 <_strtod_l+0x99a>
 23fdd94:	f04f 0800 	mov.w	r8, #0
 23fdd98:	f8df 9174 	ldr.w	r9, [pc, #372]	; 23fdf10 <_strtod_l+0xbf8>
 23fdd9c:	e7e7      	b.n	23fdd6e <_strtod_l+0xa56>
 23fdd9e:	4b5c      	ldr	r3, [pc, #368]	; (23fdf10 <_strtod_l+0xbf8>)
 23fdda0:	4640      	mov	r0, r8
 23fdda2:	4649      	mov	r1, r9
 23fdda4:	2200      	movs	r2, #0
 23fdda6:	f7f7 fbc7 	bl	23f5538 <__aeabi_dmul>
 23fddaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fddac:	4680      	mov	r8, r0
 23fddae:	4689      	mov	r9, r1
 23fddb0:	b933      	cbnz	r3, 23fddc0 <_strtod_l+0xaa8>
 23fddb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fddb6:	900e      	str	r0, [sp, #56]	; 0x38
 23fddb8:	930f      	str	r3, [sp, #60]	; 0x3c
 23fddba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 23fddbe:	e7dd      	b.n	23fdd7c <_strtod_l+0xa64>
 23fddc0:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 23fddc4:	e7f9      	b.n	23fddba <_strtod_l+0xaa2>
 23fddc6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 23fddca:	9b04      	ldr	r3, [sp, #16]
 23fddcc:	2b00      	cmp	r3, #0
 23fddce:	d1a8      	bne.n	23fdd22 <_strtod_l+0xa0a>
 23fddd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fddd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fddd6:	0d1b      	lsrs	r3, r3, #20
 23fddd8:	051b      	lsls	r3, r3, #20
 23fddda:	429a      	cmp	r2, r3
 23fdddc:	d1a1      	bne.n	23fdd22 <_strtod_l+0xa0a>
 23fddde:	4640      	mov	r0, r8
 23fdde0:	4649      	mov	r1, r9
 23fdde2:	f7f8 f89b 	bl	23f5f1c <__aeabi_d2lz>
 23fdde6:	f7f7 fb79 	bl	23f54dc <__aeabi_l2d>
 23fddea:	4602      	mov	r2, r0
 23fddec:	460b      	mov	r3, r1
 23fddee:	4640      	mov	r0, r8
 23fddf0:	4649      	mov	r1, r9
 23fddf2:	f7f7 f9e9 	bl	23f51c8 <__aeabi_dsub>
 23fddf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fddfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fddfc:	4680      	mov	r8, r0
 23fddfe:	ea43 030a 	orr.w	r3, r3, sl
 23fde02:	4689      	mov	r9, r1
 23fde04:	4313      	orrs	r3, r2
 23fde06:	d055      	beq.n	23fdeb4 <_strtod_l+0xb9c>
 23fde08:	a335      	add	r3, pc, #212	; (adr r3, 23fdee0 <_strtod_l+0xbc8>)
 23fde0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fde0e:	f7f7 fe05 	bl	23f5a1c <__aeabi_dcmplt>
 23fde12:	2800      	cmp	r0, #0
 23fde14:	f47f acd3 	bne.w	23fd7be <_strtod_l+0x4a6>
 23fde18:	4640      	mov	r0, r8
 23fde1a:	4649      	mov	r1, r9
 23fde1c:	a332      	add	r3, pc, #200	; (adr r3, 23fdee8 <_strtod_l+0xbd0>)
 23fde1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fde22:	f7f7 fe19 	bl	23f5a58 <__aeabi_dcmpgt>
 23fde26:	2800      	cmp	r0, #0
 23fde28:	f43f af7b 	beq.w	23fdd22 <_strtod_l+0xa0a>
 23fde2c:	e4c7      	b.n	23fd7be <_strtod_l+0x4a6>
 23fde2e:	9b04      	ldr	r3, [sp, #16]
 23fde30:	b333      	cbz	r3, 23fde80 <_strtod_l+0xb68>
 23fde32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23fde34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 23fde38:	d822      	bhi.n	23fde80 <_strtod_l+0xb68>
 23fde3a:	4640      	mov	r0, r8
 23fde3c:	4649      	mov	r1, r9
 23fde3e:	a32c      	add	r3, pc, #176	; (adr r3, 23fdef0 <_strtod_l+0xbd8>)
 23fde40:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fde44:	f7f7 fdf4 	bl	23f5a30 <__aeabi_dcmple>
 23fde48:	b1a0      	cbz	r0, 23fde74 <_strtod_l+0xb5c>
 23fde4a:	4649      	mov	r1, r9
 23fde4c:	4640      	mov	r0, r8
 23fde4e:	f7f7 fe35 	bl	23f5abc <__aeabi_d2uiz>
 23fde52:	2801      	cmp	r0, #1
 23fde54:	bf38      	it	cc
 23fde56:	2001      	movcc	r0, #1
 23fde58:	f7f7 faf4 	bl	23f5444 <__aeabi_ui2d>
 23fde5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fde5e:	4680      	mov	r8, r0
 23fde60:	4689      	mov	r9, r1
 23fde62:	bb23      	cbnz	r3, 23fdeae <_strtod_l+0xb96>
 23fde64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fde68:	9010      	str	r0, [sp, #64]	; 0x40
 23fde6a:	9311      	str	r3, [sp, #68]	; 0x44
 23fde6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 23fde70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fde74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fde76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fde78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 23fde7c:	1a9b      	subs	r3, r3, r2
 23fde7e:	9309      	str	r3, [sp, #36]	; 0x24
 23fde80:	eeb0 0a48 	vmov.f32	s0, s16
 23fde84:	eef0 0a68 	vmov.f32	s1, s17
 23fde88:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fde8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23fde90:	f001 f83c 	bl	23fef0c <__ulp>
 23fde94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fde98:	ec53 2b10 	vmov	r2, r3, d0
 23fde9c:	f7f7 fb4c 	bl	23f5538 <__aeabi_dmul>
 23fdea0:	ec53 2b18 	vmov	r2, r3, d8
 23fdea4:	f7f7 f992 	bl	23f51cc <__adddf3>
 23fdea8:	4682      	mov	sl, r0
 23fdeaa:	468b      	mov	fp, r1
 23fdeac:	e78d      	b.n	23fddca <_strtod_l+0xab2>
 23fdeae:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 23fdeb2:	e7db      	b.n	23fde6c <_strtod_l+0xb54>
 23fdeb4:	a310      	add	r3, pc, #64	; (adr r3, 23fdef8 <_strtod_l+0xbe0>)
 23fdeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fdeba:	f7f7 fdaf 	bl	23f5a1c <__aeabi_dcmplt>
 23fdebe:	e7b2      	b.n	23fde26 <_strtod_l+0xb0e>
 23fdec0:	2300      	movs	r3, #0
 23fdec2:	930a      	str	r3, [sp, #40]	; 0x28
 23fdec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fdec6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23fdec8:	6013      	str	r3, [r2, #0]
 23fdeca:	f7ff ba6d 	b.w	23fd3a8 <_strtod_l+0x90>
 23fdece:	2a65      	cmp	r2, #101	; 0x65
 23fded0:	f43f ab61 	beq.w	23fd596 <_strtod_l+0x27e>
 23fded4:	2a45      	cmp	r2, #69	; 0x45
 23fded6:	f43f ab5e 	beq.w	23fd596 <_strtod_l+0x27e>
 23fdeda:	2301      	movs	r3, #1
 23fdedc:	f7ff bb96 	b.w	23fd60c <_strtod_l+0x2f4>
 23fdee0:	94a03595 	.word	0x94a03595
 23fdee4:	3fdfffff 	.word	0x3fdfffff
 23fdee8:	35afe535 	.word	0x35afe535
 23fdeec:	3fe00000 	.word	0x3fe00000
 23fdef0:	ffc00000 	.word	0xffc00000
 23fdef4:	41dfffff 	.word	0x41dfffff
 23fdef8:	94a03595 	.word	0x94a03595
 23fdefc:	3fcfffff 	.word	0x3fcfffff
 23fdf00:	3ff00000 	.word	0x3ff00000
 23fdf04:	7ff00000 	.word	0x7ff00000
 23fdf08:	7fe00000 	.word	0x7fe00000
 23fdf0c:	7c9fffff 	.word	0x7c9fffff
 23fdf10:	3fe00000 	.word	0x3fe00000
 23fdf14:	bff00000 	.word	0xbff00000
 23fdf18:	7fefffff 	.word	0x7fefffff

023fdf1c <strtod>:
 23fdf1c:	460a      	mov	r2, r1
 23fdf1e:	4601      	mov	r1, r0
 23fdf20:	4802      	ldr	r0, [pc, #8]	; (23fdf2c <strtod+0x10>)
 23fdf22:	4b03      	ldr	r3, [pc, #12]	; (23fdf30 <strtod+0x14>)
 23fdf24:	6800      	ldr	r0, [r0, #0]
 23fdf26:	f7ff b9f7 	b.w	23fd318 <_strtod_l>
 23fdf2a:	bf00      	nop
 23fdf2c:	1007ac44 	.word	0x1007ac44
 23fdf30:	1007acb0 	.word	0x1007acb0

023fdf34 <_strtol_l.constprop.0>:
 23fdf34:	2b01      	cmp	r3, #1
 23fdf36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fdf3a:	d001      	beq.n	23fdf40 <_strtol_l.constprop.0+0xc>
 23fdf3c:	2b24      	cmp	r3, #36	; 0x24
 23fdf3e:	d906      	bls.n	23fdf4e <_strtol_l.constprop.0+0x1a>
 23fdf40:	f7fa fef4 	bl	23f8d2c <__errno>
 23fdf44:	2316      	movs	r3, #22
 23fdf46:	6003      	str	r3, [r0, #0]
 23fdf48:	2000      	movs	r0, #0
 23fdf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fdf4e:	460d      	mov	r5, r1
 23fdf50:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fe034 <_strtol_l.constprop.0+0x100>
 23fdf54:	462e      	mov	r6, r5
 23fdf56:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fdf5a:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fdf5e:	f017 0708 	ands.w	r7, r7, #8
 23fdf62:	d1f7      	bne.n	23fdf54 <_strtol_l.constprop.0+0x20>
 23fdf64:	2c2d      	cmp	r4, #45	; 0x2d
 23fdf66:	d132      	bne.n	23fdfce <_strtol_l.constprop.0+0x9a>
 23fdf68:	782c      	ldrb	r4, [r5, #0]
 23fdf6a:	2701      	movs	r7, #1
 23fdf6c:	1cb5      	adds	r5, r6, #2
 23fdf6e:	2b00      	cmp	r3, #0
 23fdf70:	d05b      	beq.n	23fe02a <_strtol_l.constprop.0+0xf6>
 23fdf72:	2b10      	cmp	r3, #16
 23fdf74:	d109      	bne.n	23fdf8a <_strtol_l.constprop.0+0x56>
 23fdf76:	2c30      	cmp	r4, #48	; 0x30
 23fdf78:	d107      	bne.n	23fdf8a <_strtol_l.constprop.0+0x56>
 23fdf7a:	782c      	ldrb	r4, [r5, #0]
 23fdf7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fdf80:	2c58      	cmp	r4, #88	; 0x58
 23fdf82:	d14d      	bne.n	23fe020 <_strtol_l.constprop.0+0xec>
 23fdf84:	786c      	ldrb	r4, [r5, #1]
 23fdf86:	2310      	movs	r3, #16
 23fdf88:	3502      	adds	r5, #2
 23fdf8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fdf8e:	f04f 0c00 	mov.w	ip, #0
 23fdf92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fdf96:	4666      	mov	r6, ip
 23fdf98:	fbb8 f9f3 	udiv	r9, r8, r3
 23fdf9c:	fb03 8a19 	mls	sl, r3, r9, r8
 23fdfa0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fdfa4:	f1be 0f09 	cmp.w	lr, #9
 23fdfa8:	d816      	bhi.n	23fdfd8 <_strtol_l.constprop.0+0xa4>
 23fdfaa:	4674      	mov	r4, lr
 23fdfac:	42a3      	cmp	r3, r4
 23fdfae:	dd24      	ble.n	23fdffa <_strtol_l.constprop.0+0xc6>
 23fdfb0:	f1bc 0f00 	cmp.w	ip, #0
 23fdfb4:	db1e      	blt.n	23fdff4 <_strtol_l.constprop.0+0xc0>
 23fdfb6:	45b1      	cmp	r9, r6
 23fdfb8:	d31c      	bcc.n	23fdff4 <_strtol_l.constprop.0+0xc0>
 23fdfba:	d101      	bne.n	23fdfc0 <_strtol_l.constprop.0+0x8c>
 23fdfbc:	45a2      	cmp	sl, r4
 23fdfbe:	db19      	blt.n	23fdff4 <_strtol_l.constprop.0+0xc0>
 23fdfc0:	fb06 4603 	mla	r6, r6, r3, r4
 23fdfc4:	f04f 0c01 	mov.w	ip, #1
 23fdfc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fdfcc:	e7e8      	b.n	23fdfa0 <_strtol_l.constprop.0+0x6c>
 23fdfce:	2c2b      	cmp	r4, #43	; 0x2b
 23fdfd0:	bf04      	itt	eq
 23fdfd2:	782c      	ldrbeq	r4, [r5, #0]
 23fdfd4:	1cb5      	addeq	r5, r6, #2
 23fdfd6:	e7ca      	b.n	23fdf6e <_strtol_l.constprop.0+0x3a>
 23fdfd8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fdfdc:	f1be 0f19 	cmp.w	lr, #25
 23fdfe0:	d801      	bhi.n	23fdfe6 <_strtol_l.constprop.0+0xb2>
 23fdfe2:	3c37      	subs	r4, #55	; 0x37
 23fdfe4:	e7e2      	b.n	23fdfac <_strtol_l.constprop.0+0x78>
 23fdfe6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fdfea:	f1be 0f19 	cmp.w	lr, #25
 23fdfee:	d804      	bhi.n	23fdffa <_strtol_l.constprop.0+0xc6>
 23fdff0:	3c57      	subs	r4, #87	; 0x57
 23fdff2:	e7db      	b.n	23fdfac <_strtol_l.constprop.0+0x78>
 23fdff4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fdff8:	e7e6      	b.n	23fdfc8 <_strtol_l.constprop.0+0x94>
 23fdffa:	f1bc 0f00 	cmp.w	ip, #0
 23fdffe:	da05      	bge.n	23fe00c <_strtol_l.constprop.0+0xd8>
 23fe000:	2322      	movs	r3, #34	; 0x22
 23fe002:	4646      	mov	r6, r8
 23fe004:	6003      	str	r3, [r0, #0]
 23fe006:	b942      	cbnz	r2, 23fe01a <_strtol_l.constprop.0+0xe6>
 23fe008:	4630      	mov	r0, r6
 23fe00a:	e79e      	b.n	23fdf4a <_strtol_l.constprop.0+0x16>
 23fe00c:	b107      	cbz	r7, 23fe010 <_strtol_l.constprop.0+0xdc>
 23fe00e:	4276      	negs	r6, r6
 23fe010:	2a00      	cmp	r2, #0
 23fe012:	d0f9      	beq.n	23fe008 <_strtol_l.constprop.0+0xd4>
 23fe014:	f1bc 0f00 	cmp.w	ip, #0
 23fe018:	d000      	beq.n	23fe01c <_strtol_l.constprop.0+0xe8>
 23fe01a:	1e69      	subs	r1, r5, #1
 23fe01c:	6011      	str	r1, [r2, #0]
 23fe01e:	e7f3      	b.n	23fe008 <_strtol_l.constprop.0+0xd4>
 23fe020:	2430      	movs	r4, #48	; 0x30
 23fe022:	2b00      	cmp	r3, #0
 23fe024:	d1b1      	bne.n	23fdf8a <_strtol_l.constprop.0+0x56>
 23fe026:	2308      	movs	r3, #8
 23fe028:	e7af      	b.n	23fdf8a <_strtol_l.constprop.0+0x56>
 23fe02a:	2c30      	cmp	r4, #48	; 0x30
 23fe02c:	d0a5      	beq.n	23fdf7a <_strtol_l.constprop.0+0x46>
 23fe02e:	230a      	movs	r3, #10
 23fe030:	e7ab      	b.n	23fdf8a <_strtol_l.constprop.0+0x56>
 23fe032:	bf00      	nop
 23fe034:	023ffce1 	.word	0x023ffce1

023fe038 <strtol>:
 23fe038:	4613      	mov	r3, r2
 23fe03a:	460a      	mov	r2, r1
 23fe03c:	4601      	mov	r1, r0
 23fe03e:	4802      	ldr	r0, [pc, #8]	; (23fe048 <strtol+0x10>)
 23fe040:	6800      	ldr	r0, [r0, #0]
 23fe042:	f7ff bf77 	b.w	23fdf34 <_strtol_l.constprop.0>
 23fe046:	bf00      	nop
 23fe048:	1007ac44 	.word	0x1007ac44

023fe04c <__register_exitproc>:
 23fe04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fe050:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fe110 <__register_exitproc+0xc4>
 23fe054:	4606      	mov	r6, r0
 23fe056:	461f      	mov	r7, r3
 23fe058:	460d      	mov	r5, r1
 23fe05a:	f8d8 0000 	ldr.w	r0, [r8]
 23fe05e:	4691      	mov	r9, r2
 23fe060:	f000 fbc6 	bl	23fe7f0 <__retarget_lock_acquire_recursive>
 23fe064:	4b26      	ldr	r3, [pc, #152]	; (23fe100 <__register_exitproc+0xb4>)
 23fe066:	681c      	ldr	r4, [r3, #0]
 23fe068:	b934      	cbnz	r4, 23fe078 <__register_exitproc+0x2c>
 23fe06a:	4c26      	ldr	r4, [pc, #152]	; (23fe104 <__register_exitproc+0xb8>)
 23fe06c:	601c      	str	r4, [r3, #0]
 23fe06e:	4b26      	ldr	r3, [pc, #152]	; (23fe108 <__register_exitproc+0xbc>)
 23fe070:	b113      	cbz	r3, 23fe078 <__register_exitproc+0x2c>
 23fe072:	681b      	ldr	r3, [r3, #0]
 23fe074:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fe078:	6863      	ldr	r3, [r4, #4]
 23fe07a:	2b1f      	cmp	r3, #31
 23fe07c:	dd07      	ble.n	23fe08e <__register_exitproc+0x42>
 23fe07e:	f8d8 0000 	ldr.w	r0, [r8]
 23fe082:	f000 fbb7 	bl	23fe7f4 <__retarget_lock_release_recursive>
 23fe086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fe08e:	b35e      	cbz	r6, 23fe0e8 <__register_exitproc+0x9c>
 23fe090:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fe094:	b988      	cbnz	r0, 23fe0ba <__register_exitproc+0x6e>
 23fe096:	4b1d      	ldr	r3, [pc, #116]	; (23fe10c <__register_exitproc+0xc0>)
 23fe098:	b923      	cbnz	r3, 23fe0a4 <__register_exitproc+0x58>
 23fe09a:	f8d8 0000 	ldr.w	r0, [r8]
 23fe09e:	f000 fba8 	bl	23fe7f2 <__retarget_lock_release>
 23fe0a2:	e7f0      	b.n	23fe086 <__register_exitproc+0x3a>
 23fe0a4:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fe0a8:	f7fa fdde 	bl	23f8c68 <malloc>
 23fe0ac:	2800      	cmp	r0, #0
 23fe0ae:	d0f4      	beq.n	23fe09a <__register_exitproc+0x4e>
 23fe0b0:	2300      	movs	r3, #0
 23fe0b2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fe0b6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fe0ba:	6863      	ldr	r3, [r4, #4]
 23fe0bc:	2201      	movs	r2, #1
 23fe0be:	2e02      	cmp	r6, #2
 23fe0c0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fe0c4:	fa02 f203 	lsl.w	r2, r2, r3
 23fe0c8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fe0cc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fe0d0:	ea43 0302 	orr.w	r3, r3, r2
 23fe0d4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fe0d8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fe0dc:	bf02      	ittt	eq
 23fe0de:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fe0e2:	4313      	orreq	r3, r2
 23fe0e4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fe0e8:	6863      	ldr	r3, [r4, #4]
 23fe0ea:	f8d8 0000 	ldr.w	r0, [r8]
 23fe0ee:	1c5a      	adds	r2, r3, #1
 23fe0f0:	3302      	adds	r3, #2
 23fe0f2:	6062      	str	r2, [r4, #4]
 23fe0f4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fe0f8:	f000 fb7c 	bl	23fe7f4 <__retarget_lock_release_recursive>
 23fe0fc:	2000      	movs	r0, #0
 23fe0fe:	e7c4      	b.n	23fe08a <__register_exitproc+0x3e>
 23fe100:	1007aff4 	.word	0x1007aff4
 23fe104:	1007af68 	.word	0x1007af68
 23fe108:	00000000 	.word	0x00000000
 23fe10c:	023f8c69 	.word	0x023f8c69
 23fe110:	1007aca8 	.word	0x1007aca8

023fe114 <rshift>:
 23fe114:	6903      	ldr	r3, [r0, #16]
 23fe116:	114a      	asrs	r2, r1, #5
 23fe118:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 23fe11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe120:	f100 0414 	add.w	r4, r0, #20
 23fe124:	dd45      	ble.n	23fe1b2 <rshift+0x9e>
 23fe126:	f011 011f 	ands.w	r1, r1, #31
 23fe12a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 23fe12e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 23fe132:	d10c      	bne.n	23fe14e <rshift+0x3a>
 23fe134:	f100 0710 	add.w	r7, r0, #16
 23fe138:	4629      	mov	r1, r5
 23fe13a:	42b1      	cmp	r1, r6
 23fe13c:	d334      	bcc.n	23fe1a8 <rshift+0x94>
 23fe13e:	1a9b      	subs	r3, r3, r2
 23fe140:	1eea      	subs	r2, r5, #3
 23fe142:	009b      	lsls	r3, r3, #2
 23fe144:	4296      	cmp	r6, r2
 23fe146:	bf38      	it	cc
 23fe148:	2300      	movcc	r3, #0
 23fe14a:	4423      	add	r3, r4
 23fe14c:	e015      	b.n	23fe17a <rshift+0x66>
 23fe14e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 23fe152:	f1c1 0820 	rsb	r8, r1, #32
 23fe156:	f105 0e04 	add.w	lr, r5, #4
 23fe15a:	46a1      	mov	r9, r4
 23fe15c:	40cf      	lsrs	r7, r1
 23fe15e:	4576      	cmp	r6, lr
 23fe160:	46f4      	mov	ip, lr
 23fe162:	d815      	bhi.n	23fe190 <rshift+0x7c>
 23fe164:	1a9a      	subs	r2, r3, r2
 23fe166:	3501      	adds	r5, #1
 23fe168:	0092      	lsls	r2, r2, #2
 23fe16a:	3a04      	subs	r2, #4
 23fe16c:	42ae      	cmp	r6, r5
 23fe16e:	bf38      	it	cc
 23fe170:	2200      	movcc	r2, #0
 23fe172:	18a3      	adds	r3, r4, r2
 23fe174:	50a7      	str	r7, [r4, r2]
 23fe176:	b107      	cbz	r7, 23fe17a <rshift+0x66>
 23fe178:	3304      	adds	r3, #4
 23fe17a:	1b1a      	subs	r2, r3, r4
 23fe17c:	42a3      	cmp	r3, r4
 23fe17e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 23fe182:	bf08      	it	eq
 23fe184:	2300      	moveq	r3, #0
 23fe186:	6102      	str	r2, [r0, #16]
 23fe188:	bf08      	it	eq
 23fe18a:	6143      	streq	r3, [r0, #20]
 23fe18c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe190:	f8dc c000 	ldr.w	ip, [ip]
 23fe194:	fa0c fc08 	lsl.w	ip, ip, r8
 23fe198:	ea4c 0707 	orr.w	r7, ip, r7
 23fe19c:	f849 7b04 	str.w	r7, [r9], #4
 23fe1a0:	f85e 7b04 	ldr.w	r7, [lr], #4
 23fe1a4:	40cf      	lsrs	r7, r1
 23fe1a6:	e7da      	b.n	23fe15e <rshift+0x4a>
 23fe1a8:	f851 cb04 	ldr.w	ip, [r1], #4
 23fe1ac:	f847 cf04 	str.w	ip, [r7, #4]!
 23fe1b0:	e7c3      	b.n	23fe13a <rshift+0x26>
 23fe1b2:	4623      	mov	r3, r4
 23fe1b4:	e7e1      	b.n	23fe17a <rshift+0x66>

023fe1b6 <__hexdig_fun>:
 23fe1b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fe1ba:	2b09      	cmp	r3, #9
 23fe1bc:	d802      	bhi.n	23fe1c4 <__hexdig_fun+0xe>
 23fe1be:	3820      	subs	r0, #32
 23fe1c0:	b2c0      	uxtb	r0, r0
 23fe1c2:	4770      	bx	lr
 23fe1c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 23fe1c8:	2b05      	cmp	r3, #5
 23fe1ca:	d801      	bhi.n	23fe1d0 <__hexdig_fun+0x1a>
 23fe1cc:	3847      	subs	r0, #71	; 0x47
 23fe1ce:	e7f7      	b.n	23fe1c0 <__hexdig_fun+0xa>
 23fe1d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 23fe1d4:	2b05      	cmp	r3, #5
 23fe1d6:	d801      	bhi.n	23fe1dc <__hexdig_fun+0x26>
 23fe1d8:	3827      	subs	r0, #39	; 0x27
 23fe1da:	e7f1      	b.n	23fe1c0 <__hexdig_fun+0xa>
 23fe1dc:	2000      	movs	r0, #0
 23fe1de:	4770      	bx	lr

023fe1e0 <__gethex>:
 23fe1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe1e4:	ed2d 8b02 	vpush	{d8}
 23fe1e8:	b089      	sub	sp, #36	; 0x24
 23fe1ea:	ee08 0a10 	vmov	s16, r0
 23fe1ee:	468b      	mov	fp, r1
 23fe1f0:	4690      	mov	r8, r2
 23fe1f2:	9304      	str	r3, [sp, #16]
 23fe1f4:	4bb2      	ldr	r3, [pc, #712]	; (23fe4c0 <__gethex+0x2e0>)
 23fe1f6:	681b      	ldr	r3, [r3, #0]
 23fe1f8:	4618      	mov	r0, r3
 23fe1fa:	9301      	str	r3, [sp, #4]
 23fe1fc:	f7f7 fe86 	bl	23f5f0c <strlen>
 23fe200:	9b01      	ldr	r3, [sp, #4]
 23fe202:	f8db 2000 	ldr.w	r2, [fp]
 23fe206:	4682      	mov	sl, r0
 23fe208:	4403      	add	r3, r0
 23fe20a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 23fe20e:	9305      	str	r3, [sp, #20]
 23fe210:	1c93      	adds	r3, r2, #2
 23fe212:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 23fe216:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 23fe21a:	32fe      	adds	r2, #254	; 0xfe
 23fe21c:	18d1      	adds	r1, r2, r3
 23fe21e:	461f      	mov	r7, r3
 23fe220:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe224:	9100      	str	r1, [sp, #0]
 23fe226:	2830      	cmp	r0, #48	; 0x30
 23fe228:	d0f8      	beq.n	23fe21c <__gethex+0x3c>
 23fe22a:	f7ff ffc4 	bl	23fe1b6 <__hexdig_fun>
 23fe22e:	4604      	mov	r4, r0
 23fe230:	2800      	cmp	r0, #0
 23fe232:	d139      	bne.n	23fe2a8 <__gethex+0xc8>
 23fe234:	4652      	mov	r2, sl
 23fe236:	9901      	ldr	r1, [sp, #4]
 23fe238:	4638      	mov	r0, r7
 23fe23a:	f7ff f812 	bl	23fd262 <strncmp>
 23fe23e:	4605      	mov	r5, r0
 23fe240:	2800      	cmp	r0, #0
 23fe242:	d167      	bne.n	23fe314 <__gethex+0x134>
 23fe244:	f817 000a 	ldrb.w	r0, [r7, sl]
 23fe248:	eb07 060a 	add.w	r6, r7, sl
 23fe24c:	f7ff ffb3 	bl	23fe1b6 <__hexdig_fun>
 23fe250:	2800      	cmp	r0, #0
 23fe252:	d061      	beq.n	23fe318 <__gethex+0x138>
 23fe254:	4633      	mov	r3, r6
 23fe256:	7818      	ldrb	r0, [r3, #0]
 23fe258:	461f      	mov	r7, r3
 23fe25a:	3301      	adds	r3, #1
 23fe25c:	2830      	cmp	r0, #48	; 0x30
 23fe25e:	d0fa      	beq.n	23fe256 <__gethex+0x76>
 23fe260:	f7ff ffa9 	bl	23fe1b6 <__hexdig_fun>
 23fe264:	fab0 f480 	clz	r4, r0
 23fe268:	2301      	movs	r3, #1
 23fe26a:	4635      	mov	r5, r6
 23fe26c:	0964      	lsrs	r4, r4, #5
 23fe26e:	9300      	str	r3, [sp, #0]
 23fe270:	463a      	mov	r2, r7
 23fe272:	4616      	mov	r6, r2
 23fe274:	3201      	adds	r2, #1
 23fe276:	7830      	ldrb	r0, [r6, #0]
 23fe278:	f7ff ff9d 	bl	23fe1b6 <__hexdig_fun>
 23fe27c:	2800      	cmp	r0, #0
 23fe27e:	d1f8      	bne.n	23fe272 <__gethex+0x92>
 23fe280:	4652      	mov	r2, sl
 23fe282:	9901      	ldr	r1, [sp, #4]
 23fe284:	4630      	mov	r0, r6
 23fe286:	f7fe ffec 	bl	23fd262 <strncmp>
 23fe28a:	b980      	cbnz	r0, 23fe2ae <__gethex+0xce>
 23fe28c:	b94d      	cbnz	r5, 23fe2a2 <__gethex+0xc2>
 23fe28e:	eb06 050a 	add.w	r5, r6, sl
 23fe292:	462a      	mov	r2, r5
 23fe294:	4616      	mov	r6, r2
 23fe296:	3201      	adds	r2, #1
 23fe298:	7830      	ldrb	r0, [r6, #0]
 23fe29a:	f7ff ff8c 	bl	23fe1b6 <__hexdig_fun>
 23fe29e:	2800      	cmp	r0, #0
 23fe2a0:	d1f8      	bne.n	23fe294 <__gethex+0xb4>
 23fe2a2:	1bad      	subs	r5, r5, r6
 23fe2a4:	00ad      	lsls	r5, r5, #2
 23fe2a6:	e004      	b.n	23fe2b2 <__gethex+0xd2>
 23fe2a8:	2400      	movs	r4, #0
 23fe2aa:	4625      	mov	r5, r4
 23fe2ac:	e7e0      	b.n	23fe270 <__gethex+0x90>
 23fe2ae:	2d00      	cmp	r5, #0
 23fe2b0:	d1f7      	bne.n	23fe2a2 <__gethex+0xc2>
 23fe2b2:	7833      	ldrb	r3, [r6, #0]
 23fe2b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 23fe2b8:	2b50      	cmp	r3, #80	; 0x50
 23fe2ba:	d13b      	bne.n	23fe334 <__gethex+0x154>
 23fe2bc:	7873      	ldrb	r3, [r6, #1]
 23fe2be:	2b2b      	cmp	r3, #43	; 0x2b
 23fe2c0:	d02c      	beq.n	23fe31c <__gethex+0x13c>
 23fe2c2:	2b2d      	cmp	r3, #45	; 0x2d
 23fe2c4:	d02e      	beq.n	23fe324 <__gethex+0x144>
 23fe2c6:	1c71      	adds	r1, r6, #1
 23fe2c8:	f04f 0900 	mov.w	r9, #0
 23fe2cc:	7808      	ldrb	r0, [r1, #0]
 23fe2ce:	f7ff ff72 	bl	23fe1b6 <__hexdig_fun>
 23fe2d2:	1e43      	subs	r3, r0, #1
 23fe2d4:	b2db      	uxtb	r3, r3
 23fe2d6:	2b18      	cmp	r3, #24
 23fe2d8:	d82c      	bhi.n	23fe334 <__gethex+0x154>
 23fe2da:	f1a0 0210 	sub.w	r2, r0, #16
 23fe2de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 23fe2e2:	f7ff ff68 	bl	23fe1b6 <__hexdig_fun>
 23fe2e6:	1e43      	subs	r3, r0, #1
 23fe2e8:	b2db      	uxtb	r3, r3
 23fe2ea:	2b18      	cmp	r3, #24
 23fe2ec:	d91d      	bls.n	23fe32a <__gethex+0x14a>
 23fe2ee:	f1b9 0f00 	cmp.w	r9, #0
 23fe2f2:	d000      	beq.n	23fe2f6 <__gethex+0x116>
 23fe2f4:	4252      	negs	r2, r2
 23fe2f6:	4415      	add	r5, r2
 23fe2f8:	f8cb 1000 	str.w	r1, [fp]
 23fe2fc:	b1e4      	cbz	r4, 23fe338 <__gethex+0x158>
 23fe2fe:	9b00      	ldr	r3, [sp, #0]
 23fe300:	2b00      	cmp	r3, #0
 23fe302:	bf14      	ite	ne
 23fe304:	2700      	movne	r7, #0
 23fe306:	2706      	moveq	r7, #6
 23fe308:	4638      	mov	r0, r7
 23fe30a:	b009      	add	sp, #36	; 0x24
 23fe30c:	ecbd 8b02 	vpop	{d8}
 23fe310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe314:	463e      	mov	r6, r7
 23fe316:	4625      	mov	r5, r4
 23fe318:	2401      	movs	r4, #1
 23fe31a:	e7ca      	b.n	23fe2b2 <__gethex+0xd2>
 23fe31c:	f04f 0900 	mov.w	r9, #0
 23fe320:	1cb1      	adds	r1, r6, #2
 23fe322:	e7d3      	b.n	23fe2cc <__gethex+0xec>
 23fe324:	f04f 0901 	mov.w	r9, #1
 23fe328:	e7fa      	b.n	23fe320 <__gethex+0x140>
 23fe32a:	230a      	movs	r3, #10
 23fe32c:	fb03 0202 	mla	r2, r3, r2, r0
 23fe330:	3a10      	subs	r2, #16
 23fe332:	e7d4      	b.n	23fe2de <__gethex+0xfe>
 23fe334:	4631      	mov	r1, r6
 23fe336:	e7df      	b.n	23fe2f8 <__gethex+0x118>
 23fe338:	1bf3      	subs	r3, r6, r7
 23fe33a:	4621      	mov	r1, r4
 23fe33c:	3b01      	subs	r3, #1
 23fe33e:	2b07      	cmp	r3, #7
 23fe340:	dc0b      	bgt.n	23fe35a <__gethex+0x17a>
 23fe342:	ee18 0a10 	vmov	r0, s16
 23fe346:	f000 fa69 	bl	23fe81c <_Balloc>
 23fe34a:	4604      	mov	r4, r0
 23fe34c:	b940      	cbnz	r0, 23fe360 <__gethex+0x180>
 23fe34e:	4b5d      	ldr	r3, [pc, #372]	; (23fe4c4 <__gethex+0x2e4>)
 23fe350:	4602      	mov	r2, r0
 23fe352:	21de      	movs	r1, #222	; 0xde
 23fe354:	485c      	ldr	r0, [pc, #368]	; (23fe4c8 <__gethex+0x2e8>)
 23fe356:	f7fa fcf7 	bl	23f8d48 <__assert_func>
 23fe35a:	3101      	adds	r1, #1
 23fe35c:	105b      	asrs	r3, r3, #1
 23fe35e:	e7ee      	b.n	23fe33e <__gethex+0x15e>
 23fe360:	f100 0914 	add.w	r9, r0, #20
 23fe364:	f04f 0b00 	mov.w	fp, #0
 23fe368:	f1ca 0301 	rsb	r3, sl, #1
 23fe36c:	f8cd 9008 	str.w	r9, [sp, #8]
 23fe370:	f8cd b000 	str.w	fp, [sp]
 23fe374:	9306      	str	r3, [sp, #24]
 23fe376:	42b7      	cmp	r7, r6
 23fe378:	d340      	bcc.n	23fe3fc <__gethex+0x21c>
 23fe37a:	9802      	ldr	r0, [sp, #8]
 23fe37c:	9b00      	ldr	r3, [sp, #0]
 23fe37e:	f840 3b04 	str.w	r3, [r0], #4
 23fe382:	eba0 0009 	sub.w	r0, r0, r9
 23fe386:	1080      	asrs	r0, r0, #2
 23fe388:	0146      	lsls	r6, r0, #5
 23fe38a:	6120      	str	r0, [r4, #16]
 23fe38c:	4618      	mov	r0, r3
 23fe38e:	f000 fb39 	bl	23fea04 <__hi0bits>
 23fe392:	1a30      	subs	r0, r6, r0
 23fe394:	f8d8 6000 	ldr.w	r6, [r8]
 23fe398:	42b0      	cmp	r0, r6
 23fe39a:	dd63      	ble.n	23fe464 <__gethex+0x284>
 23fe39c:	1b87      	subs	r7, r0, r6
 23fe39e:	4620      	mov	r0, r4
 23fe3a0:	4639      	mov	r1, r7
 23fe3a2:	f000 fedf 	bl	23ff164 <__any_on>
 23fe3a6:	4682      	mov	sl, r0
 23fe3a8:	b1a8      	cbz	r0, 23fe3d6 <__gethex+0x1f6>
 23fe3aa:	1e7b      	subs	r3, r7, #1
 23fe3ac:	f04f 0a01 	mov.w	sl, #1
 23fe3b0:	1159      	asrs	r1, r3, #5
 23fe3b2:	f003 021f 	and.w	r2, r3, #31
 23fe3b6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 23fe3ba:	fa0a f202 	lsl.w	r2, sl, r2
 23fe3be:	420a      	tst	r2, r1
 23fe3c0:	d009      	beq.n	23fe3d6 <__gethex+0x1f6>
 23fe3c2:	4553      	cmp	r3, sl
 23fe3c4:	dd05      	ble.n	23fe3d2 <__gethex+0x1f2>
 23fe3c6:	1eb9      	subs	r1, r7, #2
 23fe3c8:	4620      	mov	r0, r4
 23fe3ca:	f000 fecb 	bl	23ff164 <__any_on>
 23fe3ce:	2800      	cmp	r0, #0
 23fe3d0:	d145      	bne.n	23fe45e <__gethex+0x27e>
 23fe3d2:	f04f 0a02 	mov.w	sl, #2
 23fe3d6:	443d      	add	r5, r7
 23fe3d8:	4639      	mov	r1, r7
 23fe3da:	4620      	mov	r0, r4
 23fe3dc:	f7ff fe9a 	bl	23fe114 <rshift>
 23fe3e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23fe3e4:	42ab      	cmp	r3, r5
 23fe3e6:	da4c      	bge.n	23fe482 <__gethex+0x2a2>
 23fe3e8:	4621      	mov	r1, r4
 23fe3ea:	ee18 0a10 	vmov	r0, s16
 23fe3ee:	f000 fa55 	bl	23fe89c <_Bfree>
 23fe3f2:	2300      	movs	r3, #0
 23fe3f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23fe3f6:	27a3      	movs	r7, #163	; 0xa3
 23fe3f8:	6013      	str	r3, [r2, #0]
 23fe3fa:	e785      	b.n	23fe308 <__gethex+0x128>
 23fe3fc:	1e73      	subs	r3, r6, #1
 23fe3fe:	9a05      	ldr	r2, [sp, #20]
 23fe400:	9303      	str	r3, [sp, #12]
 23fe402:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 23fe406:	4293      	cmp	r3, r2
 23fe408:	d019      	beq.n	23fe43e <__gethex+0x25e>
 23fe40a:	f1bb 0f20 	cmp.w	fp, #32
 23fe40e:	d107      	bne.n	23fe420 <__gethex+0x240>
 23fe410:	9b02      	ldr	r3, [sp, #8]
 23fe412:	9a00      	ldr	r2, [sp, #0]
 23fe414:	f843 2b04 	str.w	r2, [r3], #4
 23fe418:	9302      	str	r3, [sp, #8]
 23fe41a:	2300      	movs	r3, #0
 23fe41c:	469b      	mov	fp, r3
 23fe41e:	9300      	str	r3, [sp, #0]
 23fe420:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 23fe424:	f7ff fec7 	bl	23fe1b6 <__hexdig_fun>
 23fe428:	f000 000f 	and.w	r0, r0, #15
 23fe42c:	9b00      	ldr	r3, [sp, #0]
 23fe42e:	fa00 f00b 	lsl.w	r0, r0, fp
 23fe432:	f10b 0b04 	add.w	fp, fp, #4
 23fe436:	4303      	orrs	r3, r0
 23fe438:	9300      	str	r3, [sp, #0]
 23fe43a:	9b03      	ldr	r3, [sp, #12]
 23fe43c:	e00d      	b.n	23fe45a <__gethex+0x27a>
 23fe43e:	9b03      	ldr	r3, [sp, #12]
 23fe440:	9a06      	ldr	r2, [sp, #24]
 23fe442:	4413      	add	r3, r2
 23fe444:	42bb      	cmp	r3, r7
 23fe446:	d3e0      	bcc.n	23fe40a <__gethex+0x22a>
 23fe448:	4618      	mov	r0, r3
 23fe44a:	4652      	mov	r2, sl
 23fe44c:	9901      	ldr	r1, [sp, #4]
 23fe44e:	9307      	str	r3, [sp, #28]
 23fe450:	f7fe ff07 	bl	23fd262 <strncmp>
 23fe454:	9b07      	ldr	r3, [sp, #28]
 23fe456:	2800      	cmp	r0, #0
 23fe458:	d1d7      	bne.n	23fe40a <__gethex+0x22a>
 23fe45a:	461e      	mov	r6, r3
 23fe45c:	e78b      	b.n	23fe376 <__gethex+0x196>
 23fe45e:	f04f 0a03 	mov.w	sl, #3
 23fe462:	e7b8      	b.n	23fe3d6 <__gethex+0x1f6>
 23fe464:	da0a      	bge.n	23fe47c <__gethex+0x29c>
 23fe466:	1a37      	subs	r7, r6, r0
 23fe468:	4621      	mov	r1, r4
 23fe46a:	ee18 0a10 	vmov	r0, s16
 23fe46e:	463a      	mov	r2, r7
 23fe470:	1bed      	subs	r5, r5, r7
 23fe472:	f000 fc2f 	bl	23fecd4 <__lshift>
 23fe476:	4604      	mov	r4, r0
 23fe478:	f100 0914 	add.w	r9, r0, #20
 23fe47c:	f04f 0a00 	mov.w	sl, #0
 23fe480:	e7ae      	b.n	23fe3e0 <__gethex+0x200>
 23fe482:	f8d8 0004 	ldr.w	r0, [r8, #4]
 23fe486:	42a8      	cmp	r0, r5
 23fe488:	dd72      	ble.n	23fe570 <__gethex+0x390>
 23fe48a:	1b45      	subs	r5, r0, r5
 23fe48c:	42ae      	cmp	r6, r5
 23fe48e:	dc35      	bgt.n	23fe4fc <__gethex+0x31c>
 23fe490:	f8d8 300c 	ldr.w	r3, [r8, #12]
 23fe494:	2b02      	cmp	r3, #2
 23fe496:	d029      	beq.n	23fe4ec <__gethex+0x30c>
 23fe498:	2b03      	cmp	r3, #3
 23fe49a:	d02b      	beq.n	23fe4f4 <__gethex+0x314>
 23fe49c:	2b01      	cmp	r3, #1
 23fe49e:	d11b      	bne.n	23fe4d8 <__gethex+0x2f8>
 23fe4a0:	42ae      	cmp	r6, r5
 23fe4a2:	d119      	bne.n	23fe4d8 <__gethex+0x2f8>
 23fe4a4:	2e01      	cmp	r6, #1
 23fe4a6:	d111      	bne.n	23fe4cc <__gethex+0x2ec>
 23fe4a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23fe4ac:	2762      	movs	r7, #98	; 0x62
 23fe4ae:	9a04      	ldr	r2, [sp, #16]
 23fe4b0:	6013      	str	r3, [r2, #0]
 23fe4b2:	2301      	movs	r3, #1
 23fe4b4:	6123      	str	r3, [r4, #16]
 23fe4b6:	f8c9 3000 	str.w	r3, [r9]
 23fe4ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fe4bc:	601c      	str	r4, [r3, #0]
 23fe4be:	e723      	b.n	23fe308 <__gethex+0x128>
 23fe4c0:	023ffe58 	.word	0x023ffe58
 23fe4c4:	023ffde1 	.word	0x023ffde1
 23fe4c8:	023ffdf2 	.word	0x023ffdf2
 23fe4cc:	1e71      	subs	r1, r6, #1
 23fe4ce:	4620      	mov	r0, r4
 23fe4d0:	f000 fe48 	bl	23ff164 <__any_on>
 23fe4d4:	2800      	cmp	r0, #0
 23fe4d6:	d1e7      	bne.n	23fe4a8 <__gethex+0x2c8>
 23fe4d8:	4621      	mov	r1, r4
 23fe4da:	ee18 0a10 	vmov	r0, s16
 23fe4de:	f000 f9dd 	bl	23fe89c <_Bfree>
 23fe4e2:	2300      	movs	r3, #0
 23fe4e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23fe4e6:	2750      	movs	r7, #80	; 0x50
 23fe4e8:	6013      	str	r3, [r2, #0]
 23fe4ea:	e70d      	b.n	23fe308 <__gethex+0x128>
 23fe4ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe4ee:	2b00      	cmp	r3, #0
 23fe4f0:	d1f2      	bne.n	23fe4d8 <__gethex+0x2f8>
 23fe4f2:	e7d9      	b.n	23fe4a8 <__gethex+0x2c8>
 23fe4f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe4f6:	2b00      	cmp	r3, #0
 23fe4f8:	d1d6      	bne.n	23fe4a8 <__gethex+0x2c8>
 23fe4fa:	e7ed      	b.n	23fe4d8 <__gethex+0x2f8>
 23fe4fc:	1e6f      	subs	r7, r5, #1
 23fe4fe:	f1ba 0f00 	cmp.w	sl, #0
 23fe502:	d132      	bne.n	23fe56a <__gethex+0x38a>
 23fe504:	b127      	cbz	r7, 23fe510 <__gethex+0x330>
 23fe506:	4639      	mov	r1, r7
 23fe508:	4620      	mov	r0, r4
 23fe50a:	f000 fe2b 	bl	23ff164 <__any_on>
 23fe50e:	4682      	mov	sl, r0
 23fe510:	117b      	asrs	r3, r7, #5
 23fe512:	2101      	movs	r1, #1
 23fe514:	f007 071f 	and.w	r7, r7, #31
 23fe518:	4620      	mov	r0, r4
 23fe51a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 23fe51e:	1b76      	subs	r6, r6, r5
 23fe520:	fa01 f707 	lsl.w	r7, r1, r7
 23fe524:	4629      	mov	r1, r5
 23fe526:	421f      	tst	r7, r3
 23fe528:	f04f 0702 	mov.w	r7, #2
 23fe52c:	bf18      	it	ne
 23fe52e:	f04a 0a02 	orrne.w	sl, sl, #2
 23fe532:	f7ff fdef 	bl	23fe114 <rshift>
 23fe536:	f8d8 5004 	ldr.w	r5, [r8, #4]
 23fe53a:	f1ba 0f00 	cmp.w	sl, #0
 23fe53e:	d048      	beq.n	23fe5d2 <__gethex+0x3f2>
 23fe540:	f8d8 300c 	ldr.w	r3, [r8, #12]
 23fe544:	2b02      	cmp	r3, #2
 23fe546:	d015      	beq.n	23fe574 <__gethex+0x394>
 23fe548:	2b03      	cmp	r3, #3
 23fe54a:	d017      	beq.n	23fe57c <__gethex+0x39c>
 23fe54c:	2b01      	cmp	r3, #1
 23fe54e:	d109      	bne.n	23fe564 <__gethex+0x384>
 23fe550:	f01a 0f02 	tst.w	sl, #2
 23fe554:	d006      	beq.n	23fe564 <__gethex+0x384>
 23fe556:	f8d9 0000 	ldr.w	r0, [r9]
 23fe55a:	ea4a 0a00 	orr.w	sl, sl, r0
 23fe55e:	f01a 0f01 	tst.w	sl, #1
 23fe562:	d10e      	bne.n	23fe582 <__gethex+0x3a2>
 23fe564:	f047 0710 	orr.w	r7, r7, #16
 23fe568:	e033      	b.n	23fe5d2 <__gethex+0x3f2>
 23fe56a:	f04f 0a01 	mov.w	sl, #1
 23fe56e:	e7cf      	b.n	23fe510 <__gethex+0x330>
 23fe570:	2701      	movs	r7, #1
 23fe572:	e7e2      	b.n	23fe53a <__gethex+0x35a>
 23fe574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe576:	f1c3 0301 	rsb	r3, r3, #1
 23fe57a:	9315      	str	r3, [sp, #84]	; 0x54
 23fe57c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe57e:	2b00      	cmp	r3, #0
 23fe580:	d0f0      	beq.n	23fe564 <__gethex+0x384>
 23fe582:	f8d4 b010 	ldr.w	fp, [r4, #16]
 23fe586:	f104 0314 	add.w	r3, r4, #20
 23fe58a:	f04f 0c00 	mov.w	ip, #0
 23fe58e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 23fe592:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 23fe596:	4618      	mov	r0, r3
 23fe598:	f853 2b04 	ldr.w	r2, [r3], #4
 23fe59c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 23fe5a0:	d01c      	beq.n	23fe5dc <__gethex+0x3fc>
 23fe5a2:	3201      	adds	r2, #1
 23fe5a4:	6002      	str	r2, [r0, #0]
 23fe5a6:	2f02      	cmp	r7, #2
 23fe5a8:	f104 0314 	add.w	r3, r4, #20
 23fe5ac:	d13f      	bne.n	23fe62e <__gethex+0x44e>
 23fe5ae:	f8d8 2000 	ldr.w	r2, [r8]
 23fe5b2:	3a01      	subs	r2, #1
 23fe5b4:	42b2      	cmp	r2, r6
 23fe5b6:	d10a      	bne.n	23fe5ce <__gethex+0x3ee>
 23fe5b8:	1171      	asrs	r1, r6, #5
 23fe5ba:	2201      	movs	r2, #1
 23fe5bc:	f006 061f 	and.w	r6, r6, #31
 23fe5c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 23fe5c4:	fa02 f606 	lsl.w	r6, r2, r6
 23fe5c8:	421e      	tst	r6, r3
 23fe5ca:	bf18      	it	ne
 23fe5cc:	4617      	movne	r7, r2
 23fe5ce:	f047 0720 	orr.w	r7, r7, #32
 23fe5d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fe5d4:	601c      	str	r4, [r3, #0]
 23fe5d6:	9b04      	ldr	r3, [sp, #16]
 23fe5d8:	601d      	str	r5, [r3, #0]
 23fe5da:	e695      	b.n	23fe308 <__gethex+0x128>
 23fe5dc:	4299      	cmp	r1, r3
 23fe5de:	f843 cc04 	str.w	ip, [r3, #-4]
 23fe5e2:	d8d8      	bhi.n	23fe596 <__gethex+0x3b6>
 23fe5e4:	68a3      	ldr	r3, [r4, #8]
 23fe5e6:	459b      	cmp	fp, r3
 23fe5e8:	db19      	blt.n	23fe61e <__gethex+0x43e>
 23fe5ea:	6861      	ldr	r1, [r4, #4]
 23fe5ec:	ee18 0a10 	vmov	r0, s16
 23fe5f0:	3101      	adds	r1, #1
 23fe5f2:	f000 f913 	bl	23fe81c <_Balloc>
 23fe5f6:	4681      	mov	r9, r0
 23fe5f8:	b918      	cbnz	r0, 23fe602 <__gethex+0x422>
 23fe5fa:	4b1b      	ldr	r3, [pc, #108]	; (23fe668 <__gethex+0x488>)
 23fe5fc:	4602      	mov	r2, r0
 23fe5fe:	2184      	movs	r1, #132	; 0x84
 23fe600:	e6a8      	b.n	23fe354 <__gethex+0x174>
 23fe602:	6922      	ldr	r2, [r4, #16]
 23fe604:	f104 010c 	add.w	r1, r4, #12
 23fe608:	300c      	adds	r0, #12
 23fe60a:	3202      	adds	r2, #2
 23fe60c:	0092      	lsls	r2, r2, #2
 23fe60e:	f7fe fdab 	bl	23fd168 <memcpy>
 23fe612:	4621      	mov	r1, r4
 23fe614:	464c      	mov	r4, r9
 23fe616:	ee18 0a10 	vmov	r0, s16
 23fe61a:	f000 f93f 	bl	23fe89c <_Bfree>
 23fe61e:	6923      	ldr	r3, [r4, #16]
 23fe620:	1c5a      	adds	r2, r3, #1
 23fe622:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 23fe626:	6122      	str	r2, [r4, #16]
 23fe628:	2201      	movs	r2, #1
 23fe62a:	615a      	str	r2, [r3, #20]
 23fe62c:	e7bb      	b.n	23fe5a6 <__gethex+0x3c6>
 23fe62e:	6922      	ldr	r2, [r4, #16]
 23fe630:	455a      	cmp	r2, fp
 23fe632:	dd0b      	ble.n	23fe64c <__gethex+0x46c>
 23fe634:	2101      	movs	r1, #1
 23fe636:	4620      	mov	r0, r4
 23fe638:	f7ff fd6c 	bl	23fe114 <rshift>
 23fe63c:	3501      	adds	r5, #1
 23fe63e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23fe642:	42ab      	cmp	r3, r5
 23fe644:	f6ff aed0 	blt.w	23fe3e8 <__gethex+0x208>
 23fe648:	2701      	movs	r7, #1
 23fe64a:	e7c0      	b.n	23fe5ce <__gethex+0x3ee>
 23fe64c:	f016 061f 	ands.w	r6, r6, #31
 23fe650:	d0fa      	beq.n	23fe648 <__gethex+0x468>
 23fe652:	4453      	add	r3, sl
 23fe654:	f1c6 0620 	rsb	r6, r6, #32
 23fe658:	f853 0c04 	ldr.w	r0, [r3, #-4]
 23fe65c:	f000 f9d2 	bl	23fea04 <__hi0bits>
 23fe660:	42b0      	cmp	r0, r6
 23fe662:	dbe7      	blt.n	23fe634 <__gethex+0x454>
 23fe664:	e7f0      	b.n	23fe648 <__gethex+0x468>
 23fe666:	bf00      	nop
 23fe668:	023ffde1 	.word	0x023ffde1

023fe66c <L_shift>:
 23fe66c:	f1c2 0208 	rsb	r2, r2, #8
 23fe670:	0092      	lsls	r2, r2, #2
 23fe672:	b570      	push	{r4, r5, r6, lr}
 23fe674:	f1c2 0620 	rsb	r6, r2, #32
 23fe678:	6843      	ldr	r3, [r0, #4]
 23fe67a:	6804      	ldr	r4, [r0, #0]
 23fe67c:	fa03 f506 	lsl.w	r5, r3, r6
 23fe680:	40d3      	lsrs	r3, r2
 23fe682:	432c      	orrs	r4, r5
 23fe684:	6004      	str	r4, [r0, #0]
 23fe686:	f840 3f04 	str.w	r3, [r0, #4]!
 23fe68a:	4288      	cmp	r0, r1
 23fe68c:	d3f4      	bcc.n	23fe678 <L_shift+0xc>
 23fe68e:	bd70      	pop	{r4, r5, r6, pc}

023fe690 <__match>:
 23fe690:	6803      	ldr	r3, [r0, #0]
 23fe692:	3301      	adds	r3, #1
 23fe694:	b530      	push	{r4, r5, lr}
 23fe696:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fe69a:	b914      	cbnz	r4, 23fe6a2 <__match+0x12>
 23fe69c:	6003      	str	r3, [r0, #0]
 23fe69e:	2001      	movs	r0, #1
 23fe6a0:	bd30      	pop	{r4, r5, pc}
 23fe6a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe6a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 23fe6aa:	2d19      	cmp	r5, #25
 23fe6ac:	bf98      	it	ls
 23fe6ae:	3220      	addls	r2, #32
 23fe6b0:	42a2      	cmp	r2, r4
 23fe6b2:	d0f0      	beq.n	23fe696 <__match+0x6>
 23fe6b4:	2000      	movs	r0, #0
 23fe6b6:	e7f3      	b.n	23fe6a0 <__match+0x10>

023fe6b8 <__hexnan>:
 23fe6b8:	680b      	ldr	r3, [r1, #0]
 23fe6ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe6be:	115e      	asrs	r6, r3, #5
 23fe6c0:	f013 031f 	ands.w	r3, r3, #31
 23fe6c4:	f04f 0500 	mov.w	r5, #0
 23fe6c8:	b087      	sub	sp, #28
 23fe6ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 23fe6ce:	4690      	mov	r8, r2
 23fe6d0:	4682      	mov	sl, r0
 23fe6d2:	6802      	ldr	r2, [r0, #0]
 23fe6d4:	bf18      	it	ne
 23fe6d6:	3604      	addne	r6, #4
 23fe6d8:	46ab      	mov	fp, r5
 23fe6da:	9301      	str	r3, [sp, #4]
 23fe6dc:	1f37      	subs	r7, r6, #4
 23fe6de:	f846 5c04 	str.w	r5, [r6, #-4]
 23fe6e2:	9502      	str	r5, [sp, #8]
 23fe6e4:	46b9      	mov	r9, r7
 23fe6e6:	463c      	mov	r4, r7
 23fe6e8:	1c53      	adds	r3, r2, #1
 23fe6ea:	7851      	ldrb	r1, [r2, #1]
 23fe6ec:	9303      	str	r3, [sp, #12]
 23fe6ee:	b341      	cbz	r1, 23fe742 <__hexnan+0x8a>
 23fe6f0:	4608      	mov	r0, r1
 23fe6f2:	9205      	str	r2, [sp, #20]
 23fe6f4:	9104      	str	r1, [sp, #16]
 23fe6f6:	f7ff fd5e 	bl	23fe1b6 <__hexdig_fun>
 23fe6fa:	2800      	cmp	r0, #0
 23fe6fc:	d14f      	bne.n	23fe79e <__hexnan+0xe6>
 23fe6fe:	9904      	ldr	r1, [sp, #16]
 23fe700:	9a05      	ldr	r2, [sp, #20]
 23fe702:	2920      	cmp	r1, #32
 23fe704:	d818      	bhi.n	23fe738 <__hexnan+0x80>
 23fe706:	9b02      	ldr	r3, [sp, #8]
 23fe708:	459b      	cmp	fp, r3
 23fe70a:	dd13      	ble.n	23fe734 <__hexnan+0x7c>
 23fe70c:	454c      	cmp	r4, r9
 23fe70e:	d206      	bcs.n	23fe71e <__hexnan+0x66>
 23fe710:	2d07      	cmp	r5, #7
 23fe712:	dc04      	bgt.n	23fe71e <__hexnan+0x66>
 23fe714:	462a      	mov	r2, r5
 23fe716:	4649      	mov	r1, r9
 23fe718:	4620      	mov	r0, r4
 23fe71a:	f7ff ffa7 	bl	23fe66c <L_shift>
 23fe71e:	4544      	cmp	r4, r8
 23fe720:	d94f      	bls.n	23fe7c2 <__hexnan+0x10a>
 23fe722:	2300      	movs	r3, #0
 23fe724:	f1a4 0904 	sub.w	r9, r4, #4
 23fe728:	f8cd b008 	str.w	fp, [sp, #8]
 23fe72c:	f844 3c04 	str.w	r3, [r4, #-4]
 23fe730:	461d      	mov	r5, r3
 23fe732:	464c      	mov	r4, r9
 23fe734:	9a03      	ldr	r2, [sp, #12]
 23fe736:	e7d7      	b.n	23fe6e8 <__hexnan+0x30>
 23fe738:	2929      	cmp	r1, #41	; 0x29
 23fe73a:	d155      	bne.n	23fe7e8 <__hexnan+0x130>
 23fe73c:	3202      	adds	r2, #2
 23fe73e:	f8ca 2000 	str.w	r2, [sl]
 23fe742:	f1bb 0f00 	cmp.w	fp, #0
 23fe746:	d04f      	beq.n	23fe7e8 <__hexnan+0x130>
 23fe748:	454c      	cmp	r4, r9
 23fe74a:	d206      	bcs.n	23fe75a <__hexnan+0xa2>
 23fe74c:	2d07      	cmp	r5, #7
 23fe74e:	dc04      	bgt.n	23fe75a <__hexnan+0xa2>
 23fe750:	462a      	mov	r2, r5
 23fe752:	4649      	mov	r1, r9
 23fe754:	4620      	mov	r0, r4
 23fe756:	f7ff ff89 	bl	23fe66c <L_shift>
 23fe75a:	4544      	cmp	r4, r8
 23fe75c:	d933      	bls.n	23fe7c6 <__hexnan+0x10e>
 23fe75e:	f1a8 0204 	sub.w	r2, r8, #4
 23fe762:	4623      	mov	r3, r4
 23fe764:	f853 1b04 	ldr.w	r1, [r3], #4
 23fe768:	429f      	cmp	r7, r3
 23fe76a:	f842 1f04 	str.w	r1, [r2, #4]!
 23fe76e:	d2f9      	bcs.n	23fe764 <__hexnan+0xac>
 23fe770:	1b3b      	subs	r3, r7, r4
 23fe772:	3e03      	subs	r6, #3
 23fe774:	3401      	adds	r4, #1
 23fe776:	2200      	movs	r2, #0
 23fe778:	f023 0303 	bic.w	r3, r3, #3
 23fe77c:	3304      	adds	r3, #4
 23fe77e:	42b4      	cmp	r4, r6
 23fe780:	bf88      	it	hi
 23fe782:	2304      	movhi	r3, #4
 23fe784:	4443      	add	r3, r8
 23fe786:	f843 2b04 	str.w	r2, [r3], #4
 23fe78a:	429f      	cmp	r7, r3
 23fe78c:	d2fb      	bcs.n	23fe786 <__hexnan+0xce>
 23fe78e:	683b      	ldr	r3, [r7, #0]
 23fe790:	b91b      	cbnz	r3, 23fe79a <__hexnan+0xe2>
 23fe792:	4547      	cmp	r7, r8
 23fe794:	d126      	bne.n	23fe7e4 <__hexnan+0x12c>
 23fe796:	2301      	movs	r3, #1
 23fe798:	603b      	str	r3, [r7, #0]
 23fe79a:	2005      	movs	r0, #5
 23fe79c:	e025      	b.n	23fe7ea <__hexnan+0x132>
 23fe79e:	3501      	adds	r5, #1
 23fe7a0:	f10b 0b01 	add.w	fp, fp, #1
 23fe7a4:	2d08      	cmp	r5, #8
 23fe7a6:	dd05      	ble.n	23fe7b4 <__hexnan+0xfc>
 23fe7a8:	4544      	cmp	r4, r8
 23fe7aa:	d9c3      	bls.n	23fe734 <__hexnan+0x7c>
 23fe7ac:	2300      	movs	r3, #0
 23fe7ae:	3c04      	subs	r4, #4
 23fe7b0:	2501      	movs	r5, #1
 23fe7b2:	6023      	str	r3, [r4, #0]
 23fe7b4:	6822      	ldr	r2, [r4, #0]
 23fe7b6:	f000 000f 	and.w	r0, r0, #15
 23fe7ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 23fe7be:	6022      	str	r2, [r4, #0]
 23fe7c0:	e7b8      	b.n	23fe734 <__hexnan+0x7c>
 23fe7c2:	2508      	movs	r5, #8
 23fe7c4:	e7b6      	b.n	23fe734 <__hexnan+0x7c>
 23fe7c6:	9b01      	ldr	r3, [sp, #4]
 23fe7c8:	2b00      	cmp	r3, #0
 23fe7ca:	d0e0      	beq.n	23fe78e <__hexnan+0xd6>
 23fe7cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fe7d0:	f1c3 0320 	rsb	r3, r3, #32
 23fe7d4:	fa22 f303 	lsr.w	r3, r2, r3
 23fe7d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 23fe7dc:	401a      	ands	r2, r3
 23fe7de:	f846 2c04 	str.w	r2, [r6, #-4]
 23fe7e2:	e7d4      	b.n	23fe78e <__hexnan+0xd6>
 23fe7e4:	3f04      	subs	r7, #4
 23fe7e6:	e7d2      	b.n	23fe78e <__hexnan+0xd6>
 23fe7e8:	2004      	movs	r0, #4
 23fe7ea:	b007      	add	sp, #28
 23fe7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fe7f0 <__retarget_lock_acquire_recursive>:
 23fe7f0:	4770      	bx	lr

023fe7f2 <__retarget_lock_release>:
 23fe7f2:	4770      	bx	lr

023fe7f4 <__retarget_lock_release_recursive>:
 23fe7f4:	4770      	bx	lr

023fe7f6 <__ascii_mbtowc>:
 23fe7f6:	b082      	sub	sp, #8
 23fe7f8:	b901      	cbnz	r1, 23fe7fc <__ascii_mbtowc+0x6>
 23fe7fa:	a901      	add	r1, sp, #4
 23fe7fc:	b142      	cbz	r2, 23fe810 <__ascii_mbtowc+0x1a>
 23fe7fe:	b14b      	cbz	r3, 23fe814 <__ascii_mbtowc+0x1e>
 23fe800:	7813      	ldrb	r3, [r2, #0]
 23fe802:	600b      	str	r3, [r1, #0]
 23fe804:	7812      	ldrb	r2, [r2, #0]
 23fe806:	1e10      	subs	r0, r2, #0
 23fe808:	bf18      	it	ne
 23fe80a:	2001      	movne	r0, #1
 23fe80c:	b002      	add	sp, #8
 23fe80e:	4770      	bx	lr
 23fe810:	4610      	mov	r0, r2
 23fe812:	e7fb      	b.n	23fe80c <__ascii_mbtowc+0x16>
 23fe814:	f06f 0001 	mvn.w	r0, #1
 23fe818:	e7f8      	b.n	23fe80c <__ascii_mbtowc+0x16>
	...

023fe81c <_Balloc>:
 23fe81c:	b570      	push	{r4, r5, r6, lr}
 23fe81e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 23fe820:	4604      	mov	r4, r0
 23fe822:	460d      	mov	r5, r1
 23fe824:	b976      	cbnz	r6, 23fe844 <_Balloc+0x28>
 23fe826:	2010      	movs	r0, #16
 23fe828:	f7fa fa1e 	bl	23f8c68 <malloc>
 23fe82c:	4602      	mov	r2, r0
 23fe82e:	6260      	str	r0, [r4, #36]	; 0x24
 23fe830:	b920      	cbnz	r0, 23fe83c <_Balloc+0x20>
 23fe832:	4b18      	ldr	r3, [pc, #96]	; (23fe894 <_Balloc+0x78>)
 23fe834:	2166      	movs	r1, #102	; 0x66
 23fe836:	4818      	ldr	r0, [pc, #96]	; (23fe898 <_Balloc+0x7c>)
 23fe838:	f7fa fa86 	bl	23f8d48 <__assert_func>
 23fe83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 23fe840:	6006      	str	r6, [r0, #0]
 23fe842:	60c6      	str	r6, [r0, #12]
 23fe844:	6a66      	ldr	r6, [r4, #36]	; 0x24
 23fe846:	68f3      	ldr	r3, [r6, #12]
 23fe848:	b183      	cbz	r3, 23fe86c <_Balloc+0x50>
 23fe84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fe84c:	68db      	ldr	r3, [r3, #12]
 23fe84e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 23fe852:	b9b8      	cbnz	r0, 23fe884 <_Balloc+0x68>
 23fe854:	2101      	movs	r1, #1
 23fe856:	4620      	mov	r0, r4
 23fe858:	fa01 f605 	lsl.w	r6, r1, r5
 23fe85c:	1d72      	adds	r2, r6, #5
 23fe85e:	0092      	lsls	r2, r2, #2
 23fe860:	f000 fca1 	bl	23ff1a6 <_calloc_r>
 23fe864:	b160      	cbz	r0, 23fe880 <_Balloc+0x64>
 23fe866:	e9c0 5601 	strd	r5, r6, [r0, #4]
 23fe86a:	e00e      	b.n	23fe88a <_Balloc+0x6e>
 23fe86c:	2221      	movs	r2, #33	; 0x21
 23fe86e:	2104      	movs	r1, #4
 23fe870:	4620      	mov	r0, r4
 23fe872:	f000 fc98 	bl	23ff1a6 <_calloc_r>
 23fe876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fe878:	60f0      	str	r0, [r6, #12]
 23fe87a:	68db      	ldr	r3, [r3, #12]
 23fe87c:	2b00      	cmp	r3, #0
 23fe87e:	d1e4      	bne.n	23fe84a <_Balloc+0x2e>
 23fe880:	2000      	movs	r0, #0
 23fe882:	bd70      	pop	{r4, r5, r6, pc}
 23fe884:	6802      	ldr	r2, [r0, #0]
 23fe886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 23fe88a:	2300      	movs	r3, #0
 23fe88c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 23fe890:	e7f7      	b.n	23fe882 <_Balloc+0x66>
 23fe892:	bf00      	nop
 23fe894:	023ffc11 	.word	0x023ffc11
 23fe898:	023ffe6a 	.word	0x023ffe6a

023fe89c <_Bfree>:
 23fe89c:	b570      	push	{r4, r5, r6, lr}
 23fe89e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 23fe8a0:	4605      	mov	r5, r0
 23fe8a2:	460c      	mov	r4, r1
 23fe8a4:	b976      	cbnz	r6, 23fe8c4 <_Bfree+0x28>
 23fe8a6:	2010      	movs	r0, #16
 23fe8a8:	f7fa f9de 	bl	23f8c68 <malloc>
 23fe8ac:	4602      	mov	r2, r0
 23fe8ae:	6268      	str	r0, [r5, #36]	; 0x24
 23fe8b0:	b920      	cbnz	r0, 23fe8bc <_Bfree+0x20>
 23fe8b2:	4b09      	ldr	r3, [pc, #36]	; (23fe8d8 <_Bfree+0x3c>)
 23fe8b4:	218a      	movs	r1, #138	; 0x8a
 23fe8b6:	4809      	ldr	r0, [pc, #36]	; (23fe8dc <_Bfree+0x40>)
 23fe8b8:	f7fa fa46 	bl	23f8d48 <__assert_func>
 23fe8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 23fe8c0:	6006      	str	r6, [r0, #0]
 23fe8c2:	60c6      	str	r6, [r0, #12]
 23fe8c4:	b13c      	cbz	r4, 23fe8d6 <_Bfree+0x3a>
 23fe8c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 23fe8c8:	6862      	ldr	r2, [r4, #4]
 23fe8ca:	68db      	ldr	r3, [r3, #12]
 23fe8cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 23fe8d0:	6021      	str	r1, [r4, #0]
 23fe8d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 23fe8d6:	bd70      	pop	{r4, r5, r6, pc}
 23fe8d8:	023ffc11 	.word	0x023ffc11
 23fe8dc:	023ffe6a 	.word	0x023ffe6a

023fe8e0 <__multadd>:
 23fe8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe8e4:	f101 0c14 	add.w	ip, r1, #20
 23fe8e8:	4607      	mov	r7, r0
 23fe8ea:	460c      	mov	r4, r1
 23fe8ec:	461e      	mov	r6, r3
 23fe8ee:	690d      	ldr	r5, [r1, #16]
 23fe8f0:	2000      	movs	r0, #0
 23fe8f2:	f8dc 3000 	ldr.w	r3, [ip]
 23fe8f6:	3001      	adds	r0, #1
 23fe8f8:	b299      	uxth	r1, r3
 23fe8fa:	4285      	cmp	r5, r0
 23fe8fc:	fb02 6101 	mla	r1, r2, r1, r6
 23fe900:	ea4f 4613 	mov.w	r6, r3, lsr #16
 23fe904:	ea4f 4311 	mov.w	r3, r1, lsr #16
 23fe908:	b289      	uxth	r1, r1
 23fe90a:	fb02 3306 	mla	r3, r2, r6, r3
 23fe90e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 23fe912:	ea4f 4613 	mov.w	r6, r3, lsr #16
 23fe916:	f84c 1b04 	str.w	r1, [ip], #4
 23fe91a:	dcea      	bgt.n	23fe8f2 <__multadd+0x12>
 23fe91c:	b30e      	cbz	r6, 23fe962 <__multadd+0x82>
 23fe91e:	68a3      	ldr	r3, [r4, #8]
 23fe920:	42ab      	cmp	r3, r5
 23fe922:	dc19      	bgt.n	23fe958 <__multadd+0x78>
 23fe924:	6861      	ldr	r1, [r4, #4]
 23fe926:	4638      	mov	r0, r7
 23fe928:	3101      	adds	r1, #1
 23fe92a:	f7ff ff77 	bl	23fe81c <_Balloc>
 23fe92e:	4680      	mov	r8, r0
 23fe930:	b928      	cbnz	r0, 23fe93e <__multadd+0x5e>
 23fe932:	4602      	mov	r2, r0
 23fe934:	4b0c      	ldr	r3, [pc, #48]	; (23fe968 <__multadd+0x88>)
 23fe936:	21b5      	movs	r1, #181	; 0xb5
 23fe938:	480c      	ldr	r0, [pc, #48]	; (23fe96c <__multadd+0x8c>)
 23fe93a:	f7fa fa05 	bl	23f8d48 <__assert_func>
 23fe93e:	6922      	ldr	r2, [r4, #16]
 23fe940:	f104 010c 	add.w	r1, r4, #12
 23fe944:	300c      	adds	r0, #12
 23fe946:	3202      	adds	r2, #2
 23fe948:	0092      	lsls	r2, r2, #2
 23fe94a:	f7fe fc0d 	bl	23fd168 <memcpy>
 23fe94e:	4621      	mov	r1, r4
 23fe950:	4644      	mov	r4, r8
 23fe952:	4638      	mov	r0, r7
 23fe954:	f7ff ffa2 	bl	23fe89c <_Bfree>
 23fe958:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 23fe95c:	3501      	adds	r5, #1
 23fe95e:	615e      	str	r6, [r3, #20]
 23fe960:	6125      	str	r5, [r4, #16]
 23fe962:	4620      	mov	r0, r4
 23fe964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe968:	023ffde1 	.word	0x023ffde1
 23fe96c:	023ffe6a 	.word	0x023ffe6a

023fe970 <__s2b>:
 23fe970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fe974:	4615      	mov	r5, r2
 23fe976:	461f      	mov	r7, r3
 23fe978:	2209      	movs	r2, #9
 23fe97a:	3308      	adds	r3, #8
 23fe97c:	460c      	mov	r4, r1
 23fe97e:	4606      	mov	r6, r0
 23fe980:	2100      	movs	r1, #0
 23fe982:	fb93 f3f2 	sdiv	r3, r3, r2
 23fe986:	2201      	movs	r2, #1
 23fe988:	429a      	cmp	r2, r3
 23fe98a:	db09      	blt.n	23fe9a0 <__s2b+0x30>
 23fe98c:	4630      	mov	r0, r6
 23fe98e:	f7ff ff45 	bl	23fe81c <_Balloc>
 23fe992:	b940      	cbnz	r0, 23fe9a6 <__s2b+0x36>
 23fe994:	4602      	mov	r2, r0
 23fe996:	4b19      	ldr	r3, [pc, #100]	; (23fe9fc <__s2b+0x8c>)
 23fe998:	21ce      	movs	r1, #206	; 0xce
 23fe99a:	4819      	ldr	r0, [pc, #100]	; (23fea00 <__s2b+0x90>)
 23fe99c:	f7fa f9d4 	bl	23f8d48 <__assert_func>
 23fe9a0:	0052      	lsls	r2, r2, #1
 23fe9a2:	3101      	adds	r1, #1
 23fe9a4:	e7f0      	b.n	23fe988 <__s2b+0x18>
 23fe9a6:	9b08      	ldr	r3, [sp, #32]
 23fe9a8:	2d09      	cmp	r5, #9
 23fe9aa:	6143      	str	r3, [r0, #20]
 23fe9ac:	f04f 0301 	mov.w	r3, #1
 23fe9b0:	6103      	str	r3, [r0, #16]
 23fe9b2:	dd16      	ble.n	23fe9e2 <__s2b+0x72>
 23fe9b4:	f104 0909 	add.w	r9, r4, #9
 23fe9b8:	442c      	add	r4, r5
 23fe9ba:	46c8      	mov	r8, r9
 23fe9bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 23fe9c0:	4601      	mov	r1, r0
 23fe9c2:	220a      	movs	r2, #10
 23fe9c4:	4630      	mov	r0, r6
 23fe9c6:	3b30      	subs	r3, #48	; 0x30
 23fe9c8:	f7ff ff8a 	bl	23fe8e0 <__multadd>
 23fe9cc:	45a0      	cmp	r8, r4
 23fe9ce:	d1f5      	bne.n	23fe9bc <__s2b+0x4c>
 23fe9d0:	f1a5 0408 	sub.w	r4, r5, #8
 23fe9d4:	444c      	add	r4, r9
 23fe9d6:	1b2d      	subs	r5, r5, r4
 23fe9d8:	1963      	adds	r3, r4, r5
 23fe9da:	42bb      	cmp	r3, r7
 23fe9dc:	db04      	blt.n	23fe9e8 <__s2b+0x78>
 23fe9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fe9e2:	340a      	adds	r4, #10
 23fe9e4:	2509      	movs	r5, #9
 23fe9e6:	e7f6      	b.n	23fe9d6 <__s2b+0x66>
 23fe9e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 23fe9ec:	4601      	mov	r1, r0
 23fe9ee:	220a      	movs	r2, #10
 23fe9f0:	4630      	mov	r0, r6
 23fe9f2:	3b30      	subs	r3, #48	; 0x30
 23fe9f4:	f7ff ff74 	bl	23fe8e0 <__multadd>
 23fe9f8:	e7ee      	b.n	23fe9d8 <__s2b+0x68>
 23fe9fa:	bf00      	nop
 23fe9fc:	023ffde1 	.word	0x023ffde1
 23fea00:	023ffe6a 	.word	0x023ffe6a

023fea04 <__hi0bits>:
 23fea04:	0c03      	lsrs	r3, r0, #16
 23fea06:	041b      	lsls	r3, r3, #16
 23fea08:	b9d3      	cbnz	r3, 23fea40 <__hi0bits+0x3c>
 23fea0a:	0400      	lsls	r0, r0, #16
 23fea0c:	2310      	movs	r3, #16
 23fea0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 23fea12:	bf04      	itt	eq
 23fea14:	0200      	lsleq	r0, r0, #8
 23fea16:	3308      	addeq	r3, #8
 23fea18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 23fea1c:	bf04      	itt	eq
 23fea1e:	0100      	lsleq	r0, r0, #4
 23fea20:	3304      	addeq	r3, #4
 23fea22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 23fea26:	bf04      	itt	eq
 23fea28:	0080      	lsleq	r0, r0, #2
 23fea2a:	3302      	addeq	r3, #2
 23fea2c:	2800      	cmp	r0, #0
 23fea2e:	db05      	blt.n	23fea3c <__hi0bits+0x38>
 23fea30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 23fea34:	f103 0301 	add.w	r3, r3, #1
 23fea38:	bf08      	it	eq
 23fea3a:	2320      	moveq	r3, #32
 23fea3c:	4618      	mov	r0, r3
 23fea3e:	4770      	bx	lr
 23fea40:	2300      	movs	r3, #0
 23fea42:	e7e4      	b.n	23fea0e <__hi0bits+0xa>

023fea44 <__lo0bits>:
 23fea44:	6803      	ldr	r3, [r0, #0]
 23fea46:	4601      	mov	r1, r0
 23fea48:	f013 0207 	ands.w	r2, r3, #7
 23fea4c:	d00b      	beq.n	23fea66 <__lo0bits+0x22>
 23fea4e:	07da      	lsls	r2, r3, #31
 23fea50:	d423      	bmi.n	23fea9a <__lo0bits+0x56>
 23fea52:	0798      	lsls	r0, r3, #30
 23fea54:	bf47      	ittee	mi
 23fea56:	085b      	lsrmi	r3, r3, #1
 23fea58:	2001      	movmi	r0, #1
 23fea5a:	089b      	lsrpl	r3, r3, #2
 23fea5c:	2002      	movpl	r0, #2
 23fea5e:	bf4c      	ite	mi
 23fea60:	600b      	strmi	r3, [r1, #0]
 23fea62:	600b      	strpl	r3, [r1, #0]
 23fea64:	4770      	bx	lr
 23fea66:	b298      	uxth	r0, r3
 23fea68:	b9a8      	cbnz	r0, 23fea96 <__lo0bits+0x52>
 23fea6a:	0c1b      	lsrs	r3, r3, #16
 23fea6c:	2010      	movs	r0, #16
 23fea6e:	b2da      	uxtb	r2, r3
 23fea70:	b90a      	cbnz	r2, 23fea76 <__lo0bits+0x32>
 23fea72:	3008      	adds	r0, #8
 23fea74:	0a1b      	lsrs	r3, r3, #8
 23fea76:	071a      	lsls	r2, r3, #28
 23fea78:	bf04      	itt	eq
 23fea7a:	091b      	lsreq	r3, r3, #4
 23fea7c:	3004      	addeq	r0, #4
 23fea7e:	079a      	lsls	r2, r3, #30
 23fea80:	bf04      	itt	eq
 23fea82:	089b      	lsreq	r3, r3, #2
 23fea84:	3002      	addeq	r0, #2
 23fea86:	07da      	lsls	r2, r3, #31
 23fea88:	d403      	bmi.n	23fea92 <__lo0bits+0x4e>
 23fea8a:	085b      	lsrs	r3, r3, #1
 23fea8c:	f100 0001 	add.w	r0, r0, #1
 23fea90:	d005      	beq.n	23fea9e <__lo0bits+0x5a>
 23fea92:	600b      	str	r3, [r1, #0]
 23fea94:	4770      	bx	lr
 23fea96:	4610      	mov	r0, r2
 23fea98:	e7e9      	b.n	23fea6e <__lo0bits+0x2a>
 23fea9a:	2000      	movs	r0, #0
 23fea9c:	4770      	bx	lr
 23fea9e:	2020      	movs	r0, #32
 23feaa0:	4770      	bx	lr
	...

023feaa4 <__i2b>:
 23feaa4:	b510      	push	{r4, lr}
 23feaa6:	460c      	mov	r4, r1
 23feaa8:	2101      	movs	r1, #1
 23feaaa:	f7ff feb7 	bl	23fe81c <_Balloc>
 23feaae:	4602      	mov	r2, r0
 23feab0:	b928      	cbnz	r0, 23feabe <__i2b+0x1a>
 23feab2:	4b05      	ldr	r3, [pc, #20]	; (23feac8 <__i2b+0x24>)
 23feab4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 23feab8:	4804      	ldr	r0, [pc, #16]	; (23feacc <__i2b+0x28>)
 23feaba:	f7fa f945 	bl	23f8d48 <__assert_func>
 23feabe:	2301      	movs	r3, #1
 23feac0:	6144      	str	r4, [r0, #20]
 23feac2:	6103      	str	r3, [r0, #16]
 23feac4:	bd10      	pop	{r4, pc}
 23feac6:	bf00      	nop
 23feac8:	023ffde1 	.word	0x023ffde1
 23feacc:	023ffe6a 	.word	0x023ffe6a

023fead0 <__multiply>:
 23fead0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fead4:	4691      	mov	r9, r2
 23fead6:	690a      	ldr	r2, [r1, #16]
 23fead8:	460c      	mov	r4, r1
 23feada:	b085      	sub	sp, #20
 23feadc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23feae0:	429a      	cmp	r2, r3
 23feae2:	bfbe      	ittt	lt
 23feae4:	460b      	movlt	r3, r1
 23feae6:	464c      	movlt	r4, r9
 23feae8:	4699      	movlt	r9, r3
 23feaea:	6927      	ldr	r7, [r4, #16]
 23feaec:	68a3      	ldr	r3, [r4, #8]
 23feaee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 23feaf2:	6861      	ldr	r1, [r4, #4]
 23feaf4:	eb07 060a 	add.w	r6, r7, sl
 23feaf8:	42b3      	cmp	r3, r6
 23feafa:	bfb8      	it	lt
 23feafc:	3101      	addlt	r1, #1
 23feafe:	f7ff fe8d 	bl	23fe81c <_Balloc>
 23feb02:	b930      	cbnz	r0, 23feb12 <__multiply+0x42>
 23feb04:	4602      	mov	r2, r0
 23feb06:	4b44      	ldr	r3, [pc, #272]	; (23fec18 <__multiply+0x148>)
 23feb08:	f240 115d 	movw	r1, #349	; 0x15d
 23feb0c:	4843      	ldr	r0, [pc, #268]	; (23fec1c <__multiply+0x14c>)
 23feb0e:	f7fa f91b 	bl	23f8d48 <__assert_func>
 23feb12:	f100 0514 	add.w	r5, r0, #20
 23feb16:	2200      	movs	r2, #0
 23feb18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 23feb1c:	462b      	mov	r3, r5
 23feb1e:	4543      	cmp	r3, r8
 23feb20:	d321      	bcc.n	23feb66 <__multiply+0x96>
 23feb22:	f104 0314 	add.w	r3, r4, #20
 23feb26:	f104 0115 	add.w	r1, r4, #21
 23feb2a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 23feb2e:	f109 0314 	add.w	r3, r9, #20
 23feb32:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 23feb36:	9202      	str	r2, [sp, #8]
 23feb38:	1b3a      	subs	r2, r7, r4
 23feb3a:	3a15      	subs	r2, #21
 23feb3c:	f022 0203 	bic.w	r2, r2, #3
 23feb40:	3204      	adds	r2, #4
 23feb42:	428f      	cmp	r7, r1
 23feb44:	bf38      	it	cc
 23feb46:	2204      	movcc	r2, #4
 23feb48:	9201      	str	r2, [sp, #4]
 23feb4a:	9a02      	ldr	r2, [sp, #8]
 23feb4c:	9303      	str	r3, [sp, #12]
 23feb4e:	429a      	cmp	r2, r3
 23feb50:	d80c      	bhi.n	23feb6c <__multiply+0x9c>
 23feb52:	2e00      	cmp	r6, #0
 23feb54:	dd03      	ble.n	23feb5e <__multiply+0x8e>
 23feb56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 23feb5a:	2b00      	cmp	r3, #0
 23feb5c:	d05a      	beq.n	23fec14 <__multiply+0x144>
 23feb5e:	6106      	str	r6, [r0, #16]
 23feb60:	b005      	add	sp, #20
 23feb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23feb66:	f843 2b04 	str.w	r2, [r3], #4
 23feb6a:	e7d8      	b.n	23feb1e <__multiply+0x4e>
 23feb6c:	f8b3 a000 	ldrh.w	sl, [r3]
 23feb70:	f1ba 0f00 	cmp.w	sl, #0
 23feb74:	d024      	beq.n	23febc0 <__multiply+0xf0>
 23feb76:	f104 0e14 	add.w	lr, r4, #20
 23feb7a:	46a9      	mov	r9, r5
 23feb7c:	f04f 0c00 	mov.w	ip, #0
 23feb80:	f85e 2b04 	ldr.w	r2, [lr], #4
 23feb84:	f8d9 1000 	ldr.w	r1, [r9]
 23feb88:	fa1f fb82 	uxth.w	fp, r2
 23feb8c:	4577      	cmp	r7, lr
 23feb8e:	b289      	uxth	r1, r1
 23feb90:	fb0a 110b 	mla	r1, sl, fp, r1
 23feb94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 23feb98:	f8d9 2000 	ldr.w	r2, [r9]
 23feb9c:	4461      	add	r1, ip
 23feb9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 23feba2:	fb0a c20b 	mla	r2, sl, fp, ip
 23feba6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 23febaa:	b289      	uxth	r1, r1
 23febac:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 23febb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23febb4:	f849 1b04 	str.w	r1, [r9], #4
 23febb8:	d8e2      	bhi.n	23feb80 <__multiply+0xb0>
 23febba:	9a01      	ldr	r2, [sp, #4]
 23febbc:	f845 c002 	str.w	ip, [r5, r2]
 23febc0:	9a03      	ldr	r2, [sp, #12]
 23febc2:	3304      	adds	r3, #4
 23febc4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 23febc8:	f1b9 0f00 	cmp.w	r9, #0
 23febcc:	d020      	beq.n	23fec10 <__multiply+0x140>
 23febce:	6829      	ldr	r1, [r5, #0]
 23febd0:	f104 0c14 	add.w	ip, r4, #20
 23febd4:	46ae      	mov	lr, r5
 23febd6:	f04f 0a00 	mov.w	sl, #0
 23febda:	f8bc b000 	ldrh.w	fp, [ip]
 23febde:	b289      	uxth	r1, r1
 23febe0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 23febe4:	fb09 220b 	mla	r2, r9, fp, r2
 23febe8:	4492      	add	sl, r2
 23febea:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 23febee:	f84e 1b04 	str.w	r1, [lr], #4
 23febf2:	f85c 2b04 	ldr.w	r2, [ip], #4
 23febf6:	f8be 1000 	ldrh.w	r1, [lr]
 23febfa:	0c12      	lsrs	r2, r2, #16
 23febfc:	4567      	cmp	r7, ip
 23febfe:	fb09 1102 	mla	r1, r9, r2, r1
 23fec02:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 23fec06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 23fec0a:	d8e6      	bhi.n	23febda <__multiply+0x10a>
 23fec0c:	9a01      	ldr	r2, [sp, #4]
 23fec0e:	50a9      	str	r1, [r5, r2]
 23fec10:	3504      	adds	r5, #4
 23fec12:	e79a      	b.n	23feb4a <__multiply+0x7a>
 23fec14:	3e01      	subs	r6, #1
 23fec16:	e79c      	b.n	23feb52 <__multiply+0x82>
 23fec18:	023ffde1 	.word	0x023ffde1
 23fec1c:	023ffe6a 	.word	0x023ffe6a

023fec20 <__pow5mult>:
 23fec20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fec24:	4615      	mov	r5, r2
 23fec26:	f012 0203 	ands.w	r2, r2, #3
 23fec2a:	4606      	mov	r6, r0
 23fec2c:	460f      	mov	r7, r1
 23fec2e:	d007      	beq.n	23fec40 <__pow5mult+0x20>
 23fec30:	3a01      	subs	r2, #1
 23fec32:	4c25      	ldr	r4, [pc, #148]	; (23fecc8 <__pow5mult+0xa8>)
 23fec34:	2300      	movs	r3, #0
 23fec36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fec3a:	f7ff fe51 	bl	23fe8e0 <__multadd>
 23fec3e:	4607      	mov	r7, r0
 23fec40:	10ad      	asrs	r5, r5, #2
 23fec42:	d03d      	beq.n	23fecc0 <__pow5mult+0xa0>
 23fec44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 23fec46:	b97c      	cbnz	r4, 23fec68 <__pow5mult+0x48>
 23fec48:	2010      	movs	r0, #16
 23fec4a:	f7fa f80d 	bl	23f8c68 <malloc>
 23fec4e:	4602      	mov	r2, r0
 23fec50:	6270      	str	r0, [r6, #36]	; 0x24
 23fec52:	b928      	cbnz	r0, 23fec60 <__pow5mult+0x40>
 23fec54:	4b1d      	ldr	r3, [pc, #116]	; (23feccc <__pow5mult+0xac>)
 23fec56:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 23fec5a:	481d      	ldr	r0, [pc, #116]	; (23fecd0 <__pow5mult+0xb0>)
 23fec5c:	f7fa f874 	bl	23f8d48 <__assert_func>
 23fec60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fec64:	6004      	str	r4, [r0, #0]
 23fec66:	60c4      	str	r4, [r0, #12]
 23fec68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 23fec6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 23fec70:	b94c      	cbnz	r4, 23fec86 <__pow5mult+0x66>
 23fec72:	f240 2171 	movw	r1, #625	; 0x271
 23fec76:	4630      	mov	r0, r6
 23fec78:	f7ff ff14 	bl	23feaa4 <__i2b>
 23fec7c:	2300      	movs	r3, #0
 23fec7e:	4604      	mov	r4, r0
 23fec80:	f8c8 0008 	str.w	r0, [r8, #8]
 23fec84:	6003      	str	r3, [r0, #0]
 23fec86:	f04f 0900 	mov.w	r9, #0
 23fec8a:	07eb      	lsls	r3, r5, #31
 23fec8c:	d50a      	bpl.n	23feca4 <__pow5mult+0x84>
 23fec8e:	4639      	mov	r1, r7
 23fec90:	4622      	mov	r2, r4
 23fec92:	4630      	mov	r0, r6
 23fec94:	f7ff ff1c 	bl	23fead0 <__multiply>
 23fec98:	4680      	mov	r8, r0
 23fec9a:	4639      	mov	r1, r7
 23fec9c:	4630      	mov	r0, r6
 23fec9e:	4647      	mov	r7, r8
 23feca0:	f7ff fdfc 	bl	23fe89c <_Bfree>
 23feca4:	106d      	asrs	r5, r5, #1
 23feca6:	d00b      	beq.n	23fecc0 <__pow5mult+0xa0>
 23feca8:	6820      	ldr	r0, [r4, #0]
 23fecaa:	b938      	cbnz	r0, 23fecbc <__pow5mult+0x9c>
 23fecac:	4622      	mov	r2, r4
 23fecae:	4621      	mov	r1, r4
 23fecb0:	4630      	mov	r0, r6
 23fecb2:	f7ff ff0d 	bl	23fead0 <__multiply>
 23fecb6:	6020      	str	r0, [r4, #0]
 23fecb8:	f8c0 9000 	str.w	r9, [r0]
 23fecbc:	4604      	mov	r4, r0
 23fecbe:	e7e4      	b.n	23fec8a <__pow5mult+0x6a>
 23fecc0:	4638      	mov	r0, r7
 23fecc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fecc6:	bf00      	nop
 23fecc8:	023fffb8 	.word	0x023fffb8
 23feccc:	023ffc11 	.word	0x023ffc11
 23fecd0:	023ffe6a 	.word	0x023ffe6a

023fecd4 <__lshift>:
 23fecd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fecd8:	460c      	mov	r4, r1
 23fecda:	4607      	mov	r7, r0
 23fecdc:	4691      	mov	r9, r2
 23fecde:	ea4f 1a62 	mov.w	sl, r2, asr #5
 23fece2:	6923      	ldr	r3, [r4, #16]
 23fece4:	6849      	ldr	r1, [r1, #4]
 23fece6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 23fecea:	68a3      	ldr	r3, [r4, #8]
 23fecec:	f108 0601 	add.w	r6, r8, #1
 23fecf0:	42b3      	cmp	r3, r6
 23fecf2:	db0b      	blt.n	23fed0c <__lshift+0x38>
 23fecf4:	4638      	mov	r0, r7
 23fecf6:	f7ff fd91 	bl	23fe81c <_Balloc>
 23fecfa:	4605      	mov	r5, r0
 23fecfc:	b948      	cbnz	r0, 23fed12 <__lshift+0x3e>
 23fecfe:	4602      	mov	r2, r0
 23fed00:	4b2a      	ldr	r3, [pc, #168]	; (23fedac <__lshift+0xd8>)
 23fed02:	f240 11d9 	movw	r1, #473	; 0x1d9
 23fed06:	482a      	ldr	r0, [pc, #168]	; (23fedb0 <__lshift+0xdc>)
 23fed08:	f7fa f81e 	bl	23f8d48 <__assert_func>
 23fed0c:	3101      	adds	r1, #1
 23fed0e:	005b      	lsls	r3, r3, #1
 23fed10:	e7ee      	b.n	23fecf0 <__lshift+0x1c>
 23fed12:	2300      	movs	r3, #0
 23fed14:	f100 0114 	add.w	r1, r0, #20
 23fed18:	f100 0210 	add.w	r2, r0, #16
 23fed1c:	4618      	mov	r0, r3
 23fed1e:	4553      	cmp	r3, sl
 23fed20:	db37      	blt.n	23fed92 <__lshift+0xbe>
 23fed22:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 23fed26:	f104 0314 	add.w	r3, r4, #20
 23fed2a:	6920      	ldr	r0, [r4, #16]
 23fed2c:	f019 091f 	ands.w	r9, r9, #31
 23fed30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 23fed34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 23fed38:	d02f      	beq.n	23fed9a <__lshift+0xc6>
 23fed3a:	f1c9 0e20 	rsb	lr, r9, #32
 23fed3e:	468a      	mov	sl, r1
 23fed40:	f04f 0c00 	mov.w	ip, #0
 23fed44:	681a      	ldr	r2, [r3, #0]
 23fed46:	fa02 f209 	lsl.w	r2, r2, r9
 23fed4a:	ea42 020c 	orr.w	r2, r2, ip
 23fed4e:	f84a 2b04 	str.w	r2, [sl], #4
 23fed52:	f853 2b04 	ldr.w	r2, [r3], #4
 23fed56:	4298      	cmp	r0, r3
 23fed58:	fa22 fc0e 	lsr.w	ip, r2, lr
 23fed5c:	d8f2      	bhi.n	23fed44 <__lshift+0x70>
 23fed5e:	1b03      	subs	r3, r0, r4
 23fed60:	f104 0215 	add.w	r2, r4, #21
 23fed64:	3b15      	subs	r3, #21
 23fed66:	f023 0303 	bic.w	r3, r3, #3
 23fed6a:	3304      	adds	r3, #4
 23fed6c:	4290      	cmp	r0, r2
 23fed6e:	bf38      	it	cc
 23fed70:	2304      	movcc	r3, #4
 23fed72:	f841 c003 	str.w	ip, [r1, r3]
 23fed76:	f1bc 0f00 	cmp.w	ip, #0
 23fed7a:	d001      	beq.n	23fed80 <__lshift+0xac>
 23fed7c:	f108 0602 	add.w	r6, r8, #2
 23fed80:	3e01      	subs	r6, #1
 23fed82:	4638      	mov	r0, r7
 23fed84:	4621      	mov	r1, r4
 23fed86:	612e      	str	r6, [r5, #16]
 23fed88:	f7ff fd88 	bl	23fe89c <_Bfree>
 23fed8c:	4628      	mov	r0, r5
 23fed8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fed92:	3301      	adds	r3, #1
 23fed94:	f842 0f04 	str.w	r0, [r2, #4]!
 23fed98:	e7c1      	b.n	23fed1e <__lshift+0x4a>
 23fed9a:	3904      	subs	r1, #4
 23fed9c:	f853 2b04 	ldr.w	r2, [r3], #4
 23feda0:	4298      	cmp	r0, r3
 23feda2:	f841 2f04 	str.w	r2, [r1, #4]!
 23feda6:	d8f9      	bhi.n	23fed9c <__lshift+0xc8>
 23feda8:	e7ea      	b.n	23fed80 <__lshift+0xac>
 23fedaa:	bf00      	nop
 23fedac:	023ffde1 	.word	0x023ffde1
 23fedb0:	023ffe6a 	.word	0x023ffe6a

023fedb4 <__mcmp>:
 23fedb4:	6902      	ldr	r2, [r0, #16]
 23fedb6:	b530      	push	{r4, r5, lr}
 23fedb8:	690c      	ldr	r4, [r1, #16]
 23fedba:	1b12      	subs	r2, r2, r4
 23fedbc:	d10e      	bne.n	23feddc <__mcmp+0x28>
 23fedbe:	f100 0314 	add.w	r3, r0, #20
 23fedc2:	3114      	adds	r1, #20
 23fedc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 23fedc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 23fedcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 23fedd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 23fedd4:	42a5      	cmp	r5, r4
 23fedd6:	d003      	beq.n	23fede0 <__mcmp+0x2c>
 23fedd8:	d305      	bcc.n	23fede6 <__mcmp+0x32>
 23fedda:	2201      	movs	r2, #1
 23feddc:	4610      	mov	r0, r2
 23fedde:	bd30      	pop	{r4, r5, pc}
 23fede0:	4283      	cmp	r3, r0
 23fede2:	d3f3      	bcc.n	23fedcc <__mcmp+0x18>
 23fede4:	e7fa      	b.n	23feddc <__mcmp+0x28>
 23fede6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fedea:	e7f7      	b.n	23feddc <__mcmp+0x28>

023fedec <__mdiff>:
 23fedec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fedf0:	460c      	mov	r4, r1
 23fedf2:	4606      	mov	r6, r0
 23fedf4:	4611      	mov	r1, r2
 23fedf6:	4692      	mov	sl, r2
 23fedf8:	4620      	mov	r0, r4
 23fedfa:	f7ff ffdb 	bl	23fedb4 <__mcmp>
 23fedfe:	1e05      	subs	r5, r0, #0
 23fee00:	d110      	bne.n	23fee24 <__mdiff+0x38>
 23fee02:	4629      	mov	r1, r5
 23fee04:	4630      	mov	r0, r6
 23fee06:	f7ff fd09 	bl	23fe81c <_Balloc>
 23fee0a:	b930      	cbnz	r0, 23fee1a <__mdiff+0x2e>
 23fee0c:	4b3d      	ldr	r3, [pc, #244]	; (23fef04 <__mdiff+0x118>)
 23fee0e:	4602      	mov	r2, r0
 23fee10:	f240 2132 	movw	r1, #562	; 0x232
 23fee14:	483c      	ldr	r0, [pc, #240]	; (23fef08 <__mdiff+0x11c>)
 23fee16:	f7f9 ff97 	bl	23f8d48 <__assert_func>
 23fee1a:	2301      	movs	r3, #1
 23fee1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 23fee20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fee24:	bfa4      	itt	ge
 23fee26:	4653      	movge	r3, sl
 23fee28:	46a2      	movge	sl, r4
 23fee2a:	4630      	mov	r0, r6
 23fee2c:	bfa8      	it	ge
 23fee2e:	2500      	movge	r5, #0
 23fee30:	f8da 1004 	ldr.w	r1, [sl, #4]
 23fee34:	bfac      	ite	ge
 23fee36:	461c      	movge	r4, r3
 23fee38:	2501      	movlt	r5, #1
 23fee3a:	f7ff fcef 	bl	23fe81c <_Balloc>
 23fee3e:	b920      	cbnz	r0, 23fee4a <__mdiff+0x5e>
 23fee40:	4b30      	ldr	r3, [pc, #192]	; (23fef04 <__mdiff+0x118>)
 23fee42:	4602      	mov	r2, r0
 23fee44:	f44f 7110 	mov.w	r1, #576	; 0x240
 23fee48:	e7e4      	b.n	23fee14 <__mdiff+0x28>
 23fee4a:	f8da 7010 	ldr.w	r7, [sl, #16]
 23fee4e:	f104 0914 	add.w	r9, r4, #20
 23fee52:	6926      	ldr	r6, [r4, #16]
 23fee54:	f100 0814 	add.w	r8, r0, #20
 23fee58:	60c5      	str	r5, [r0, #12]
 23fee5a:	f10a 0514 	add.w	r5, sl, #20
 23fee5e:	f10a 0210 	add.w	r2, sl, #16
 23fee62:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 23fee66:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 23fee6a:	46c2      	mov	sl, r8
 23fee6c:	f04f 0c00 	mov.w	ip, #0
 23fee70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 23fee74:	f859 3b04 	ldr.w	r3, [r9], #4
 23fee78:	fa1f f18b 	uxth.w	r1, fp
 23fee7c:	454e      	cmp	r6, r9
 23fee7e:	448c      	add	ip, r1
 23fee80:	b299      	uxth	r1, r3
 23fee82:	ea4f 4313 	mov.w	r3, r3, lsr #16
 23fee86:	ebac 0101 	sub.w	r1, ip, r1
 23fee8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 23fee8e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 23fee92:	b289      	uxth	r1, r1
 23fee94:	ea4f 4c23 	mov.w	ip, r3, asr #16
 23fee98:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 23fee9c:	f84a 3b04 	str.w	r3, [sl], #4
 23feea0:	d8e6      	bhi.n	23fee70 <__mdiff+0x84>
 23feea2:	1b33      	subs	r3, r6, r4
 23feea4:	3415      	adds	r4, #21
 23feea6:	3b15      	subs	r3, #21
 23feea8:	f023 0303 	bic.w	r3, r3, #3
 23feeac:	3304      	adds	r3, #4
 23feeae:	42a6      	cmp	r6, r4
 23feeb0:	bf38      	it	cc
 23feeb2:	2304      	movcc	r3, #4
 23feeb4:	441d      	add	r5, r3
 23feeb6:	4443      	add	r3, r8
 23feeb8:	462c      	mov	r4, r5
 23feeba:	461e      	mov	r6, r3
 23feebc:	4574      	cmp	r4, lr
 23feebe:	d30e      	bcc.n	23feede <__mdiff+0xf2>
 23feec0:	f10e 0203 	add.w	r2, lr, #3
 23feec4:	1b52      	subs	r2, r2, r5
 23feec6:	3d03      	subs	r5, #3
 23feec8:	f022 0203 	bic.w	r2, r2, #3
 23feecc:	45ae      	cmp	lr, r5
 23feece:	bf38      	it	cc
 23feed0:	2200      	movcc	r2, #0
 23feed2:	441a      	add	r2, r3
 23feed4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 23feed8:	b18b      	cbz	r3, 23feefe <__mdiff+0x112>
 23feeda:	6107      	str	r7, [r0, #16]
 23feedc:	e7a0      	b.n	23fee20 <__mdiff+0x34>
 23feede:	f854 8b04 	ldr.w	r8, [r4], #4
 23feee2:	fa1f f288 	uxth.w	r2, r8
 23feee6:	4462      	add	r2, ip
 23feee8:	1411      	asrs	r1, r2, #16
 23feeea:	b292      	uxth	r2, r2
 23feeec:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 23feef0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 23feef4:	ea4f 4c21 	mov.w	ip, r1, asr #16
 23feef8:	f846 2b04 	str.w	r2, [r6], #4
 23feefc:	e7de      	b.n	23feebc <__mdiff+0xd0>
 23feefe:	3f01      	subs	r7, #1
 23fef00:	e7e8      	b.n	23feed4 <__mdiff+0xe8>
 23fef02:	bf00      	nop
 23fef04:	023ffde1 	.word	0x023ffde1
 23fef08:	023ffe6a 	.word	0x023ffe6a

023fef0c <__ulp>:
 23fef0c:	b082      	sub	sp, #8
 23fef0e:	4913      	ldr	r1, [pc, #76]	; (23fef5c <__ulp+0x50>)
 23fef10:	ed8d 0b00 	vstr	d0, [sp]
 23fef14:	9b01      	ldr	r3, [sp, #4]
 23fef16:	4019      	ands	r1, r3
 23fef18:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 23fef1c:	2900      	cmp	r1, #0
 23fef1e:	dd05      	ble.n	23fef2c <__ulp+0x20>
 23fef20:	2200      	movs	r2, #0
 23fef22:	460b      	mov	r3, r1
 23fef24:	ec43 2b10 	vmov	d0, r2, r3
 23fef28:	b002      	add	sp, #8
 23fef2a:	4770      	bx	lr
 23fef2c:	4249      	negs	r1, r1
 23fef2e:	2200      	movs	r2, #0
 23fef30:	2300      	movs	r3, #0
 23fef32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 23fef36:	ea4f 5021 	mov.w	r0, r1, asr #20
 23fef3a:	da04      	bge.n	23fef46 <__ulp+0x3a>
 23fef3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 23fef40:	fa41 f300 	asr.w	r3, r1, r0
 23fef44:	e7ee      	b.n	23fef24 <__ulp+0x18>
 23fef46:	f1a0 0114 	sub.w	r1, r0, #20
 23fef4a:	291e      	cmp	r1, #30
 23fef4c:	bfd6      	itet	le
 23fef4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 23fef52:	2101      	movgt	r1, #1
 23fef54:	fa20 f101 	lsrle.w	r1, r0, r1
 23fef58:	460a      	mov	r2, r1
 23fef5a:	e7e3      	b.n	23fef24 <__ulp+0x18>
 23fef5c:	7ff00000 	.word	0x7ff00000

023fef60 <__b2d>:
 23fef60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fef62:	6905      	ldr	r5, [r0, #16]
 23fef64:	f100 0714 	add.w	r7, r0, #20
 23fef68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 23fef6c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 23fef70:	1f2e      	subs	r6, r5, #4
 23fef72:	4620      	mov	r0, r4
 23fef74:	f7ff fd46 	bl	23fea04 <__hi0bits>
 23fef78:	f1c0 0320 	rsb	r3, r0, #32
 23fef7c:	280a      	cmp	r0, #10
 23fef7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 23feffc <__b2d+0x9c>
 23fef82:	600b      	str	r3, [r1, #0]
 23fef84:	dc15      	bgt.n	23fefb2 <__b2d+0x52>
 23fef86:	f1c0 0e0b 	rsb	lr, r0, #11
 23fef8a:	42b7      	cmp	r7, r6
 23fef8c:	f100 0015 	add.w	r0, r0, #21
 23fef90:	fa24 f10e 	lsr.w	r1, r4, lr
 23fef94:	fa04 f000 	lsl.w	r0, r4, r0
 23fef98:	ea41 030c 	orr.w	r3, r1, ip
 23fef9c:	bf34      	ite	cc
 23fef9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 23fefa2:	2100      	movcs	r1, #0
 23fefa4:	fa21 f10e 	lsr.w	r1, r1, lr
 23fefa8:	ea40 0201 	orr.w	r2, r0, r1
 23fefac:	ec43 2b10 	vmov	d0, r2, r3
 23fefb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fefb2:	42b7      	cmp	r7, r6
 23fefb4:	bf3a      	itte	cc
 23fefb6:	f1a5 0608 	subcc.w	r6, r5, #8
 23fefba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 23fefbe:	2100      	movcs	r1, #0
 23fefc0:	380b      	subs	r0, #11
 23fefc2:	d017      	beq.n	23feff4 <__b2d+0x94>
 23fefc4:	f1c0 0c20 	rsb	ip, r0, #32
 23fefc8:	fa04 f500 	lsl.w	r5, r4, r0
 23fefcc:	42be      	cmp	r6, r7
 23fefce:	fa01 f000 	lsl.w	r0, r1, r0
 23fefd2:	fa21 f40c 	lsr.w	r4, r1, ip
 23fefd6:	ea45 0504 	orr.w	r5, r5, r4
 23fefda:	bf8c      	ite	hi
 23fefdc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 23fefe0:	2400      	movls	r4, #0
 23fefe2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 23fefe6:	fa24 f40c 	lsr.w	r4, r4, ip
 23fefea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 23fefee:	ea40 0204 	orr.w	r2, r0, r4
 23feff2:	e7db      	b.n	23fefac <__b2d+0x4c>
 23feff4:	ea44 030c 	orr.w	r3, r4, ip
 23feff8:	460a      	mov	r2, r1
 23feffa:	e7d7      	b.n	23fefac <__b2d+0x4c>
 23feffc:	3ff00000 	.word	0x3ff00000

023ff000 <__d2b>:
 23ff000:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23ff004:	4689      	mov	r9, r1
 23ff006:	2101      	movs	r1, #1
 23ff008:	4690      	mov	r8, r2
 23ff00a:	ec57 6b10 	vmov	r6, r7, d0
 23ff00e:	f7ff fc05 	bl	23fe81c <_Balloc>
 23ff012:	4604      	mov	r4, r0
 23ff014:	b930      	cbnz	r0, 23ff024 <__d2b+0x24>
 23ff016:	4602      	mov	r2, r0
 23ff018:	4b25      	ldr	r3, [pc, #148]	; (23ff0b0 <__d2b+0xb0>)
 23ff01a:	f240 310a 	movw	r1, #778	; 0x30a
 23ff01e:	4825      	ldr	r0, [pc, #148]	; (23ff0b4 <__d2b+0xb4>)
 23ff020:	f7f9 fe92 	bl	23f8d48 <__assert_func>
 23ff024:	f3c7 550a 	ubfx	r5, r7, #20, #11
 23ff028:	f3c7 0313 	ubfx	r3, r7, #0, #20
 23ff02c:	bb35      	cbnz	r5, 23ff07c <__d2b+0x7c>
 23ff02e:	2e00      	cmp	r6, #0
 23ff030:	9301      	str	r3, [sp, #4]
 23ff032:	d028      	beq.n	23ff086 <__d2b+0x86>
 23ff034:	4668      	mov	r0, sp
 23ff036:	9600      	str	r6, [sp, #0]
 23ff038:	f7ff fd04 	bl	23fea44 <__lo0bits>
 23ff03c:	9900      	ldr	r1, [sp, #0]
 23ff03e:	b300      	cbz	r0, 23ff082 <__d2b+0x82>
 23ff040:	9a01      	ldr	r2, [sp, #4]
 23ff042:	f1c0 0320 	rsb	r3, r0, #32
 23ff046:	fa02 f303 	lsl.w	r3, r2, r3
 23ff04a:	40c2      	lsrs	r2, r0
 23ff04c:	430b      	orrs	r3, r1
 23ff04e:	9201      	str	r2, [sp, #4]
 23ff050:	6163      	str	r3, [r4, #20]
 23ff052:	9b01      	ldr	r3, [sp, #4]
 23ff054:	2b00      	cmp	r3, #0
 23ff056:	61a3      	str	r3, [r4, #24]
 23ff058:	bf14      	ite	ne
 23ff05a:	2202      	movne	r2, #2
 23ff05c:	2201      	moveq	r2, #1
 23ff05e:	6122      	str	r2, [r4, #16]
 23ff060:	b1d5      	cbz	r5, 23ff098 <__d2b+0x98>
 23ff062:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 23ff066:	4405      	add	r5, r0
 23ff068:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 23ff06c:	f8c9 5000 	str.w	r5, [r9]
 23ff070:	f8c8 0000 	str.w	r0, [r8]
 23ff074:	4620      	mov	r0, r4
 23ff076:	b003      	add	sp, #12
 23ff078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23ff07c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23ff080:	e7d5      	b.n	23ff02e <__d2b+0x2e>
 23ff082:	6161      	str	r1, [r4, #20]
 23ff084:	e7e5      	b.n	23ff052 <__d2b+0x52>
 23ff086:	a801      	add	r0, sp, #4
 23ff088:	f7ff fcdc 	bl	23fea44 <__lo0bits>
 23ff08c:	9b01      	ldr	r3, [sp, #4]
 23ff08e:	2201      	movs	r2, #1
 23ff090:	3020      	adds	r0, #32
 23ff092:	6163      	str	r3, [r4, #20]
 23ff094:	6122      	str	r2, [r4, #16]
 23ff096:	e7e3      	b.n	23ff060 <__d2b+0x60>
 23ff098:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 23ff09c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 23ff0a0:	f8c9 0000 	str.w	r0, [r9]
 23ff0a4:	6918      	ldr	r0, [r3, #16]
 23ff0a6:	f7ff fcad 	bl	23fea04 <__hi0bits>
 23ff0aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 23ff0ae:	e7df      	b.n	23ff070 <__d2b+0x70>
 23ff0b0:	023ffde1 	.word	0x023ffde1
 23ff0b4:	023ffe6a 	.word	0x023ffe6a

023ff0b8 <__ratio>:
 23ff0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff0bc:	4688      	mov	r8, r1
 23ff0be:	4681      	mov	r9, r0
 23ff0c0:	4669      	mov	r1, sp
 23ff0c2:	f7ff ff4d 	bl	23fef60 <__b2d>
 23ff0c6:	a901      	add	r1, sp, #4
 23ff0c8:	4640      	mov	r0, r8
 23ff0ca:	ec55 4b10 	vmov	r4, r5, d0
 23ff0ce:	f7ff ff47 	bl	23fef60 <__b2d>
 23ff0d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23ff0d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 23ff0da:	462f      	mov	r7, r5
 23ff0dc:	eba3 0c02 	sub.w	ip, r3, r2
 23ff0e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 23ff0e4:	ec51 0b10 	vmov	r0, r1, d0
 23ff0e8:	1a9b      	subs	r3, r3, r2
 23ff0ea:	468b      	mov	fp, r1
 23ff0ec:	4620      	mov	r0, r4
 23ff0ee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 23ff0f2:	2b00      	cmp	r3, #0
 23ff0f4:	bfd5      	itete	le
 23ff0f6:	460a      	movle	r2, r1
 23ff0f8:	462a      	movgt	r2, r5
 23ff0fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 23ff0fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 23ff102:	bfd8      	it	le
 23ff104:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 23ff108:	ee10 2a10 	vmov	r2, s0
 23ff10c:	4639      	mov	r1, r7
 23ff10e:	465b      	mov	r3, fp
 23ff110:	f7f6 fb3c 	bl	23f578c <__aeabi_ddiv>
 23ff114:	ec41 0b10 	vmov	d0, r0, r1
 23ff118:	b003      	add	sp, #12
 23ff11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023ff11e <__copybits>:
 23ff11e:	3901      	subs	r1, #1
 23ff120:	f102 0314 	add.w	r3, r2, #20
 23ff124:	1149      	asrs	r1, r1, #5
 23ff126:	b570      	push	{r4, r5, r6, lr}
 23ff128:	3101      	adds	r1, #1
 23ff12a:	6914      	ldr	r4, [r2, #16]
 23ff12c:	1f05      	subs	r5, r0, #4
 23ff12e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 23ff132:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 23ff136:	42a3      	cmp	r3, r4
 23ff138:	d30c      	bcc.n	23ff154 <__copybits+0x36>
 23ff13a:	1aa3      	subs	r3, r4, r2
 23ff13c:	3211      	adds	r2, #17
 23ff13e:	3b11      	subs	r3, #17
 23ff140:	f023 0303 	bic.w	r3, r3, #3
 23ff144:	42a2      	cmp	r2, r4
 23ff146:	bf88      	it	hi
 23ff148:	2300      	movhi	r3, #0
 23ff14a:	4418      	add	r0, r3
 23ff14c:	2300      	movs	r3, #0
 23ff14e:	4288      	cmp	r0, r1
 23ff150:	d305      	bcc.n	23ff15e <__copybits+0x40>
 23ff152:	bd70      	pop	{r4, r5, r6, pc}
 23ff154:	f853 6b04 	ldr.w	r6, [r3], #4
 23ff158:	f845 6f04 	str.w	r6, [r5, #4]!
 23ff15c:	e7eb      	b.n	23ff136 <__copybits+0x18>
 23ff15e:	f840 3b04 	str.w	r3, [r0], #4
 23ff162:	e7f4      	b.n	23ff14e <__copybits+0x30>

023ff164 <__any_on>:
 23ff164:	f100 0214 	add.w	r2, r0, #20
 23ff168:	114b      	asrs	r3, r1, #5
 23ff16a:	6900      	ldr	r0, [r0, #16]
 23ff16c:	4298      	cmp	r0, r3
 23ff16e:	b510      	push	{r4, lr}
 23ff170:	db11      	blt.n	23ff196 <__any_on+0x32>
 23ff172:	dd0a      	ble.n	23ff18a <__any_on+0x26>
 23ff174:	f011 011f 	ands.w	r1, r1, #31
 23ff178:	d007      	beq.n	23ff18a <__any_on+0x26>
 23ff17a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 23ff17e:	fa24 f001 	lsr.w	r0, r4, r1
 23ff182:	fa00 f101 	lsl.w	r1, r0, r1
 23ff186:	428c      	cmp	r4, r1
 23ff188:	d10b      	bne.n	23ff1a2 <__any_on+0x3e>
 23ff18a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23ff18e:	4293      	cmp	r3, r2
 23ff190:	d803      	bhi.n	23ff19a <__any_on+0x36>
 23ff192:	2000      	movs	r0, #0
 23ff194:	bd10      	pop	{r4, pc}
 23ff196:	4603      	mov	r3, r0
 23ff198:	e7f7      	b.n	23ff18a <__any_on+0x26>
 23ff19a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 23ff19e:	2900      	cmp	r1, #0
 23ff1a0:	d0f5      	beq.n	23ff18e <__any_on+0x2a>
 23ff1a2:	2001      	movs	r0, #1
 23ff1a4:	e7f6      	b.n	23ff194 <__any_on+0x30>

023ff1a6 <_calloc_r>:
 23ff1a6:	434a      	muls	r2, r1
 23ff1a8:	b513      	push	{r0, r1, r4, lr}
 23ff1aa:	4611      	mov	r1, r2
 23ff1ac:	9201      	str	r2, [sp, #4]
 23ff1ae:	f7f9 fdaf 	bl	23f8d10 <_malloc_r>
 23ff1b2:	4604      	mov	r4, r0
 23ff1b4:	b118      	cbz	r0, 23ff1be <_calloc_r+0x18>
 23ff1b6:	9a01      	ldr	r2, [sp, #4]
 23ff1b8:	2100      	movs	r1, #0
 23ff1ba:	f7fd fffc 	bl	23fd1b6 <memset>
 23ff1be:	4620      	mov	r0, r4
 23ff1c0:	b002      	add	sp, #8
 23ff1c2:	bd10      	pop	{r4, pc}
 23ff1c4:	0000      	movs	r0, r0
	...

023ff1c8 <nan>:
 23ff1c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23ff1d0 <nan+0x8>
 23ff1cc:	4770      	bx	lr
 23ff1ce:	bf00      	nop
 23ff1d0:	00000000 	.word	0x00000000
 23ff1d4:	7ff80000 	.word	0x7ff80000

023ff1d8 <__ascii_wctomb>:
 23ff1d8:	b149      	cbz	r1, 23ff1ee <__ascii_wctomb+0x16>
 23ff1da:	2aff      	cmp	r2, #255	; 0xff
 23ff1dc:	bf8d      	iteet	hi
 23ff1de:	238a      	movhi	r3, #138	; 0x8a
 23ff1e0:	2001      	movls	r0, #1
 23ff1e2:	700a      	strbls	r2, [r1, #0]
 23ff1e4:	6003      	strhi	r3, [r0, #0]
 23ff1e6:	bf88      	it	hi
 23ff1e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 23ff1ec:	4770      	bx	lr
 23ff1ee:	4608      	mov	r0, r1
 23ff1f0:	4770      	bx	lr
	...

023ff1f4 <dynalib_user>:
 23ff1f4:	5f4d 023f 5f75 023f 5f79 023f 0000 0000     M_?.u_?.y_?.....
 23ff204:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ff214:	7574 6c61 6400 7665 6369 2d65 6f63 666e     tual.device-conf
 23ff224:	6769 6400 7665 6369 2d65 6f6c 6767 6e69     ig.device-loggin
 23ff234:	0067 0000                                   g...

023ff238 <_ZTVN5spark10LogHandlerE>:
	...
 23ff248:	5f99 023f 5fc1 023f                         ._?.._?.

023ff250 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ff258:	5fc5 023f 5ff9 023f a9d9 023f ab81 023f     ._?.._?...?...?.
 23ff268:	7274 6575 6600 6c61 6573 4100 7373 7265     true.false.Asser
 23ff278:	6974 6e6f 6146 6c69 7275 2065 2e72 6365     tionFailure r.ec
 23ff288:	3d20 203d 7473 3a64 653a 7272 2863 0029      == std::errc().
 23ff298:	6564 6976 6563 692d 666e 006f 4157 4e52     device-info.WARN
 23ff2a8:	5400 4152 4543 4e00 4e4f 0045 4e49 4f46     .TRACE.NONE.INFO
 23ff2b8:	4500 5252 524f 5000 4e41 4349 4100 4c4c     .ERROR.PANIC.ALL
 23ff2c8:	6400 7665 6369 2d65 6e69 6f66 642d 6665     .device-info-def
 23ff2d8:	7561 746c 0073 6564 6976 6563 692d 666e     aults.device-inf
 23ff2e8:	2d6f 6f63 666e 6769 6c00 676f 654c 6576     o-config.logLeve
 23ff2f8:	006c 6f6c 4667 6c69 6574 7372 7600 6365     l.logFilters.vec
 23ff308:	6f74 3a72 5f3a 5f4d 6572 6c61 6f6c 5f63     tor::_M_realloc_
 23ff318:	6e69 6573 7472 6300 6e6f 4c6e 676f 6c00     insert.connLog.l
 23ff328:	7361 5274 6e75 7200 7365 7465 6552 7361     astRun.resetReas
 23ff338:	6e6f 7200 7365 7465 6552 7361 6e6f 6144     on.resetReasonDa
 23ff348:	6174 6900 636e 756c 6564 6944 6761 6400     ta.includeDiag.d
 23ff358:	6169 0067 6e69 6c63 6475 5465 776f 7265     iag.includeTower
 23ff368:	6d00 6363 6d00 636e 6300 6469 6c00 6361     .mcc.mnc.cid.lac
 23ff378:	7400 776f 7265 4300 6c65 756c 616c 2072     .tower.Cellular 
 23ff388:	6e49 6f66 203a 6963 3d64 6c25 2075 616c     Info: cid=%lu la
 23ff398:	3d63 7525 6d20 6363 253d 2075 6e6d 3d63     c=%u mcc=%u mnc=
 23ff3a8:	7525 6300 6c65 756c 616c 5f72 6c67 626f     %u.cellular_glob
 23ff3b8:	6c61 695f 6564 746e 7469 2079 6166 6c69     al_identity fail
 23ff3c8:	6465 2520 0064 6e69 6c63 6475 4765 6e65     ed %d.includeGen
 23ff3d8:	7265 6c61 7300 7379 6576 0072 6e69 6f66     eral.sysver.info
 23ff3e8:	654c 6764 7265 7520 6470 7461 6465 6c00     Ledger updated.l
 23ff3f8:	7361 5274 6e75 6f4c 0067 6f63 6e6e 6365     astRunLog.connec
 23ff408:	6974 6e6f 6f4c 0067 7075 6164 6574 6f43     tionLog.updateCo
 23ff418:	666e 6769 6c20 7361 5274 6e75 6f4c 3d67     nfig lastRunLog=
 23ff428:	6425 6320 6e6f 656e 7463 6f69 4c6e 676f     %d connectionLog
 23ff438:	253d 2064 6f6c 4c67 7665 6c65 253d 0073     =%d logLevel=%s.
 23ff448:	6572 6174 6e69 6465 6220 6675 6566 2072     retained buffer 
 23ff458:	6176 696c 0064 6572 6174 6e69 6465 6220     valid.retained b
 23ff468:	6675 6566 2072 6572 6e69 7469 6169 696c     uffer reinitiali
 23ff478:	657a 0064 7061 2e70 6564 6976 666e 006f     zed.app.devinfo.

023ff488 <_ZNSt8__detail9__variant12__gen_vtableINS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEEaSEOSH_EUlOT_T0_E_JRSt7variantIJS4_bijxydS5_S7_SC_SG_EEEE9_S_vtableE>:
 23ff488:	6ec5 023f 6ecf 023f 7189 023f 716b 023f     .n?..n?..q?.kq?.
 23ff498:	714d 023f 712b 023f 7109 023f 70e7 023f     Mq?.+q?..q?..p?.
 23ff4a8:	70ad 023f 7073 023f 7017 023f 749d 023f     .p?.sp?..p?..t?.

023ff4b8 <_ZNSt8__detail9__variant12__gen_vtableINS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE4swapERSH_EUlOT_T0_E_JSI_EE9_S_vtableE>:
 23ff4b8:	6fc7 023f 6fe1 023f 6f7b 023f 6f2f 023f     .o?..o?.{o?./o?.
 23ff4c8:	6ee3 023f 725f 023f 7203 023f 71a7 023f     .n?._r?..r?..q?.
 23ff4d8:	739f 023f 732d 023f 72bb 023f 7425 023f     .s?.-s?..r?.%t?.

023ff4e8 <_ZNSt8__detail9__variant12__gen_vtableINS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEERNS0_15_Copy_ctor_baseILb0EJS4_bijxydS5_S7_SC_SG_EEERKSI_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS4_bijxydS5_S7_SC_SG_EEEE9_S_vtableE>:
 23ff4e8:	6387 023f 6385 023f 6389 023f 6391 023f     .c?..c?..c?..c?.
 23ff4f8:	6399 023f 6547 023f 653b 023f 652f 023f     .c?.Ge?.;e?./e?.
 23ff508:	6529 023f 68dd 023f 79f5 023f 77e1 023f     )e?..h?..y?..w?.

023ff518 <_ZNSt8__detail9__variant12__gen_vtableIvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS5_7VariantENS7_16DefaultAllocatorEEENS5_3MapIS4_S9_St4lessIS4_EEEEE8_M_resetEvEUlOT_E_JRSt7variantIJS3_bijxydS4_S6_SB_SF_EEEE9_S_vtableE>:
 23ff518:	6377 023f 6379 023f 637b 023f 637d 023f     wc?.yc?.{c?.}c?.
 23ff528:	637f 023f 6381 023f 6383 023f 6415 023f     .c?..c?..c?..d?.
 23ff538:	6615 023f 6e3d 023f 6e0d 023f               .f?.=n?..n?.

023ff544 <_ZNSt8__detail9__variant12__gen_vtableINS0_21__deduce_visit_resultIN8particle3MapI6StringNS3_7VariantESt4lessIS5_EEEEEONS6_16ConvertToVisitorIS9_vEEJRKSt7variantIJSt9monostatebijxydS5_NS3_6BufferEN5spark6VectorIS6_NSH_16DefaultAllocatorEEES9_EEEE9_S_vtableE>:
 23ff544:	6313 023f 631d 023f 6327 023f 6331 023f     .c?..c?.'c?.1c?.
 23ff554:	633b 023f 6345 023f 634f 023f 6359 023f     ;c?.Ec?.Oc?.Yc?.
 23ff564:	6363 023f 636d 023f 77cf 023f               cc?.mc?..w?.

023ff570 <_ZNSt8__detail9__variant12__gen_vtableINS0_21__deduce_visit_resultI6StringEEON8particle7Variant16ConvertToVisitorIS3_vEEJRKSt7variantIJSt9monostatebijxydS3_NS5_6BufferEN5spark6VectorIS6_NSD_16DefaultAllocatorEEENS5_3MapIS3_S6_St4lessIS3_EEEEEEE9_S_vtableE>:
 23ff570:	63c5 023f 63a1 023f 6b09 023f 6ab5 023f     .c?..c?..k?..j?.
 23ff580:	6ca5 023f 6c49 023f 642d 023f 641b 023f     .l?.Il?.-d?..d?.
 23ff590:	63d9 023f 63ed 023f 6401 023f               .c?..c?..d?.

023ff59c <_ZNSt8__detail9__variant12__gen_vtableINS0_21__deduce_visit_resultIiEEON8particle7Variant16ConvertToVisitorIivEEJRKSt7variantIJSt9monostatebijxyd6StringNS4_6BufferEN5spark6VectorIS5_NSD_16DefaultAllocatorEEENS4_3MapISB_S5_St4lessISB_EEEEEEE9_S_vtableE>:
 23ff59c:	62cb 023f 62cf 023f 62d7 023f 62df 023f     .b?..b?..b?..b?.
 23ff5ac:	62e7 023f 62ef 023f 62f7 023f 6591 023f     .b?..b?..b?..e?.
 23ff5bc:	6307 023f 630b 023f 630f 023f               .c?..c?..c?.

023ff5c8 <_ZNSt8__detail9__variant12__gen_vtableINS0_21__deduce_visit_resultIbEEON8particle7Variant16ConvertToVisitorIbvEEJRKSt7variantIJSt9monostatebijxyd6StringNS4_6BufferEN5spark6VectorIS5_NSD_16DefaultAllocatorEEENS4_3MapISB_S5_St4lessISB_EEEEEEE9_S_vtableE>:
 23ff5c8:	6255 023f 6259 023f 6261 023f 626f 023f     Ub?.Yb?.ab?.ob?.
 23ff5d8:	627d 023f 628f 023f 62a1 023f 6495 023f     }b?..b?..b?..d?.
 23ff5e8:	62bf 023f 62c3 023f 62c7 023f               .b?..b?..b?.

023ff5f4 <_ZZNSt8__detail18__to_chars_10_implIyEEvPcjT_E8__digits>:
 23ff5f4:	3030 3130 3230 3330 3430 3530 3630 3730     0001020304050607
 23ff604:	3830 3930 3031 3131 3231 3331 3431 3531     0809101112131415
 23ff614:	3631 3731 3831 3931 3032 3132 3232 3332     1617181920212223
 23ff624:	3432 3532 3632 3732 3832 3932 3033 3133     2425262728293031
 23ff634:	3233 3333 3433 3533 3633 3733 3833 3933     3233343536373839
 23ff644:	3034 3134 3234 3334 3434 3534 3634 3734     4041424344454647
 23ff654:	3834 3934 3035 3135 3235 3335 3435 3535     4849505152535455
 23ff664:	3635 3735 3835 3935 3036 3136 3236 3336     5657585960616263
 23ff674:	3436 3536 3636 3736 3836 3936 3037 3137     6465666768697071
 23ff684:	3237 3337 3437 3537 3637 3737 3837 3937     7273747576777879
 23ff694:	3038 3138 3238 3338 3438 3538 3638 3738     8081828384858687
 23ff6a4:	3838 3938 3039 3139 3239 3339 3439 3539     8889909192939495
 23ff6b4:	3639 3739 3839 3939                          96979899.

023ff6bd <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits>:
 23ff6bd:	3030 3130 3230 3330 3430 3530 3630 3730     0001020304050607
 23ff6cd:	3830 3930 3031 3131 3231 3331 3431 3531     0809101112131415
 23ff6dd:	3631 3731 3831 3931 3032 3132 3232 3332     1617181920212223
 23ff6ed:	3432 3532 3632 3732 3832 3932 3033 3133     2425262728293031
 23ff6fd:	3233 3333 3433 3533 3633 3733 3833 3933     3233343536373839
 23ff70d:	3034 3134 3234 3334 3434 3534 3634 3734     4041424344454647
 23ff71d:	3834 3934 3035 3135 3235 3335 3435 3535     4849505152535455
 23ff72d:	3635 3735 3835 3935 3036 3136 3236 3336     5657585960616263
 23ff73d:	3436 3536 3636 3736 3836 3936 3037 3137     6465666768697071
 23ff74d:	3237 3337 3437 3537 3637 3737 3837 3937     7273747576777879
 23ff75d:	3038 3138 3238 3338 3438 3538 3638 3738     8081828384858687
 23ff76d:	3838 3938 3039 3139 3239 3339 3439 3539     8889909192939495
 23ff77d:	3639 3739 3839 3939 0000                     96979899...

023ff788 <_ZTV16DeviceInfoLedger>:
	...
 23ff790:	671d 023f 6739 023f 7c81 023f               .g?.9g?..|?.

023ff79c <_ZTV18DeviceConfigLedger>:
	...
 23ff7a4:	6e49 023f 6eb1 023f                         In?..n?.

023ff7ac <_ZTV26DeviceInfoLedgerLogHandler>:
	...
 23ff7b4:	6555 023f 6575 023f a9d9 023f ab81 023f     Ue?.ue?...?...?.
 23ff7c4:	6883 023f ffdc ffff 0000 0000 656d 023f     .h?.........me?.
 23ff7d4:	6589 023f 6899 023f aec5 023f               .e?..h?...?.

023ff7e0 <_ZTVN5spark13CellularClassE>:
	...
 23ff7e8:	8e97 023f 8e8d 023f 8e83 023f 8e39 023f     ..?...?...?.9.?.
 23ff7f8:	8e77 023f 8e6b 023f ad6d 023f ad75 023f     w.?.k.?.m.?.u.?.
 23ff808:	8e5f 023f 8e57 023f 8e4d 023f 8e43 023f     _.?.W.?.M.?.C.?.
 23ff818:	ae9d 023f ada5 023f adad 023f 6977 6972     ..?...?...?.wiri
 23ff828:	676e 4600 6961 656c 2064 6f74 7020 7261     ng.Failed to par
 23ff838:	6573 4320 4f42 3a52 2520 0064 656c 6764     se CBOR: %d.ledg
 23ff848:	7265 675f 7465 695f 736e 6174 636e 2865     er_get_instance(
 23ff858:	2029 6166 6c69 6465 203a 6425 0000 0000     ) failed: %d....

023ff868 <_ZTVN5spark13EthernetClassE>:
	...
 23ff870:	8f73 023f 8f69 023f 8f5f 023f 8f55 023f     s.?.i.?._.?.U.?.
 23ff880:	8f49 023f 8f3d 023f ad6d 023f ad75 023f     I.?.=.?.m.?.u.?.
 23ff890:	8f31 023f 8f29 023f 8f1f 023f 8f15 023f     1.?.).?...?...?.
 23ff8a0:	ae9d 023f ada5 023f adad 023f               ..?...?...?.

023ff8ac <_ZTV9IPAddress>:
	...
 23ff8b4:	8fbd 023f 8fad 023f 8faf 023f 2e30 0030     ..?...?...?.0.0.
 23ff8c4:	2575 3430 0078 0000                         u%04x...

023ff8cc <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ff8d4:	90cb 023f 90d1 023f 9157 023f 90df 023f     ..?...?.W.?...?.
 23ff8e4:	90cd 023f 656c 6764 7265 725f 6165 2864     ..?.ledger_read(
 23ff8f4:	2029 6166 6c69 6465 203a 6425 6c00 6465     ) failed: %d.led
 23ff904:	6567 5f72 7277 7469 2865 2029 6166 6c69     ger_write() fail
 23ff914:	6465 203a 6425 6c00 6465 6567 5f72 6c63     ed: %d.ledger_cl
 23ff924:	736f 2865 2029 6166 6c69 6465 203a 6425     ose() failed: %d
 23ff934:	6c00 6465 6567 5f72 706f 6e65 2928 6620     .ledger_open() f
 23ff944:	6961 656c 3a64 2520 0064 6146 6c69 6465     ailed: %d.Failed
 23ff954:	7420 206f 6e65 6f63 6564 6c20 6465 6567      to encode ledge
 23ff964:	2072 6164 6174 203a 6425 4600 6961 656c     r data: %d.Faile
 23ff974:	2064 6f74 6420 6365 646f 2065 656c 6764     d to decode ledg
 23ff984:	7265 6420 7461 3a61 2520 0064 6e55 7865     er data: %d.Unex
 23ff994:	6570 7463 6465 7420 7079 2065 666f 6c20     pected type of l
 23ff9a4:	6465 6567 2072 6164 6174 0000               edger data..

023ff9b0 <_ZTVN8particle12_GLOBAL__N_112LedgerStreamE>:
	...
 23ff9b8:	992d 023f 9945 023f 98cd 023f 987d 023f     -.?.E.?...?.}.?.
 23ff9c8:	97fd 023f 985d 023f 97fd 023f 9803 023f     ..?.].?...?...?.
 23ff9d8:	9805 023f 6162 6475 5300 7265 6169 006c     ..?.baud.Serial.
 23ff9e8:	6553 6972 6c61 0031 534a 4e4f 7453 6572     Serial1.JSONStre
 23ff9f8:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
 23ffa08:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
 23ffa18:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
 23ffa28:	6400 7465 6961 736c 3d20 0020 0a0d 6d00     .details = ....m
 23ffa38:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
 23ffa48:	6c69 0000                                   il..

023ffa4c <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffa54:	9e59 023f 9e7f 023f 9e31 023f 90e7 023f     Y.?...?.1.?...?.

023ffa64 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffa6c:	a2e5 023f a2fd 023f a9d9 023f ab81 023f     ..?...?...?...?.

023ffa7c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffa84:	a311 023f a325 023f abb9 023f 9e45 023f     ..?.%.?...?.E.?.

023ffa94 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffa9c:	9e57 023f 9e8d 023f a93d 023f 9e47 023f     W.?...?.=.?.G.?.

023ffaac <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffab4:	9e55 023f 9e9b 023f a24d 023f 9ebd 023f     U.?...?.M.?...?.

023ffac4 <CSWTCH.109>:
 23ffac4:	ae8c 1007 ae5c 1007 af24 1007 aee0 1007     ....\...$.......

023ffad4 <_ZTVN5spark12NetworkClassE>:
	...
 23ffadc:	ad2d 023f ad37 023f ad41 023f ad4b 023f     -.?.7.?.A.?.K.?.
 23ffaec:	ad55 023f ad61 023f ad6d 023f ad75 023f     U.?.a.?.m.?.u.?.
 23ffafc:	ad7d 023f ad89 023f ad91 023f ad9b 023f     }.?...?...?...?.
 23ffb0c:	ae9d 023f ada5 023f adad 023f 5925 252d     ..?...?...?.%Y-%
 23ffb1c:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 23ffb2c:	7361 7463 6d69 0065                         asctime.

023ffb34 <_ZTV11USARTSerial>:
	...
 23ffb3c:	b219 023f b285 023f b25d 023f aec5 023f     ..?...?.].?...?.
 23ffb4c:	b22d 023f b249 023f b23b 023f b257 023f     -.?.I.?.;.?.W.?.
 23ffb5c:	af8f 023f b21b 023f b21f 023f               ..?...?...?.

023ffb68 <_ZTV9USBSerial>:
	...
 23ffb70:	b2dd 023f b345 023f b31b 023f aec5 023f     ..?.E.?...?...?.
 23ffb80:	b30d 023f b2df 023f b2ef 023f b33f 023f     ..?...?...?.?.?.
 23ffb90:	af8f 023f b2ff 023f b2d7 023f 6725 0000     ..?...?...?.%g..

023ffba0 <_ZNSt8__detail9__variant12__gen_vtableINS0_21__deduce_visit_resultIN5spark6VectorIN8particle7VariantENS3_16DefaultAllocatorEEEEEONS6_16ConvertToVisitorIS8_vEEJRKSt7variantIJSt9monostatebijxyd6StringNS5_6BufferES8_NS5_3MapISF_S6_St4lessISF_EEEEEEE9_S_vtableE>:
 23ffba0:	b3e9 023f b3f3 023f b3fd 023f b407 023f     ..?...?...?...?.
 23ffbb0:	b411 023f b41b 023f b425 023f b42f 023f     ..?...?.%.?./.?.
 23ffbc0:	b439 023f bc61 023f b443 023f               9.?.a.?.C.?.

023ffbcc <_ZTVN5spark9WiFiClassE>:
	...
 23ffbd4:	cc93 023f cc89 023f cc7f 023f cc35 023f     ..?...?...?.5.?.
 23ffbe4:	cc73 023f cc67 023f ad6d 023f ad75 023f     s.?.g.?.m.?.u.?.
 23ffbf4:	cc5b 023f cc53 023f cc49 023f cc3f 023f     [.?.S.?.I.?.?.?.
 23ffc04:	ae9d 023f ada5 023f adad 023f               ..?...?...?.

023ffc10 <_ZSt7nothrow>:
 23ffc10:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23ffc20:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23ffc30:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23ffc40:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23ffc50:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23ffc60:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23ffc70:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
 23ffc80:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

023ffc90 <fpi.1>:
 23ffc90:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 23ffca0:	0000 0000                                   ....

023ffca4 <fpinan.0>:
 23ffca4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 23ffcb4:	0000 0000                                   ....

023ffcb8 <tinytens>:
 23ffcb8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 23ffcc8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 23ffcd8:	6f43 64ac 0628 1168                         Co.d(.h.

023ffce0 <_ctype_>:
 23ffce0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffcf0:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffd00:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffd10:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23ffd20:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23ffd30:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23ffd40:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23ffd50:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23ffd60:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 23ffde0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
 23ffdf0:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
 23ffe00:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
 23ffe10:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
 23ffe20:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
 23ffe30:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
 23ffe40:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
 23ffe50:	632e 2e00 0000 0000                         .c......

023ffe58 <_C_numeric_locale>:
 23ffe58:	fe53 023f fa36 023f acac 1007 4f50 4953     S.?.6.?.....POSI
 23ffe68:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
 23ffe78:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
 23ffe88:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
 23ffe98:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
 23ffea8:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
 23ffeb8:	696c 2f62 706d 6572 2e63 0063 0000 0000     lib/mprec.c.....

023ffec8 <__mprec_bigtens>:
 23ffec8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 23ffed8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 23ffee8:	bf3c 7f73 4fdd 7515                         <.s..O.u

023ffef0 <__mprec_tens>:
 23ffef0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 23fff00:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 23fff10:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 23fff20:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 23fff30:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 23fff40:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 23fff50:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 23fff60:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 23fff70:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 23fff80:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 23fff90:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 23fffa0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 23fffb0:	9db4 79d9 7843 44ea                         ...yCx.D

023fffb8 <p05.0>:
 23fffb8:	0005 0000 0019 0000 007d 0000               ........}...

023fffc4 <link_const_data_end>:
 23fffc4:	023f618d 	.word	0x023f618d
 23fffc8:	023f8361 	.word	0x023f8361
 23fffcc:	023f8e29 	.word	0x023f8e29
 23fffd0:	023f8ea1 	.word	0x023f8ea1
 23fffd4:	023f8f7d 	.word	0x023f8f7d
 23fffd8:	023f8f91 	.word	0x023f8f91
 23fffdc:	023fa9c9 	.word	0x023fa9c9
 23fffe0:	023faeb1 	.word	0x023faeb1
 23fffe4:	023faf59 	.word	0x023faf59
 23fffe8:	023fb1e1 	.word	0x023fb1e1
 23fffec:	023fb205 	.word	0x023fb205
 23ffff0:	023fcc9d 	.word	0x023fcc9d
