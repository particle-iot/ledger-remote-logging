
/Users/erik/Documents/GitHub/ledger_white-paper/ledger_example/target/6.2.0/boron/ledger_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002d90  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6dac  000b6dac  00006dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000074  2003e5c4  000b6dd0  0000e5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001c4  2003e638  2003e638  0001e638  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b6e44  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b6e48  000b6e48  00016e48  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b6e4e  000b6e4e  00016e4e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b6e72  000b6e72  00016e72  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001a8a49  00000000  00000000  00016e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000153ec  00000000  00000000  001bf8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0005f54a  00000000  00000000  001d4cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000033a8  00000000  00000000  002341f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00010048  00000000  00000000  0023759d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039f78  00000000  00000000  002475e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004b211  00000000  00000000  0028155d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001d65e5  00000000  00000000  002cc76e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000097c4  00000000  00000000  004a2d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f002 fa8f 	bl	b6574 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f002 fab1 	bl	b65c4 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e5c4 	.word	0x2003e5c4
   b406c:	000b6dd0 	.word	0x000b6dd0
   b4070:	2003e638 	.word	0x2003e638
   b4074:	2003e638 	.word	0x2003e638
   b4078:	2003e7fc 	.word	0x2003e7fc

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f002 f9f3 	bl	b646c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b6d80 	.word	0x000b6d80
   b40a0:	000b6dac 	.word	0x000b6dac

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b852 	b.w	b414c <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f88f 	bl	b41cc <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f002 b993 	b.w	b63dc <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 bb17 	b.w	b46e8 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bb15 	b.w	b46e8 <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f000 bb1b 	b.w	b46f8 <free>
	...

000b40c4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40c6:	4a03      	ldr	r2, [pc, #12]	; (b40d4 <__cxa_pure_virtual+0x10>)
   b40c8:	4903      	ldr	r1, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x14>)
   b40ca:	200c      	movs	r0, #12
   b40cc:	f000 fa38 	bl	b4540 <panic_>
  while (1);
   b40d0:	e7fe      	b.n	b40d0 <__cxa_pure_virtual+0xc>
   b40d2:	bf00      	nop
   b40d4:	000b43c1 	.word	0x000b43c1
   b40d8:	000b68b8 	.word	0x000b68b8

000b40dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40dc:	7800      	ldrb	r0, [r0, #0]
   b40de:	fab0 f080 	clz	r0, r0
   b40e2:	0940      	lsrs	r0, r0, #5
   b40e4:	4770      	bx	lr

000b40e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40e6:	2301      	movs	r3, #1
   b40e8:	7003      	strb	r3, [r0, #0]
   b40ea:	4770      	bx	lr

000b40ec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40ec:	4770      	bx	lr
	...

000b40f0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40f0:	4b0a      	ldr	r3, [pc, #40]	; (b411c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40f2:	b510      	push	{r4, lr}
   b40f4:	4604      	mov	r4, r0
   b40f6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40f8:	f001 f836 	bl	b5168 <_ZN5spark10LogManager8instanceEv>
   b40fc:	4621      	mov	r1, r4
   b40fe:	f001 fa80 	bl	b5602 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4102:	f002 f923 	bl	b634c <_Z16_fetch_usbserialv>
   b4106:	f002 f913 	bl	b6330 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b410a:	4620      	mov	r0, r4
   b410c:	4b04      	ldr	r3, [pc, #16]	; (b4120 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b410e:	f840 3b04 	str.w	r3, [r0], #4
   b4112:	f001 f8ff 	bl	b5314 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4116:	4620      	mov	r0, r4
   b4118:	bd10      	pop	{r4, pc}
   b411a:	bf00      	nop
   b411c:	000b690c 	.word	0x000b690c
   b4120:	000b68f4 	.word	0x000b68f4

000b4124 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4124:	b510      	push	{r4, lr}
   b4126:	4604      	mov	r4, r0
    }
   b4128:	f7ff ffe2 	bl	b40f0 <_ZN5spark16SerialLogHandlerD1Ev>
   b412c:	4620      	mov	r0, r4
   b412e:	2124      	movs	r1, #36	; 0x24
   b4130:	f7ff ffc5 	bl	b40be <_ZdlPvj>
   b4134:	4620      	mov	r0, r4
   b4136:	bd10      	pop	{r4, pc}

000b4138 <_ZN8particle6LedgerD1Ev>:
    }

    /**
     * Destructor.
     */
    ~Ledger() {
   b4138:	b510      	push	{r4, lr}
   b413a:	4604      	mov	r4, r0
        if (instance_) {
   b413c:	6800      	ldr	r0, [r0, #0]
   b413e:	b110      	cbz	r0, b4146 <_ZN8particle6LedgerD1Ev+0xe>
            ledger_release(instance_, nullptr);
   b4140:	2100      	movs	r1, #0
   b4142:	f000 fa59 	bl	b45f8 <ledger_release>
        }
    }
   b4146:	4620      	mov	r0, r4
   b4148:	bd10      	pop	{r4, pc}
	...

000b414c <setup>:
Ledger DeviceConfig;    //cloud to device ledger for configuration

retained uint8_t remoteLogs[2048];

// setup() runs once, when the device is first turned on
void setup() {
   b414c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b414e:	2000      	movs	r0, #0
   b4150:	f000 f946 	bl	b43e0 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4154:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4158:	4604      	mov	r4, r0
   b415a:	2000      	movs	r0, #0
   b415c:	f000 f940 	bl	b43e0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4160:	1b00      	subs	r0, r0, r4
   b4162:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4166:	42a8      	cmp	r0, r5
   b4168:	f171 0300 	sbcs.w	r3, r1, #0
   b416c:	d207      	bcs.n	b417e <setup+0x32>
  // Put initialization like pinMode and begin functions here
  
  waitFor(Serial.isConnected, 10000);   //waits for serial port for specified time, handy for seeing early log messages
   b416e:	f002 f8ed 	bl	b634c <_Z16_fetch_usbserialv>
   b4172:	f002 f8e0 	bl	b6336 <_ZN9USBSerial11isConnectedEv>
   b4176:	b910      	cbnz	r0, b417e <setup+0x32>
            spark_process();
   b4178:	f000 fa26 	bl	b45c8 <spark_process>
        while (_while() && !_condition()) {
   b417c:	e7ed      	b.n	b415a <setup+0xe>
   b417e:	f002 f8e5 	bl	b634c <_Z16_fetch_usbserialv>
   b4182:	f002 f8d8 	bl	b6336 <_ZN9USBSerial11isConnectedEv>

  // Start cloud to device ledger synchronization
  DeviceConfig = Particle.ledger("device-config");
   b4186:	a801      	add	r0, sp, #4
   b4188:	490c      	ldr	r1, [pc, #48]	; (b41bc <setup+0x70>)
   b418a:	f000 fb75 	bl	b4878 <_ZN10CloudClass6ledgerEPKc>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b418e:	4b0c      	ldr	r3, [pc, #48]	; (b41c0 <setup+0x74>)
      __a = _GLIBCXX_MOVE(__b);
   b4190:	9901      	ldr	r1, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4192:	681a      	ldr	r2, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
   b4194:	6019      	str	r1, [r3, #0]
   b4196:	a801      	add	r0, sp, #4
      __b = _GLIBCXX_MOVE(__tmp);
   b4198:	9201      	str	r2, [sp, #4]
   b419a:	f7ff ffcd 	bl	b4138 <_ZN8particle6LedgerD1Ev>
  //DeviceConfig.onSync(OnSyncCallback);    //EAF need to do this to set the config values for logging
  //https://docs.particle.io/reference/device-os/api/ledger/onsync-onsynccallback-ledger-class/

  // set device to cloud ledger
  DeviceLogging = Particle.ledger("device-logging");
   b419e:	a801      	add	r0, sp, #4
   b41a0:	4908      	ldr	r1, [pc, #32]	; (b41c4 <setup+0x78>)
   b41a2:	f000 fb69 	bl	b4878 <_ZN10CloudClass6ledgerEPKc>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b41a6:	4b08      	ldr	r3, [pc, #32]	; (b41c8 <setup+0x7c>)
      __a = _GLIBCXX_MOVE(__b);
   b41a8:	9901      	ldr	r1, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b41aa:	681a      	ldr	r2, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
   b41ac:	6019      	str	r1, [r3, #0]
   b41ae:	a801      	add	r0, sp, #4
      __b = _GLIBCXX_MOVE(__tmp);
   b41b0:	9201      	str	r2, [sp, #4]
   b41b2:	f7ff ffc1 	bl	b4138 <_ZN8particle6LedgerD1Ev>
        .withRetainedBuffer(remoteLogs, sizeof(remoteLogs))
        .setup(); 
  */


}
   b41b6:	b003      	add	sp, #12
   b41b8:	bd30      	pop	{r4, r5, pc}
   b41ba:	bf00      	nop
   b41bc:	000b68cd 	.word	0x000b68cd
   b41c0:	2003e638 	.word	0x2003e638
   b41c4:	000b68db 	.word	0x000b68db
   b41c8:	2003e63c 	.word	0x2003e63c

000b41cc <loop>:
  // delay( 10 * 1000 ); // milliseconds and blocking - see docs for more info!

  //insert the portion to set the data to the D->C ledger

  //DeviceInfoLedger::instance().loop();
}
   b41cc:	4770      	bx	lr

000b41ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b41ce:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b41d0:	e9d0 5300 	ldrd	r5, r3, [r0]
   b41d4:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b41d6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b41d8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b41dc:	42ae      	cmp	r6, r5
   b41de:	d004      	beq.n	b41ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b41e0:	4628      	mov	r0, r5
   b41e2:	f001 ff0b 	bl	b5ffc <_ZN6StringD1Ev>
   b41e6:	3514      	adds	r5, #20
   b41e8:	e7f8      	b.n	b41dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b41ea:	6820      	ldr	r0, [r4, #0]
   b41ec:	f000 fa84 	bl	b46f8 <free>
    AllocatorT::free(data_);
}
   b41f0:	4620      	mov	r0, r4
   b41f2:	bd70      	pop	{r4, r5, r6, pc}

000b41f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b41f4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b41f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b41f8:	4604      	mov	r4, r0
   b41fa:	460d      	mov	r5, r1
   b41fc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b41fe:	d916      	bls.n	b422e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4200:	4290      	cmp	r0, r2
   b4202:	d215      	bcs.n	b4230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4204:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4208:	1a75      	subs	r5, r6, r1
   b420a:	f1a1 0714 	sub.w	r7, r1, #20
   b420e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4210:	42b7      	cmp	r7, r6
   b4212:	d01c      	beq.n	b424e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4214:	b12c      	cbz	r4, b4222 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4216:	4631      	mov	r1, r6
   b4218:	4620      	mov	r0, r4
   b421a:	f001 ff58 	bl	b60ce <_ZN6StringC1EOS_>
   b421e:	7c33      	ldrb	r3, [r6, #16]
   b4220:	7423      	strb	r3, [r4, #16]
   b4222:	4630      	mov	r0, r6
   b4224:	f001 feea 	bl	b5ffc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4228:	3e14      	subs	r6, #20
   b422a:	3c14      	subs	r4, #20
   b422c:	e7f0      	b.n	b4210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b422e:	d00e      	beq.n	b424e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4230:	42b5      	cmp	r5, r6
   b4232:	d00c      	beq.n	b424e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4234:	b12c      	cbz	r4, b4242 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4236:	4629      	mov	r1, r5
   b4238:	4620      	mov	r0, r4
   b423a:	f001 ff48 	bl	b60ce <_ZN6StringC1EOS_>
   b423e:	7c2b      	ldrb	r3, [r5, #16]
   b4240:	7423      	strb	r3, [r4, #16]
   b4242:	4628      	mov	r0, r5
   b4244:	f001 feda 	bl	b5ffc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4248:	3514      	adds	r5, #20
   b424a:	3414      	adds	r4, #20
   b424c:	e7f0      	b.n	b4230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b424e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4254:	2300      	movs	r3, #0
   b4256:	e9c0 3300 	strd	r3, r3, [r0]
   b425a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b425c:	684f      	ldr	r7, [r1, #4]
   b425e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4260:	4604      	mov	r4, r0
   b4262:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4264:	dd23      	ble.n	b42ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4266:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b426a:	fb08 f007 	mul.w	r0, r8, r7
   b426e:	f000 fa3b 	bl	b46e8 <malloc>
            if (!d) {
   b4272:	4605      	mov	r5, r0
   b4274:	b1d8      	cbz	r0, b42ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4276:	e9d4 1200 	ldrd	r1, r2, [r4]
   b427a:	fb08 1202 	mla	r2, r8, r2, r1
   b427e:	f7ff ffb9 	bl	b41f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4282:	6820      	ldr	r0, [r4, #0]
   b4284:	f000 fa38 	bl	b46f8 <free>
        data_ = d;
   b4288:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b428a:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b428c:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4290:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4294:	45b8      	cmp	r8, r7
   b4296:	d008      	beq.n	b42aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4298:	4639      	mov	r1, r7
   b429a:	4628      	mov	r0, r5
   b429c:	f001 ff31 	bl	b6102 <_ZN6StringC1ERKS_>
   b42a0:	7c3b      	ldrb	r3, [r7, #16]
   b42a2:	742b      	strb	r3, [r5, #16]
   b42a4:	3714      	adds	r7, #20
   b42a6:	3514      	adds	r5, #20
   b42a8:	e7f4      	b.n	b4294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b42aa:	6873      	ldr	r3, [r6, #4]
   b42ac:	6063      	str	r3, [r4, #4]
}
   b42ae:	4620      	mov	r0, r4
   b42b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b42b4 <_GLOBAL__sub_I_SystemMode>:
   b42b4:	b5f0      	push	{r4, r5, r6, r7, lr}
              error_(SYSTEM_ERROR_NONE) {
   b42b6:	4b26      	ldr	r3, [pc, #152]	; (b4350 <_GLOBAL__sub_I_SystemMode+0x9c>)
    SleepResult() {}
   b42b8:	4a26      	ldr	r2, [pc, #152]	; (b4354 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b42ba:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b42bc:	2400      	movs	r4, #0
   b42be:	b08d      	sub	sp, #52	; 0x34
   b42c0:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b42c4:	2001      	movs	r0, #1
   b42c6:	f000 f95b 	bl	b4580 <set_system_mode>
SYSTEM_THREAD(ENABLED);   //not required 
   b42ca:	4621      	mov	r1, r4
   b42cc:	2001      	movs	r0, #1
   b42ce:	f000 f95f 	bl	b4590 <system_thread_set_state>
        capacity_(0) {
   b42d2:	e9cd 4400 	strd	r4, r4, [sp]
   b42d6:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b42d8:	f002 f838 	bl	b634c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b42dc:	4d1e      	ldr	r5, [pc, #120]	; (b4358 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b42de:	4606      	mov	r6, r0
   b42e0:	4669      	mov	r1, sp
   b42e2:	a803      	add	r0, sp, #12
   b42e4:	f7ff ffb4 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b42e8:	462f      	mov	r7, r5

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   b42ea:	a903      	add	r1, sp, #12
   b42ec:	a806      	add	r0, sp, #24
   b42ee:	f7ff ffaf 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b42f2:	4b1a      	ldr	r3, [pc, #104]	; (b435c <_GLOBAL__sub_I_SystemMode+0xa8>)
   b42f4:	f847 3b04 	str.w	r3, [r7], #4
   b42f8:	a906      	add	r1, sp, #24
   b42fa:	a809      	add	r0, sp, #36	; 0x24
   b42fc:	f7ff ffa8 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4300:	aa09      	add	r2, sp, #36	; 0x24
   b4302:	211e      	movs	r1, #30
   b4304:	4638      	mov	r0, r7
   b4306:	f001 fa1d 	bl	b5744 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b430a:	a809      	add	r0, sp, #36	; 0x24
   b430c:	f7ff ff5f 	bl	b41ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4310:	a806      	add	r0, sp, #24
   b4312:	f7ff ff5c 	bl	b41ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4316:	4b12      	ldr	r3, [pc, #72]	; (b4360 <_GLOBAL__sub_I_SystemMode+0xac>)
   b4318:	602b      	str	r3, [r5, #0]
   b431a:	a803      	add	r0, sp, #12
   b431c:	622e      	str	r6, [r5, #32]
   b431e:	f7ff ff56 	bl	b41ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4322:	4b10      	ldr	r3, [pc, #64]	; (b4364 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b4324:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4326:	f002 f811 	bl	b634c <_Z16_fetch_usbserialv>
   b432a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b432e:	f001 fffb 	bl	b6328 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4332:	f000 ff19 	bl	b5168 <_ZN5spark10LogManager8instanceEv>
   b4336:	4629      	mov	r1, r5
   b4338:	f001 f91c 	bl	b5574 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   b433c:	4668      	mov	r0, sp
   b433e:	f7ff ff46 	bl	b41ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
            instance_(instance) {
   b4342:	4b09      	ldr	r3, [pc, #36]	; (b4368 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b4344:	601c      	str	r4, [r3, #0]
   b4346:	4b09      	ldr	r3, [pc, #36]	; (b436c <_GLOBAL__sub_I_SystemMode+0xb8>)
   b4348:	601c      	str	r4, [r3, #0]
}
   b434a:	b00d      	add	sp, #52	; 0x34
   b434c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b434e:	bf00      	nop
   b4350:	2003e640 	.word	0x2003e640
   b4354:	ffff0000 	.word	0xffff0000
   b4358:	2003e64c 	.word	0x2003e64c
   b435c:	000b68f4 	.word	0x000b68f4
   b4360:	000b6a98 	.word	0x000b6a98
   b4364:	000b690c 	.word	0x000b690c
   b4368:	2003e63c 	.word	0x2003e63c
   b436c:	2003e638 	.word	0x2003e638

000b4370 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4370:	b508      	push	{r3, lr}
   b4372:	4b02      	ldr	r3, [pc, #8]	; (b437c <os_mutex_recursive_create+0xc>)
   b4374:	681b      	ldr	r3, [r3, #0]
   b4376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4378:	9301      	str	r3, [sp, #4]
   b437a:	bd08      	pop	{r3, pc}
   b437c:	00030248 	.word	0x00030248

000b4380 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4380:	b508      	push	{r3, lr}
   b4382:	4b02      	ldr	r3, [pc, #8]	; (b438c <os_mutex_recursive_destroy+0xc>)
   b4384:	681b      	ldr	r3, [r3, #0]
   b4386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4388:	9301      	str	r3, [sp, #4]
   b438a:	bd08      	pop	{r3, pc}
   b438c:	00030248 	.word	0x00030248

000b4390 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4390:	b508      	push	{r3, lr}
   b4392:	4b02      	ldr	r3, [pc, #8]	; (b439c <os_mutex_recursive_lock+0xc>)
   b4394:	681b      	ldr	r3, [r3, #0]
   b4396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4398:	9301      	str	r3, [sp, #4]
   b439a:	bd08      	pop	{r3, pc}
   b439c:	00030248 	.word	0x00030248

000b43a0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b43a0:	b508      	push	{r3, lr}
   b43a2:	4b02      	ldr	r3, [pc, #8]	; (b43ac <os_mutex_recursive_unlock+0xc>)
   b43a4:	681b      	ldr	r3, [r3, #0]
   b43a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b43a8:	9301      	str	r3, [sp, #4]
   b43aa:	bd08      	pop	{r3, pc}
   b43ac:	00030248 	.word	0x00030248

000b43b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b43b0:	b508      	push	{r3, lr}
   b43b2:	4b02      	ldr	r3, [pc, #8]	; (b43bc <HAL_RNG_GetRandomNumber+0xc>)
   b43b4:	681b      	ldr	r3, [r3, #0]
   b43b6:	685b      	ldr	r3, [r3, #4]
   b43b8:	9301      	str	r3, [sp, #4]
   b43ba:	bd08      	pop	{r3, pc}
   b43bc:	00030218 	.word	0x00030218

000b43c0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b43c0:	b508      	push	{r3, lr}
   b43c2:	4b02      	ldr	r3, [pc, #8]	; (b43cc <HAL_Delay_Microseconds+0xc>)
   b43c4:	681b      	ldr	r3, [r3, #0]
   b43c6:	68db      	ldr	r3, [r3, #12]
   b43c8:	9301      	str	r3, [sp, #4]
   b43ca:	bd08      	pop	{r3, pc}
   b43cc:	00030218 	.word	0x00030218

000b43d0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b43d0:	b508      	push	{r3, lr}
   b43d2:	4b02      	ldr	r3, [pc, #8]	; (b43dc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b43d4:	681b      	ldr	r3, [r3, #0]
   b43d6:	695b      	ldr	r3, [r3, #20]
   b43d8:	9301      	str	r3, [sp, #4]
   b43da:	bd08      	pop	{r3, pc}
   b43dc:	00030218 	.word	0x00030218

000b43e0 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b43e0:	b508      	push	{r3, lr}
   b43e2:	4b02      	ldr	r3, [pc, #8]	; (b43ec <hal_timer_millis+0xc>)
   b43e4:	681b      	ldr	r3, [r3, #0]
   b43e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b43e8:	9301      	str	r3, [sp, #4]
   b43ea:	bd08      	pop	{r3, pc}
   b43ec:	00030218 	.word	0x00030218

000b43f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b43f0:	b508      	push	{r3, lr}
   b43f2:	4b02      	ldr	r3, [pc, #8]	; (b43fc <inet_inet_ntop+0xc>)
   b43f4:	681b      	ldr	r3, [r3, #0]
   b43f6:	695b      	ldr	r3, [r3, #20]
   b43f8:	9301      	str	r3, [sp, #4]
   b43fa:	bd08      	pop	{r3, pc}
   b43fc:	00030264 	.word	0x00030264

000b4400 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4400:	b508      	push	{r3, lr}
   b4402:	4b02      	ldr	r3, [pc, #8]	; (b440c <netdb_freeaddrinfo+0xc>)
   b4404:	681b      	ldr	r3, [r3, #0]
   b4406:	689b      	ldr	r3, [r3, #8]
   b4408:	9301      	str	r3, [sp, #4]
   b440a:	bd08      	pop	{r3, pc}
   b440c:	00030268 	.word	0x00030268

000b4410 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4410:	b508      	push	{r3, lr}
   b4412:	4b02      	ldr	r3, [pc, #8]	; (b441c <netdb_getaddrinfo+0xc>)
   b4414:	681b      	ldr	r3, [r3, #0]
   b4416:	68db      	ldr	r3, [r3, #12]
   b4418:	9301      	str	r3, [sp, #4]
   b441a:	bd08      	pop	{r3, pc}
   b441c:	00030268 	.word	0x00030268

000b4420 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4420:	b508      	push	{r3, lr}
   b4422:	4b02      	ldr	r3, [pc, #8]	; (b442c <hal_usart_end+0xc>)
   b4424:	681b      	ldr	r3, [r3, #0]
   b4426:	689b      	ldr	r3, [r3, #8]
   b4428:	9301      	str	r3, [sp, #4]
   b442a:	bd08      	pop	{r3, pc}
   b442c:	0003023c 	.word	0x0003023c

000b4430 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4430:	b508      	push	{r3, lr}
   b4432:	4b02      	ldr	r3, [pc, #8]	; (b443c <hal_usart_write+0xc>)
   b4434:	681b      	ldr	r3, [r3, #0]
   b4436:	68db      	ldr	r3, [r3, #12]
   b4438:	9301      	str	r3, [sp, #4]
   b443a:	bd08      	pop	{r3, pc}
   b443c:	0003023c 	.word	0x0003023c

000b4440 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4440:	b508      	push	{r3, lr}
   b4442:	4b02      	ldr	r3, [pc, #8]	; (b444c <hal_usart_available+0xc>)
   b4444:	681b      	ldr	r3, [r3, #0]
   b4446:	691b      	ldr	r3, [r3, #16]
   b4448:	9301      	str	r3, [sp, #4]
   b444a:	bd08      	pop	{r3, pc}
   b444c:	0003023c 	.word	0x0003023c

000b4450 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4450:	b508      	push	{r3, lr}
   b4452:	4b02      	ldr	r3, [pc, #8]	; (b445c <hal_usart_read+0xc>)
   b4454:	681b      	ldr	r3, [r3, #0]
   b4456:	695b      	ldr	r3, [r3, #20]
   b4458:	9301      	str	r3, [sp, #4]
   b445a:	bd08      	pop	{r3, pc}
   b445c:	0003023c 	.word	0x0003023c

000b4460 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4460:	b508      	push	{r3, lr}
   b4462:	4b02      	ldr	r3, [pc, #8]	; (b446c <hal_usart_peek+0xc>)
   b4464:	681b      	ldr	r3, [r3, #0]
   b4466:	699b      	ldr	r3, [r3, #24]
   b4468:	9301      	str	r3, [sp, #4]
   b446a:	bd08      	pop	{r3, pc}
   b446c:	0003023c 	.word	0x0003023c

000b4470 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4470:	b508      	push	{r3, lr}
   b4472:	4b02      	ldr	r3, [pc, #8]	; (b447c <hal_usart_flush+0xc>)
   b4474:	681b      	ldr	r3, [r3, #0]
   b4476:	69db      	ldr	r3, [r3, #28]
   b4478:	9301      	str	r3, [sp, #4]
   b447a:	bd08      	pop	{r3, pc}
   b447c:	0003023c 	.word	0x0003023c

000b4480 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4480:	b508      	push	{r3, lr}
   b4482:	4b02      	ldr	r3, [pc, #8]	; (b448c <hal_usart_available_data_for_write+0xc>)
   b4484:	681b      	ldr	r3, [r3, #0]
   b4486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4488:	9301      	str	r3, [sp, #4]
   b448a:	bd08      	pop	{r3, pc}
   b448c:	0003023c 	.word	0x0003023c

000b4490 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4490:	b508      	push	{r3, lr}
   b4492:	4b02      	ldr	r3, [pc, #8]	; (b449c <hal_usart_begin_config+0xc>)
   b4494:	681b      	ldr	r3, [r3, #0]
   b4496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4498:	9301      	str	r3, [sp, #4]
   b449a:	bd08      	pop	{r3, pc}
   b449c:	0003023c 	.word	0x0003023c

000b44a0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b44a0:	b508      	push	{r3, lr}
   b44a2:	4b02      	ldr	r3, [pc, #8]	; (b44ac <hal_usart_init_ex+0xc>)
   b44a4:	681b      	ldr	r3, [r3, #0]
   b44a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44a8:	9301      	str	r3, [sp, #4]
   b44aa:	bd08      	pop	{r3, pc}
   b44ac:	0003023c 	.word	0x0003023c

000b44b0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b44b0:	b508      	push	{r3, lr}
   b44b2:	4b02      	ldr	r3, [pc, #8]	; (b44bc <HAL_USB_USART_Init+0xc>)
   b44b4:	681b      	ldr	r3, [r3, #0]
   b44b6:	681b      	ldr	r3, [r3, #0]
   b44b8:	9301      	str	r3, [sp, #4]
   b44ba:	bd08      	pop	{r3, pc}
   b44bc:	0003024c 	.word	0x0003024c

000b44c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b44c0:	b508      	push	{r3, lr}
   b44c2:	4b02      	ldr	r3, [pc, #8]	; (b44cc <HAL_USB_USART_Begin+0xc>)
   b44c4:	681b      	ldr	r3, [r3, #0]
   b44c6:	685b      	ldr	r3, [r3, #4]
   b44c8:	9301      	str	r3, [sp, #4]
   b44ca:	bd08      	pop	{r3, pc}
   b44cc:	0003024c 	.word	0x0003024c

000b44d0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b44d0:	b508      	push	{r3, lr}
   b44d2:	4b02      	ldr	r3, [pc, #8]	; (b44dc <HAL_USB_USART_End+0xc>)
   b44d4:	681b      	ldr	r3, [r3, #0]
   b44d6:	689b      	ldr	r3, [r3, #8]
   b44d8:	9301      	str	r3, [sp, #4]
   b44da:	bd08      	pop	{r3, pc}
   b44dc:	0003024c 	.word	0x0003024c

000b44e0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
   b44e0:	b508      	push	{r3, lr}
   b44e2:	4b02      	ldr	r3, [pc, #8]	; (b44ec <HAL_USB_USART_Available_Data+0xc>)
   b44e4:	681b      	ldr	r3, [r3, #0]
   b44e6:	691b      	ldr	r3, [r3, #16]
   b44e8:	9301      	str	r3, [sp, #4]
   b44ea:	bd08      	pop	{r3, pc}
   b44ec:	0003024c 	.word	0x0003024c

000b44f0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
   b44f0:	b508      	push	{r3, lr}
   b44f2:	4b02      	ldr	r3, [pc, #8]	; (b44fc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b44f4:	681b      	ldr	r3, [r3, #0]
   b44f6:	695b      	ldr	r3, [r3, #20]
   b44f8:	9301      	str	r3, [sp, #4]
   b44fa:	bd08      	pop	{r3, pc}
   b44fc:	0003024c 	.word	0x0003024c

000b4500 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4500:	b508      	push	{r3, lr}
   b4502:	4b02      	ldr	r3, [pc, #8]	; (b450c <HAL_USB_USART_Receive_Data+0xc>)
   b4504:	681b      	ldr	r3, [r3, #0]
   b4506:	699b      	ldr	r3, [r3, #24]
   b4508:	9301      	str	r3, [sp, #4]
   b450a:	bd08      	pop	{r3, pc}
   b450c:	0003024c 	.word	0x0003024c

000b4510 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4510:	b508      	push	{r3, lr}
   b4512:	4b02      	ldr	r3, [pc, #8]	; (b451c <HAL_USB_USART_Send_Data+0xc>)
   b4514:	681b      	ldr	r3, [r3, #0]
   b4516:	69db      	ldr	r3, [r3, #28]
   b4518:	9301      	str	r3, [sp, #4]
   b451a:	bd08      	pop	{r3, pc}
   b451c:	0003024c 	.word	0x0003024c

000b4520 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
   b4520:	b508      	push	{r3, lr}
   b4522:	4b02      	ldr	r3, [pc, #8]	; (b452c <HAL_USB_USART_Flush_Data+0xc>)
   b4524:	681b      	ldr	r3, [r3, #0]
   b4526:	6a1b      	ldr	r3, [r3, #32]
   b4528:	9301      	str	r3, [sp, #4]
   b452a:	bd08      	pop	{r3, pc}
   b452c:	0003024c 	.word	0x0003024c

000b4530 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4530:	b508      	push	{r3, lr}
   b4532:	4b02      	ldr	r3, [pc, #8]	; (b453c <HAL_USB_USART_Is_Connected+0xc>)
   b4534:	681b      	ldr	r3, [r3, #0]
   b4536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4538:	9301      	str	r3, [sp, #4]
   b453a:	bd08      	pop	{r3, pc}
   b453c:	0003024c 	.word	0x0003024c

000b4540 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4540:	b508      	push	{r3, lr}
   b4542:	4b02      	ldr	r3, [pc, #8]	; (b454c <panic_+0xc>)
   b4544:	681b      	ldr	r3, [r3, #0]
   b4546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4548:	9301      	str	r3, [sp, #4]
   b454a:	bd08      	pop	{r3, pc}
   b454c:	00030260 	.word	0x00030260

000b4550 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4550:	b508      	push	{r3, lr}
   b4552:	4b02      	ldr	r3, [pc, #8]	; (b455c <log_message+0xc>)
   b4554:	681b      	ldr	r3, [r3, #0]
   b4556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4558:	9301      	str	r3, [sp, #4]
   b455a:	bd08      	pop	{r3, pc}
   b455c:	00030260 	.word	0x00030260

000b4560 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4560:	b508      	push	{r3, lr}
   b4562:	4b02      	ldr	r3, [pc, #8]	; (b456c <log_level_name+0xc>)
   b4564:	681b      	ldr	r3, [r3, #0]
   b4566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4568:	9301      	str	r3, [sp, #4]
   b456a:	bd08      	pop	{r3, pc}
   b456c:	00030260 	.word	0x00030260

000b4570 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4570:	b508      	push	{r3, lr}
   b4572:	4b02      	ldr	r3, [pc, #8]	; (b457c <log_set_callbacks+0xc>)
   b4574:	681b      	ldr	r3, [r3, #0]
   b4576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4578:	9301      	str	r3, [sp, #4]
   b457a:	bd08      	pop	{r3, pc}
   b457c:	00030260 	.word	0x00030260

000b4580 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4580:	b508      	push	{r3, lr}
   b4582:	4b02      	ldr	r3, [pc, #8]	; (b458c <set_system_mode+0xc>)
   b4584:	681b      	ldr	r3, [r3, #0]
   b4586:	685b      	ldr	r3, [r3, #4]
   b4588:	9301      	str	r3, [sp, #4]
   b458a:	bd08      	pop	{r3, pc}
   b458c:	00030220 	.word	0x00030220

000b4590 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4590:	b508      	push	{r3, lr}
   b4592:	4b02      	ldr	r3, [pc, #8]	; (b459c <system_thread_set_state+0xc>)
   b4594:	681b      	ldr	r3, [r3, #0]
   b4596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4598:	9301      	str	r3, [sp, #4]
   b459a:	bd08      	pop	{r3, pc}
   b459c:	00030220 	.word	0x00030220

000b45a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b45a0:	b508      	push	{r3, lr}
   b45a2:	4b03      	ldr	r3, [pc, #12]	; (b45b0 <system_ctrl_set_app_request_handler+0x10>)
   b45a4:	681b      	ldr	r3, [r3, #0]
   b45a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b45aa:	9301      	str	r3, [sp, #4]
   b45ac:	bd08      	pop	{r3, pc}
   b45ae:	0000      	.short	0x0000
   b45b0:	00030220 	.word	0x00030220

000b45b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b03      	ldr	r3, [pc, #12]	; (b45c4 <system_ctrl_set_result+0x10>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b45be:	9301      	str	r3, [sp, #4]
   b45c0:	bd08      	pop	{r3, pc}
   b45c2:	0000      	.short	0x0000
   b45c4:	00030220 	.word	0x00030220

000b45c8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b45c8:	b508      	push	{r3, lr}
   b45ca:	4b02      	ldr	r3, [pc, #8]	; (b45d4 <spark_process+0xc>)
   b45cc:	681b      	ldr	r3, [r3, #0]
   b45ce:	689b      	ldr	r3, [r3, #8]
   b45d0:	9301      	str	r3, [sp, #4]
   b45d2:	bd08      	pop	{r3, pc}
   b45d4:	00030244 	.word	0x00030244

000b45d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b45d8:	b508      	push	{r3, lr}
   b45da:	4b02      	ldr	r3, [pc, #8]	; (b45e4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b45dc:	681b      	ldr	r3, [r3, #0]
   b45de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b45e0:	9301      	str	r3, [sp, #4]
   b45e2:	bd08      	pop	{r3, pc}
   b45e4:	00030244 	.word	0x00030244

000b45e8 <ledger_get_instance>:
#include "system_ledger.h"
#endif

DYNALIB_BEGIN(system_ledger)

DYNALIB_FN(0, system_ledger, ledger_get_instance, int(ledger_instance**, const char*, void*))
   b45e8:	b508      	push	{r3, lr}
   b45ea:	4b02      	ldr	r3, [pc, #8]	; (b45f4 <ledger_get_instance+0xc>)
   b45ec:	681b      	ldr	r3, [r3, #0]
   b45ee:	681b      	ldr	r3, [r3, #0]
   b45f0:	9301      	str	r3, [sp, #4]
   b45f2:	bd08      	pop	{r3, pc}
   b45f4:	00030294 	.word	0x00030294

000b45f8 <ledger_release>:
DYNALIB_FN(1, system_ledger, ledger_add_ref, void(ledger_instance*, void*))
DYNALIB_FN(2, system_ledger, ledger_release, void(ledger_instance*, void*))
   b45f8:	b508      	push	{r3, lr}
   b45fa:	4b02      	ldr	r3, [pc, #8]	; (b4604 <ledger_release+0xc>)
   b45fc:	681b      	ldr	r3, [r3, #0]
   b45fe:	689b      	ldr	r3, [r3, #8]
   b4600:	9301      	str	r3, [sp, #4]
   b4602:	bd08      	pop	{r3, pc}
   b4604:	00030294 	.word	0x00030294

000b4608 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4608:	b508      	push	{r3, lr}
   b460a:	4b02      	ldr	r3, [pc, #8]	; (b4614 <network_connect+0xc>)
   b460c:	681b      	ldr	r3, [r3, #0]
   b460e:	685b      	ldr	r3, [r3, #4]
   b4610:	9301      	str	r3, [sp, #4]
   b4612:	bd08      	pop	{r3, pc}
   b4614:	00030240 	.word	0x00030240

000b4618 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4618:	b508      	push	{r3, lr}
   b461a:	4b02      	ldr	r3, [pc, #8]	; (b4624 <network_connecting+0xc>)
   b461c:	681b      	ldr	r3, [r3, #0]
   b461e:	689b      	ldr	r3, [r3, #8]
   b4620:	9301      	str	r3, [sp, #4]
   b4622:	bd08      	pop	{r3, pc}
   b4624:	00030240 	.word	0x00030240

000b4628 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4628:	b508      	push	{r3, lr}
   b462a:	4b02      	ldr	r3, [pc, #8]	; (b4634 <network_disconnect+0xc>)
   b462c:	681b      	ldr	r3, [r3, #0]
   b462e:	68db      	ldr	r3, [r3, #12]
   b4630:	9301      	str	r3, [sp, #4]
   b4632:	bd08      	pop	{r3, pc}
   b4634:	00030240 	.word	0x00030240

000b4638 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4638:	b508      	push	{r3, lr}
   b463a:	4b02      	ldr	r3, [pc, #8]	; (b4644 <network_ready+0xc>)
   b463c:	681b      	ldr	r3, [r3, #0]
   b463e:	691b      	ldr	r3, [r3, #16]
   b4640:	9301      	str	r3, [sp, #4]
   b4642:	bd08      	pop	{r3, pc}
   b4644:	00030240 	.word	0x00030240

000b4648 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4648:	b508      	push	{r3, lr}
   b464a:	4b02      	ldr	r3, [pc, #8]	; (b4654 <network_on+0xc>)
   b464c:	681b      	ldr	r3, [r3, #0]
   b464e:	695b      	ldr	r3, [r3, #20]
   b4650:	9301      	str	r3, [sp, #4]
   b4652:	bd08      	pop	{r3, pc}
   b4654:	00030240 	.word	0x00030240

000b4658 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4658:	b508      	push	{r3, lr}
   b465a:	4b02      	ldr	r3, [pc, #8]	; (b4664 <network_off+0xc>)
   b465c:	681b      	ldr	r3, [r3, #0]
   b465e:	699b      	ldr	r3, [r3, #24]
   b4660:	9301      	str	r3, [sp, #4]
   b4662:	bd08      	pop	{r3, pc}
   b4664:	00030240 	.word	0x00030240

000b4668 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4668:	b508      	push	{r3, lr}
   b466a:	4b02      	ldr	r3, [pc, #8]	; (b4674 <network_listen+0xc>)
   b466c:	681b      	ldr	r3, [r3, #0]
   b466e:	69db      	ldr	r3, [r3, #28]
   b4670:	9301      	str	r3, [sp, #4]
   b4672:	bd08      	pop	{r3, pc}
   b4674:	00030240 	.word	0x00030240

000b4678 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4678:	b508      	push	{r3, lr}
   b467a:	4b02      	ldr	r3, [pc, #8]	; (b4684 <network_listening+0xc>)
   b467c:	681b      	ldr	r3, [r3, #0]
   b467e:	6a1b      	ldr	r3, [r3, #32]
   b4680:	9301      	str	r3, [sp, #4]
   b4682:	bd08      	pop	{r3, pc}
   b4684:	00030240 	.word	0x00030240

000b4688 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4688:	b508      	push	{r3, lr}
   b468a:	4b02      	ldr	r3, [pc, #8]	; (b4694 <network_set_listen_timeout+0xc>)
   b468c:	681b      	ldr	r3, [r3, #0]
   b468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4690:	9301      	str	r3, [sp, #4]
   b4692:	bd08      	pop	{r3, pc}
   b4694:	00030240 	.word	0x00030240

000b4698 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4698:	b508      	push	{r3, lr}
   b469a:	4b02      	ldr	r3, [pc, #8]	; (b46a4 <network_get_listen_timeout+0xc>)
   b469c:	681b      	ldr	r3, [r3, #0]
   b469e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b46a0:	9301      	str	r3, [sp, #4]
   b46a2:	bd08      	pop	{r3, pc}
   b46a4:	00030240 	.word	0x00030240

000b46a8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b46a8:	b508      	push	{r3, lr}
   b46aa:	4b02      	ldr	r3, [pc, #8]	; (b46b4 <network_is_on+0xc>)
   b46ac:	681b      	ldr	r3, [r3, #0]
   b46ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46b0:	9301      	str	r3, [sp, #4]
   b46b2:	bd08      	pop	{r3, pc}
   b46b4:	00030240 	.word	0x00030240

000b46b8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b46b8:	b508      	push	{r3, lr}
   b46ba:	4b02      	ldr	r3, [pc, #8]	; (b46c4 <network_is_off+0xc>)
   b46bc:	681b      	ldr	r3, [r3, #0]
   b46be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46c0:	9301      	str	r3, [sp, #4]
   b46c2:	bd08      	pop	{r3, pc}
   b46c4:	00030240 	.word	0x00030240

000b46c8 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b46c8:	b508      	push	{r3, lr}
   b46ca:	4b02      	ldr	r3, [pc, #8]	; (b46d4 <network_prefer+0xc>)
   b46cc:	681b      	ldr	r3, [r3, #0]
   b46ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b46d0:	9301      	str	r3, [sp, #4]
   b46d2:	bd08      	pop	{r3, pc}
   b46d4:	00030240 	.word	0x00030240

000b46d8 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b46d8:	b508      	push	{r3, lr}
   b46da:	4b02      	ldr	r3, [pc, #8]	; (b46e4 <network_is_preferred+0xc>)
   b46dc:	681b      	ldr	r3, [r3, #0]
   b46de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b46e0:	9301      	str	r3, [sp, #4]
   b46e2:	bd08      	pop	{r3, pc}
   b46e4:	00030240 	.word	0x00030240

000b46e8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b46e8:	b508      	push	{r3, lr}
   b46ea:	4b02      	ldr	r3, [pc, #8]	; (b46f4 <malloc+0xc>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	681b      	ldr	r3, [r3, #0]
   b46f0:	9301      	str	r3, [sp, #4]
   b46f2:	bd08      	pop	{r3, pc}
   b46f4:	0003021c 	.word	0x0003021c

000b46f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b46f8:	b508      	push	{r3, lr}
   b46fa:	4b02      	ldr	r3, [pc, #8]	; (b4704 <free+0xc>)
   b46fc:	681b      	ldr	r3, [r3, #0]
   b46fe:	685b      	ldr	r3, [r3, #4]
   b4700:	9301      	str	r3, [sp, #4]
   b4702:	bd08      	pop	{r3, pc}
   b4704:	0003021c 	.word	0x0003021c

000b4708 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4708:	b508      	push	{r3, lr}
   b470a:	4b02      	ldr	r3, [pc, #8]	; (b4714 <realloc+0xc>)
   b470c:	681b      	ldr	r3, [r3, #0]
   b470e:	689b      	ldr	r3, [r3, #8]
   b4710:	9301      	str	r3, [sp, #4]
   b4712:	bd08      	pop	{r3, pc}
   b4714:	0003021c 	.word	0x0003021c

000b4718 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4718:	b508      	push	{r3, lr}
   b471a:	4b02      	ldr	r3, [pc, #8]	; (b4724 <vsnprintf+0xc>)
   b471c:	681b      	ldr	r3, [r3, #0]
   b471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4720:	9301      	str	r3, [sp, #4]
   b4722:	bd08      	pop	{r3, pc}
   b4724:	0003021c 	.word	0x0003021c

000b4728 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4728:	b508      	push	{r3, lr}
   b472a:	4b02      	ldr	r3, [pc, #8]	; (b4734 <__errno+0xc>)
   b472c:	681b      	ldr	r3, [r3, #0]
   b472e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4730:	9301      	str	r3, [sp, #4]
   b4732:	bd08      	pop	{r3, pc}
   b4734:	0003021c 	.word	0x0003021c

000b4738 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4738:	b508      	push	{r3, lr}
   b473a:	4b02      	ldr	r3, [pc, #8]	; (b4744 <__assert_func+0xc>)
   b473c:	681b      	ldr	r3, [r3, #0]
   b473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4740:	9301      	str	r3, [sp, #4]
   b4742:	bd08      	pop	{r3, pc}
   b4744:	0003021c 	.word	0x0003021c

000b4748 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4748:	b508      	push	{r3, lr}
   b474a:	4b02      	ldr	r3, [pc, #8]	; (b4754 <newlib_impure_ptr_callback+0xc>)
   b474c:	681b      	ldr	r3, [r3, #0]
   b474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4750:	9301      	str	r3, [sp, #4]
   b4752:	bd08      	pop	{r3, pc}
   b4754:	0003021c 	.word	0x0003021c

000b4758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4758:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b475a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b475c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b475e:	b17c      	cbz	r4, b4780 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4760:	6863      	ldr	r3, [r4, #4]
   b4762:	3b01      	subs	r3, #1
   b4764:	6063      	str	r3, [r4, #4]
   b4766:	b95b      	cbnz	r3, b4780 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4768:	6823      	ldr	r3, [r4, #0]
   b476a:	4620      	mov	r0, r4
   b476c:	689b      	ldr	r3, [r3, #8]
   b476e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4770:	68a3      	ldr	r3, [r4, #8]
   b4772:	3b01      	subs	r3, #1
   b4774:	60a3      	str	r3, [r4, #8]
   b4776:	b91b      	cbnz	r3, b4780 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4778:	6823      	ldr	r3, [r4, #0]
   b477a:	4620      	mov	r0, r4
   b477c:	68db      	ldr	r3, [r3, #12]
   b477e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4780:	4628      	mov	r0, r5
   b4782:	bd38      	pop	{r3, r4, r5, pc}

000b4784 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4784:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4786:	6843      	ldr	r3, [r0, #4]
   b4788:	3b01      	subs	r3, #1
    {
   b478a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b478c:	6043      	str	r3, [r0, #4]
   b478e:	b963      	cbnz	r3, b47aa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4790:	6803      	ldr	r3, [r0, #0]
   b4792:	689b      	ldr	r3, [r3, #8]
   b4794:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4796:	68a3      	ldr	r3, [r4, #8]
   b4798:	3b01      	subs	r3, #1
   b479a:	60a3      	str	r3, [r4, #8]
   b479c:	b92b      	cbnz	r3, b47aa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b479e:	6823      	ldr	r3, [r4, #0]
   b47a0:	4620      	mov	r0, r4
   b47a2:	68db      	ldr	r3, [r3, #12]
    }
   b47a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b47a8:	4718      	bx	r3
    }
   b47aa:	bd10      	pop	{r4, pc}

000b47ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b47ac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b47ae:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b47b2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b47b4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b47b8:	42ae      	cmp	r6, r5
   b47ba:	d004      	beq.n	b47c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b47bc:	4628      	mov	r0, r5
   b47be:	f001 fc1d 	bl	b5ffc <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b47c2:	3510      	adds	r5, #16
   b47c4:	e7f8      	b.n	b47b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b47c6:	6820      	ldr	r0, [r4, #0]
   b47c8:	f7ff ff96 	bl	b46f8 <free>
    AllocatorT::free(data_);
}
   b47cc:	4620      	mov	r0, r4
   b47ce:	bd70      	pop	{r4, r5, r6, pc}

000b47d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b47d0:	4802      	ldr	r0, [pc, #8]	; (b47dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b47d2:	2300      	movs	r3, #0
   b47d4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b47d6:	f7ff bdcb 	b.w	b4370 <os_mutex_recursive_create>
   b47da:	bf00      	nop
   b47dc:	2003e670 	.word	0x2003e670

000b47e0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b47e0:	2200      	movs	r2, #0
   b47e2:	6840      	ldr	r0, [r0, #4]
   b47e4:	4611      	mov	r1, r2
   b47e6:	f7ff bf27 	b.w	b4638 <network_ready>

000b47ea <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b47ea:	2200      	movs	r2, #0
   b47ec:	6840      	ldr	r0, [r0, #4]
   b47ee:	4611      	mov	r1, r2
   b47f0:	f7ff bf42 	b.w	b4678 <network_listening>

000b47f4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b47f4:	2200      	movs	r2, #0
   b47f6:	6840      	ldr	r0, [r0, #4]
   b47f8:	4611      	mov	r1, r2
   b47fa:	f7ff bf4d 	b.w	b4698 <network_get_listen_timeout>

000b47fe <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b47fe:	6840      	ldr	r0, [r0, #4]
   b4800:	2200      	movs	r2, #0
   b4802:	f7ff bf41 	b.w	b4688 <network_set_listen_timeout>

000b4806 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4806:	6840      	ldr	r0, [r0, #4]
   b4808:	2200      	movs	r2, #0
   b480a:	f081 0101 	eor.w	r1, r1, #1
   b480e:	f7ff bf2b 	b.w	b4668 <network_listen>

000b4812 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4812:	2300      	movs	r3, #0
   b4814:	6840      	ldr	r0, [r0, #4]
   b4816:	461a      	mov	r2, r3
   b4818:	4619      	mov	r1, r3
   b481a:	f7ff bf1d 	b.w	b4658 <network_off>

000b481e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b481e:	2300      	movs	r3, #0
   b4820:	6840      	ldr	r0, [r0, #4]
   b4822:	461a      	mov	r2, r3
   b4824:	4619      	mov	r1, r3
   b4826:	f7ff bf0f 	b.w	b4648 <network_on>

000b482a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b482a:	2200      	movs	r2, #0
   b482c:	6840      	ldr	r0, [r0, #4]
   b482e:	4611      	mov	r1, r2
   b4830:	f7ff bef2 	b.w	b4618 <network_connecting>

000b4834 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4834:	6840      	ldr	r0, [r0, #4]
   b4836:	2200      	movs	r2, #0
   b4838:	2102      	movs	r1, #2
   b483a:	f7ff bef5 	b.w	b4628 <network_disconnect>

000b483e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b483e:	2300      	movs	r3, #0
   b4840:	6840      	ldr	r0, [r0, #4]
   b4842:	461a      	mov	r2, r3
   b4844:	f7ff bee0 	b.w	b4608 <network_connect>

000b4848 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4848:	4b08      	ldr	r3, [pc, #32]	; (b486c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b484a:	b510      	push	{r4, lr}
   b484c:	2428      	movs	r4, #40	; 0x28
   b484e:	4622      	mov	r2, r4
   b4850:	4618      	mov	r0, r3
   b4852:	2100      	movs	r1, #0
   b4854:	f001 feb6 	bl	b65c4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4858:	4b05      	ldr	r3, [pc, #20]	; (b4870 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b485a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b485c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4860:	6042      	str	r2, [r0, #4]
   b4862:	2204      	movs	r2, #4
   b4864:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b4866:	4a03      	ldr	r2, [pc, #12]	; (b4874 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b4868:	601a      	str	r2, [r3, #0]
   b486a:	bd10      	pop	{r4, pc}
   b486c:	2003e67c 	.word	0x2003e67c
   b4870:	2003e674 	.word	0x2003e674
   b4874:	000b6924 	.word	0x000b6924

000b4878 <_ZN10CloudClass6ledgerEPKc>:
    return size;
}

#if Wiring_Ledger

Ledger CloudClass::ledger(const char* name) {
   b4878:	b530      	push	{r4, r5, lr}
    ledger_instance* instance = nullptr;
   b487a:	2500      	movs	r5, #0
Ledger CloudClass::ledger(const char* name) {
   b487c:	b08d      	sub	sp, #52	; 0x34
   b487e:	4604      	mov	r4, r0
    int r = ledger_get_instance(&instance, name, nullptr);
   b4880:	462a      	mov	r2, r5
   b4882:	a803      	add	r0, sp, #12
    ledger_instance* instance = nullptr;
   b4884:	9503      	str	r5, [sp, #12]
    int r = ledger_get_instance(&instance, name, nullptr);
   b4886:	f7ff feaf 	bl	b45e8 <ledger_get_instance>
    if (r < 0) {
   b488a:	2800      	cmp	r0, #0
   b488c:	da0f      	bge.n	b48ae <_ZN10CloudClass6ledgerEPKc+0x36>
        LOG(ERROR, "ledger_get_instance() failed: %d", r);
   b488e:	2320      	movs	r3, #32
   b4890:	e9cd 3504 	strd	r3, r5, [sp, #16]
   b4894:	4b07      	ldr	r3, [pc, #28]	; (b48b4 <_ZN10CloudClass6ledgerEPKc+0x3c>)
   b4896:	9001      	str	r0, [sp, #4]
   b4898:	9300      	str	r3, [sp, #0]
   b489a:	4907      	ldr	r1, [pc, #28]	; (b48b8 <_ZN10CloudClass6ledgerEPKc+0x40>)
   b489c:	462b      	mov	r3, r5
   b489e:	aa04      	add	r2, sp, #16
   b48a0:	2032      	movs	r0, #50	; 0x32
   b48a2:	f7ff fe55 	bl	b4550 <log_message>
            Ledger(nullptr) {
    }

    // This constructor is for internal use only
    explicit Ledger(ledger_instance* instance, bool addRef = true) :
            instance_(instance) {
   b48a6:	6025      	str	r5, [r4, #0]
        return Ledger();
    }
    return Ledger(instance, false /* addRef */);
}
   b48a8:	4620      	mov	r0, r4
   b48aa:	b00d      	add	sp, #52	; 0x34
   b48ac:	bd30      	pop	{r4, r5, pc}
   b48ae:	9b03      	ldr	r3, [sp, #12]
   b48b0:	6023      	str	r3, [r4, #0]
        if (instance_ && addRef) {
   b48b2:	e7f9      	b.n	b48a8 <_ZN10CloudClass6ledgerEPKc+0x30>
   b48b4:	000b6980 	.word	0x000b6980
   b48b8:	000b6960 	.word	0x000b6960

000b48bc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b48bc:	2200      	movs	r2, #0
   b48be:	6840      	ldr	r0, [r0, #4]
   b48c0:	4611      	mov	r1, r2
   b48c2:	f7ff bed9 	b.w	b4678 <network_listening>

000b48c6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b48c6:	2200      	movs	r2, #0
   b48c8:	6840      	ldr	r0, [r0, #4]
   b48ca:	4611      	mov	r1, r2
   b48cc:	f7ff bee4 	b.w	b4698 <network_get_listen_timeout>

000b48d0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b48d0:	6840      	ldr	r0, [r0, #4]
   b48d2:	2200      	movs	r2, #0
   b48d4:	f7ff bed8 	b.w	b4688 <network_set_listen_timeout>

000b48d8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b48d8:	6840      	ldr	r0, [r0, #4]
   b48da:	2200      	movs	r2, #0
   b48dc:	f081 0101 	eor.w	r1, r1, #1
   b48e0:	f7ff bec2 	b.w	b4668 <network_listen>

000b48e4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b48e4:	2300      	movs	r3, #0
   b48e6:	6840      	ldr	r0, [r0, #4]
   b48e8:	461a      	mov	r2, r3
   b48ea:	4619      	mov	r1, r3
   b48ec:	f7ff beb4 	b.w	b4658 <network_off>

000b48f0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b48f0:	2300      	movs	r3, #0
   b48f2:	6840      	ldr	r0, [r0, #4]
   b48f4:	461a      	mov	r2, r3
   b48f6:	4619      	mov	r1, r3
   b48f8:	f7ff bea6 	b.w	b4648 <network_on>

000b48fc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b48fc:	2200      	movs	r2, #0
   b48fe:	6840      	ldr	r0, [r0, #4]
   b4900:	4611      	mov	r1, r2
   b4902:	f7ff be99 	b.w	b4638 <network_ready>

000b4906 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4906:	2200      	movs	r2, #0
   b4908:	6840      	ldr	r0, [r0, #4]
   b490a:	4611      	mov	r1, r2
   b490c:	f7ff be84 	b.w	b4618 <network_connecting>

000b4910 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4910:	6840      	ldr	r0, [r0, #4]
   b4912:	2200      	movs	r2, #0
   b4914:	2102      	movs	r1, #2
   b4916:	f7ff be87 	b.w	b4628 <network_disconnect>

000b491a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b491a:	2300      	movs	r3, #0
   b491c:	6840      	ldr	r0, [r0, #4]
   b491e:	461a      	mov	r2, r3
   b4920:	f7ff be72 	b.w	b4608 <network_connect>

000b4924 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b4924:	4b02      	ldr	r3, [pc, #8]	; (b4930 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4926:	2203      	movs	r2, #3
   b4928:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b492a:	4a02      	ldr	r2, [pc, #8]	; (b4934 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b492c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b492e:	4770      	bx	lr
   b4930:	2003e6a4 	.word	0x2003e6a4
   b4934:	000b69ac 	.word	0x000b69ac

000b4938 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
#include <chrono>

class WireTransmission {
public:
  WireTransmission(uint8_t address)
      : address_{address},
   b4938:	4b05      	ldr	r3, [pc, #20]	; (b4950 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS},
        buffer_(nullptr) {
   b493a:	21ff      	movs	r1, #255	; 0xff
   b493c:	2200      	movs	r2, #0
   b493e:	e9c3 1200 	strd	r1, r2, [r3]
   b4942:	2001      	movs	r0, #1
   b4944:	2164      	movs	r1, #100	; 0x64
   b4946:	e9c3 0102 	strd	r0, r1, [r3, #8]
   b494a:	611a      	str	r2, [r3, #16]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
   b494c:	4770      	bx	lr
   b494e:	bf00      	nop
   b4950:	2003e6ac 	.word	0x2003e6ac

000b4954 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4954:	4770      	bx	lr

000b4956 <_ZN9IPAddressD0Ev>:
   b4956:	b510      	push	{r4, lr}
   b4958:	2118      	movs	r1, #24
   b495a:	4604      	mov	r4, r0
   b495c:	f7ff fbaf 	bl	b40be <_ZdlPvj>
   b4960:	4620      	mov	r0, r4
   b4962:	bd10      	pop	{r4, pc}

000b4964 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4964:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4966:	7d03      	ldrb	r3, [r0, #20]
   b4968:	2b06      	cmp	r3, #6
{
   b496a:	b08d      	sub	sp, #52	; 0x34
   b496c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b496e:	f100 0704 	add.w	r7, r0, #4
   b4972:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4976:	d012      	beq.n	b499e <_ZNK9IPAddress7printToER5Print+0x3a>
   b4978:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b497c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4980:	220a      	movs	r2, #10
   b4982:	4630      	mov	r0, r6
   b4984:	f001 faeb 	bl	b5f5e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4988:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b498a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b498c:	d019      	beq.n	b49c2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b498e:	2c00      	cmp	r4, #0
   b4990:	d0f4      	beq.n	b497c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4992:	212e      	movs	r1, #46	; 0x2e
   b4994:	4630      	mov	r0, r6
   b4996:	f001 fadf 	bl	b5f58 <_ZN5Print5printEc>
   b499a:	4404      	add	r4, r0
   b499c:	e7ee      	b.n	b497c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b499e:	232f      	movs	r3, #47	; 0x2f
   b49a0:	466a      	mov	r2, sp
   b49a2:	4639      	mov	r1, r7
   b49a4:	200a      	movs	r0, #10
		buf[0] = 0;
   b49a6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b49aa:	f7ff fd21 	bl	b43f0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b49ae:	4668      	mov	r0, sp
   b49b0:	f7ff fb3e 	bl	b4030 <strlen>
   b49b4:	6833      	ldr	r3, [r6, #0]
   b49b6:	4602      	mov	r2, r0
   b49b8:	68db      	ldr	r3, [r3, #12]
   b49ba:	4669      	mov	r1, sp
   b49bc:	4630      	mov	r0, r6
   b49be:	4798      	blx	r3
   b49c0:	4604      	mov	r4, r0
    }
    return n;
}
   b49c2:	4620      	mov	r0, r4
   b49c4:	b00d      	add	sp, #52	; 0x34
   b49c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b49c8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b49c8:	b510      	push	{r4, lr}
   b49ca:	4b05      	ldr	r3, [pc, #20]	; (b49e0 <_ZN9IPAddressC1Ev+0x18>)
   b49cc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b49ce:	2211      	movs	r2, #17
   b49d0:	f840 3b04 	str.w	r3, [r0], #4
   b49d4:	2100      	movs	r1, #0
   b49d6:	f001 fdf5 	bl	b65c4 <memset>
}
   b49da:	4620      	mov	r0, r4
   b49dc:	bd10      	pop	{r4, pc}
   b49de:	bf00      	nop
   b49e0:	000b69f0 	.word	0x000b69f0

000b49e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b49e4:	4603      	mov	r3, r0
   b49e6:	4a07      	ldr	r2, [pc, #28]	; (b4a04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b49e8:	b510      	push	{r4, lr}
   b49ea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b49ee:	f101 0210 	add.w	r2, r1, #16
   b49f2:	f851 4b04 	ldr.w	r4, [r1], #4
   b49f6:	f843 4b04 	str.w	r4, [r3], #4
   b49fa:	4291      	cmp	r1, r2
   b49fc:	d1f9      	bne.n	b49f2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b49fe:	780a      	ldrb	r2, [r1, #0]
   b4a00:	701a      	strb	r2, [r3, #0]
}
   b4a02:	bd10      	pop	{r4, pc}
   b4a04:	000b69f0 	.word	0x000b69f0

000b4a08 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4a08:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4a0a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4a0e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4a12:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4a16:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4a1a:	2304      	movs	r3, #4
   b4a1c:	6041      	str	r1, [r0, #4]
   b4a1e:	7503      	strb	r3, [r0, #20]
}
   b4a20:	bd10      	pop	{r4, pc}
	...

000b4a24 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4a24:	b507      	push	{r0, r1, r2, lr}
   b4a26:	4b06      	ldr	r3, [pc, #24]	; (b4a40 <_ZN9IPAddressC1EPKh+0x1c>)
   b4a28:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4a2a:	78cb      	ldrb	r3, [r1, #3]
   b4a2c:	9300      	str	r3, [sp, #0]
   b4a2e:	788b      	ldrb	r3, [r1, #2]
   b4a30:	784a      	ldrb	r2, [r1, #1]
   b4a32:	7809      	ldrb	r1, [r1, #0]
   b4a34:	f7ff ffe8 	bl	b4a08 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4a38:	b003      	add	sp, #12
   b4a3a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a3e:	bf00      	nop
   b4a40:	000b69f0 	.word	0x000b69f0

000b4a44 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b4a44:	f100 0310 	add.w	r3, r0, #16
   b4a48:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b4a4a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b4a4e:	2901      	cmp	r1, #1
   b4a50:	4618      	mov	r0, r3
   b4a52:	d108      	bne.n	b4a66 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b4a54:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b4a58:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b4a5c:	3a01      	subs	r2, #1
   b4a5e:	f103 0310 	add.w	r3, r3, #16
   b4a62:	d1f2      	bne.n	b4a4a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b4a64:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b4a66:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b4a68:	bf04      	itt	eq
   b4a6a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b4a6e:	1852      	addeq	r2, r2, r1
   b4a70:	e7f4      	b.n	b4a5c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b4a72 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b4a72:	b40e      	push	{r1, r2, r3}
   b4a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4a76:	b088      	sub	sp, #32
   b4a78:	af00      	add	r7, sp, #0
   b4a7a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4a7e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4a80:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4a84:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4a86:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4a88:	462b      	mov	r3, r5
   b4a8a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b4a8c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4a8e:	f7ff fe43 	bl	b4718 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b4a92:	280f      	cmp	r0, #15
   b4a94:	687a      	ldr	r2, [r7, #4]
   b4a96:	d91a      	bls.n	b4ace <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b4a98:	f100 0308 	add.w	r3, r0, #8
   b4a9c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b4aa0:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b4aa2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4aa6:	1c41      	adds	r1, r0, #1
   b4aa8:	462b      	mov	r3, r5
   b4aaa:	4668      	mov	r0, sp
        va_start(args, fmt);
   b4aac:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4aae:	f7ff fe33 	bl	b4718 <vsnprintf>
        if (n > 0) {
   b4ab2:	1e02      	subs	r2, r0, #0
   b4ab4:	dd04      	ble.n	b4ac0 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b4ab6:	6823      	ldr	r3, [r4, #0]
   b4ab8:	4669      	mov	r1, sp
   b4aba:	689b      	ldr	r3, [r3, #8]
   b4abc:	4620      	mov	r0, r4
   b4abe:	4798      	blx	r3
   b4ac0:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b4ac2:	3720      	adds	r7, #32
   b4ac4:	46bd      	mov	sp, r7
   b4ac6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4aca:	b003      	add	sp, #12
   b4acc:	4770      	bx	lr
    } else if (n > 0) {
   b4ace:	2800      	cmp	r0, #0
   b4ad0:	d0f7      	beq.n	b4ac2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b4ad2:	6823      	ldr	r3, [r4, #0]
   b4ad4:	4602      	mov	r2, r0
   b4ad6:	689b      	ldr	r3, [r3, #8]
   b4ad8:	f107 0110 	add.w	r1, r7, #16
   b4adc:	4620      	mov	r0, r4
   b4ade:	4798      	blx	r3
}
   b4ae0:	e7ef      	b.n	b4ac2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b4ae2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4ae2:	b538      	push	{r3, r4, r5, lr}
   b4ae4:	680b      	ldr	r3, [r1, #0]
   b4ae6:	6003      	str	r3, [r0, #0]
   b4ae8:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b4aea:	6843      	ldr	r3, [r0, #4]
   b4aec:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4aee:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b4af0:	d008      	beq.n	b4b04 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b4af2:	b115      	cbz	r5, b4afa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b4af4:	686b      	ldr	r3, [r5, #4]
   b4af6:	3301      	adds	r3, #1
   b4af8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b4afa:	6860      	ldr	r0, [r4, #4]
   b4afc:	b108      	cbz	r0, b4b02 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b4afe:	f7ff fe41 	bl	b4784 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4b02:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4b04:	bd38      	pop	{r3, r4, r5, pc}

000b4b06 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b4b06:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b4b08:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b4b0a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b4b0e:	689b      	ldr	r3, [r3, #8]
   b4b10:	2201      	movs	r2, #1
   b4b12:	f10d 0107 	add.w	r1, sp, #7
   b4b16:	4798      	blx	r3
}
   b4b18:	b003      	add	sp, #12
   b4b1a:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b1e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4b1e:	460b      	mov	r3, r1
   b4b20:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b4b22:	2200      	movs	r2, #0
   b4b24:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b4b26:	e9c0 2200 	strd	r2, r2, [r0]
   b4b2a:	4604      	mov	r4, r0
        t_ = t;
   b4b2c:	6083      	str	r3, [r0, #8]
    if (t) {
   b4b2e:	b90b      	cbnz	r3, b4b34 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b4b30:	4620      	mov	r0, r4
   b4b32:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b4b34:	f7ff ffd5 	bl	b4ae2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b4b38:	e7fa      	b.n	b4b30 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b4b3a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b4b3a:	6883      	ldr	r3, [r0, #8]
   b4b3c:	b1eb      	cbz	r3, b4b7a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b4b3e:	781a      	ldrb	r2, [r3, #0]
   b4b40:	2a03      	cmp	r2, #3
   b4b42:	d81a      	bhi.n	b4b7a <_ZNK5spark9JSONValue4typeEv+0x40>
   b4b44:	e8df f002 	tbb	[pc, r2]
   b4b48:	1b021704 	.word	0x1b021704
   b4b4c:	2005      	movs	r0, #5
   b4b4e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b4b50:	6802      	ldr	r2, [r0, #0]
   b4b52:	685b      	ldr	r3, [r3, #4]
   b4b54:	6852      	ldr	r2, [r2, #4]
   b4b56:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b4b58:	282d      	cmp	r0, #45	; 0x2d
   b4b5a:	d012      	beq.n	b4b82 <_ZNK5spark9JSONValue4typeEv+0x48>
   b4b5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4b60:	2b09      	cmp	r3, #9
   b4b62:	d90e      	bls.n	b4b82 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b4b64:	2874      	cmp	r0, #116	; 0x74
   b4b66:	d00e      	beq.n	b4b86 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b4b68:	2866      	cmp	r0, #102	; 0x66
   b4b6a:	d00c      	beq.n	b4b86 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b4b6c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b4b70:	4258      	negs	r0, r3
   b4b72:	4158      	adcs	r0, r3
   b4b74:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b4b76:	2006      	movs	r0, #6
   b4b78:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b4b7a:	2000      	movs	r0, #0
   b4b7c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b4b7e:	2004      	movs	r0, #4
   b4b80:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b4b82:	2003      	movs	r0, #3
   b4b84:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b4b86:	2002      	movs	r0, #2
}
   b4b88:	4770      	bx	lr

000b4b8a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b4b8a:	b510      	push	{r4, lr}
   b4b8c:	4604      	mov	r4, r0
    switch (type()) {
   b4b8e:	f7ff ffd4 	bl	b4b3a <_ZNK5spark9JSONValue4typeEv>
   b4b92:	2802      	cmp	r0, #2
   b4b94:	d00e      	beq.n	b4bb4 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b4b96:	1ec3      	subs	r3, r0, #3
   b4b98:	b2db      	uxtb	r3, r3
   b4b9a:	2b01      	cmp	r3, #1
   b4b9c:	d814      	bhi.n	b4bc8 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b4b9e:	6822      	ldr	r2, [r4, #0]
   b4ba0:	68a3      	ldr	r3, [r4, #8]
   b4ba2:	6850      	ldr	r0, [r2, #4]
   b4ba4:	685b      	ldr	r3, [r3, #4]
}
   b4ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b4baa:	220a      	movs	r2, #10
   b4bac:	2100      	movs	r1, #0
   b4bae:	4418      	add	r0, r3
   b4bb0:	f001 be08 	b.w	b67c4 <strtol>
        const char* const s = d_->json + t_->start;
   b4bb4:	6822      	ldr	r2, [r4, #0]
   b4bb6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b4bb8:	6852      	ldr	r2, [r2, #4]
   b4bba:	685b      	ldr	r3, [r3, #4]
   b4bbc:	5cd0      	ldrb	r0, [r2, r3]
   b4bbe:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b4bc2:	4258      	negs	r0, r3
   b4bc4:	4158      	adcs	r0, r3
}
   b4bc6:	bd10      	pop	{r4, pc}
    switch (type()) {
   b4bc8:	2000      	movs	r0, #0
   b4bca:	e7fc      	b.n	b4bc6 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b4bcc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4bcc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4bce:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4bd0:	e9c0 3300 	strd	r3, r3, [r0]
   b4bd4:	4604      	mov	r4, r0
        n_(0) {
   b4bd6:	480e      	ldr	r0, [pc, #56]	; (b4c10 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b4bd8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b4bdc:	b1a9      	cbz	r1, b4c0a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b4bde:	780b      	ldrb	r3, [r1, #0]
   b4be0:	2b03      	cmp	r3, #3
   b4be2:	d006      	beq.n	b4bf2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b4be4:	b98b      	cbnz	r3, b4c0a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b4be6:	6813      	ldr	r3, [r2, #0]
   b4be8:	6858      	ldr	r0, [r3, #4]
   b4bea:	684b      	ldr	r3, [r1, #4]
   b4bec:	5cc3      	ldrb	r3, [r0, r3]
   b4bee:	2b6e      	cmp	r3, #110	; 0x6e
   b4bf0:	d007      	beq.n	b4c02 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b4bf2:	6813      	ldr	r3, [r2, #0]
   b4bf4:	684d      	ldr	r5, [r1, #4]
   b4bf6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b4bf8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b4bfa:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b4bfc:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b4bfe:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b4c00:	60e3      	str	r3, [r4, #12]
   b4c02:	4611      	mov	r1, r2
   b4c04:	4620      	mov	r0, r4
   b4c06:	f7ff ff6c 	bl	b4ae2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4c0a:	4620      	mov	r0, r4
   b4c0c:	bd38      	pop	{r3, r4, r5, pc}
   b4c0e:	bf00      	nop
   b4c10:	000b6a5f 	.word	0x000b6a5f

000b4c14 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4c14:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4c16:	2500      	movs	r5, #0
   b4c18:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b4c1a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b4c1e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4c22:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4c26:	4604      	mov	r4, r0
   b4c28:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b4c2a:	b14b      	cbz	r3, b4c40 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b4c2c:	781a      	ldrb	r2, [r3, #0]
   b4c2e:	2a01      	cmp	r2, #1
   b4c30:	d106      	bne.n	b4c40 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b4c32:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b4c36:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b4c38:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b4c3a:	6143      	str	r3, [r0, #20]
   b4c3c:	f7ff ff51 	bl	b4ae2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4c40:	4620      	mov	r0, r4
   b4c42:	bd38      	pop	{r3, r4, r5, pc}

000b4c44 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b4c44:	b510      	push	{r4, lr}
    if (!n_) {
   b4c46:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b4c48:	4604      	mov	r4, r0
    if (!n_) {
   b4c4a:	b163      	cbz	r3, b4c66 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b4c4c:	6880      	ldr	r0, [r0, #8]
   b4c4e:	60e0      	str	r0, [r4, #12]
    --n_;
   b4c50:	3b01      	subs	r3, #1
    ++t_;
   b4c52:	3010      	adds	r0, #16
   b4c54:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b4c56:	6120      	str	r0, [r4, #16]
    --n_;
   b4c58:	6163      	str	r3, [r4, #20]
    if (n_) {
   b4c5a:	b113      	cbz	r3, b4c62 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b4c5c:	f7ff fef2 	bl	b4a44 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b4c60:	60a0      	str	r0, [r4, #8]
    return true;
   b4c62:	2001      	movs	r0, #1
   b4c64:	e000      	b.n	b4c68 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b4c66:	4618      	mov	r0, r3
}
   b4c68:	bd10      	pop	{r4, pc}

000b4c6a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4c6a:	b510      	push	{r4, lr}
    write('}');
   b4c6c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4c6e:	4604      	mov	r4, r0
    write('}');
   b4c70:	f7ff ff49 	bl	b4b06 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b4c74:	2301      	movs	r3, #1
   b4c76:	7123      	strb	r3, [r4, #4]
}
   b4c78:	4620      	mov	r0, r4
   b4c7a:	bd10      	pop	{r4, pc}

000b4c7c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b4c7c:	b508      	push	{r3, lr}
    switch (state_) {
   b4c7e:	7903      	ldrb	r3, [r0, #4]
   b4c80:	2b01      	cmp	r3, #1
   b4c82:	d002      	beq.n	b4c8a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b4c84:	2b02      	cmp	r3, #2
   b4c86:	d004      	beq.n	b4c92 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b4c88:	bd08      	pop	{r3, pc}
        write(',');
   b4c8a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b4c8c:	f7ff ff3b 	bl	b4b06 <_ZN5spark10JSONWriter5writeEc>
}
   b4c90:	e7fa      	b.n	b4c88 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b4c92:	213a      	movs	r1, #58	; 0x3a
   b4c94:	e7fa      	b.n	b4c8c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b4c96 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b4c96:	b510      	push	{r4, lr}
   b4c98:	4604      	mov	r4, r0
    writeSeparator();
   b4c9a:	f7ff ffef 	bl	b4c7c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b4c9e:	4620      	mov	r0, r4
   b4ca0:	217b      	movs	r1, #123	; 0x7b
   b4ca2:	f7ff ff30 	bl	b4b06 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b4ca6:	2300      	movs	r3, #0
   b4ca8:	7123      	strb	r3, [r4, #4]
}
   b4caa:	4620      	mov	r0, r4
   b4cac:	bd10      	pop	{r4, pc}
	...

000b4cb0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b4cb0:	b513      	push	{r0, r1, r4, lr}
   b4cb2:	4604      	mov	r4, r0
   b4cb4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4cb6:	f7ff ffe1 	bl	b4c7c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b4cba:	6823      	ldr	r3, [r4, #0]
   b4cbc:	9a01      	ldr	r2, [sp, #4]
   b4cbe:	68db      	ldr	r3, [r3, #12]
   b4cc0:	4903      	ldr	r1, [pc, #12]	; (b4cd0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b4cc2:	4620      	mov	r0, r4
   b4cc4:	4798      	blx	r3
    state_ = NEXT;
   b4cc6:	2301      	movs	r3, #1
}
   b4cc8:	4620      	mov	r0, r4
    state_ = NEXT;
   b4cca:	7123      	strb	r3, [r4, #4]
}
   b4ccc:	b002      	add	sp, #8
   b4cce:	bd10      	pop	{r4, pc}
   b4cd0:	000b697d 	.word	0x000b697d

000b4cd4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b4cd4:	b513      	push	{r0, r1, r4, lr}
   b4cd6:	4604      	mov	r4, r0
   b4cd8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4cda:	f7ff ffcf 	bl	b4c7c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b4cde:	6823      	ldr	r3, [r4, #0]
   b4ce0:	9a01      	ldr	r2, [sp, #4]
   b4ce2:	68db      	ldr	r3, [r3, #12]
   b4ce4:	4903      	ldr	r1, [pc, #12]	; (b4cf4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b4ce6:	4620      	mov	r0, r4
   b4ce8:	4798      	blx	r3
    state_ = NEXT;
   b4cea:	2301      	movs	r3, #1
}
   b4cec:	4620      	mov	r0, r4
    state_ = NEXT;
   b4cee:	7123      	strb	r3, [r4, #4]
}
   b4cf0:	b002      	add	sp, #8
   b4cf2:	bd10      	pop	{r4, pc}
   b4cf4:	000b69fc 	.word	0x000b69fc

000b4cf8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4cfc:	460d      	mov	r5, r1
    write('"');
   b4cfe:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4d00:	4690      	mov	r8, r2
   b4d02:	4604      	mov	r4, r0
    write('"');
   b4d04:	f7ff feff 	bl	b4b06 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b4d08:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b4db0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b4d0c:	44a8      	add	r8, r5
    const char *s = str;
   b4d0e:	462f      	mov	r7, r5
    while (s != end) {
   b4d10:	4547      	cmp	r7, r8
   b4d12:	46ba      	mov	sl, r7
   b4d14:	d03d      	beq.n	b4d92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b4d16:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b4d1a:	2e22      	cmp	r6, #34	; 0x22
   b4d1c:	d006      	beq.n	b4d2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4d1e:	2e5c      	cmp	r6, #92	; 0x5c
   b4d20:	d004      	beq.n	b4d2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4d22:	4630      	mov	r0, r6
   b4d24:	f001 fc1e 	bl	b6564 <isprint>
   b4d28:	2800      	cmp	r0, #0
   b4d2a:	d1f1      	bne.n	b4d10 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b4d2c:	6823      	ldr	r3, [r4, #0]
   b4d2e:	ebaa 0205 	sub.w	r2, sl, r5
   b4d32:	689b      	ldr	r3, [r3, #8]
   b4d34:	4629      	mov	r1, r5
   b4d36:	4620      	mov	r0, r4
   b4d38:	4798      	blx	r3
            write('\\');
   b4d3a:	215c      	movs	r1, #92	; 0x5c
   b4d3c:	4620      	mov	r0, r4
   b4d3e:	f7ff fee2 	bl	b4b06 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b4d42:	2e0d      	cmp	r6, #13
   b4d44:	d80a      	bhi.n	b4d5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b4d46:	2e07      	cmp	r6, #7
   b4d48:	d91c      	bls.n	b4d84 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b4d4a:	f1a6 0308 	sub.w	r3, r6, #8
   b4d4e:	2b05      	cmp	r3, #5
   b4d50:	d818      	bhi.n	b4d84 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b4d52:	e8df f003 	tbb	[pc, r3]
   b4d56:	0f0d      	.short	0x0f0d
   b4d58:	15131711 	.word	0x15131711
   b4d5c:	2e22      	cmp	r6, #34	; 0x22
   b4d5e:	d001      	beq.n	b4d64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b4d60:	2e5c      	cmp	r6, #92	; 0x5c
   b4d62:	d10f      	bne.n	b4d84 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b4d64:	4631      	mov	r1, r6
                write('b');
   b4d66:	4620      	mov	r0, r4
   b4d68:	f7ff fecd 	bl	b4b06 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b4d6c:	463d      	mov	r5, r7
    while (s != end) {
   b4d6e:	e7cf      	b.n	b4d10 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b4d70:	2162      	movs	r1, #98	; 0x62
   b4d72:	e7f8      	b.n	b4d66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b4d74:	2174      	movs	r1, #116	; 0x74
   b4d76:	e7f6      	b.n	b4d66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b4d78:	216e      	movs	r1, #110	; 0x6e
   b4d7a:	e7f4      	b.n	b4d66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b4d7c:	2166      	movs	r1, #102	; 0x66
   b4d7e:	e7f2      	b.n	b4d66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b4d80:	2172      	movs	r1, #114	; 0x72
   b4d82:	e7f0      	b.n	b4d66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b4d84:	6823      	ldr	r3, [r4, #0]
   b4d86:	4632      	mov	r2, r6
   b4d88:	68db      	ldr	r3, [r3, #12]
   b4d8a:	4649      	mov	r1, r9
   b4d8c:	4620      	mov	r0, r4
   b4d8e:	4798      	blx	r3
                break;
   b4d90:	e7ec      	b.n	b4d6c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b4d92:	42bd      	cmp	r5, r7
   b4d94:	d005      	beq.n	b4da2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b4d96:	6823      	ldr	r3, [r4, #0]
   b4d98:	1b7a      	subs	r2, r7, r5
   b4d9a:	689b      	ldr	r3, [r3, #8]
   b4d9c:	4629      	mov	r1, r5
   b4d9e:	4620      	mov	r0, r4
   b4da0:	4798      	blx	r3
    }
    write('"');
   b4da2:	2122      	movs	r1, #34	; 0x22
   b4da4:	4620      	mov	r0, r4
   b4da6:	f7ff feae 	bl	b4b06 <_ZN5spark10JSONWriter5writeEc>
}
   b4daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4dae:	bf00      	nop
   b4db0:	000b69ff 	.word	0x000b69ff

000b4db4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b4db4:	b513      	push	{r0, r1, r4, lr}
   b4db6:	4604      	mov	r4, r0
   b4db8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b4dbc:	f7ff ff5e 	bl	b4c7c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b4dc0:	4620      	mov	r0, r4
   b4dc2:	e9dd 2100 	ldrd	r2, r1, [sp]
   b4dc6:	f7ff ff97 	bl	b4cf8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b4dca:	2302      	movs	r3, #2
}
   b4dcc:	4620      	mov	r0, r4
    state_ = VALUE;
   b4dce:	7123      	strb	r3, [r4, #4]
}
   b4dd0:	b002      	add	sp, #8
   b4dd2:	bd10      	pop	{r4, pc}

000b4dd4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b4dd4:	b513      	push	{r0, r1, r4, lr}
   b4dd6:	4604      	mov	r4, r0
   b4dd8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b4ddc:	f7ff ff4e 	bl	b4c7c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b4de0:	4620      	mov	r0, r4
   b4de2:	e9dd 2100 	ldrd	r2, r1, [sp]
   b4de6:	f7ff ff87 	bl	b4cf8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b4dea:	2301      	movs	r3, #1
}
   b4dec:	4620      	mov	r0, r4
    state_ = NEXT;
   b4dee:	7123      	strb	r3, [r4, #4]
}
   b4df0:	b002      	add	sp, #8
   b4df2:	bd10      	pop	{r4, pc}

000b4df4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4df4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4df8:	4604      	mov	r4, r0
   b4dfa:	460d      	mov	r5, r1
   b4dfc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4dfe:	d914      	bls.n	b4e2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b4e00:	4290      	cmp	r0, r2
   b4e02:	d213      	bcs.n	b4e2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b4e04:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b4e08:	1a75      	subs	r5, r6, r1
   b4e0a:	f1a1 0710 	sub.w	r7, r1, #16
   b4e0e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4e10:	42b7      	cmp	r7, r6
   b4e12:	d018      	beq.n	b4e46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b4e14:	b11c      	cbz	r4, b4e1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b4e16:	4631      	mov	r1, r6
   b4e18:	4620      	mov	r0, r4
   b4e1a:	f001 f958 	bl	b60ce <_ZN6StringC1EOS_>
                end->~T();
   b4e1e:	4630      	mov	r0, r6
   b4e20:	f001 f8ec 	bl	b5ffc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4e24:	3e10      	subs	r6, #16
   b4e26:	3c10      	subs	r4, #16
   b4e28:	e7f2      	b.n	b4e10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4e2a:	d00c      	beq.n	b4e46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b4e2c:	42b5      	cmp	r5, r6
   b4e2e:	d00a      	beq.n	b4e46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b4e30:	b11c      	cbz	r4, b4e3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b4e32:	4629      	mov	r1, r5
   b4e34:	4620      	mov	r0, r4
   b4e36:	f001 f94a 	bl	b60ce <_ZN6StringC1EOS_>
                p->~T();
   b4e3a:	4628      	mov	r0, r5
   b4e3c:	f001 f8de 	bl	b5ffc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4e40:	3510      	adds	r5, #16
   b4e42:	3410      	adds	r4, #16
   b4e44:	e7f2      	b.n	b4e2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b4e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b4e48:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b4e4a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b4e4c:	4605      	mov	r5, r0
        if (n > 0) {
   b4e4e:	dd11      	ble.n	b4e74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b4e50:	0130      	lsls	r0, r6, #4
   b4e52:	f7ff fc49 	bl	b46e8 <malloc>
            if (!d) {
   b4e56:	4604      	mov	r4, r0
   b4e58:	b158      	cbz	r0, b4e72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b4e5a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b4e5e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b4e62:	f7ff ffc7 	bl	b4df4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4e66:	6828      	ldr	r0, [r5, #0]
   b4e68:	f7ff fc46 	bl	b46f8 <free>
        data_ = d;
   b4e6c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b4e6e:	60ae      	str	r6, [r5, #8]
        return true;
   b4e70:	2001      	movs	r0, #1
    }
   b4e72:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b4e74:	2400      	movs	r4, #0
   b4e76:	e7f6      	b.n	b4e66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b4e78 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
   b4e78:	b510      	push	{r4, lr}
   b4e7a:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
   b4e7c:	6880      	ldr	r0, [r0, #8]
   b4e7e:	6803      	ldr	r3, [r0, #0]
   b4e80:	68db      	ldr	r3, [r3, #12]
   b4e82:	4798      	blx	r3
   b4e84:	68e3      	ldr	r3, [r4, #12]
   b4e86:	4418      	add	r0, r3
   b4e88:	60e0      	str	r0, [r4, #12]
}
   b4e8a:	bd10      	pop	{r4, pc}

000b4e8c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b4e8c:	4770      	bx	lr

000b4e8e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b4e8e:	4608      	mov	r0, r1
   b4e90:	b111      	cbz	r1, b4e98 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b4e92:	680b      	ldr	r3, [r1, #0]
   b4e94:	685b      	ldr	r3, [r3, #4]
   b4e96:	4718      	bx	r3
}
   b4e98:	4770      	bx	lr

000b4e9a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b4e9a:	4770      	bx	lr

000b4e9c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b4e9c:	4770      	bx	lr

000b4e9e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b4e9e:	4770      	bx	lr

000b4ea0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b4ea0:	4770      	bx	lr

000b4ea2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b4ea2:	b538      	push	{r3, r4, r5, lr}
   b4ea4:	4604      	mov	r4, r0
   b4ea6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b4ea8:	6800      	ldr	r0, [r0, #0]
   b4eaa:	212e      	movs	r1, #46	; 0x2e
   b4eac:	f001 fbcd 	bl	b664a <strchrnul>
    size = s - category;
   b4eb0:	6823      	ldr	r3, [r4, #0]
   b4eb2:	1ac3      	subs	r3, r0, r3
   b4eb4:	602b      	str	r3, [r5, #0]
    if (size) {
   b4eb6:	b123      	cbz	r3, b4ec2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b4eb8:	7803      	ldrb	r3, [r0, #0]
   b4eba:	b103      	cbz	r3, b4ebe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b4ebc:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b4ebe:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ec0:	6020      	str	r0, [r4, #0]
}
   b4ec2:	4618      	mov	r0, r3
   b4ec4:	bd38      	pop	{r3, r4, r5, pc}

000b4ec6 <_ZN5spark16JSONStreamWriterD0Ev>:
   b4ec6:	b510      	push	{r4, lr}
   b4ec8:	2110      	movs	r1, #16
   b4eca:	4604      	mov	r4, r0
   b4ecc:	f7ff f8f7 	bl	b40be <_ZdlPvj>
   b4ed0:	4620      	mov	r0, r4
   b4ed2:	bd10      	pop	{r4, pc}

000b4ed4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b4ed4:	b510      	push	{r4, lr}
   b4ed6:	2104      	movs	r1, #4
   b4ed8:	4604      	mov	r4, r0
   b4eda:	f7ff f8f0 	bl	b40be <_ZdlPvj>
   b4ede:	4620      	mov	r0, r4
   b4ee0:	bd10      	pop	{r4, pc}

000b4ee2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b4ee2:	b510      	push	{r4, lr}
   b4ee4:	2104      	movs	r1, #4
   b4ee6:	4604      	mov	r4, r0
   b4ee8:	f7ff f8e9 	bl	b40be <_ZdlPvj>
   b4eec:	4620      	mov	r0, r4
   b4eee:	bd10      	pop	{r4, pc}

000b4ef0 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b4ef0:	f7ff ba4e 	b.w	b4390 <os_mutex_recursive_lock>

000b4ef4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b4ef4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b4ef6:	f7ff f891 	bl	b401c <strcmp>
}
   b4efa:	fab0 f080 	clz	r0, r0
   b4efe:	0940      	lsrs	r0, r0, #5
   b4f00:	bd08      	pop	{r3, pc}

000b4f02 <__tcf_1>:
   b4f02:	4770      	bx	lr

000b4f04 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b4f04:	b510      	push	{r4, lr}
   b4f06:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b4f08:	f001 fa20 	bl	b634c <_Z16_fetch_usbserialv>
   b4f0c:	4284      	cmp	r4, r0
   b4f0e:	d010      	beq.n	b4f32 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b4f10:	f001 fafa 	bl	b6508 <_Z22__fetch_global_Serial1v>
   b4f14:	4284      	cmp	r4, r0
   b4f16:	d105      	bne.n	b4f24 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b4f18:	f001 faf6 	bl	b6508 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b4f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b4f20:	f001 b9ad 	b.w	b627e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b4f24:	b12c      	cbz	r4, b4f32 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b4f26:	6823      	ldr	r3, [r4, #0]
   b4f28:	4620      	mov	r0, r4
   b4f2a:	685b      	ldr	r3, [r3, #4]
}
   b4f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4f30:	4718      	bx	r3
   b4f32:	bd10      	pop	{r4, pc}

000b4f34 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4f34:	680b      	ldr	r3, [r1, #0]
   b4f36:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4f38:	684b      	ldr	r3, [r1, #4]
   b4f3a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4f3c:	b113      	cbz	r3, b4f44 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b4f3e:	685a      	ldr	r2, [r3, #4]
   b4f40:	3201      	adds	r2, #1
   b4f42:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4f44:	4770      	bx	lr

000b4f46 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b4f46:	b513      	push	{r0, r1, r4, lr}
   b4f48:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b4f4a:	4608      	mov	r0, r1
   b4f4c:	9101      	str	r1, [sp, #4]
   b4f4e:	f7ff f86f 	bl	b4030 <strlen>
   b4f52:	9901      	ldr	r1, [sp, #4]
   b4f54:	4602      	mov	r2, r0
   b4f56:	4620      	mov	r0, r4
}
   b4f58:	b002      	add	sp, #8
   b4f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b4f5e:	f7ff bf39 	b.w	b4dd4 <_ZN5spark10JSONWriter5valueEPKcj>

000b4f62 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b4f62:	b513      	push	{r0, r1, r4, lr}
   b4f64:	4604      	mov	r4, r0
    write(str, strlen(str));
   b4f66:	4608      	mov	r0, r1
   b4f68:	9101      	str	r1, [sp, #4]
   b4f6a:	f7ff f861 	bl	b4030 <strlen>
   b4f6e:	6823      	ldr	r3, [r4, #0]
   b4f70:	9901      	ldr	r1, [sp, #4]
   b4f72:	68db      	ldr	r3, [r3, #12]
   b4f74:	4602      	mov	r2, r0
   b4f76:	4620      	mov	r0, r4
}
   b4f78:	b002      	add	sp, #8
   b4f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b4f7e:	4718      	bx	r3

000b4f80 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b4f80:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b4f82:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b4f84:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b4f88:	68db      	ldr	r3, [r3, #12]
   b4f8a:	2201      	movs	r2, #1
   b4f8c:	f10d 0107 	add.w	r1, sp, #7
   b4f90:	4798      	blx	r3
}
   b4f92:	b003      	add	sp, #12
   b4f94:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b4f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b4f9c:	e9d0 8400 	ldrd	r8, r4, [r0]
   b4fa0:	f04f 0a14 	mov.w	sl, #20
   b4fa4:	9300      	str	r3, [sp, #0]
   b4fa6:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b4faa:	4b18      	ldr	r3, [pc, #96]	; (b500c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b4fac:	10a4      	asrs	r4, r4, #2
   b4fae:	4617      	mov	r7, r2
   b4fb0:	435c      	muls	r4, r3
   b4fb2:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b4fb4:	2c00      	cmp	r4, #0
   b4fb6:	dd21      	ble.n	b4ffc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b4fb8:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b4fba:	fb0a f006 	mul.w	r0, sl, r6
   b4fbe:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b4fc2:	463a      	mov	r2, r7
   b4fc4:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b4fc8:	5828      	ldr	r0, [r5, r0]
   b4fca:	9101      	str	r1, [sp, #4]
   b4fcc:	455f      	cmp	r7, fp
   b4fce:	bf28      	it	cs
   b4fd0:	465a      	movcs	r2, fp
   b4fd2:	f001 fb4c 	bl	b666e <strncmp>
                if (cmp == 0) {
   b4fd6:	2800      	cmp	r0, #0
   b4fd8:	9901      	ldr	r1, [sp, #4]
   b4fda:	f04f 0301 	mov.w	r3, #1
   b4fde:	d10b      	bne.n	b4ff8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b4fe0:	455f      	cmp	r7, fp
   b4fe2:	d103      	bne.n	b4fec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b4fe4:	9a00      	ldr	r2, [sp, #0]
   b4fe6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b4fe8:	4634      	mov	r4, r6
   b4fea:	e7e3      	b.n	b4fb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b4fec:	d9fc      	bls.n	b4fe8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b4fee:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b4ff0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b4ff4:	3e01      	subs	r6, #1
   b4ff6:	e7f7      	b.n	b4fe8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b4ff8:	dbf9      	blt.n	b4fee <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b4ffa:	e7f5      	b.n	b4fe8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b4ffc:	eba5 0508 	sub.w	r5, r5, r8
}
   b5000:	4802      	ldr	r0, [pc, #8]	; (b500c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5002:	10ad      	asrs	r5, r5, #2
   b5004:	4368      	muls	r0, r5
   b5006:	b003      	add	sp, #12
   b5008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b500c:	cccccccd 	.word	0xcccccccd

000b5010 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5010:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b5012:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b5014:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5016:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b5018:	b303      	cbz	r3, b505c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b501a:	b1f9      	cbz	r1, b505c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b501c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b501e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b5022:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b5024:	a903      	add	r1, sp, #12
   b5026:	a801      	add	r0, sp, #4
   b5028:	f7ff ff3b 	bl	b4ea2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b502c:	4601      	mov	r1, r0
   b502e:	b1a8      	cbz	r0, b505c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5030:	f10d 030b 	add.w	r3, sp, #11
   b5034:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b5036:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b503a:	4620      	mov	r0, r4
   b503c:	f7ff ffac 	bl	b4f98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5040:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5044:	b153      	cbz	r3, b505c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b5046:	6823      	ldr	r3, [r4, #0]
   b5048:	2414      	movs	r4, #20
   b504a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b504e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5050:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b5054:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b5056:	bfa8      	it	ge
   b5058:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b505a:	e7e3      	b.n	b5024 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b505c:	4628      	mov	r0, r5
   b505e:	b004      	add	sp, #16
   b5060:	bd70      	pop	{r4, r5, r6, pc}

000b5062 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5062:	b40e      	push	{r1, r2, r3}
   b5064:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5066:	b08c      	sub	sp, #48	; 0x30
   b5068:	af00      	add	r7, sp, #0
   b506a:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b506e:	4604      	mov	r4, r0
   b5070:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5074:	607a      	str	r2, [r7, #4]
   b5076:	462b      	mov	r3, r5
   b5078:	2120      	movs	r1, #32
   b507a:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b507e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5080:	f7ff fb4a 	bl	b4718 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b5084:	281f      	cmp	r0, #31
   b5086:	687a      	ldr	r2, [r7, #4]
   b5088:	d91a      	bls.n	b50c0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b508a:	f100 0308 	add.w	r3, r0, #8
   b508e:	f023 0307 	bic.w	r3, r3, #7
        }
   b5092:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b5094:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5098:	1c41      	adds	r1, r0, #1
   b509a:	462b      	mov	r3, r5
   b509c:	4668      	mov	r0, sp
        va_start(args, fmt);
   b509e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b50a0:	f7ff fb3a 	bl	b4718 <vsnprintf>
        if (n > 0) {
   b50a4:	1e02      	subs	r2, r0, #0
   b50a6:	dd04      	ble.n	b50b2 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b50a8:	6823      	ldr	r3, [r4, #0]
   b50aa:	4669      	mov	r1, sp
   b50ac:	68db      	ldr	r3, [r3, #12]
   b50ae:	4620      	mov	r0, r4
   b50b0:	4798      	blx	r3
   b50b2:	46b5      	mov	sp, r6
}
   b50b4:	3730      	adds	r7, #48	; 0x30
   b50b6:	46bd      	mov	sp, r7
   b50b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b50bc:	b003      	add	sp, #12
   b50be:	4770      	bx	lr
    } else if (n > 0) {
   b50c0:	2800      	cmp	r0, #0
   b50c2:	d0f7      	beq.n	b50b4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b50c4:	6823      	ldr	r3, [r4, #0]
   b50c6:	4602      	mov	r2, r0
   b50c8:	68db      	ldr	r3, [r3, #12]
   b50ca:	f107 0110 	add.w	r1, r7, #16
   b50ce:	4620      	mov	r0, r4
   b50d0:	4798      	blx	r3
}
   b50d2:	e7ef      	b.n	b50b4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b50d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b50d4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b50d6:	4c09      	ldr	r4, [pc, #36]	; (b50fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b50d8:	7823      	ldrb	r3, [r4, #0]
   b50da:	f3bf 8f5b 	dmb	ish
   b50de:	07db      	lsls	r3, r3, #31
   b50e0:	d409      	bmi.n	b50f6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b50e2:	4620      	mov	r0, r4
   b50e4:	f7fe fffa 	bl	b40dc <__cxa_guard_acquire>
   b50e8:	b128      	cbz	r0, b50f6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b50ea:	4620      	mov	r0, r4
   b50ec:	f7fe fffb 	bl	b40e6 <__cxa_guard_release>
   b50f0:	4803      	ldr	r0, [pc, #12]	; (b5100 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b50f2:	f001 fa31 	bl	b6558 <atexit>
}
   b50f6:	4803      	ldr	r0, [pc, #12]	; (b5104 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b50f8:	bd10      	pop	{r4, pc}
   b50fa:	bf00      	nop
   b50fc:	2003e6c4 	.word	0x2003e6c4
   b5100:	000b4e9b 	.word	0x000b4e9b
   b5104:	2003e5c4 	.word	0x2003e5c4

000b5108 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b5108:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b510a:	4c09      	ldr	r4, [pc, #36]	; (b5130 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b510c:	7823      	ldrb	r3, [r4, #0]
   b510e:	f3bf 8f5b 	dmb	ish
   b5112:	07db      	lsls	r3, r3, #31
   b5114:	d409      	bmi.n	b512a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5116:	4620      	mov	r0, r4
   b5118:	f7fe ffe0 	bl	b40dc <__cxa_guard_acquire>
   b511c:	b128      	cbz	r0, b512a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b511e:	4620      	mov	r0, r4
   b5120:	f7fe ffe1 	bl	b40e6 <__cxa_guard_release>
   b5124:	4803      	ldr	r0, [pc, #12]	; (b5134 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b5126:	f001 fa17 	bl	b6558 <atexit>
    return &factory;
}
   b512a:	4803      	ldr	r0, [pc, #12]	; (b5138 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b512c:	bd10      	pop	{r4, pc}
   b512e:	bf00      	nop
   b5130:	2003e6c8 	.word	0x2003e6c8
   b5134:	000b4f03 	.word	0x000b4f03
   b5138:	2003e5c8 	.word	0x2003e5c8

000b513c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b513c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b513e:	2500      	movs	r5, #0
   b5140:	4604      	mov	r4, r0
   b5142:	e9c0 5500 	strd	r5, r5, [r0]
   b5146:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b514a:	6085      	str	r5, [r0, #8]
   b514c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b514e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b5152:	f7ff f90d 	bl	b4370 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b5156:	f7ff ffbd 	bl	b50d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b515a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b515c:	f7ff ffd4 	bl	b5108 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b5160:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5162:	6220      	str	r0, [r4, #32]
}
   b5164:	4620      	mov	r0, r4
   b5166:	bd38      	pop	{r3, r4, r5, pc}

000b5168 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b5168:	b510      	push	{r4, lr}
    static LogManager mgr;
   b516a:	4c0a      	ldr	r4, [pc, #40]	; (b5194 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b516c:	7823      	ldrb	r3, [r4, #0]
   b516e:	f3bf 8f5b 	dmb	ish
   b5172:	07db      	lsls	r3, r3, #31
   b5174:	d40c      	bmi.n	b5190 <_ZN5spark10LogManager8instanceEv+0x28>
   b5176:	4620      	mov	r0, r4
   b5178:	f7fe ffb0 	bl	b40dc <__cxa_guard_acquire>
   b517c:	b140      	cbz	r0, b5190 <_ZN5spark10LogManager8instanceEv+0x28>
   b517e:	4806      	ldr	r0, [pc, #24]	; (b5198 <_ZN5spark10LogManager8instanceEv+0x30>)
   b5180:	f7ff ffdc 	bl	b513c <_ZN5spark10LogManagerC1Ev>
   b5184:	4620      	mov	r0, r4
   b5186:	f7fe ffae 	bl	b40e6 <__cxa_guard_release>
   b518a:	4804      	ldr	r0, [pc, #16]	; (b519c <_ZN5spark10LogManager8instanceEv+0x34>)
   b518c:	f001 f9e4 	bl	b6558 <atexit>
    return &mgr;
}
   b5190:	4801      	ldr	r0, [pc, #4]	; (b5198 <_ZN5spark10LogManager8instanceEv+0x30>)
   b5192:	bd10      	pop	{r4, pc}
   b5194:	2003e6c0 	.word	0x2003e6c0
   b5198:	2003e6d0 	.word	0x2003e6d0
   b519c:	000b56e1 	.word	0x000b56e1

000b51a0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b51a0:	4a02      	ldr	r2, [pc, #8]	; (b51ac <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b51a2:	4903      	ldr	r1, [pc, #12]	; (b51b0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b51a4:	4803      	ldr	r0, [pc, #12]	; (b51b4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b51a6:	2300      	movs	r3, #0
   b51a8:	f7ff b9e2 	b.w	b4570 <log_set_callbacks>
   b51ac:	000b54c5 	.word	0x000b54c5
   b51b0:	000b5451 	.word	0x000b5451
   b51b4:	000b53d1 	.word	0x000b53d1

000b51b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b51b8:	2300      	movs	r3, #0
   b51ba:	461a      	mov	r2, r3
   b51bc:	4619      	mov	r1, r3
   b51be:	4618      	mov	r0, r3
   b51c0:	f7ff b9d6 	b.w	b4570 <log_set_callbacks>

000b51c4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b51c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b51c6:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b51c8:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b51ca:	4668      	mov	r0, sp
   b51cc:	f7ff feb2 	bl	b4f34 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b51d0:	466a      	mov	r2, sp
   b51d2:	4629      	mov	r1, r5
   b51d4:	4620      	mov	r0, r4
   b51d6:	f7ff fd1d 	bl	b4c14 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b51da:	a801      	add	r0, sp, #4
   b51dc:	f7ff fabc 	bl	b4758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b51e0:	4620      	mov	r0, r4
   b51e2:	b003      	add	sp, #12
   b51e4:	bd30      	pop	{r4, r5, pc}

000b51e6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b51e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b51e8:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b51ea:	4604      	mov	r4, r0
   b51ec:	4668      	mov	r0, sp
   b51ee:	f7ff fea1 	bl	b4f34 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b51f2:	466a      	mov	r2, sp
   b51f4:	4629      	mov	r1, r5
   b51f6:	4620      	mov	r0, r4
   b51f8:	f7ff fce8 	bl	b4bcc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b51fc:	a801      	add	r0, sp, #4
   b51fe:	f7ff faab 	bl	b4758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5202:	4620      	mov	r0, r4
   b5204:	b003      	add	sp, #12
   b5206:	bd30      	pop	{r4, r5, pc}

000b5208 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5208:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b520a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b520c:	4604      	mov	r4, r0
   b520e:	4668      	mov	r0, sp
   b5210:	f7ff fe90 	bl	b4f34 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b5214:	466a      	mov	r2, sp
   b5216:	4629      	mov	r1, r5
   b5218:	4620      	mov	r0, r4
   b521a:	f7ff fc80 	bl	b4b1e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b521e:	a801      	add	r0, sp, #4
   b5220:	f7ff fa9a 	bl	b4758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5224:	4620      	mov	r0, r4
   b5226:	b003      	add	sp, #12
   b5228:	bd30      	pop	{r4, r5, pc}
	...

000b522c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b522c:	b570      	push	{r4, r5, r6, lr}
   b522e:	b08a      	sub	sp, #40	; 0x28
   b5230:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b5232:	4601      	mov	r1, r0
   b5234:	a804      	add	r0, sp, #16
   b5236:	f7ff ffc5 	bl	b51c4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b523a:	4e14      	ldr	r6, [pc, #80]	; (b528c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b523c:	a804      	add	r0, sp, #16
   b523e:	f7ff fd01 	bl	b4c44 <_ZN5spark18JSONObjectIterator4nextEv>
   b5242:	b1e8      	cbz	r0, b5280 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b5244:	a904      	add	r1, sp, #16
   b5246:	4668      	mov	r0, sp
   b5248:	f7ff ffcd 	bl	b51e6 <_ZNK5spark18JSONObjectIterator4nameEv>
   b524c:	9802      	ldr	r0, [sp, #8]
   b524e:	4631      	mov	r1, r6
   b5250:	f7ff fe50 	bl	b4ef4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b5254:	4604      	mov	r4, r0
   b5256:	b110      	cbz	r0, b525e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b5258:	1e2c      	subs	r4, r5, #0
   b525a:	bf18      	it	ne
   b525c:	2401      	movne	r4, #1
   b525e:	a801      	add	r0, sp, #4
   b5260:	f7ff fa7a 	bl	b4758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5264:	2c00      	cmp	r4, #0
   b5266:	d0e9      	beq.n	b523c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b5268:	a904      	add	r1, sp, #16
   b526a:	4668      	mov	r0, sp
   b526c:	f7ff ffcc 	bl	b5208 <_ZNK5spark18JSONObjectIterator5valueEv>
   b5270:	4668      	mov	r0, sp
   b5272:	f7ff fc8a 	bl	b4b8a <_ZNK5spark9JSONValue5toIntEv>
   b5276:	6028      	str	r0, [r5, #0]
   b5278:	a801      	add	r0, sp, #4
   b527a:	f7ff fa6d 	bl	b4758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b527e:	e7dd      	b.n	b523c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b5280:	a805      	add	r0, sp, #20
   b5282:	f7ff fa69 	bl	b4758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5286:	b00a      	add	sp, #40	; 0x28
   b5288:	bd70      	pop	{r4, r5, r6, pc}
   b528a:	bf00      	nop
   b528c:	000b6a05 	.word	0x000b6a05

000b5290 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5290:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5292:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5294:	4620      	mov	r0, r4
   b5296:	4913      	ldr	r1, [pc, #76]	; (b52e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5298:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b529a:	f7fe febf 	bl	b401c <strcmp>
   b529e:	b950      	cbnz	r0, b52b6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b52a0:	f001 f854 	bl	b634c <_Z16_fetch_usbserialv>
   b52a4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b52a8:	f001 f83e 	bl	b6328 <_ZN9USBSerial5beginEl>
}
   b52ac:	b003      	add	sp, #12
   b52ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b52b2:	f001 b84b 	b.w	b634c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b52b6:	490c      	ldr	r1, [pc, #48]	; (b52e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b52b8:	4620      	mov	r0, r4
   b52ba:	f7fe feaf 	bl	b401c <strcmp>
   b52be:	b978      	cbnz	r0, b52e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b52c0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b52c4:	a901      	add	r1, sp, #4
   b52c6:	4628      	mov	r0, r5
        int baud = 9600;
   b52c8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b52ca:	f7ff ffaf 	bl	b522c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b52ce:	f001 f91b 	bl	b6508 <_Z22__fetch_global_Serial1v>
   b52d2:	9901      	ldr	r1, [sp, #4]
   b52d4:	f000 ffd0 	bl	b6278 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b52d8:	f001 f916 	bl	b6508 <_Z22__fetch_global_Serial1v>
}
   b52dc:	b003      	add	sp, #12
   b52de:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b52e0:	2000      	movs	r0, #0
   b52e2:	e7fb      	b.n	b52dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b52e4:	000b6a0a 	.word	0x000b6a0a
   b52e8:	000b6a11 	.word	0x000b6a11

000b52ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b52ec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b52ee:	e9d0 5300 	ldrd	r5, r3, [r0]
   b52f2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b52f4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b52f6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b52fa:	42ae      	cmp	r6, r5
   b52fc:	d005      	beq.n	b530a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b52fe:	f105 0008 	add.w	r0, r5, #8
   b5302:	f7ff fff3 	bl	b52ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5306:	3514      	adds	r5, #20
   b5308:	e7f7      	b.n	b52fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b530a:	6820      	ldr	r0, [r4, #0]
   b530c:	f7ff f9f4 	bl	b46f8 <free>
}
   b5310:	4620      	mov	r0, r4
   b5312:	bd70      	pop	{r4, r5, r6, pc}

000b5314 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5314:	b510      	push	{r4, lr}
   b5316:	4604      	mov	r4, r0
   b5318:	300c      	adds	r0, #12
   b531a:	f7ff ffe7 	bl	b52ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b531e:	4620      	mov	r0, r4
   b5320:	f7ff fa44 	bl	b47ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5324:	4620      	mov	r0, r4
   b5326:	bd10      	pop	{r4, pc}

000b5328 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5328:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b532a:	4b04      	ldr	r3, [pc, #16]	; (b533c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b532c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b532e:	f840 3b04 	str.w	r3, [r0], #4
   b5332:	f7ff ffef 	bl	b5314 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b5336:	4620      	mov	r0, r4
   b5338:	bd10      	pop	{r4, pc}
   b533a:	bf00      	nop
   b533c:	000b68f4 	.word	0x000b68f4

000b5340 <_ZN5spark16StreamLogHandlerD0Ev>:
   b5340:	b510      	push	{r4, lr}
   b5342:	4604      	mov	r4, r0
   b5344:	f7ff fff0 	bl	b5328 <_ZN5spark16StreamLogHandlerD1Ev>
   b5348:	4620      	mov	r0, r4
   b534a:	2124      	movs	r1, #36	; 0x24
   b534c:	f7fe feb7 	bl	b40be <_ZdlPvj>
   b5350:	4620      	mov	r0, r4
   b5352:	bd10      	pop	{r4, pc}

000b5354 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b5354:	b510      	push	{r4, lr}
   b5356:	4b03      	ldr	r3, [pc, #12]	; (b5364 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b5358:	6003      	str	r3, [r0, #0]
   b535a:	4604      	mov	r4, r0
   b535c:	f7ff ffe4 	bl	b5328 <_ZN5spark16StreamLogHandlerD1Ev>
   b5360:	4620      	mov	r0, r4
   b5362:	bd10      	pop	{r4, pc}
   b5364:	000b6ab0 	.word	0x000b6ab0

000b5368 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b5368:	b510      	push	{r4, lr}
   b536a:	4604      	mov	r4, r0
   b536c:	f7ff fff2 	bl	b5354 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b5370:	4620      	mov	r0, r4
   b5372:	2124      	movs	r1, #36	; 0x24
   b5374:	f7fe fea3 	bl	b40be <_ZdlPvj>
   b5378:	4620      	mov	r0, r4
   b537a:	bd10      	pop	{r4, pc}

000b537c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b537c:	680a      	ldr	r2, [r1, #0]
   b537e:	6002      	str	r2, [r0, #0]
   b5380:	684a      	ldr	r2, [r1, #4]
   b5382:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b5384:	2200      	movs	r2, #0
   b5386:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b538a:	b510      	push	{r4, lr}
   b538c:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b538e:	688c      	ldr	r4, [r1, #8]
   b5390:	6084      	str	r4, [r0, #8]
   b5392:	68cc      	ldr	r4, [r1, #12]
   b5394:	60c4      	str	r4, [r0, #12]
   b5396:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5398:	608a      	str	r2, [r1, #8]
   b539a:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b539c:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b539e:	610a      	str	r2, [r1, #16]
   b53a0:	bd10      	pop	{r4, pc}

000b53a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
   b53a2:	2200      	movs	r2, #0
   b53a4:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b53a8:	b510      	push	{r4, lr}
        capacity_(0) {
   b53aa:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b53ac:	680c      	ldr	r4, [r1, #0]
   b53ae:	6004      	str	r4, [r0, #0]
   b53b0:	684c      	ldr	r4, [r1, #4]
   b53b2:	6044      	str	r4, [r0, #4]
   b53b4:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b53b6:	600a      	str	r2, [r1, #0]
   b53b8:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b53ba:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b53bc:	608a      	str	r2, [r1, #8]
}
   b53be:	bd10      	pop	{r4, pc}

000b53c0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b53c0:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b53c2:	6803      	ldr	r3, [r0, #0]
   b53c4:	4604      	mov	r4, r0
   b53c6:	6818      	ldr	r0, [r3, #0]
   b53c8:	f7fe ffea 	bl	b43a0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b53cc:	4620      	mov	r0, r4
   b53ce:	bd10      	pop	{r4, pc}

000b53d0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b53d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53d4:	b087      	sub	sp, #28
   b53d6:	4680      	mov	r8, r0
   b53d8:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b53da:	4b1c      	ldr	r3, [pc, #112]	; (b544c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b53dc:	685b      	ldr	r3, [r3, #4]
   b53de:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b53e2:	4689      	mov	r9, r1
   b53e4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b53e6:	b96b      	cbnz	r3, b5404 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b53e8:	f7ff febe 	bl	b5168 <_ZN5spark10LogManager8instanceEv>
   b53ec:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b53ee:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b53f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b53f4:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b53f6:	f7ff fd7b 	bl	b4ef0 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b53fa:	7b23      	ldrb	r3, [r4, #12]
   b53fc:	b12b      	cbz	r3, b540a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b53fe:	a805      	add	r0, sp, #20
   b5400:	f7ff ffde 	bl	b53c0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b5404:	b007      	add	sp, #28
   b5406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b540a:	2301      	movs	r3, #1
   b540c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b540e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b5412:	fa5f f989 	uxtb.w	r9, r9
   b5416:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b541a:	45aa      	cmp	sl, r5
   b541c:	d012      	beq.n	b5444 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b541e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b5422:	4631      	mov	r1, r6
   b5424:	1d38      	adds	r0, r7, #4
   b5426:	f7ff fdf3 	bl	b5010 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b542a:	4581      	cmp	r9, r0
   b542c:	d3f5      	bcc.n	b541a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b542e:	683b      	ldr	r3, [r7, #0]
   b5430:	9a03      	ldr	r2, [sp, #12]
   b5432:	9200      	str	r2, [sp, #0]
   b5434:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5438:	464a      	mov	r2, r9
   b543a:	4633      	mov	r3, r6
   b543c:	4641      	mov	r1, r8
   b543e:	4638      	mov	r0, r7
   b5440:	47d8      	blx	fp
   b5442:	e7ea      	b.n	b541a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b5444:	2300      	movs	r3, #0
   b5446:	7323      	strb	r3, [r4, #12]
   b5448:	e7d9      	b.n	b53fe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b544a:	bf00      	nop
   b544c:	e000ed00 	.word	0xe000ed00

000b5450 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b5450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5454:	469b      	mov	fp, r3
   b5456:	4b1a      	ldr	r3, [pc, #104]	; (b54c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b5458:	685b      	ldr	r3, [r3, #4]
   b545a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b545e:	4680      	mov	r8, r0
   b5460:	4689      	mov	r9, r1
   b5462:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b5464:	b96b      	cbnz	r3, b5482 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b5466:	f7ff fe7f 	bl	b5168 <_ZN5spark10LogManager8instanceEv>
   b546a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b546c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b5470:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5472:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5474:	f7ff fd3c 	bl	b4ef0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b5478:	7b23      	ldrb	r3, [r4, #12]
   b547a:	b12b      	cbz	r3, b5488 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b547c:	a801      	add	r0, sp, #4
   b547e:	f7ff ff9f 	bl	b53c0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5482:	b003      	add	sp, #12
   b5484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b5488:	2301      	movs	r3, #1
   b548a:	7323      	strb	r3, [r4, #12]
   b548c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5490:	b2f6      	uxtb	r6, r6
   b5492:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5496:	4555      	cmp	r5, sl
   b5498:	d00e      	beq.n	b54b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b549a:	f855 7b04 	ldr.w	r7, [r5], #4
   b549e:	4659      	mov	r1, fp
   b54a0:	1d38      	adds	r0, r7, #4
   b54a2:	f7ff fdb5 	bl	b5010 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b54a6:	4286      	cmp	r6, r0
   b54a8:	d3f5      	bcc.n	b5496 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b54aa:	683b      	ldr	r3, [r7, #0]
   b54ac:	464a      	mov	r2, r9
   b54ae:	68db      	ldr	r3, [r3, #12]
   b54b0:	4641      	mov	r1, r8
   b54b2:	4638      	mov	r0, r7
   b54b4:	4798      	blx	r3
   b54b6:	e7ee      	b.n	b5496 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b54b8:	2300      	movs	r3, #0
   b54ba:	7323      	strb	r3, [r4, #12]
   b54bc:	e7de      	b.n	b547c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b54be:	bf00      	nop
   b54c0:	e000ed00 	.word	0xe000ed00

000b54c4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b54c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b54c8:	4b16      	ldr	r3, [pc, #88]	; (b5524 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b54ca:	685b      	ldr	r3, [r3, #4]
   b54cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b54d0:	4605      	mov	r5, r0
   b54d2:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b54d4:	bb1b      	cbnz	r3, b551e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b54d6:	f7ff fe47 	bl	b5168 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b54da:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b54de:	4604      	mov	r4, r0
   b54e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b54e2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b54e4:	f7ff fd04 	bl	b4ef0 <_ZN14RecursiveMutex4lockEv.isra.0>
   b54e8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b54ec:	2446      	movs	r4, #70	; 0x46
   b54ee:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b54f2:	45b0      	cmp	r8, r6
   b54f4:	d109      	bne.n	b550a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b54f6:	a801      	add	r0, sp, #4
   b54f8:	f7ff ff62 	bl	b53c0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b54fc:	42a5      	cmp	r5, r4
   b54fe:	bfb4      	ite	lt
   b5500:	2000      	movlt	r0, #0
   b5502:	2001      	movge	r0, #1
}
   b5504:	b002      	add	sp, #8
   b5506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b550a:	f856 0b04 	ldr.w	r0, [r6], #4
   b550e:	4639      	mov	r1, r7
   b5510:	3004      	adds	r0, #4
   b5512:	f7ff fd7d 	bl	b5010 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b5516:	4284      	cmp	r4, r0
   b5518:	bfa8      	it	ge
   b551a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b551c:	e7e9      	b.n	b54f2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b551e:	2000      	movs	r0, #0
   b5520:	e7f0      	b.n	b5504 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b5522:	bf00      	nop
   b5524:	e000ed00 	.word	0xe000ed00

000b5528 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b552a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b552e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5530:	4604      	mov	r4, r0
   b5532:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5534:	db0d      	blt.n	b5552 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b5536:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5538:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b553a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b553c:	dd04      	ble.n	b5548 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b553e:	00b9      	lsls	r1, r7, #2
   b5540:	f7ff f8e2 	bl	b4708 <realloc>
            if (!d) {
   b5544:	b918      	cbnz	r0, b554e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b5546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5548:	f7ff f8d6 	bl	b46f8 <free>
        T* d = nullptr;
   b554c:	2000      	movs	r0, #0
        data_ = d;
   b554e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5550:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5552:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5554:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5556:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b555a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b555c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b5560:	1d08      	adds	r0, r1, #4
   b5562:	f001 f815 	bl	b6590 <memmove>
    new(p) T(std::move(value));
   b5566:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b556a:	6863      	ldr	r3, [r4, #4]
   b556c:	3301      	adds	r3, #1
   b556e:	6063      	str	r3, [r4, #4]
    return true;
   b5570:	2001      	movs	r0, #1
   b5572:	e7e8      	b.n	b5546 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b5574 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5574:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b5576:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b557a:	4604      	mov	r4, r0
   b557c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b557e:	9301      	str	r3, [sp, #4]
   b5580:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b5582:	f7ff fcb5 	bl	b4ef0 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b5586:	e9d4 3200 	ldrd	r3, r2, [r4]
   b558a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b558e:	4293      	cmp	r3, r2
   b5590:	4619      	mov	r1, r3
   b5592:	d00b      	beq.n	b55ac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b5594:	6809      	ldr	r1, [r1, #0]
   b5596:	42a9      	cmp	r1, r5
   b5598:	f103 0304 	add.w	r3, r3, #4
   b559c:	d1f7      	bne.n	b558e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b559e:	a801      	add	r0, sp, #4
   b55a0:	f7ff ff0e 	bl	b53c0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b55a4:	2500      	movs	r5, #0
}
   b55a6:	4628      	mov	r0, r5
   b55a8:	b003      	add	sp, #12
   b55aa:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b55ac:	4629      	mov	r1, r5
   b55ae:	4620      	mov	r0, r4
   b55b0:	f7ff ffba 	bl	b5528 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b55b4:	4605      	mov	r5, r0
   b55b6:	2800      	cmp	r0, #0
   b55b8:	d0f1      	beq.n	b559e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b55ba:	6863      	ldr	r3, [r4, #4]
   b55bc:	2b01      	cmp	r3, #1
   b55be:	d101      	bne.n	b55c4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b55c0:	f7ff fdee 	bl	b51a0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b55c4:	a801      	add	r0, sp, #4
   b55c6:	f7ff fefb 	bl	b53c0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b55ca:	e7ec      	b.n	b55a6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b55cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b55cc:	b570      	push	{r4, r5, r6, lr}
   b55ce:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b55d0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b55d4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b55d6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b55da:	4282      	cmp	r2, r0
   b55dc:	d00f      	beq.n	b55fe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b55de:	4601      	mov	r1, r0
            if (*p == value) {
   b55e0:	681d      	ldr	r5, [r3, #0]
   b55e2:	f851 6b04 	ldr.w	r6, [r1], #4
   b55e6:	42ae      	cmp	r6, r5
   b55e8:	d107      	bne.n	b55fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b55ea:	1a52      	subs	r2, r2, r1
   b55ec:	f000 ffd0 	bl	b6590 <memmove>
    --size_;
   b55f0:	6863      	ldr	r3, [r4, #4]
   b55f2:	3b01      	subs	r3, #1
   b55f4:	6063      	str	r3, [r4, #4]
    return true;
   b55f6:	2001      	movs	r0, #1
}
   b55f8:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b55fa:	4608      	mov	r0, r1
   b55fc:	e7ed      	b.n	b55da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b55fe:	2000      	movs	r0, #0
   b5600:	e7fa      	b.n	b55f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5602 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5602:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5604:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5608:	4604      	mov	r4, r0
   b560a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b560c:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b560e:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5610:	f7ff fc6e 	bl	b4ef0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5614:	a901      	add	r1, sp, #4
   b5616:	4620      	mov	r0, r4
   b5618:	f7ff ffd8 	bl	b55cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b561c:	b118      	cbz	r0, b5626 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b561e:	6863      	ldr	r3, [r4, #4]
   b5620:	b90b      	cbnz	r3, b5626 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5622:	f7ff fdc9 	bl	b51b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5626:	a803      	add	r0, sp, #12
   b5628:	f7ff feca 	bl	b53c0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b562c:	b004      	add	sp, #16
   b562e:	bd10      	pop	{r4, pc}

000b5630 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b5630:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b5632:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b5636:	2318      	movs	r3, #24
   b5638:	4604      	mov	r4, r0
   b563a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b563e:	42ae      	cmp	r6, r5
   b5640:	d015      	beq.n	b566e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b5642:	f105 0110 	add.w	r1, r5, #16
   b5646:	4620      	mov	r0, r4
   b5648:	f7ff ffc0 	bl	b55cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b564c:	6863      	ldr	r3, [r4, #4]
   b564e:	b90b      	cbnz	r3, b5654 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b5650:	f7ff fdb2 	bl	b51b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b5654:	69e0      	ldr	r0, [r4, #28]
   b5656:	6929      	ldr	r1, [r5, #16]
   b5658:	6803      	ldr	r3, [r0, #0]
   b565a:	68db      	ldr	r3, [r3, #12]
   b565c:	4798      	blx	r3
        if (h.stream) {
   b565e:	6969      	ldr	r1, [r5, #20]
   b5660:	b119      	cbz	r1, b566a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b5662:	6a20      	ldr	r0, [r4, #32]
   b5664:	6803      	ldr	r3, [r0, #0]
   b5666:	68db      	ldr	r3, [r3, #12]
   b5668:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b566a:	3518      	adds	r5, #24
   b566c:	e7e7      	b.n	b563e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b566e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5672:	2618      	movs	r6, #24
   b5674:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5678:	42ae      	cmp	r6, r5
   b567a:	d004      	beq.n	b5686 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b567c:	4628      	mov	r0, r5
   b567e:	f000 fcbd 	bl	b5ffc <_ZN6StringD1Ev>
   b5682:	3518      	adds	r5, #24
   b5684:	e7f8      	b.n	b5678 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b5686:	2300      	movs	r3, #0
   b5688:	6163      	str	r3, [r4, #20]
}
   b568a:	bd70      	pop	{r4, r5, r6, pc}

000b568c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b568c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b568e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5690:	f7ff fd92 	bl	b51b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5694:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5698:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b569a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b569c:	f7ff fc28 	bl	b4ef0 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b56a0:	4620      	mov	r0, r4
   b56a2:	f7ff ffc5 	bl	b5630 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b56a6:	a801      	add	r0, sp, #4
   b56a8:	f7ff fe8a 	bl	b53c0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b56ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b56ae:	b108      	cbz	r0, b56b4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b56b0:	f7fe fe66 	bl	b4380 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b56b4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b56b8:	2618      	movs	r6, #24
   b56ba:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b56be:	42ae      	cmp	r6, r5
   b56c0:	d004      	beq.n	b56cc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b56c2:	4628      	mov	r0, r5
   b56c4:	f000 fc9a 	bl	b5ffc <_ZN6StringD1Ev>
   b56c8:	3518      	adds	r5, #24
   b56ca:	e7f8      	b.n	b56be <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b56cc:	6920      	ldr	r0, [r4, #16]
   b56ce:	f7ff f813 	bl	b46f8 <free>
   b56d2:	6820      	ldr	r0, [r4, #0]
   b56d4:	f7ff f810 	bl	b46f8 <free>
}
   b56d8:	4620      	mov	r0, r4
   b56da:	b002      	add	sp, #8
   b56dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b56e0 <__tcf_2>:
    static LogManager mgr;
   b56e0:	4801      	ldr	r0, [pc, #4]	; (b56e8 <__tcf_2+0x8>)
   b56e2:	f7ff bfd3 	b.w	b568c <_ZN5spark10LogManagerD1Ev>
   b56e6:	bf00      	nop
   b56e8:	2003e6d0 	.word	0x2003e6d0

000b56ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b56ec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b56ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56f0:	4604      	mov	r4, r0
   b56f2:	460d      	mov	r5, r1
   b56f4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b56f6:	d915      	bls.n	b5724 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b56f8:	4290      	cmp	r0, r2
   b56fa:	d214      	bcs.n	b5726 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b56fc:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5700:	1a75      	subs	r5, r6, r1
   b5702:	f1a1 0714 	sub.w	r7, r1, #20
   b5706:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5708:	42b7      	cmp	r7, r6
   b570a:	d01a      	beq.n	b5742 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b570c:	b11c      	cbz	r4, b5716 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b570e:	4631      	mov	r1, r6
   b5710:	4620      	mov	r0, r4
   b5712:	f7ff fe33 	bl	b537c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5716:	f106 0008 	add.w	r0, r6, #8
   b571a:	f7ff fde7 	bl	b52ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b571e:	3e14      	subs	r6, #20
   b5720:	3c14      	subs	r4, #20
   b5722:	e7f1      	b.n	b5708 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5724:	d00d      	beq.n	b5742 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5726:	42b5      	cmp	r5, r6
   b5728:	d00b      	beq.n	b5742 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b572a:	b11c      	cbz	r4, b5734 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b572c:	4629      	mov	r1, r5
   b572e:	4620      	mov	r0, r4
   b5730:	f7ff fe24 	bl	b537c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5734:	f105 0008 	add.w	r0, r5, #8
   b5738:	f7ff fdd8 	bl	b52ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b573c:	3514      	adds	r5, #20
   b573e:	3414      	adds	r4, #20
   b5740:	e7f1      	b.n	b5726 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5744 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5748:	4690      	mov	r8, r2
   b574a:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b574c:	2300      	movs	r3, #0
   b574e:	9103      	str	r1, [sp, #12]
    return size_;
   b5750:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5754:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5756:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5758:	4299      	cmp	r1, r3
        capacity_(0) {
   b575a:	e9c0 3300 	strd	r3, r3, [r0]
   b575e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5762:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5766:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b576a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b576c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b576e:	dc23      	bgt.n	b57b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5770:	e9d8 5700 	ldrd	r5, r7, [r8]
   b5774:	2314      	movs	r3, #20
   b5776:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b577a:	42af      	cmp	r7, r5
   b577c:	d03b      	beq.n	b57f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b577e:	4629      	mov	r1, r5
   b5780:	a80b      	add	r0, sp, #44	; 0x2c
   b5782:	f000 fca4 	bl	b60ce <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b5786:	a90b      	add	r1, sp, #44	; 0x2c
   b5788:	a80f      	add	r0, sp, #60	; 0x3c
   b578a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b578c:	f000 fc9f 	bl	b60ce <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5790:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b5794:	4299      	cmp	r1, r3
   b5796:	da1b      	bge.n	b57d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5798:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b579a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b579c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b57a0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b57a4:	4631      	mov	r1, r6
   b57a6:	f106 0010 	add.w	r0, r6, #16
   b57aa:	f7ff fb23 	bl	b4df4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b57ae:	b9ee      	cbnz	r6, b57ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b57b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b57b2:	3301      	adds	r3, #1
   b57b4:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b57b6:	e011      	b.n	b57dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b57b8:	a808      	add	r0, sp, #32
   b57ba:	f7ff fb45 	bl	b4e48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b57be:	2800      	cmp	r0, #0
   b57c0:	d1d6      	bne.n	b5770 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b57c2:	a808      	add	r0, sp, #32
   b57c4:	f7fe fff2 	bl	b47ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b57c8:	4620      	mov	r0, r4
   b57ca:	b015      	add	sp, #84	; 0x54
   b57cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b57d0:	3101      	adds	r1, #1
   b57d2:	a808      	add	r0, sp, #32
   b57d4:	f7ff fb38 	bl	b4e48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b57d8:	2800      	cmp	r0, #0
   b57da:	d1dd      	bne.n	b5798 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b57dc:	a80f      	add	r0, sp, #60	; 0x3c
   b57de:	f000 fc0d 	bl	b5ffc <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b57e2:	a80b      	add	r0, sp, #44	; 0x2c
   b57e4:	f000 fc0a 	bl	b5ffc <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b57e8:	3514      	adds	r5, #20
   b57ea:	e7c6      	b.n	b577a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b57ec:	a90f      	add	r1, sp, #60	; 0x3c
   b57ee:	4630      	mov	r0, r6
   b57f0:	f000 fc6d 	bl	b60ce <_ZN6StringC1EOS_>
   b57f4:	e7dc      	b.n	b57b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b57f6:	2600      	movs	r6, #0
   b57f8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b57fc:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b57fe:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b5802:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b5806:	429e      	cmp	r6, r3
   b5808:	da7c      	bge.n	b5904 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b580a:	0133      	lsls	r3, r6, #4
   b580c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b580e:	9306      	str	r3, [sp, #24]
        if (!category) {
   b5810:	b90b      	cbnz	r3, b5816 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b5812:	3601      	adds	r6, #1
   b5814:	e7f5      	b.n	b5802 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b5816:	2300      	movs	r3, #0
   b5818:	9307      	str	r3, [sp, #28]
   b581a:	fb09 f306 	mul.w	r3, r9, r6
   b581e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b5820:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b5822:	a907      	add	r1, sp, #28
   b5824:	a806      	add	r0, sp, #24
   b5826:	f7ff fb3c 	bl	b4ea2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b582a:	4682      	mov	sl, r0
   b582c:	2800      	cmp	r0, #0
   b582e:	d0f0      	beq.n	b5812 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b5830:	f04f 0300 	mov.w	r3, #0
   b5834:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5838:	4601      	mov	r1, r0
   b583a:	9a07      	ldr	r2, [sp, #28]
   b583c:	f10d 0317 	add.w	r3, sp, #23
   b5840:	4628      	mov	r0, r5
   b5842:	f7ff fba9 	bl	b4f98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5846:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b584a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b584c:	2f00      	cmp	r7, #0
   b584e:	d14a      	bne.n	b58e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b5850:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b5854:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b5858:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b585c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5860:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b5864:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b5868:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b586a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b586e:	4293      	cmp	r3, r2
   b5870:	db17      	blt.n	b58a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b5872:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b5876:	f1ba 0f00 	cmp.w	sl, #0
   b587a:	dd30      	ble.n	b58de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b587c:	fb09 f00a 	mul.w	r0, r9, sl
   b5880:	f7fe ff32 	bl	b46e8 <malloc>
            if (!d) {
   b5884:	4683      	mov	fp, r0
   b5886:	b360      	cbz	r0, b58e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b5888:	e9d5 1200 	ldrd	r1, r2, [r5]
   b588c:	fb09 1202 	mla	r2, r9, r2, r1
   b5890:	f7ff ff2c 	bl	b56ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b5894:	6828      	ldr	r0, [r5, #0]
   b5896:	f7fe ff2f 	bl	b46f8 <free>
        data_ = d;
   b589a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b589e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b58a2:	682b      	ldr	r3, [r5, #0]
   b58a4:	9a01      	ldr	r2, [sp, #4]
   b58a6:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b58aa:	686a      	ldr	r2, [r5, #4]
   b58ac:	4651      	mov	r1, sl
   b58ae:	fb09 3202 	mla	r2, r9, r2, r3
   b58b2:	f10a 0014 	add.w	r0, sl, #20
   b58b6:	f7ff ff19 	bl	b56ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b58ba:	f1ba 0f00 	cmp.w	sl, #0
   b58be:	d003      	beq.n	b58c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b58c0:	a90f      	add	r1, sp, #60	; 0x3c
   b58c2:	4650      	mov	r0, sl
   b58c4:	f7ff fd5a 	bl	b537c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b58c8:	686b      	ldr	r3, [r5, #4]
   b58ca:	3301      	adds	r3, #1
   b58cc:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b58ce:	a811      	add	r0, sp, #68	; 0x44
   b58d0:	f7ff fd0c 	bl	b52ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b58d4:	b13f      	cbz	r7, b58e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b58d6:	a80b      	add	r0, sp, #44	; 0x2c
   b58d8:	f7ff fd08 	bl	b52ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b58dc:	e771      	b.n	b57c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b58de:	46bb      	mov	fp, r7
   b58e0:	e7d8      	b.n	b5894 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b58e2:	2701      	movs	r7, #1
   b58e4:	e7f3      	b.n	b58ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b58e6:	9b01      	ldr	r3, [sp, #4]
   b58e8:	682d      	ldr	r5, [r5, #0]
   b58ea:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b58ee:	9b06      	ldr	r3, [sp, #24]
   b58f0:	781b      	ldrb	r3, [r3, #0]
   b58f2:	b92b      	cbnz	r3, b5900 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b58f4:	f8d8 3000 	ldr.w	r3, [r8]
   b58f8:	9a02      	ldr	r2, [sp, #8]
   b58fa:	4413      	add	r3, r2
   b58fc:	7c1b      	ldrb	r3, [r3, #16]
   b58fe:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b5900:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b5902:	e78e      	b.n	b5822 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5904:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5906:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5908:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b590a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b590c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b590e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b5910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b5912:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5914:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5916:	60a2      	str	r2, [r4, #8]
   b5918:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b591a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b591c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b591e:	60e2      	str	r2, [r4, #12]
   b5920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b5922:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5924:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5926:	6122      	str	r2, [r4, #16]
   b5928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b592a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b592c:	9b03      	ldr	r3, [sp, #12]
   b592e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b5930:	6162      	str	r2, [r4, #20]
   b5932:	7623      	strb	r3, [r4, #24]
   b5934:	e7cf      	b.n	b58d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b5938 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5938:	b5f0      	push	{r4, r5, r6, r7, lr}
   b593a:	4604      	mov	r4, r0
   b593c:	b087      	sub	sp, #28
   b593e:	460d      	mov	r5, r1
        filter_(level, filters) {
   b5940:	4626      	mov	r6, r4
        stream_(&stream) {
   b5942:	4619      	mov	r1, r3
   b5944:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5946:	4617      	mov	r7, r2
        stream_(&stream) {
   b5948:	f7fe fc82 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b594c:	4b0b      	ldr	r3, [pc, #44]	; (b597c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b594e:	f846 3b04 	str.w	r3, [r6], #4
   b5952:	4669      	mov	r1, sp
   b5954:	a803      	add	r0, sp, #12
   b5956:	f7fe fc7b 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b595a:	aa03      	add	r2, sp, #12
   b595c:	4639      	mov	r1, r7
   b595e:	4630      	mov	r0, r6
   b5960:	f7ff fef0 	bl	b5744 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5964:	a803      	add	r0, sp, #12
   b5966:	f7fe fc32 	bl	b41ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b596a:	4668      	mov	r0, sp
   b596c:	f7fe fc2f 	bl	b41ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5970:	4b03      	ldr	r3, [pc, #12]	; (b5980 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b5972:	6023      	str	r3, [r4, #0]
}
   b5974:	4620      	mov	r0, r4
        stream_(&stream) {
   b5976:	6225      	str	r5, [r4, #32]
}
   b5978:	b007      	add	sp, #28
   b597a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b597c:	000b68f4 	.word	0x000b68f4
   b5980:	000b6a98 	.word	0x000b6a98

000b5984 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b5984:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5986:	460f      	mov	r7, r1
   b5988:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b598a:	491d      	ldr	r1, [pc, #116]	; (b5a00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b598c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b598e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b5990:	4616      	mov	r6, r2
   b5992:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5994:	f7fe fb42 	bl	b401c <strcmp>
   b5998:	b9c0      	cbnz	r0, b59cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b599a:	b1a4      	cbz	r4, b59c6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b599c:	4629      	mov	r1, r5
   b599e:	a801      	add	r0, sp, #4
   b59a0:	f7ff fcff 	bl	b53a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b59a4:	4917      	ldr	r1, [pc, #92]	; (b5a04 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b59a6:	2024      	movs	r0, #36	; 0x24
   b59a8:	f000 fdd2 	bl	b6550 <_ZnwjRKSt9nothrow_t>
   b59ac:	4605      	mov	r5, r0
   b59ae:	b130      	cbz	r0, b59be <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b59b0:	ab01      	add	r3, sp, #4
   b59b2:	4632      	mov	r2, r6
   b59b4:	4621      	mov	r1, r4
   b59b6:	f7ff ffbf 	bl	b5938 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b59ba:	4b13      	ldr	r3, [pc, #76]	; (b5a08 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b59bc:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b59be:	a801      	add	r0, sp, #4
   b59c0:	f7fe fc05 	bl	b41ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b59c4:	462c      	mov	r4, r5
}
   b59c6:	4620      	mov	r0, r4
   b59c8:	b005      	add	sp, #20
   b59ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b59cc:	490f      	ldr	r1, [pc, #60]	; (b5a0c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b59ce:	4638      	mov	r0, r7
   b59d0:	f7fe fb24 	bl	b401c <strcmp>
   b59d4:	b990      	cbnz	r0, b59fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b59d6:	2c00      	cmp	r4, #0
   b59d8:	d0f5      	beq.n	b59c6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b59da:	4629      	mov	r1, r5
   b59dc:	a801      	add	r0, sp, #4
   b59de:	f7ff fce0 	bl	b53a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b59e2:	4908      	ldr	r1, [pc, #32]	; (b5a04 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b59e4:	2024      	movs	r0, #36	; 0x24
   b59e6:	f000 fdb3 	bl	b6550 <_ZnwjRKSt9nothrow_t>
   b59ea:	4605      	mov	r5, r0
   b59ec:	2800      	cmp	r0, #0
   b59ee:	d0e6      	beq.n	b59be <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b59f0:	ab01      	add	r3, sp, #4
   b59f2:	4632      	mov	r2, r6
   b59f4:	4621      	mov	r1, r4
   b59f6:	f7ff ff9f 	bl	b5938 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b59fa:	e7e0      	b.n	b59be <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b59fc:	2400      	movs	r4, #0
   b59fe:	e7e2      	b.n	b59c6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b5a00:	000b6a19 	.word	0x000b6a19
   b5a04:	000b6c0c 	.word	0x000b6c0c
   b5a08:	000b6ab0 	.word	0x000b6ab0
   b5a0c:	000b6a1d 	.word	0x000b6a1d

000b5a10 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b5a10:	4b01      	ldr	r3, [pc, #4]	; (b5a18 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5a12:	4a02      	ldr	r2, [pc, #8]	; (b5a1c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5a14:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5a16:	4770      	bx	lr
   b5a18:	2003e6cc 	.word	0x2003e6cc
   b5a1c:	000b6a2e 	.word	0x000b6a2e

000b5a20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5a24:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b5a26:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5a2a:	4604      	mov	r4, r0
   b5a2c:	460e      	mov	r6, r1
   b5a2e:	4617      	mov	r7, r2
   b5a30:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b5a32:	f000 fc8b 	bl	b634c <_Z16_fetch_usbserialv>
   b5a36:	4581      	cmp	r9, r0
   b5a38:	d04c      	beq.n	b5ad4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b5a3a:	792b      	ldrb	r3, [r5, #4]
   b5a3c:	0719      	lsls	r1, r3, #28
   b5a3e:	d504      	bpl.n	b5a4a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b5a40:	696a      	ldr	r2, [r5, #20]
   b5a42:	4954      	ldr	r1, [pc, #336]	; (b5b94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b5a44:	4620      	mov	r0, r4
   b5a46:	f7ff fb0c 	bl	b5062 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b5a4a:	f1b8 0f00 	cmp.w	r8, #0
   b5a4e:	d00d      	beq.n	b5a6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b5a50:	215b      	movs	r1, #91	; 0x5b
   b5a52:	4620      	mov	r0, r4
   b5a54:	f7ff fa94 	bl	b4f80 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b5a58:	4641      	mov	r1, r8
   b5a5a:	4620      	mov	r0, r4
   b5a5c:	f7ff fa81 	bl	b4f62 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b5a60:	6823      	ldr	r3, [r4, #0]
   b5a62:	494d      	ldr	r1, [pc, #308]	; (b5b98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b5a64:	68db      	ldr	r3, [r3, #12]
   b5a66:	2202      	movs	r2, #2
   b5a68:	4620      	mov	r0, r4
   b5a6a:	4798      	blx	r3
    if (attr.has_file) {
   b5a6c:	792b      	ldrb	r3, [r5, #4]
   b5a6e:	07da      	lsls	r2, r3, #31
   b5a70:	d523      	bpl.n	b5aba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b5a72:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b5a76:	212f      	movs	r1, #47	; 0x2f
   b5a78:	4640      	mov	r0, r8
   b5a7a:	f000 fe0c 	bl	b6696 <strrchr>
    if (s1) {
   b5a7e:	b108      	cbz	r0, b5a84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b5a80:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b5a84:	4641      	mov	r1, r8
   b5a86:	4620      	mov	r0, r4
   b5a88:	f7ff fa6b 	bl	b4f62 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b5a8c:	792b      	ldrb	r3, [r5, #4]
   b5a8e:	079b      	lsls	r3, r3, #30
   b5a90:	d508      	bpl.n	b5aa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b5a92:	213a      	movs	r1, #58	; 0x3a
   b5a94:	4620      	mov	r0, r4
   b5a96:	f7ff fa73 	bl	b4f80 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b5a9a:	68ea      	ldr	r2, [r5, #12]
   b5a9c:	493f      	ldr	r1, [pc, #252]	; (b5b9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b5a9e:	4620      	mov	r0, r4
   b5aa0:	f7ff fadf 	bl	b5062 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b5aa4:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b5aa6:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b5aa8:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b5aac:	68db      	ldr	r3, [r3, #12]
   b5aae:	bf14      	ite	ne
   b5ab0:	493b      	ldrne	r1, [pc, #236]	; (b5ba0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b5ab2:	493c      	ldreq	r1, [pc, #240]	; (b5ba4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b5ab4:	2202      	movs	r2, #2
            write(": ", 2);
   b5ab6:	4620      	mov	r0, r4
   b5ab8:	4798      	blx	r3
    if (attr.has_function) {
   b5aba:	792b      	ldrb	r3, [r5, #4]
   b5abc:	0758      	lsls	r0, r3, #29
   b5abe:	d51d      	bpl.n	b5afc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5ac0:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b5ac2:	460b      	mov	r3, r1
   b5ac4:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b5ac6:	f813 0b01 	ldrb.w	r0, [r3], #1
   b5aca:	b160      	cbz	r0, b5ae6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b5acc:	2820      	cmp	r0, #32
   b5ace:	d108      	bne.n	b5ae2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b5ad0:	4619      	mov	r1, r3
   b5ad2:	e7f7      	b.n	b5ac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b5ad4:	4834      	ldr	r0, [pc, #208]	; (b5ba8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b5ad6:	f000 f982 	bl	b5dde <_ZN5spark12NetworkClass9listeningEv>
   b5ada:	2800      	cmp	r0, #0
   b5adc:	d0ad      	beq.n	b5a3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b5ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b5ae2:	2828      	cmp	r0, #40	; 0x28
   b5ae4:	d1ee      	bne.n	b5ac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b5ae6:	6823      	ldr	r3, [r4, #0]
   b5ae8:	1a52      	subs	r2, r2, r1
   b5aea:	68db      	ldr	r3, [r3, #12]
   b5aec:	4620      	mov	r0, r4
   b5aee:	4798      	blx	r3
        write("(): ", 4);
   b5af0:	6823      	ldr	r3, [r4, #0]
   b5af2:	492e      	ldr	r1, [pc, #184]	; (b5bac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b5af4:	68db      	ldr	r3, [r3, #12]
   b5af6:	2204      	movs	r2, #4
   b5af8:	4620      	mov	r0, r4
   b5afa:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b5afc:	2100      	movs	r1, #0
   b5afe:	4638      	mov	r0, r7
   b5b00:	f7fe fd2e 	bl	b4560 <log_level_name>
   b5b04:	4601      	mov	r1, r0
    write(s);
   b5b06:	4620      	mov	r0, r4
   b5b08:	f7ff fa2b 	bl	b4f62 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b5b0c:	6823      	ldr	r3, [r4, #0]
   b5b0e:	4925      	ldr	r1, [pc, #148]	; (b5ba4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b5b10:	68db      	ldr	r3, [r3, #12]
   b5b12:	2202      	movs	r2, #2
   b5b14:	4620      	mov	r0, r4
   b5b16:	4798      	blx	r3
    if (msg) {
   b5b18:	b11e      	cbz	r6, b5b22 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b5b1a:	4631      	mov	r1, r6
   b5b1c:	4620      	mov	r0, r4
   b5b1e:	f7ff fa20 	bl	b4f62 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b5b22:	792b      	ldrb	r3, [r5, #4]
   b5b24:	f013 0f30 	tst.w	r3, #48	; 0x30
   b5b28:	d02c      	beq.n	b5b84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b5b2a:	6823      	ldr	r3, [r4, #0]
   b5b2c:	4920      	ldr	r1, [pc, #128]	; (b5bb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b5b2e:	68db      	ldr	r3, [r3, #12]
   b5b30:	2202      	movs	r2, #2
   b5b32:	4620      	mov	r0, r4
   b5b34:	4798      	blx	r3
        if (attr.has_code) {
   b5b36:	792b      	ldrb	r3, [r5, #4]
   b5b38:	06d9      	lsls	r1, r3, #27
   b5b3a:	d50a      	bpl.n	b5b52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b5b3c:	6823      	ldr	r3, [r4, #0]
   b5b3e:	491d      	ldr	r1, [pc, #116]	; (b5bb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b5b40:	68db      	ldr	r3, [r3, #12]
   b5b42:	2207      	movs	r2, #7
   b5b44:	4620      	mov	r0, r4
   b5b46:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b5b48:	69aa      	ldr	r2, [r5, #24]
   b5b4a:	491b      	ldr	r1, [pc, #108]	; (b5bb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b5b4c:	4620      	mov	r0, r4
   b5b4e:	f7ff fa88 	bl	b5062 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b5b52:	792b      	ldrb	r3, [r5, #4]
   b5b54:	069a      	lsls	r2, r3, #26
   b5b56:	d511      	bpl.n	b5b7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b5b58:	06db      	lsls	r3, r3, #27
   b5b5a:	d505      	bpl.n	b5b68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b5b5c:	6823      	ldr	r3, [r4, #0]
   b5b5e:	4910      	ldr	r1, [pc, #64]	; (b5ba0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b5b60:	68db      	ldr	r3, [r3, #12]
   b5b62:	2202      	movs	r2, #2
   b5b64:	4620      	mov	r0, r4
   b5b66:	4798      	blx	r3
            write("details = ", 10);
   b5b68:	6823      	ldr	r3, [r4, #0]
   b5b6a:	4914      	ldr	r1, [pc, #80]	; (b5bbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b5b6c:	68db      	ldr	r3, [r3, #12]
   b5b6e:	4620      	mov	r0, r4
   b5b70:	220a      	movs	r2, #10
   b5b72:	4798      	blx	r3
            write(attr.details);
   b5b74:	69e9      	ldr	r1, [r5, #28]
   b5b76:	4620      	mov	r0, r4
   b5b78:	f7ff f9f3 	bl	b4f62 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b5b7c:	215d      	movs	r1, #93	; 0x5d
   b5b7e:	4620      	mov	r0, r4
   b5b80:	f7ff f9fe 	bl	b4f80 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b5b84:	6823      	ldr	r3, [r4, #0]
   b5b86:	490e      	ldr	r1, [pc, #56]	; (b5bc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b5b88:	68db      	ldr	r3, [r3, #12]
   b5b8a:	4620      	mov	r0, r4
   b5b8c:	2202      	movs	r2, #2
}
   b5b8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b5b92:	4718      	bx	r3
   b5b94:	000b6a32 	.word	0x000b6a32
   b5b98:	000b6a39 	.word	0x000b6a39
   b5b9c:	000b697d 	.word	0x000b697d
   b5ba0:	000b6a3c 	.word	0x000b6a3c
   b5ba4:	000b6a41 	.word	0x000b6a41
   b5ba8:	2003e6f8 	.word	0x2003e6f8
   b5bac:	000b6a3f 	.word	0x000b6a3f
   b5bb0:	000b6a44 	.word	0x000b6a44
   b5bb4:	000b6a47 	.word	0x000b6a47
   b5bb8:	000b6a4f 	.word	0x000b6a4f
   b5bbc:	000b6a52 	.word	0x000b6a52
   b5bc0:	000b6a5d 	.word	0x000b6a5d

000b5bc4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b5bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5bc8:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b5bca:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b5bcc:	460d      	mov	r5, r1
   b5bce:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b5bd0:	f000 fbbc 	bl	b634c <_Z16_fetch_usbserialv>
   b5bd4:	4287      	cmp	r7, r0
   b5bd6:	d007      	beq.n	b5be8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b5bd8:	6a20      	ldr	r0, [r4, #32]
   b5bda:	6803      	ldr	r3, [r0, #0]
   b5bdc:	4632      	mov	r2, r6
   b5bde:	4629      	mov	r1, r5
   b5be0:	68db      	ldr	r3, [r3, #12]
}
   b5be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b5be6:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b5be8:	4803      	ldr	r0, [pc, #12]	; (b5bf8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b5bea:	f000 f8f8 	bl	b5dde <_ZN5spark12NetworkClass9listeningEv>
   b5bee:	2800      	cmp	r0, #0
   b5bf0:	d0f2      	beq.n	b5bd8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b5bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5bf6:	bf00      	nop
   b5bf8:	2003e6f8 	.word	0x2003e6f8

000b5bfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5c00:	b085      	sub	sp, #20
    return stream_;
   b5c02:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b5c06:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b5c08:	4605      	mov	r5, r0
   b5c0a:	460f      	mov	r7, r1
   b5c0c:	4690      	mov	r8, r2
   b5c0e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b5c10:	f000 fb9c 	bl	b634c <_Z16_fetch_usbserialv>
   b5c14:	4581      	cmp	r9, r0
   b5c16:	d105      	bne.n	b5c24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b5c18:	4849      	ldr	r0, [pc, #292]	; (b5d40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b5c1a:	f000 f8e0 	bl	b5dde <_ZN5spark12NetworkClass9listeningEv>
   b5c1e:	2800      	cmp	r0, #0
   b5c20:	f040 808a 	bne.w	b5d38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b5c24:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
   b5c26:	4a47      	ldr	r2, [pc, #284]	; (b5d44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b5c28:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
   b5c2a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b5c2e:	4668      	mov	r0, sp
        bytesWritten_(0) {
   b5c30:	e9cd 3902 	strd	r3, r9, [sp, #8]
        state_(BEGIN) {
   b5c34:	f88d 9004 	strb.w	r9, [sp, #4]
   b5c38:	f7ff f82d 	bl	b4c96 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b5c3c:	4649      	mov	r1, r9
   b5c3e:	4640      	mov	r0, r8
   b5c40:	f7fe fc8e 	bl	b4560 <log_level_name>
    json.name("l", 1).value(s);
   b5c44:	4940      	ldr	r1, [pc, #256]	; (b5d48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b5c46:	4680      	mov	r8, r0
   b5c48:	2201      	movs	r2, #1
   b5c4a:	4668      	mov	r0, sp
   b5c4c:	f7ff f8b2 	bl	b4db4 <_ZN5spark10JSONWriter4nameEPKcj>
   b5c50:	4641      	mov	r1, r8
   b5c52:	f7ff f978 	bl	b4f46 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b5c56:	b13f      	cbz	r7, b5c68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
   b5c58:	493c      	ldr	r1, [pc, #240]	; (b5d4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b5c5a:	2201      	movs	r2, #1
   b5c5c:	4668      	mov	r0, sp
   b5c5e:	f7ff f8a9 	bl	b4db4 <_ZN5spark10JSONWriter4nameEPKcj>
   b5c62:	4639      	mov	r1, r7
   b5c64:	f7ff f96f 	bl	b4f46 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b5c68:	b13e      	cbz	r6, b5c7a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
   b5c6a:	4939      	ldr	r1, [pc, #228]	; (b5d50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b5c6c:	2201      	movs	r2, #1
   b5c6e:	4668      	mov	r0, sp
   b5c70:	f7ff f8a0 	bl	b4db4 <_ZN5spark10JSONWriter4nameEPKcj>
   b5c74:	4631      	mov	r1, r6
   b5c76:	f7ff f966 	bl	b4f46 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b5c7a:	7923      	ldrb	r3, [r4, #4]
   b5c7c:	07df      	lsls	r7, r3, #31
   b5c7e:	d50e      	bpl.n	b5c9e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
   b5c80:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b5c82:	212f      	movs	r1, #47	; 0x2f
   b5c84:	4630      	mov	r0, r6
   b5c86:	f000 fd06 	bl	b6696 <strrchr>
    if (s1) {
   b5c8a:	b100      	cbz	r0, b5c8e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
   b5c8c:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b5c8e:	4931      	ldr	r1, [pc, #196]	; (b5d54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b5c90:	2201      	movs	r2, #1
   b5c92:	4668      	mov	r0, sp
   b5c94:	f7ff f88e 	bl	b4db4 <_ZN5spark10JSONWriter4nameEPKcj>
   b5c98:	4631      	mov	r1, r6
   b5c9a:	f7ff f954 	bl	b4f46 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b5c9e:	7923      	ldrb	r3, [r4, #4]
   b5ca0:	079e      	lsls	r6, r3, #30
   b5ca2:	d507      	bpl.n	b5cb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
   b5ca4:	492c      	ldr	r1, [pc, #176]	; (b5d58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b5ca6:	2202      	movs	r2, #2
   b5ca8:	4668      	mov	r0, sp
   b5caa:	f7ff f883 	bl	b4db4 <_ZN5spark10JSONWriter4nameEPKcj>
   b5cae:	68e1      	ldr	r1, [r4, #12]
   b5cb0:	f7fe fffe 	bl	b4cb0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b5cb4:	7923      	ldrb	r3, [r4, #4]
   b5cb6:	0758      	lsls	r0, r3, #29
   b5cb8:	d514      	bpl.n	b5ce4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5cba:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b5cbc:	4633      	mov	r3, r6
   b5cbe:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b5cc0:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5cc4:	b12a      	cbz	r2, b5cd2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
   b5cc6:	2a20      	cmp	r2, #32
   b5cc8:	d101      	bne.n	b5cce <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
   b5cca:	461e      	mov	r6, r3
   b5ccc:	e7f7      	b.n	b5cbe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
   b5cce:	2a28      	cmp	r2, #40	; 0x28
   b5cd0:	d1f5      	bne.n	b5cbe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
   b5cd2:	4922      	ldr	r1, [pc, #136]	; (b5d5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b5cd4:	2202      	movs	r2, #2
   b5cd6:	4668      	mov	r0, sp
   b5cd8:	f7ff f86c 	bl	b4db4 <_ZN5spark10JSONWriter4nameEPKcj>
   b5cdc:	1bba      	subs	r2, r7, r6
   b5cde:	4631      	mov	r1, r6
   b5ce0:	f7ff f878 	bl	b4dd4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b5ce4:	7923      	ldrb	r3, [r4, #4]
   b5ce6:	0719      	lsls	r1, r3, #28
   b5ce8:	d507      	bpl.n	b5cfa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
   b5cea:	491d      	ldr	r1, [pc, #116]	; (b5d60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b5cec:	2201      	movs	r2, #1
   b5cee:	4668      	mov	r0, sp
   b5cf0:	f7ff f860 	bl	b4db4 <_ZN5spark10JSONWriter4nameEPKcj>
   b5cf4:	6961      	ldr	r1, [r4, #20]
   b5cf6:	f7fe ffed 	bl	b4cd4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b5cfa:	7923      	ldrb	r3, [r4, #4]
   b5cfc:	06da      	lsls	r2, r3, #27
   b5cfe:	d507      	bpl.n	b5d10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b5d00:	4918      	ldr	r1, [pc, #96]	; (b5d64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b5d02:	2204      	movs	r2, #4
   b5d04:	4668      	mov	r0, sp
   b5d06:	f7ff f855 	bl	b4db4 <_ZN5spark10JSONWriter4nameEPKcj>
   b5d0a:	69a1      	ldr	r1, [r4, #24]
   b5d0c:	f7fe ffd0 	bl	b4cb0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b5d10:	7923      	ldrb	r3, [r4, #4]
   b5d12:	069b      	lsls	r3, r3, #26
   b5d14:	d507      	bpl.n	b5d26 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b5d16:	4914      	ldr	r1, [pc, #80]	; (b5d68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b5d18:	2206      	movs	r2, #6
   b5d1a:	4668      	mov	r0, sp
   b5d1c:	f7ff f84a 	bl	b4db4 <_ZN5spark10JSONWriter4nameEPKcj>
   b5d20:	69e1      	ldr	r1, [r4, #28]
   b5d22:	f7ff f910 	bl	b4f46 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b5d26:	4668      	mov	r0, sp
   b5d28:	f7fe ff9f 	bl	b4c6a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b5d2c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b5d2e:	490f      	ldr	r1, [pc, #60]	; (b5d6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b5d30:	6803      	ldr	r3, [r0, #0]
   b5d32:	2202      	movs	r2, #2
   b5d34:	68db      	ldr	r3, [r3, #12]
   b5d36:	4798      	blx	r3
}
   b5d38:	b005      	add	sp, #20
   b5d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5d3e:	bf00      	nop
   b5d40:	2003e6f8 	.word	0x2003e6f8
   b5d44:	000b6a80 	.word	0x000b6a80
   b5d48:	000b6a0f 	.word	0x000b6a0f
   b5d4c:	000b6a60 	.word	0x000b6a60
   b5d50:	000b6c7b 	.word	0x000b6c7b
   b5d54:	000b6a62 	.word	0x000b6a62
   b5d58:	000b6a64 	.word	0x000b6a64
   b5d5c:	000b6a67 	.word	0x000b6a67
   b5d60:	000b6a6a 	.word	0x000b6a6a
   b5d64:	000b6a6c 	.word	0x000b6a6c
   b5d68:	000b6a71 	.word	0x000b6a71
   b5d6c:	000b6a5d 	.word	0x000b6a5d

000b5d70 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5d70:	2300      	movs	r3, #0
   b5d72:	6840      	ldr	r0, [r0, #4]
   b5d74:	461a      	mov	r2, r3
   b5d76:	f7fe bc47 	b.w	b4608 <network_connect>

000b5d7a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5d7a:	6840      	ldr	r0, [r0, #4]
   b5d7c:	2200      	movs	r2, #0
   b5d7e:	2102      	movs	r1, #2
   b5d80:	f7fe bc52 	b.w	b4628 <network_disconnect>

000b5d84 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5d84:	2200      	movs	r2, #0
   b5d86:	6840      	ldr	r0, [r0, #4]
   b5d88:	4611      	mov	r1, r2
   b5d8a:	f7fe bc45 	b.w	b4618 <network_connecting>

000b5d8e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5d8e:	2200      	movs	r2, #0
   b5d90:	6840      	ldr	r0, [r0, #4]
   b5d92:	4611      	mov	r1, r2
   b5d94:	f7fe bc50 	b.w	b4638 <network_ready>

000b5d98 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5d98:	2300      	movs	r3, #0
   b5d9a:	6840      	ldr	r0, [r0, #4]
   b5d9c:	461a      	mov	r2, r3
   b5d9e:	4619      	mov	r1, r3
   b5da0:	f7fe bc52 	b.w	b4648 <network_on>

000b5da4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5da4:	2300      	movs	r3, #0
   b5da6:	6840      	ldr	r0, [r0, #4]
   b5da8:	461a      	mov	r2, r3
   b5daa:	4619      	mov	r1, r3
   b5dac:	f7fe bc54 	b.w	b4658 <network_off>

000b5db0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5db0:	6840      	ldr	r0, [r0, #4]
   b5db2:	2100      	movs	r1, #0
   b5db4:	f7fe bc78 	b.w	b46a8 <network_is_on>

000b5db8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5db8:	6840      	ldr	r0, [r0, #4]
   b5dba:	2100      	movs	r1, #0
   b5dbc:	f7fe bc7c 	b.w	b46b8 <network_is_off>

000b5dc0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5dc0:	6840      	ldr	r0, [r0, #4]
   b5dc2:	2200      	movs	r2, #0
   b5dc4:	f081 0101 	eor.w	r1, r1, #1
   b5dc8:	f7fe bc4e 	b.w	b4668 <network_listen>

000b5dcc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5dcc:	6840      	ldr	r0, [r0, #4]
   b5dce:	2200      	movs	r2, #0
   b5dd0:	f7fe bc5a 	b.w	b4688 <network_set_listen_timeout>

000b5dd4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5dd4:	2200      	movs	r2, #0
   b5dd6:	6840      	ldr	r0, [r0, #4]
   b5dd8:	4611      	mov	r1, r2
   b5dda:	f7fe bc5d 	b.w	b4698 <network_get_listen_timeout>

000b5dde <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5dde:	2200      	movs	r2, #0
   b5de0:	6840      	ldr	r0, [r0, #4]
   b5de2:	4611      	mov	r1, r2
   b5de4:	f7fe bc48 	b.w	b4678 <network_listening>

000b5de8 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b5de8:	6840      	ldr	r0, [r0, #4]
   b5dea:	2100      	movs	r1, #0
   b5dec:	f7fe bc74 	b.w	b46d8 <network_is_preferred>

000b5df0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5df4:	b095      	sub	sp, #84	; 0x54
   b5df6:	4614      	mov	r4, r2
   b5df8:	460d      	mov	r5, r1
   b5dfa:	4607      	mov	r7, r0
    IPAddress addr;
   b5dfc:	f7fe fde4 	bl	b49c8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5e00:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5e02:	221c      	movs	r2, #28
   b5e04:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5e06:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5e08:	f000 fbdc 	bl	b65c4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5e0c:	2340      	movs	r3, #64	; 0x40
   b5e0e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5e10:	4620      	mov	r0, r4
   b5e12:	466b      	mov	r3, sp
   b5e14:	aa0c      	add	r2, sp, #48	; 0x30
   b5e16:	2100      	movs	r1, #0
   b5e18:	f7fe fafa 	bl	b4410 <netdb_getaddrinfo>
    if (!r) {
   b5e1c:	4604      	mov	r4, r0
   b5e1e:	2800      	cmp	r0, #0
   b5e20:	d14b      	bne.n	b5eba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5e22:	4602      	mov	r2, r0
   b5e24:	2101      	movs	r1, #1
   b5e26:	6868      	ldr	r0, [r5, #4]
   b5e28:	f7fe fc06 	bl	b4638 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e2c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5e2e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e30:	4622      	mov	r2, r4
   b5e32:	6868      	ldr	r0, [r5, #4]
   b5e34:	f7fe fc00 	bl	b4638 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e38:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e3a:	4681      	mov	r9, r0
        bool ok = false;
   b5e3c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e3e:	2e00      	cmp	r6, #0
   b5e40:	d03b      	beq.n	b5eba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5e42:	2900      	cmp	r1, #0
   b5e44:	d139      	bne.n	b5eba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5e46:	6873      	ldr	r3, [r6, #4]
   b5e48:	2b02      	cmp	r3, #2
   b5e4a:	d003      	beq.n	b5e54 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5e4c:	2b0a      	cmp	r3, #10
   b5e4e:	d011      	beq.n	b5e74 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e50:	69f6      	ldr	r6, [r6, #28]
   b5e52:	e7f4      	b.n	b5e3e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5e54:	f1b8 0f00 	cmp.w	r8, #0
   b5e58:	d0fa      	beq.n	b5e50 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5e5a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5e5c:	a806      	add	r0, sp, #24
   b5e5e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5e60:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5e62:	f7fe fddf 	bl	b4a24 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e68:	1d3c      	adds	r4, r7, #4
   b5e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e6c:	682b      	ldr	r3, [r5, #0]
   b5e6e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5e70:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5e72:	e7ed      	b.n	b5e50 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5e74:	f1b9 0f00 	cmp.w	r9, #0
   b5e78:	d0ea      	beq.n	b5e50 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5e7a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5e7c:	2210      	movs	r2, #16
   b5e7e:	a801      	add	r0, sp, #4
   b5e80:	f000 fba0 	bl	b65c4 <memset>
                    a.v = 6;
   b5e84:	2306      	movs	r3, #6
   b5e86:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5e8a:	ad01      	add	r5, sp, #4
   b5e8c:	f104 0308 	add.w	r3, r4, #8
   b5e90:	3418      	adds	r4, #24
   b5e92:	6818      	ldr	r0, [r3, #0]
   b5e94:	6859      	ldr	r1, [r3, #4]
   b5e96:	462a      	mov	r2, r5
   b5e98:	c203      	stmia	r2!, {r0, r1}
   b5e9a:	3308      	adds	r3, #8
   b5e9c:	42a3      	cmp	r3, r4
   b5e9e:	4615      	mov	r5, r2
   b5ea0:	d1f7      	bne.n	b5e92 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5ea2:	a901      	add	r1, sp, #4
   b5ea4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5ea6:	ad07      	add	r5, sp, #28
   b5ea8:	f7fe fd9c 	bl	b49e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5eae:	1d3c      	adds	r4, r7, #4
   b5eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5eb2:	682b      	ldr	r3, [r5, #0]
   b5eb4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5eb6:	4649      	mov	r1, r9
   b5eb8:	e7ca      	b.n	b5e50 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5eba:	9800      	ldr	r0, [sp, #0]
   b5ebc:	f7fe faa0 	bl	b4400 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5ec0:	4638      	mov	r0, r7
   b5ec2:	b015      	add	sp, #84	; 0x54
   b5ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5ec8 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b5ec8:	3803      	subs	r0, #3
   b5eca:	2803      	cmp	r0, #3
   b5ecc:	bf9a      	itte	ls
   b5ece:	4b02      	ldrls	r3, [pc, #8]	; (b5ed8 <_ZN5spark12NetworkClass4fromEm+0x10>)
   b5ed0:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b5ed4:	4801      	ldrhi	r0, [pc, #4]	; (b5edc <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b5ed6:	4770      	bx	lr
   b5ed8:	000b6af0 	.word	0x000b6af0
   b5edc:	2003e6f8 	.word	0x2003e6f8

000b5ee0 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b5ee0:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b5ee2:	2200      	movs	r2, #0
   b5ee4:	6840      	ldr	r0, [r0, #4]
   b5ee6:	f7fe fbef 	bl	b46c8 <network_prefer>
}
   b5eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b5eee:	f7ff bfeb 	b.w	b5ec8 <_ZN5spark12NetworkClass4fromEm>
	...

000b5ef4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5ef4:	4b02      	ldr	r3, [pc, #8]	; (b5f00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5ef6:	4a03      	ldr	r2, [pc, #12]	; (b5f04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5ef8:	601a      	str	r2, [r3, #0]
   b5efa:	2200      	movs	r2, #0
   b5efc:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b5efe:	4770      	bx	lr
   b5f00:	2003e6f8 	.word	0x2003e6f8
   b5f04:	000b6b08 	.word	0x000b6b08

000b5f08 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f0a:	4606      	mov	r6, r0
   b5f0c:	460d      	mov	r5, r1
  size_t n = 0;
   b5f0e:	188f      	adds	r7, r1, r2
   b5f10:	2400      	movs	r4, #0
  while (size--) {
   b5f12:	42bd      	cmp	r5, r7
   b5f14:	d00c      	beq.n	b5f30 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5f16:	6833      	ldr	r3, [r6, #0]
   b5f18:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5f1c:	689b      	ldr	r3, [r3, #8]
   b5f1e:	4630      	mov	r0, r6
   b5f20:	4798      	blx	r3
     if (chunk>=0)
   b5f22:	1e03      	subs	r3, r0, #0
   b5f24:	db01      	blt.n	b5f2a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5f26:	441c      	add	r4, r3
  while (size--) {
   b5f28:	e7f3      	b.n	b5f12 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5f2a:	2c00      	cmp	r4, #0
   b5f2c:	bf08      	it	eq
   b5f2e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5f30:	4620      	mov	r0, r4
   b5f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f34 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5f34:	b513      	push	{r0, r1, r4, lr}
   b5f36:	4604      	mov	r4, r0
    }
   b5f38:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5f3a:	b159      	cbz	r1, b5f54 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5f3c:	9101      	str	r1, [sp, #4]
   b5f3e:	f7fe f877 	bl	b4030 <strlen>
   b5f42:	6823      	ldr	r3, [r4, #0]
   b5f44:	9901      	ldr	r1, [sp, #4]
   b5f46:	68db      	ldr	r3, [r3, #12]
   b5f48:	4602      	mov	r2, r0
   b5f4a:	4620      	mov	r0, r4
    }
   b5f4c:	b002      	add	sp, #8
   b5f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5f52:	4718      	bx	r3
    }
   b5f54:	b002      	add	sp, #8
   b5f56:	bd10      	pop	{r4, pc}

000b5f58 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5f58:	6803      	ldr	r3, [r0, #0]
   b5f5a:	689b      	ldr	r3, [r3, #8]
   b5f5c:	4718      	bx	r3

000b5f5e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5f5e:	b530      	push	{r4, r5, lr}
   b5f60:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5f62:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5f64:	2a01      	cmp	r2, #1
  *str = '\0';
   b5f66:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5f6a:	bf98      	it	ls
   b5f6c:	220a      	movls	r2, #10
   b5f6e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5f70:	460d      	mov	r5, r1
   b5f72:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5f76:	fb01 5312 	mls	r3, r1, r2, r5
   b5f7a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5f7e:	2b09      	cmp	r3, #9
   b5f80:	bf94      	ite	ls
   b5f82:	3330      	addls	r3, #48	; 0x30
   b5f84:	3337      	addhi	r3, #55	; 0x37
   b5f86:	b2db      	uxtb	r3, r3
  } while(n);
   b5f88:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5f8a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5f8e:	d9ef      	bls.n	b5f70 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5f90:	4621      	mov	r1, r4
   b5f92:	f7ff ffcf 	bl	b5f34 <_ZN5Print5writeEPKc>
}
   b5f96:	b00b      	add	sp, #44	; 0x2c
   b5f98:	bd30      	pop	{r4, r5, pc}
	...

000b5f9c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5f9c:	4b01      	ldr	r3, [pc, #4]	; (b5fa4 <_GLOBAL__sub_I_RGB+0x8>)
   b5f9e:	2200      	movs	r2, #0
   b5fa0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5fa2:	4770      	bx	lr
   b5fa4:	2003e700 	.word	0x2003e700

000b5fa8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b5fa8:	b510      	push	{r4, lr}
   b5faa:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5fac:	f7fe fa10 	bl	b43d0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b5fb0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b5fb2:	6823      	ldr	r3, [r4, #0]
   b5fb4:	4620      	mov	r0, r4
   b5fb6:	695b      	ldr	r3, [r3, #20]
   b5fb8:	4798      	blx	r3
    if (c >= 0) return c;
   b5fba:	2800      	cmp	r0, #0
   b5fbc:	da08      	bge.n	b5fd0 <_ZN6Stream9timedReadEv+0x28>
   b5fbe:	f7fe fa07 	bl	b43d0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b5fc2:	68e3      	ldr	r3, [r4, #12]
   b5fc4:	1ac0      	subs	r0, r0, r3
   b5fc6:	68a3      	ldr	r3, [r4, #8]
   b5fc8:	4298      	cmp	r0, r3
   b5fca:	d3f2      	bcc.n	b5fb2 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b5fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b5fd0:	bd10      	pop	{r4, pc}

000b5fd2 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b5fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5fd6:	4607      	mov	r7, r0
   b5fd8:	460c      	mov	r4, r1
   b5fda:	188e      	adds	r6, r1, r2
   b5fdc:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b5fde:	42b5      	cmp	r5, r6
   b5fe0:	eba5 0804 	sub.w	r8, r5, r4
   b5fe4:	d007      	beq.n	b5ff6 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b5fe6:	4638      	mov	r0, r7
   b5fe8:	f7ff ffde 	bl	b5fa8 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b5fec:	1e03      	subs	r3, r0, #0
   b5fee:	db02      	blt.n	b5ff6 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b5ff0:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b5ff4:	e7f3      	b.n	b5fde <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b5ff6:	4640      	mov	r0, r8
   b5ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5ffc <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b5ffc:	b510      	push	{r4, lr}
   b5ffe:	4604      	mov	r4, r0
{
    free(buffer);
   b6000:	6800      	ldr	r0, [r0, #0]
   b6002:	f7fe fb79 	bl	b46f8 <free>
}
   b6006:	4620      	mov	r0, r4
   b6008:	bd10      	pop	{r4, pc}

000b600a <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b600a:	b510      	push	{r4, lr}
   b600c:	4604      	mov	r4, r0
    if (buffer) {
   b600e:	6800      	ldr	r0, [r0, #0]
   b6010:	b108      	cbz	r0, b6016 <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b6012:	f7fe fb71 	bl	b46f8 <free>
    }
    buffer = nullptr;
   b6016:	2300      	movs	r3, #0
    capacity_ = len = 0;
   b6018:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b601c:	6023      	str	r3, [r4, #0]
}
   b601e:	bd10      	pop	{r4, pc}

000b6020 <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6020:	b538      	push	{r3, r4, r5, lr}
   b6022:	4604      	mov	r4, r0
   b6024:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6026:	6800      	ldr	r0, [r0, #0]
   b6028:	3101      	adds	r1, #1
   b602a:	f7fe fb6d 	bl	b4708 <realloc>
    if (newbuffer) {
   b602e:	b110      	cbz	r0, b6036 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
   b6030:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b6034:	2001      	movs	r0, #1
    }
    return 0;
}
   b6036:	bd38      	pop	{r3, r4, r5, pc}

000b6038 <_ZN6String7reserveEj>:
{
   b6038:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
   b603a:	6803      	ldr	r3, [r0, #0]
{
   b603c:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
   b603e:	b123      	cbz	r3, b604a <_ZN6String7reserveEj+0x12>
   b6040:	6843      	ldr	r3, [r0, #4]
   b6042:	428b      	cmp	r3, r1
   b6044:	d301      	bcc.n	b604a <_ZN6String7reserveEj+0x12>
   b6046:	2001      	movs	r0, #1
}
   b6048:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b604a:	4620      	mov	r0, r4
   b604c:	f7ff ffe8 	bl	b6020 <_ZN6String12changeBufferEj>
   b6050:	2800      	cmp	r0, #0
   b6052:	d0f9      	beq.n	b6048 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b6054:	68a3      	ldr	r3, [r4, #8]
   b6056:	2b00      	cmp	r3, #0
   b6058:	d1f5      	bne.n	b6046 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b605a:	6822      	ldr	r2, [r4, #0]
   b605c:	7013      	strb	r3, [r2, #0]
   b605e:	e7f2      	b.n	b6046 <_ZN6String7reserveEj+0xe>

000b6060 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6060:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6062:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b6064:	4611      	mov	r1, r2
   b6066:	9201      	str	r2, [sp, #4]
{
   b6068:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b606a:	f7ff ffe5 	bl	b6038 <_ZN6String7reserveEj>
   b606e:	9a01      	ldr	r2, [sp, #4]
   b6070:	b928      	cbnz	r0, b607e <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b6072:	4620      	mov	r0, r4
   b6074:	f7ff ffc9 	bl	b600a <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b6078:	4620      	mov	r0, r4
   b607a:	b003      	add	sp, #12
   b607c:	bd30      	pop	{r4, r5, pc}
    len = length;
   b607e:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b6080:	4629      	mov	r1, r5
   b6082:	6820      	ldr	r0, [r4, #0]
   b6084:	f000 fa76 	bl	b6574 <memcpy>
    buffer[len] = 0;
   b6088:	6822      	ldr	r2, [r4, #0]
   b608a:	68a3      	ldr	r3, [r4, #8]
   b608c:	2100      	movs	r1, #0
   b608e:	54d1      	strb	r1, [r2, r3]
    return *this;
   b6090:	e7f2      	b.n	b6078 <_ZN6String4copyEPKcj+0x18>

000b6092 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6092:	b538      	push	{r3, r4, r5, lr}
   b6094:	4605      	mov	r5, r0
    if (buffer) {
   b6096:	6800      	ldr	r0, [r0, #0]
{
   b6098:	460c      	mov	r4, r1
    if (buffer) {
   b609a:	b170      	cbz	r0, b60ba <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
   b609c:	686a      	ldr	r2, [r5, #4]
   b609e:	688b      	ldr	r3, [r1, #8]
   b60a0:	429a      	cmp	r2, r3
   b60a2:	d308      	bcc.n	b60b6 <_ZN6String4moveERS_+0x24>
   b60a4:	6809      	ldr	r1, [r1, #0]
   b60a6:	b131      	cbz	r1, b60b6 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b60a8:	f000 fad9 	bl	b665e <strcpy>
            len = rhs.len;
   b60ac:	68a3      	ldr	r3, [r4, #8]
   b60ae:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b60b0:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
   b60b2:	60a3      	str	r3, [r4, #8]
}
   b60b4:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b60b6:	f7fe fb1f 	bl	b46f8 <free>
    buffer = rhs.buffer;
   b60ba:	6823      	ldr	r3, [r4, #0]
   b60bc:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
   b60be:	6863      	ldr	r3, [r4, #4]
   b60c0:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b60c2:	68a3      	ldr	r3, [r4, #8]
   b60c4:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b60c6:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
   b60c8:	e9c4 3300 	strd	r3, r3, [r4]
   b60cc:	e7f1      	b.n	b60b2 <_ZN6String4moveERS_+0x20>

000b60ce <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b60ce:	b510      	push	{r4, lr}
    buffer = nullptr;
   b60d0:	2300      	movs	r3, #0
    capacity_ = 0;
   b60d2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b60d6:	4604      	mov	r4, r0
    len = 0;
   b60d8:	6083      	str	r3, [r0, #8]
    flags = 0;
   b60da:	7303      	strb	r3, [r0, #12]
    move(rval);
   b60dc:	f7ff ffd9 	bl	b6092 <_ZN6String4moveERS_>
}
   b60e0:	4620      	mov	r0, r4
   b60e2:	bd10      	pop	{r4, pc}

000b60e4 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b60e4:	4288      	cmp	r0, r1
{
   b60e6:	b510      	push	{r4, lr}
   b60e8:	4604      	mov	r4, r0
    if (this == &rhs) {
   b60ea:	d005      	beq.n	b60f8 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b60ec:	680b      	ldr	r3, [r1, #0]
   b60ee:	b12b      	cbz	r3, b60fc <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b60f0:	688a      	ldr	r2, [r1, #8]
   b60f2:	4619      	mov	r1, r3
   b60f4:	f7ff ffb4 	bl	b6060 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b60f8:	4620      	mov	r0, r4
   b60fa:	bd10      	pop	{r4, pc}
        invalidate();
   b60fc:	f7ff ff85 	bl	b600a <_ZN6String10invalidateEv>
   b6100:	e7fa      	b.n	b60f8 <_ZN6StringaSERKS_+0x14>

000b6102 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6102:	b510      	push	{r4, lr}
    buffer = nullptr;
   b6104:	2300      	movs	r3, #0
String::String(const String &value)
   b6106:	4604      	mov	r4, r0
    capacity_ = 0;
   b6108:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b610c:	6083      	str	r3, [r0, #8]
    flags = 0;
   b610e:	7303      	strb	r3, [r0, #12]
    *this = value;
   b6110:	f7ff ffe8 	bl	b60e4 <_ZN6StringaSERKS_>
}
   b6114:	4620      	mov	r0, r4
   b6116:	bd10      	pop	{r4, pc}

000b6118 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6118:	4b05      	ldr	r3, [pc, #20]	; (b6130 <_GLOBAL__sub_I_System+0x18>)
   b611a:	2202      	movs	r2, #2
   b611c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b611e:	4b05      	ldr	r3, [pc, #20]	; (b6134 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6120:	4a05      	ldr	r2, [pc, #20]	; (b6138 <_GLOBAL__sub_I_System+0x20>)
   b6122:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6124:	2000      	movs	r0, #0
   b6126:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b612a:	f7fe ba29 	b.w	b4580 <set_system_mode>
   b612e:	bf00      	nop
   b6130:	2003e71c 	.word	0x2003e71c
   b6134:	2003e710 	.word	0x2003e710
   b6138:	ffff0000 	.word	0xffff0000

000b613c <_ZN8particle11TetherClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b613c:	2200      	movs	r2, #0
   b613e:	6840      	ldr	r0, [r0, #4]
   b6140:	4611      	mov	r1, r2
   b6142:	f7fe ba99 	b.w	b4678 <network_listening>

000b6146 <_ZN8particle11TetherClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6146:	2200      	movs	r2, #0
   b6148:	6840      	ldr	r0, [r0, #4]
   b614a:	4611      	mov	r1, r2
   b614c:	f7fe baa4 	b.w	b4698 <network_get_listen_timeout>

000b6150 <_ZN8particle11TetherClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6150:	6840      	ldr	r0, [r0, #4]
   b6152:	2200      	movs	r2, #0
   b6154:	f7fe ba98 	b.w	b4688 <network_set_listen_timeout>

000b6158 <_ZN8particle11TetherClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6158:	6840      	ldr	r0, [r0, #4]
   b615a:	2200      	movs	r2, #0
   b615c:	f081 0101 	eor.w	r1, r1, #1
   b6160:	f7fe ba82 	b.w	b4668 <network_listen>

000b6164 <_ZN8particle11TetherClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6164:	2300      	movs	r3, #0
   b6166:	6840      	ldr	r0, [r0, #4]
   b6168:	461a      	mov	r2, r3
   b616a:	4619      	mov	r1, r3
   b616c:	f7fe ba74 	b.w	b4658 <network_off>

000b6170 <_ZN8particle11TetherClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6170:	2300      	movs	r3, #0
   b6172:	6840      	ldr	r0, [r0, #4]
   b6174:	461a      	mov	r2, r3
   b6176:	4619      	mov	r1, r3
   b6178:	f7fe ba66 	b.w	b4648 <network_on>

000b617c <_ZN8particle11TetherClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b617c:	2200      	movs	r2, #0
   b617e:	6840      	ldr	r0, [r0, #4]
   b6180:	4611      	mov	r1, r2
   b6182:	f7fe ba59 	b.w	b4638 <network_ready>

000b6186 <_ZN8particle11TetherClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6186:	2200      	movs	r2, #0
   b6188:	6840      	ldr	r0, [r0, #4]
   b618a:	4611      	mov	r1, r2
   b618c:	f7fe ba44 	b.w	b4618 <network_connecting>

000b6190 <_ZN8particle11TetherClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6190:	6840      	ldr	r0, [r0, #4]
   b6192:	2200      	movs	r2, #0
   b6194:	2102      	movs	r1, #2
   b6196:	f7fe ba47 	b.w	b4628 <network_disconnect>

000b619a <_ZN8particle11TetherClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b619a:	2300      	movs	r3, #0
   b619c:	6840      	ldr	r0, [r0, #4]
   b619e:	461a      	mov	r2, r3
   b61a0:	f7fe ba32 	b.w	b4608 <network_connect>

000b61a4 <_GLOBAL__sub_I__ZN8particle6TetherE>:
   b61a4:	4b02      	ldr	r3, [pc, #8]	; (b61b0 <_GLOBAL__sub_I__ZN8particle6TetherE+0xc>)
   b61a6:	2206      	movs	r2, #6
   b61a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_PPP_SERVER) {
   b61aa:	4a02      	ldr	r2, [pc, #8]	; (b61b4 <_GLOBAL__sub_I__ZN8particle6TetherE+0x10>)
   b61ac:	601a      	str	r2, [r3, #0]
        return if_request(iface, IF_REQ_DRIVER_SPECIFIC, &settings, sizeof(settings), nullptr);
    }
    return SYSTEM_ERROR_NOT_FOUND;
}

} // spark
   b61ae:	4770      	bx	lr
   b61b0:	2003e720 	.word	0x2003e720
   b61b4:	000b6b4c 	.word	0x000b6b4c

000b61b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b61b8:	4b02      	ldr	r3, [pc, #8]	; (b61c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b61ba:	681a      	ldr	r2, [r3, #0]
   b61bc:	4b02      	ldr	r3, [pc, #8]	; (b61c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b61be:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b61c0:	4770      	bx	lr
   b61c2:	bf00      	nop
   b61c4:	2003e5cc 	.word	0x2003e5cc
   b61c8:	2003e728 	.word	0x2003e728

000b61cc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b61cc:	4770      	bx	lr

000b61ce <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b61ce:	7441      	strb	r1, [r0, #17]
}
   b61d0:	4770      	bx	lr

000b61d2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b61d2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b61d4:	7c00      	ldrb	r0, [r0, #16]
   b61d6:	f7fe f953 	bl	b4480 <hal_usart_available_data_for_write>
}
   b61da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b61de:	bd08      	pop	{r3, pc}

000b61e0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b61e0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b61e2:	7c00      	ldrb	r0, [r0, #16]
   b61e4:	f7fe f92c 	bl	b4440 <hal_usart_available>
}
   b61e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b61ec:	bd08      	pop	{r3, pc}

000b61ee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b61ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b61f0:	7c00      	ldrb	r0, [r0, #16]
   b61f2:	f7fe f935 	bl	b4460 <hal_usart_peek>
}
   b61f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b61fa:	bd08      	pop	{r3, pc}

000b61fc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b61fc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b61fe:	7c00      	ldrb	r0, [r0, #16]
   b6200:	f7fe f926 	bl	b4450 <hal_usart_read>
}
   b6204:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6208:	bd08      	pop	{r3, pc}

000b620a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b620a:	7c00      	ldrb	r0, [r0, #16]
   b620c:	f7fe b930 	b.w	b4470 <hal_usart_flush>

000b6210 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6210:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6212:	7c45      	ldrb	r5, [r0, #17]
{
   b6214:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6216:	b12d      	cbz	r5, b6224 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6218:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b621a:	b003      	add	sp, #12
   b621c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6220:	f7fe b906 	b.w	b4430 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6224:	7c00      	ldrb	r0, [r0, #16]
   b6226:	9101      	str	r1, [sp, #4]
   b6228:	f7fe f92a 	bl	b4480 <hal_usart_available_data_for_write>
   b622c:	2800      	cmp	r0, #0
   b622e:	9901      	ldr	r1, [sp, #4]
   b6230:	dcf2      	bgt.n	b6218 <_ZN11USARTSerial5writeEh+0x8>
}
   b6232:	4628      	mov	r0, r5
   b6234:	b003      	add	sp, #12
   b6236:	bd30      	pop	{r4, r5, pc}

000b6238 <_ZN11USARTSerialD0Ev>:
   b6238:	b510      	push	{r4, lr}
   b623a:	2114      	movs	r1, #20
   b623c:	4604      	mov	r4, r0
   b623e:	f7fd ff3e 	bl	b40be <_ZdlPvj>
   b6242:	4620      	mov	r0, r4
   b6244:	bd10      	pop	{r4, pc}
	...

000b6248 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6248:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b624a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b624e:	4604      	mov	r4, r0
   b6250:	4608      	mov	r0, r1
   b6252:	4611      	mov	r1, r2
   b6254:	2200      	movs	r2, #0
   b6256:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b625a:	4b04      	ldr	r3, [pc, #16]	; (b626c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b625c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b625e:	2301      	movs	r3, #1
  _serial = serial;
   b6260:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6262:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6264:	f7fe f91c 	bl	b44a0 <hal_usart_init_ex>
}
   b6268:	4620      	mov	r0, r4
   b626a:	bd10      	pop	{r4, pc}
   b626c:	000b6bac 	.word	0x000b6bac

000b6270 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b6270:	7c00      	ldrb	r0, [r0, #16]
   b6272:	2300      	movs	r3, #0
   b6274:	f7fe b90c 	b.w	b4490 <hal_usart_begin_config>

000b6278 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b6278:	2200      	movs	r2, #0
   b627a:	f7ff bff9 	b.w	b6270 <_ZN11USARTSerial5beginEmm>

000b627e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b627e:	7c00      	ldrb	r0, [r0, #16]
   b6280:	f7fe b8ce 	b.w	b4420 <hal_usart_end>

000b6284 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6284:	7441      	strb	r1, [r0, #17]
}
   b6286:	4770      	bx	lr

000b6288 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6288:	4770      	bx	lr

000b628a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b628a:	4770      	bx	lr

000b628c <_ZN9USBSerial4readEv>:
{
   b628c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b628e:	2100      	movs	r1, #0
   b6290:	7c00      	ldrb	r0, [r0, #16]
   b6292:	f7fe f935 	bl	b4500 <HAL_USB_USART_Receive_Data>
}
   b6296:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b629a:	bd08      	pop	{r3, pc}

000b629c <_ZN9USBSerial4peekEv>:
{
   b629c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b629e:	2101      	movs	r1, #1
   b62a0:	7c00      	ldrb	r0, [r0, #16]
   b62a2:	f7fe f92d 	bl	b4500 <HAL_USB_USART_Receive_Data>
}
   b62a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b62aa:	bd08      	pop	{r3, pc}

000b62ac <_ZN9USBSerial17availableForWriteEv>:
{
   b62ac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b62ae:	7c00      	ldrb	r0, [r0, #16]
   b62b0:	f7fe f91e 	bl	b44f0 <HAL_USB_USART_Available_Data_For_Write>
}
   b62b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b62b8:	bd08      	pop	{r3, pc}

000b62ba <_ZN9USBSerial9availableEv>:
{
   b62ba:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b62bc:	7c00      	ldrb	r0, [r0, #16]
   b62be:	f7fe f90f 	bl	b44e0 <HAL_USB_USART_Available_Data>
}
   b62c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b62c6:	bd08      	pop	{r3, pc}

000b62c8 <_ZN9USBSerial5writeEh>:
{
   b62c8:	b513      	push	{r0, r1, r4, lr}
   b62ca:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b62cc:	7c00      	ldrb	r0, [r0, #16]
{
   b62ce:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b62d0:	f7fe f90e 	bl	b44f0 <HAL_USB_USART_Available_Data_For_Write>
   b62d4:	2800      	cmp	r0, #0
   b62d6:	9901      	ldr	r1, [sp, #4]
   b62d8:	dc01      	bgt.n	b62de <_ZN9USBSerial5writeEh+0x16>
   b62da:	7c60      	ldrb	r0, [r4, #17]
   b62dc:	b120      	cbz	r0, b62e8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b62de:	7c20      	ldrb	r0, [r4, #16]
   b62e0:	f7fe f916 	bl	b4510 <HAL_USB_USART_Send_Data>
   b62e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b62e8:	b002      	add	sp, #8
   b62ea:	bd10      	pop	{r4, pc}

000b62ec <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b62ec:	7c00      	ldrb	r0, [r0, #16]
   b62ee:	f7fe b917 	b.w	b4520 <HAL_USB_USART_Flush_Data>

000b62f2 <_ZN9USBSerialD0Ev>:
   b62f2:	b510      	push	{r4, lr}
   b62f4:	2114      	movs	r1, #20
   b62f6:	4604      	mov	r4, r0
   b62f8:	f7fd fee1 	bl	b40be <_ZdlPvj>
   b62fc:	4620      	mov	r0, r4
   b62fe:	bd10      	pop	{r4, pc}

000b6300 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6300:	b510      	push	{r4, lr}
   b6302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6306:	4604      	mov	r4, r0
   b6308:	4608      	mov	r0, r1
   b630a:	2100      	movs	r1, #0
   b630c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6310:	4b04      	ldr	r3, [pc, #16]	; (b6324 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6312:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6314:	2301      	movs	r3, #1
  _serial = serial;
   b6316:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6318:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b631a:	4611      	mov	r1, r2
   b631c:	f7fe f8c8 	bl	b44b0 <HAL_USB_USART_Init>
}
   b6320:	4620      	mov	r0, r4
   b6322:	bd10      	pop	{r4, pc}
   b6324:	000b6be0 	.word	0x000b6be0

000b6328 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6328:	7c00      	ldrb	r0, [r0, #16]
   b632a:	2200      	movs	r2, #0
   b632c:	f7fe b8c8 	b.w	b44c0 <HAL_USB_USART_Begin>

000b6330 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b6330:	7c00      	ldrb	r0, [r0, #16]
   b6332:	f7fe b8cd 	b.w	b44d0 <HAL_USB_USART_End>

000b6336 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6336:	7c00      	ldrb	r0, [r0, #16]
   b6338:	f7fe b8fa 	b.w	b4530 <HAL_USB_USART_Is_Connected>

000b633c <_Z19acquireSerialBufferv>:
{
   b633c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b633e:	2214      	movs	r2, #20
{
   b6340:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6342:	2100      	movs	r1, #0
   b6344:	f000 f93e 	bl	b65c4 <memset>
}
   b6348:	4620      	mov	r0, r4
   b634a:	bd10      	pop	{r4, pc}

000b634c <_Z16_fetch_usbserialv>:
{
   b634c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b634e:	4c0f      	ldr	r4, [pc, #60]	; (b638c <_Z16_fetch_usbserialv+0x40>)
{
   b6350:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6352:	a803      	add	r0, sp, #12
   b6354:	f7ff fff2 	bl	b633c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6358:	7821      	ldrb	r1, [r4, #0]
   b635a:	f3bf 8f5b 	dmb	ish
   b635e:	f011 0101 	ands.w	r1, r1, #1
   b6362:	d10f      	bne.n	b6384 <_Z16_fetch_usbserialv+0x38>
   b6364:	4620      	mov	r0, r4
   b6366:	9101      	str	r1, [sp, #4]
   b6368:	f7fd feb8 	bl	b40dc <__cxa_guard_acquire>
   b636c:	9901      	ldr	r1, [sp, #4]
   b636e:	b148      	cbz	r0, b6384 <_Z16_fetch_usbserialv+0x38>
   b6370:	aa03      	add	r2, sp, #12
   b6372:	4807      	ldr	r0, [pc, #28]	; (b6390 <_Z16_fetch_usbserialv+0x44>)
   b6374:	f7ff ffc4 	bl	b6300 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6378:	4620      	mov	r0, r4
   b637a:	f7fd feb4 	bl	b40e6 <__cxa_guard_release>
   b637e:	4805      	ldr	r0, [pc, #20]	; (b6394 <_Z16_fetch_usbserialv+0x48>)
   b6380:	f000 f8ea 	bl	b6558 <atexit>
	return _usbserial;
}
   b6384:	4802      	ldr	r0, [pc, #8]	; (b6390 <_Z16_fetch_usbserialv+0x44>)
   b6386:	b008      	add	sp, #32
   b6388:	bd10      	pop	{r4, pc}
   b638a:	bf00      	nop
   b638c:	2003e72c 	.word	0x2003e72c
   b6390:	2003e730 	.word	0x2003e730
   b6394:	000b6289 	.word	0x000b6289

000b6398 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6398:	4b01      	ldr	r3, [pc, #4]	; (b63a0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b639a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b639c:	4770      	bx	lr
   b639e:	bf00      	nop
   b63a0:	2003e5d0 	.word	0x2003e5d0

000b63a4 <serialEventRun>:
{
   b63a4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b63a6:	4b0b      	ldr	r3, [pc, #44]	; (b63d4 <serialEventRun+0x30>)
   b63a8:	b143      	cbz	r3, b63bc <serialEventRun+0x18>
   b63aa:	f7ff ffcf 	bl	b634c <_Z16_fetch_usbserialv>
   b63ae:	6803      	ldr	r3, [r0, #0]
   b63b0:	691b      	ldr	r3, [r3, #16]
   b63b2:	4798      	blx	r3
   b63b4:	2800      	cmp	r0, #0
   b63b6:	dd01      	ble.n	b63bc <serialEventRun+0x18>
        serialEvent();
   b63b8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b63bc:	4b06      	ldr	r3, [pc, #24]	; (b63d8 <serialEventRun+0x34>)
   b63be:	b143      	cbz	r3, b63d2 <serialEventRun+0x2e>
   b63c0:	f000 f8a2 	bl	b6508 <_Z22__fetch_global_Serial1v>
   b63c4:	6803      	ldr	r3, [r0, #0]
   b63c6:	691b      	ldr	r3, [r3, #16]
   b63c8:	4798      	blx	r3
   b63ca:	2800      	cmp	r0, #0
   b63cc:	dd01      	ble.n	b63d2 <serialEventRun+0x2e>
        serialEvent1();
   b63ce:	f3af 8000 	nop.w
}
   b63d2:	bd08      	pop	{r3, pc}
	...

000b63dc <_post_loop>:
{
   b63dc:	b508      	push	{r3, lr}
	serialEventRun();
   b63de:	f7ff ffe1 	bl	b63a4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b63e2:	f7fd fff5 	bl	b43d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b63e6:	4b01      	ldr	r3, [pc, #4]	; (b63ec <_post_loop+0x10>)
   b63e8:	6018      	str	r0, [r3, #0]
}
   b63ea:	bd08      	pop	{r3, pc}
   b63ec:	2003e74c 	.word	0x2003e74c

000b63f0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b63f0:	4805      	ldr	r0, [pc, #20]	; (b6408 <_Z33system_initialize_user_backup_ramv+0x18>)
   b63f2:	4a06      	ldr	r2, [pc, #24]	; (b640c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b63f4:	4906      	ldr	r1, [pc, #24]	; (b6410 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b63f6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b63f8:	1a12      	subs	r2, r2, r0
   b63fa:	f000 f8bb 	bl	b6574 <memcpy>
    __backup_sram_signature = signature;
   b63fe:	4b05      	ldr	r3, [pc, #20]	; (b6414 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6400:	4a05      	ldr	r2, [pc, #20]	; (b6418 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6402:	601a      	str	r2, [r3, #0]
}
   b6404:	bd08      	pop	{r3, pc}
   b6406:	bf00      	nop
   b6408:	2003f400 	.word	0x2003f400
   b640c:	2003f404 	.word	0x2003f404
   b6410:	000b6e44 	.word	0x000b6e44
   b6414:	2003f400 	.word	0x2003f400
   b6418:	9a271c1e 	.word	0x9a271c1e

000b641c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b641c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b641e:	2300      	movs	r3, #0
   b6420:	9300      	str	r3, [sp, #0]
   b6422:	461a      	mov	r2, r3
   b6424:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6428:	f7fe f8c4 	bl	b45b4 <system_ctrl_set_result>
}
   b642c:	b003      	add	sp, #12
   b642e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6434 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6434:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6436:	8843      	ldrh	r3, [r0, #2]
   b6438:	2b0a      	cmp	r3, #10
   b643a:	d008      	beq.n	b644e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b643c:	2b50      	cmp	r3, #80	; 0x50
   b643e:	d10b      	bne.n	b6458 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6440:	4b09      	ldr	r3, [pc, #36]	; (b6468 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6442:	681b      	ldr	r3, [r3, #0]
   b6444:	b14b      	cbz	r3, b645a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6446:	b003      	add	sp, #12
   b6448:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b644c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b644e:	f7ff ffe5 	bl	b641c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6452:	b003      	add	sp, #12
   b6454:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6458:	2300      	movs	r3, #0
   b645a:	9300      	str	r3, [sp, #0]
   b645c:	461a      	mov	r2, r3
   b645e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6462:	f7fe f8a7 	bl	b45b4 <system_ctrl_set_result>
}
   b6466:	e7f4      	b.n	b6452 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6468:	2003e748 	.word	0x2003e748

000b646c <module_user_init_hook>:
{
   b646c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b646e:	4812      	ldr	r0, [pc, #72]	; (b64b8 <module_user_init_hook+0x4c>)
   b6470:	2100      	movs	r1, #0
   b6472:	f7fe f969 	bl	b4748 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6476:	4b11      	ldr	r3, [pc, #68]	; (b64bc <module_user_init_hook+0x50>)
   b6478:	681a      	ldr	r2, [r3, #0]
   b647a:	4b11      	ldr	r3, [pc, #68]	; (b64c0 <module_user_init_hook+0x54>)
   b647c:	429a      	cmp	r2, r3
   b647e:	4b11      	ldr	r3, [pc, #68]	; (b64c4 <module_user_init_hook+0x58>)
   b6480:	bf0c      	ite	eq
   b6482:	2201      	moveq	r2, #1
   b6484:	2200      	movne	r2, #0
   b6486:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6488:	d001      	beq.n	b648e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b648a:	f7ff ffb1 	bl	b63f0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b648e:	f7fd ff8f 	bl	b43b0 <HAL_RNG_GetRandomNumber>
   b6492:	4604      	mov	r4, r0
    srand(seed);
   b6494:	f000 f89e 	bl	b65d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6498:	4b0b      	ldr	r3, [pc, #44]	; (b64c8 <module_user_init_hook+0x5c>)
   b649a:	b113      	cbz	r3, b64a2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b649c:	4620      	mov	r0, r4
   b649e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b64a2:	2100      	movs	r1, #0
   b64a4:	4808      	ldr	r0, [pc, #32]	; (b64c8 <module_user_init_hook+0x5c>)
   b64a6:	f7fe f897 	bl	b45d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b64aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b64ae:	4807      	ldr	r0, [pc, #28]	; (b64cc <module_user_init_hook+0x60>)
   b64b0:	2100      	movs	r1, #0
   b64b2:	f7fe b875 	b.w	b45a0 <system_ctrl_set_app_request_handler>
   b64b6:	bf00      	nop
   b64b8:	000b6399 	.word	0x000b6399
   b64bc:	2003f400 	.word	0x2003f400
   b64c0:	9a271c1e 	.word	0x9a271c1e
   b64c4:	2003e744 	.word	0x2003e744
   b64c8:	00000000 	.word	0x00000000
   b64cc:	000b6435 	.word	0x000b6435

000b64d0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b64d0:	4770      	bx	lr
	...

000b64d4 <_Z20acquireSerial1Bufferv>:
{
   b64d4:	b538      	push	{r3, r4, r5, lr}
   b64d6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b64d8:	2514      	movs	r5, #20
   b64da:	462a      	mov	r2, r5
   b64dc:	2100      	movs	r1, #0
   b64de:	f000 f871 	bl	b65c4 <memset>
   b64e2:	8025      	strh	r5, [r4, #0]
   b64e4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b64e6:	4907      	ldr	r1, [pc, #28]	; (b6504 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b64e8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b64ea:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b64ec:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b64ee:	f000 f831 	bl	b6554 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b64f2:	4904      	ldr	r1, [pc, #16]	; (b6504 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b64f4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b64f6:	4628      	mov	r0, r5
   b64f8:	f000 f82c 	bl	b6554 <_ZnajRKSt9nothrow_t>
    };
   b64fc:	60e0      	str	r0, [r4, #12]
}
   b64fe:	4620      	mov	r0, r4
   b6500:	bd38      	pop	{r3, r4, r5, pc}
   b6502:	bf00      	nop
   b6504:	000b6c0c 	.word	0x000b6c0c

000b6508 <_Z22__fetch_global_Serial1v>:
{
   b6508:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b650a:	4d0e      	ldr	r5, [pc, #56]	; (b6544 <_Z22__fetch_global_Serial1v+0x3c>)
   b650c:	7829      	ldrb	r1, [r5, #0]
   b650e:	f3bf 8f5b 	dmb	ish
   b6512:	f011 0401 	ands.w	r4, r1, #1
{
   b6516:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6518:	d111      	bne.n	b653e <_Z22__fetch_global_Serial1v+0x36>
   b651a:	4628      	mov	r0, r5
   b651c:	f7fd fdde 	bl	b40dc <__cxa_guard_acquire>
   b6520:	b168      	cbz	r0, b653e <_Z22__fetch_global_Serial1v+0x36>
   b6522:	a801      	add	r0, sp, #4
   b6524:	f7ff ffd6 	bl	b64d4 <_Z20acquireSerial1Bufferv>
   b6528:	aa01      	add	r2, sp, #4
   b652a:	4621      	mov	r1, r4
   b652c:	4806      	ldr	r0, [pc, #24]	; (b6548 <_Z22__fetch_global_Serial1v+0x40>)
   b652e:	f7ff fe8b 	bl	b6248 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6532:	4628      	mov	r0, r5
   b6534:	f7fd fdd7 	bl	b40e6 <__cxa_guard_release>
   b6538:	4804      	ldr	r0, [pc, #16]	; (b654c <_Z22__fetch_global_Serial1v+0x44>)
   b653a:	f000 f80d 	bl	b6558 <atexit>
    return serial1;
}
   b653e:	4802      	ldr	r0, [pc, #8]	; (b6548 <_Z22__fetch_global_Serial1v+0x40>)
   b6540:	b007      	add	sp, #28
   b6542:	bd30      	pop	{r4, r5, pc}
   b6544:	2003e750 	.word	0x2003e750
   b6548:	2003e754 	.word	0x2003e754
   b654c:	000b64d1 	.word	0x000b64d1

000b6550 <_ZnwjRKSt9nothrow_t>:
   b6550:	f7fd bdb1 	b.w	b40b6 <_Znwj>

000b6554 <_ZnajRKSt9nothrow_t>:
   b6554:	f7fd bdb1 	b.w	b40ba <_Znaj>

000b6558 <atexit>:
   b6558:	2300      	movs	r3, #0
   b655a:	4601      	mov	r1, r0
   b655c:	461a      	mov	r2, r3
   b655e:	4618      	mov	r0, r3
   b6560:	f000 b93a 	b.w	b67d8 <__register_exitproc>

000b6564 <isprint>:
   b6564:	4b02      	ldr	r3, [pc, #8]	; (b6570 <isprint+0xc>)
   b6566:	4418      	add	r0, r3
   b6568:	7840      	ldrb	r0, [r0, #1]
   b656a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b656e:	4770      	bx	lr
   b6570:	000b6c7d 	.word	0x000b6c7d

000b6574 <memcpy>:
   b6574:	440a      	add	r2, r1
   b6576:	4291      	cmp	r1, r2
   b6578:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b657c:	d100      	bne.n	b6580 <memcpy+0xc>
   b657e:	4770      	bx	lr
   b6580:	b510      	push	{r4, lr}
   b6582:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6586:	f803 4f01 	strb.w	r4, [r3, #1]!
   b658a:	4291      	cmp	r1, r2
   b658c:	d1f9      	bne.n	b6582 <memcpy+0xe>
   b658e:	bd10      	pop	{r4, pc}

000b6590 <memmove>:
   b6590:	4288      	cmp	r0, r1
   b6592:	b510      	push	{r4, lr}
   b6594:	eb01 0402 	add.w	r4, r1, r2
   b6598:	d902      	bls.n	b65a0 <memmove+0x10>
   b659a:	4284      	cmp	r4, r0
   b659c:	4623      	mov	r3, r4
   b659e:	d807      	bhi.n	b65b0 <memmove+0x20>
   b65a0:	1e43      	subs	r3, r0, #1
   b65a2:	42a1      	cmp	r1, r4
   b65a4:	d008      	beq.n	b65b8 <memmove+0x28>
   b65a6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b65aa:	f803 2f01 	strb.w	r2, [r3, #1]!
   b65ae:	e7f8      	b.n	b65a2 <memmove+0x12>
   b65b0:	4402      	add	r2, r0
   b65b2:	4601      	mov	r1, r0
   b65b4:	428a      	cmp	r2, r1
   b65b6:	d100      	bne.n	b65ba <memmove+0x2a>
   b65b8:	bd10      	pop	{r4, pc}
   b65ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b65be:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b65c2:	e7f7      	b.n	b65b4 <memmove+0x24>

000b65c4 <memset>:
   b65c4:	4402      	add	r2, r0
   b65c6:	4603      	mov	r3, r0
   b65c8:	4293      	cmp	r3, r2
   b65ca:	d100      	bne.n	b65ce <memset+0xa>
   b65cc:	4770      	bx	lr
   b65ce:	f803 1b01 	strb.w	r1, [r3], #1
   b65d2:	e7f9      	b.n	b65c8 <memset+0x4>

000b65d4 <srand>:
   b65d4:	b538      	push	{r3, r4, r5, lr}
   b65d6:	4b10      	ldr	r3, [pc, #64]	; (b6618 <srand+0x44>)
   b65d8:	681d      	ldr	r5, [r3, #0]
   b65da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b65dc:	4604      	mov	r4, r0
   b65de:	b9b3      	cbnz	r3, b660e <srand+0x3a>
   b65e0:	2018      	movs	r0, #24
   b65e2:	f7fe f881 	bl	b46e8 <malloc>
   b65e6:	4602      	mov	r2, r0
   b65e8:	63a8      	str	r0, [r5, #56]	; 0x38
   b65ea:	b920      	cbnz	r0, b65f6 <srand+0x22>
   b65ec:	4b0b      	ldr	r3, [pc, #44]	; (b661c <srand+0x48>)
   b65ee:	480c      	ldr	r0, [pc, #48]	; (b6620 <srand+0x4c>)
   b65f0:	2142      	movs	r1, #66	; 0x42
   b65f2:	f7fe f8a1 	bl	b4738 <__assert_func>
   b65f6:	490b      	ldr	r1, [pc, #44]	; (b6624 <srand+0x50>)
   b65f8:	4b0b      	ldr	r3, [pc, #44]	; (b6628 <srand+0x54>)
   b65fa:	e9c0 1300 	strd	r1, r3, [r0]
   b65fe:	4b0b      	ldr	r3, [pc, #44]	; (b662c <srand+0x58>)
   b6600:	6083      	str	r3, [r0, #8]
   b6602:	230b      	movs	r3, #11
   b6604:	8183      	strh	r3, [r0, #12]
   b6606:	2100      	movs	r1, #0
   b6608:	2001      	movs	r0, #1
   b660a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b660e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6610:	2200      	movs	r2, #0
   b6612:	611c      	str	r4, [r3, #16]
   b6614:	615a      	str	r2, [r3, #20]
   b6616:	bd38      	pop	{r3, r4, r5, pc}
   b6618:	2003e5d0 	.word	0x2003e5d0
   b661c:	000b6c0d 	.word	0x000b6c0d
   b6620:	000b6c24 	.word	0x000b6c24
   b6624:	abcd330e 	.word	0xabcd330e
   b6628:	e66d1234 	.word	0xe66d1234
   b662c:	0005deec 	.word	0x0005deec

000b6630 <strchr>:
   b6630:	b2c9      	uxtb	r1, r1
   b6632:	4603      	mov	r3, r0
   b6634:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6638:	b11a      	cbz	r2, b6642 <strchr+0x12>
   b663a:	428a      	cmp	r2, r1
   b663c:	d1f9      	bne.n	b6632 <strchr+0x2>
   b663e:	4618      	mov	r0, r3
   b6640:	4770      	bx	lr
   b6642:	2900      	cmp	r1, #0
   b6644:	bf18      	it	ne
   b6646:	2300      	movne	r3, #0
   b6648:	e7f9      	b.n	b663e <strchr+0xe>

000b664a <strchrnul>:
   b664a:	b510      	push	{r4, lr}
   b664c:	4604      	mov	r4, r0
   b664e:	f7ff ffef 	bl	b6630 <strchr>
   b6652:	b918      	cbnz	r0, b665c <strchrnul+0x12>
   b6654:	4620      	mov	r0, r4
   b6656:	f7fd fceb 	bl	b4030 <strlen>
   b665a:	4420      	add	r0, r4
   b665c:	bd10      	pop	{r4, pc}

000b665e <strcpy>:
   b665e:	4603      	mov	r3, r0
   b6660:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6664:	f803 2b01 	strb.w	r2, [r3], #1
   b6668:	2a00      	cmp	r2, #0
   b666a:	d1f9      	bne.n	b6660 <strcpy+0x2>
   b666c:	4770      	bx	lr

000b666e <strncmp>:
   b666e:	b510      	push	{r4, lr}
   b6670:	b17a      	cbz	r2, b6692 <strncmp+0x24>
   b6672:	4603      	mov	r3, r0
   b6674:	3901      	subs	r1, #1
   b6676:	1884      	adds	r4, r0, r2
   b6678:	f813 0b01 	ldrb.w	r0, [r3], #1
   b667c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6680:	4290      	cmp	r0, r2
   b6682:	d101      	bne.n	b6688 <strncmp+0x1a>
   b6684:	42a3      	cmp	r3, r4
   b6686:	d101      	bne.n	b668c <strncmp+0x1e>
   b6688:	1a80      	subs	r0, r0, r2
   b668a:	bd10      	pop	{r4, pc}
   b668c:	2800      	cmp	r0, #0
   b668e:	d1f3      	bne.n	b6678 <strncmp+0xa>
   b6690:	e7fa      	b.n	b6688 <strncmp+0x1a>
   b6692:	4610      	mov	r0, r2
   b6694:	e7f9      	b.n	b668a <strncmp+0x1c>

000b6696 <strrchr>:
   b6696:	b538      	push	{r3, r4, r5, lr}
   b6698:	4603      	mov	r3, r0
   b669a:	460c      	mov	r4, r1
   b669c:	b969      	cbnz	r1, b66ba <strrchr+0x24>
   b669e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b66a2:	f7ff bfc5 	b.w	b6630 <strchr>
   b66a6:	1c43      	adds	r3, r0, #1
   b66a8:	4605      	mov	r5, r0
   b66aa:	4621      	mov	r1, r4
   b66ac:	4618      	mov	r0, r3
   b66ae:	f7ff ffbf 	bl	b6630 <strchr>
   b66b2:	2800      	cmp	r0, #0
   b66b4:	d1f7      	bne.n	b66a6 <strrchr+0x10>
   b66b6:	4628      	mov	r0, r5
   b66b8:	bd38      	pop	{r3, r4, r5, pc}
   b66ba:	2500      	movs	r5, #0
   b66bc:	e7f5      	b.n	b66aa <strrchr+0x14>
	...

000b66c0 <_strtol_l.constprop.0>:
   b66c0:	2b01      	cmp	r3, #1
   b66c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b66c6:	d001      	beq.n	b66cc <_strtol_l.constprop.0+0xc>
   b66c8:	2b24      	cmp	r3, #36	; 0x24
   b66ca:	d906      	bls.n	b66da <_strtol_l.constprop.0+0x1a>
   b66cc:	f7fe f82c 	bl	b4728 <__errno>
   b66d0:	2316      	movs	r3, #22
   b66d2:	6003      	str	r3, [r0, #0]
   b66d4:	2000      	movs	r0, #0
   b66d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b66da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b67c0 <_strtol_l.constprop.0+0x100>
   b66de:	460d      	mov	r5, r1
   b66e0:	462e      	mov	r6, r5
   b66e2:	f815 4b01 	ldrb.w	r4, [r5], #1
   b66e6:	f814 700c 	ldrb.w	r7, [r4, ip]
   b66ea:	f017 0708 	ands.w	r7, r7, #8
   b66ee:	d1f7      	bne.n	b66e0 <_strtol_l.constprop.0+0x20>
   b66f0:	2c2d      	cmp	r4, #45	; 0x2d
   b66f2:	d132      	bne.n	b675a <_strtol_l.constprop.0+0x9a>
   b66f4:	782c      	ldrb	r4, [r5, #0]
   b66f6:	2701      	movs	r7, #1
   b66f8:	1cb5      	adds	r5, r6, #2
   b66fa:	2b00      	cmp	r3, #0
   b66fc:	d05b      	beq.n	b67b6 <_strtol_l.constprop.0+0xf6>
   b66fe:	2b10      	cmp	r3, #16
   b6700:	d109      	bne.n	b6716 <_strtol_l.constprop.0+0x56>
   b6702:	2c30      	cmp	r4, #48	; 0x30
   b6704:	d107      	bne.n	b6716 <_strtol_l.constprop.0+0x56>
   b6706:	782c      	ldrb	r4, [r5, #0]
   b6708:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b670c:	2c58      	cmp	r4, #88	; 0x58
   b670e:	d14d      	bne.n	b67ac <_strtol_l.constprop.0+0xec>
   b6710:	786c      	ldrb	r4, [r5, #1]
   b6712:	2310      	movs	r3, #16
   b6714:	3502      	adds	r5, #2
   b6716:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b671a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b671e:	f04f 0c00 	mov.w	ip, #0
   b6722:	fbb8 f9f3 	udiv	r9, r8, r3
   b6726:	4666      	mov	r6, ip
   b6728:	fb03 8a19 	mls	sl, r3, r9, r8
   b672c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b6730:	f1be 0f09 	cmp.w	lr, #9
   b6734:	d816      	bhi.n	b6764 <_strtol_l.constprop.0+0xa4>
   b6736:	4674      	mov	r4, lr
   b6738:	42a3      	cmp	r3, r4
   b673a:	dd24      	ble.n	b6786 <_strtol_l.constprop.0+0xc6>
   b673c:	f1bc 0f00 	cmp.w	ip, #0
   b6740:	db1e      	blt.n	b6780 <_strtol_l.constprop.0+0xc0>
   b6742:	45b1      	cmp	r9, r6
   b6744:	d31c      	bcc.n	b6780 <_strtol_l.constprop.0+0xc0>
   b6746:	d101      	bne.n	b674c <_strtol_l.constprop.0+0x8c>
   b6748:	45a2      	cmp	sl, r4
   b674a:	db19      	blt.n	b6780 <_strtol_l.constprop.0+0xc0>
   b674c:	fb06 4603 	mla	r6, r6, r3, r4
   b6750:	f04f 0c01 	mov.w	ip, #1
   b6754:	f815 4b01 	ldrb.w	r4, [r5], #1
   b6758:	e7e8      	b.n	b672c <_strtol_l.constprop.0+0x6c>
   b675a:	2c2b      	cmp	r4, #43	; 0x2b
   b675c:	bf04      	itt	eq
   b675e:	782c      	ldrbeq	r4, [r5, #0]
   b6760:	1cb5      	addeq	r5, r6, #2
   b6762:	e7ca      	b.n	b66fa <_strtol_l.constprop.0+0x3a>
   b6764:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b6768:	f1be 0f19 	cmp.w	lr, #25
   b676c:	d801      	bhi.n	b6772 <_strtol_l.constprop.0+0xb2>
   b676e:	3c37      	subs	r4, #55	; 0x37
   b6770:	e7e2      	b.n	b6738 <_strtol_l.constprop.0+0x78>
   b6772:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b6776:	f1be 0f19 	cmp.w	lr, #25
   b677a:	d804      	bhi.n	b6786 <_strtol_l.constprop.0+0xc6>
   b677c:	3c57      	subs	r4, #87	; 0x57
   b677e:	e7db      	b.n	b6738 <_strtol_l.constprop.0+0x78>
   b6780:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b6784:	e7e6      	b.n	b6754 <_strtol_l.constprop.0+0x94>
   b6786:	f1bc 0f00 	cmp.w	ip, #0
   b678a:	da05      	bge.n	b6798 <_strtol_l.constprop.0+0xd8>
   b678c:	2322      	movs	r3, #34	; 0x22
   b678e:	6003      	str	r3, [r0, #0]
   b6790:	4646      	mov	r6, r8
   b6792:	b942      	cbnz	r2, b67a6 <_strtol_l.constprop.0+0xe6>
   b6794:	4630      	mov	r0, r6
   b6796:	e79e      	b.n	b66d6 <_strtol_l.constprop.0+0x16>
   b6798:	b107      	cbz	r7, b679c <_strtol_l.constprop.0+0xdc>
   b679a:	4276      	negs	r6, r6
   b679c:	2a00      	cmp	r2, #0
   b679e:	d0f9      	beq.n	b6794 <_strtol_l.constprop.0+0xd4>
   b67a0:	f1bc 0f00 	cmp.w	ip, #0
   b67a4:	d000      	beq.n	b67a8 <_strtol_l.constprop.0+0xe8>
   b67a6:	1e69      	subs	r1, r5, #1
   b67a8:	6011      	str	r1, [r2, #0]
   b67aa:	e7f3      	b.n	b6794 <_strtol_l.constprop.0+0xd4>
   b67ac:	2430      	movs	r4, #48	; 0x30
   b67ae:	2b00      	cmp	r3, #0
   b67b0:	d1b1      	bne.n	b6716 <_strtol_l.constprop.0+0x56>
   b67b2:	2308      	movs	r3, #8
   b67b4:	e7af      	b.n	b6716 <_strtol_l.constprop.0+0x56>
   b67b6:	2c30      	cmp	r4, #48	; 0x30
   b67b8:	d0a5      	beq.n	b6706 <_strtol_l.constprop.0+0x46>
   b67ba:	230a      	movs	r3, #10
   b67bc:	e7ab      	b.n	b6716 <_strtol_l.constprop.0+0x56>
   b67be:	bf00      	nop
   b67c0:	000b6c7e 	.word	0x000b6c7e

000b67c4 <strtol>:
   b67c4:	4613      	mov	r3, r2
   b67c6:	460a      	mov	r2, r1
   b67c8:	4601      	mov	r1, r0
   b67ca:	4802      	ldr	r0, [pc, #8]	; (b67d4 <strtol+0x10>)
   b67cc:	6800      	ldr	r0, [r0, #0]
   b67ce:	f7ff bf77 	b.w	b66c0 <_strtol_l.constprop.0>
   b67d2:	bf00      	nop
   b67d4:	2003e5d0 	.word	0x2003e5d0

000b67d8 <__register_exitproc>:
   b67d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b67dc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6898 <__register_exitproc+0xc0>
   b67e0:	4606      	mov	r6, r0
   b67e2:	f8d8 0000 	ldr.w	r0, [r8]
   b67e6:	461f      	mov	r7, r3
   b67e8:	460d      	mov	r5, r1
   b67ea:	4691      	mov	r9, r2
   b67ec:	f000 f856 	bl	b689c <__retarget_lock_acquire_recursive>
   b67f0:	4b25      	ldr	r3, [pc, #148]	; (b6888 <__register_exitproc+0xb0>)
   b67f2:	681c      	ldr	r4, [r3, #0]
   b67f4:	b934      	cbnz	r4, b6804 <__register_exitproc+0x2c>
   b67f6:	4c25      	ldr	r4, [pc, #148]	; (b688c <__register_exitproc+0xb4>)
   b67f8:	601c      	str	r4, [r3, #0]
   b67fa:	4b25      	ldr	r3, [pc, #148]	; (b6890 <__register_exitproc+0xb8>)
   b67fc:	b113      	cbz	r3, b6804 <__register_exitproc+0x2c>
   b67fe:	681b      	ldr	r3, [r3, #0]
   b6800:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6804:	6863      	ldr	r3, [r4, #4]
   b6806:	2b1f      	cmp	r3, #31
   b6808:	dd07      	ble.n	b681a <__register_exitproc+0x42>
   b680a:	f8d8 0000 	ldr.w	r0, [r8]
   b680e:	f000 f847 	bl	b68a0 <__retarget_lock_release_recursive>
   b6812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b681a:	b34e      	cbz	r6, b6870 <__register_exitproc+0x98>
   b681c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6820:	b988      	cbnz	r0, b6846 <__register_exitproc+0x6e>
   b6822:	4b1c      	ldr	r3, [pc, #112]	; (b6894 <__register_exitproc+0xbc>)
   b6824:	b923      	cbnz	r3, b6830 <__register_exitproc+0x58>
   b6826:	f8d8 0000 	ldr.w	r0, [r8]
   b682a:	f000 f838 	bl	b689e <__retarget_lock_release>
   b682e:	e7f0      	b.n	b6812 <__register_exitproc+0x3a>
   b6830:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6834:	f7fd ff58 	bl	b46e8 <malloc>
   b6838:	2800      	cmp	r0, #0
   b683a:	d0f4      	beq.n	b6826 <__register_exitproc+0x4e>
   b683c:	2300      	movs	r3, #0
   b683e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6842:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6846:	6863      	ldr	r3, [r4, #4]
   b6848:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b684c:	2201      	movs	r2, #1
   b684e:	409a      	lsls	r2, r3
   b6850:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6854:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6858:	4313      	orrs	r3, r2
   b685a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b685e:	2e02      	cmp	r6, #2
   b6860:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6864:	bf02      	ittt	eq
   b6866:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b686a:	4313      	orreq	r3, r2
   b686c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6870:	6863      	ldr	r3, [r4, #4]
   b6872:	f8d8 0000 	ldr.w	r0, [r8]
   b6876:	1c5a      	adds	r2, r3, #1
   b6878:	3302      	adds	r3, #2
   b687a:	6062      	str	r2, [r4, #4]
   b687c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6880:	f000 f80e 	bl	b68a0 <__retarget_lock_release_recursive>
   b6884:	2000      	movs	r0, #0
   b6886:	e7c6      	b.n	b6816 <__register_exitproc+0x3e>
   b6888:	2003e7f4 	.word	0x2003e7f4
   b688c:	2003e768 	.word	0x2003e768
   b6890:	00000000 	.word	0x00000000
   b6894:	000b46e9 	.word	0x000b46e9
   b6898:	2003e634 	.word	0x2003e634

000b689c <__retarget_lock_acquire_recursive>:
   b689c:	4770      	bx	lr

000b689e <__retarget_lock_release>:
   b689e:	4770      	bx	lr

000b68a0 <__retarget_lock_release_recursive>:
   b68a0:	4770      	bx	lr

000b68a2 <link_code_end>:
	...

000b68a4 <dynalib_user>:
   b68a4:	4041 000b 407d 000b 40a5 000b 40a9 000b     A@..}@...@...@..
   b68b4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b68c4:	7620 7269 7574 6c61 6400 7665 6369 2d65      virtual.device-
   b68d4:	6f63 666e 6769 6400 7665 6369 2d65 6f6c     config.device-lo
   b68e4:	6767 6e69 0067 0000                         gging...

000b68ec <_ZTVN5spark10LogHandlerE>:
	...
   b68fc:	40c5 000b 40ed 000b                         .@...@..

000b6904 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b690c:	40f1 000b 4125 000b 5a21 000b 5bc5 000b     .@..%A..!Z...[..

000b691c <_ZTVN5spark13CellularClassE>:
	...
   b6924:	483f 000b 4835 000b 482b 000b 47e1 000b     ?H..5H..+H...G..
   b6934:	481f 000b 4813 000b 5db1 000b 5db9 000b     .H...H...]...]..
   b6944:	4807 000b 47ff 000b 47f5 000b 47eb 000b     .H...G...G...G..
   b6954:	5ee1 000b 5de9 000b 5df1 000b 6977 6972     .^...]...]..wiri
   b6964:	676e 4600 6961 656c 2064 6f74 7020 7261     ng.Failed to par
   b6974:	6573 4320 4f42 3a52 2520 0064 656c 6764     se CBOR: %d.ledg
   b6984:	7265 675f 7465 695f 736e 6174 636e 2865     er_get_instance(
   b6994:	2029 6166 6c69 6465 203a 6425 0000 0000     ) failed: %d....

000b69a4 <_ZTVN5spark13EthernetClassE>:
	...
   b69ac:	491b 000b 4911 000b 4907 000b 48fd 000b     .I...I...I...H..
   b69bc:	48f1 000b 48e5 000b 5db1 000b 5db9 000b     .H...H...]...]..
   b69cc:	48d9 000b 48d1 000b 48c7 000b 48bd 000b     .H...H...H...H..
   b69dc:	5ee1 000b 5de9 000b 5df1 000b               .^...]...]..

000b69e8 <_ZTV9IPAddress>:
	...
   b69f0:	4965 000b 4955 000b 4957 000b 7525 7500     eI..UI..WI..%u.u
   b6a00:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   b6a10:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   b6a20:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   b6a30:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   b6a40:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   b6a50:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   b6a60:	006d 0066 6e6c 6600 006e 0074 6f63 6564     m.f.ln.fn.t.code
   b6a70:	6400 7465 6961 006c                         .detail.

000b6a78 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b6a80:	4ea1 000b 4ec7 000b 4e79 000b 4a73 000b     .N...N..yN..sJ..

000b6a90 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b6a98:	5329 000b 5341 000b 5a21 000b 5bc5 000b     )S..AS..!Z...[..

000b6aa8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b6ab0:	5355 000b 5369 000b 5bfd 000b 4e8d 000b     US..iS...[...N..

000b6ac0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b6ac8:	4e9f 000b 4ed5 000b 5985 000b 4e8f 000b     .N...N...Y...N..

000b6ad8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b6ae0:	4e9d 000b 4ee3 000b 5291 000b 4f05 000b     .N...N...R...O..

000b6af0 <CSWTCH.109>:
   b6af0:	e6a4 2003 e674 2003 e6f8 2003 e720 2003     ... t.. ...  .. 

000b6b00 <_ZTVN5spark12NetworkClassE>:
	...
   b6b08:	5d71 000b 5d7b 000b 5d85 000b 5d8f 000b     q]..{]...]...]..
   b6b18:	5d99 000b 5da5 000b 5db1 000b 5db9 000b     .]...]...]...]..
   b6b28:	5dc1 000b 5dcd 000b 5dd5 000b 5ddf 000b     .]...]...]...]..
   b6b38:	5ee1 000b 5de9 000b 5df1 000b               .^...]...]..

000b6b44 <_ZTVN8particle11TetherClassE>:
	...
   b6b4c:	619b 000b 6191 000b 6187 000b 617d 000b     .a...a...a..}a..
   b6b5c:	6171 000b 6165 000b 5db1 000b 5db9 000b     qa..ea...]...]..
   b6b6c:	6159 000b 6151 000b 6147 000b 613d 000b     Ya..Qa..Ga..=a..
   b6b7c:	5ee1 000b 5de9 000b 5df1 000b 5925 252d     .^...]...]..%Y-%
   b6b8c:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b6b9c:	7361 7463 6d69 0065                         asctime.

000b6ba4 <_ZTV11USARTSerial>:
	...
   b6bac:	61cd 000b 6239 000b 6211 000b 5f09 000b     .a..9b...b..._..
   b6bbc:	61e1 000b 61fd 000b 61ef 000b 620b 000b     .a...a...a...b..
   b6bcc:	5fd3 000b 61cf 000b 61d3 000b               ._...a...a..

000b6bd8 <_ZTV9USBSerial>:
	...
   b6be0:	628b 000b 62f3 000b 62c9 000b 5f09 000b     .b...b...b..._..
   b6bf0:	62bb 000b 628d 000b 629d 000b 62ed 000b     .b...b...b...b..
   b6c00:	5fd3 000b 62ad 000b 6285 000b               ._...b...b..

000b6c0c <_ZSt7nothrow>:
   b6c0c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6c1c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b6c2c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b6c3c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b6c4c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b6c5c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b6c6c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b6c7d <_ctype_>:
   b6c7d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b6c8d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b6c9d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b6cad:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b6cbd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b6ccd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b6cdd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b6ced:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b6cfd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b6d7e <link_const_data_end>:
	...

000b6d80 <link_constructors_location>:
   b6d80:	000b42b5 	.word	0x000b42b5
   b6d84:	000b47d1 	.word	0x000b47d1
   b6d88:	000b4849 	.word	0x000b4849
   b6d8c:	000b4925 	.word	0x000b4925
   b6d90:	000b4939 	.word	0x000b4939
   b6d94:	000b5a11 	.word	0x000b5a11
   b6d98:	000b5ef5 	.word	0x000b5ef5
   b6d9c:	000b5f9d 	.word	0x000b5f9d
   b6da0:	000b6119 	.word	0x000b6119
   b6da4:	000b61a5 	.word	0x000b61a5
   b6da8:	000b61b9 	.word	0x000b61b9
